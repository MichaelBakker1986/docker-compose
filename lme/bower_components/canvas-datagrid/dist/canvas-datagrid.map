{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///canvas-datagrid.js","webpack:///webpack/bootstrap 9e171f71802bc8f2cc45","webpack:///./lib/defaults.js","webpack:///./lib/main.js","webpack:///./lib/component.js","webpack:///./lib/draw.js","webpack:///./lib/events.js","webpack:///./lib/touch.js","webpack:///./lib/intf.js","webpack:///./lib/contextMenu.js","webpack:///./lib/dom.js","webpack:///./lib/publicMethods.js"],"names":["root","factory","exports","module","define","amd","this","modules","__webpack_require__","moduleId","installedModules","i","l","call","m","c","d","name","getter","o","Object","defineProperty","configurable","enumerable","get","n","__esModule","object","property","prototype","hasOwnProperty","p","s","__WEBPACK_AMD_DEFINE_ARRAY__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","self","defaults","attributes","styles","apply","context","component","Grid","args","isComponent","intf","eval","createGrid","forEach","init","Array","slice","arguments","window","HTMLElement","create","customElements","observedAttributes","getObservableAttributes","disconnectedCallback","dispose","attributeChangedCallback","connectedCallback","adoptedCallback","canvasDatagrid","require","hyphenateProperty","prop","cust","char","toUpperCase","toLowerCase","getDefaultItem","base","item","filter","applyComponentStyle","supressChangeAndDrawEvents","cStyle","getComputedStyle","defs","computedStyle","def","val","getPropertyValue","style","typeMap","draw","dispatchEvent","data","strData","JSON","parse","e","Error","schema","strSchema","number","strNum","parseInt","isNaN","boolean","strBool","test","string","str","attrs","attr","push","initialized","parentNode","observe","keys","arg","resize","key","set","value","attrName","oldVal","newVal","tfn","addEventListener","observer","MutationObserver","mutations","checkInnerHTML","checkStyle","mutation","attributeName","target","nodeName","addedNodes","length","type","innerHTML","characterData","childList","subtree","document","querySelectorAll","el","drawPerfLine","w","h","x","y","perfArr","arrIndex","max","color","useAbs","r","canvasOffsetLeft","canvasOffsetTop","ctx","beginPath","moveTo","cx","cy","Math","abs","lineTo","strokeStyle","stroke","drawOnAllImagesLoaded","loaded","htmlImageCache","html","complete","drawHtml","cell","img","v","formattedValue","height","width","drawImage","Image","onload","src","btoa","drawOrderByArrow","mt","columnHeaderOrderByArrowMarginTop","scale","ml","columnHeaderOrderByArrowMarginLeft","mr","columnHeaderOrderByArrowMarginRight","aw","columnHeaderOrderByArrowWidth","ah","columnHeaderOrderByArrowHeight","fillStyle","columnHeaderOrderByArrowColor","columnHeaderOrderByArrowBorderColor","orderDirection","fill","drawTreeArrow","treeArrowMarginTop","treeArrowMarginRight","treeArrowMarginLeft","treeArrowWidth","treeArrowHeight","treeArrowColor","treeArrowBorderColor","openChildren","uniqueId","radiusRect","radius","b","quadraticCurveTo","fillRect","strokeRect","fillText","text","fillCircle","arc","PI","strokeCircle","fillHandle","selectionHandleType","strokeHandle","addselectionHandle","pos","hw","selectionHandleSize","tr","br","tl","bl","addBorderLine","t","addEllipsis","ellipsisCache","measureText","drawText","paddingLeft","paddingTop","paddingRight","paddingBottom","vPos","hPos","orderByArrowWidth","fontHeight","horizontalAlignment","verticalAlignment","perfCounters","drawCount","perfWindowSize","entityCount","scrollDebugCounters","touchPPSCounters","internal","createHandlesOverlayArray","allowMovingSelection","mobile","selectionBorderTop","selectionBorderRight","selectionHandles","selectionHandle","selectionBorderLeft","selectionBorderBottom","selectionHandleBehavior","createBorderOverlayArray","drawArray","propPrefix","offsetPoint","selectionBorder","isRowHeader","selections","rowIndex","indexOf","columnIndex","isHeader","drawCell","rowOrderIndex","header","headerIndex","columnOrderIndex","cellGridAttributes","cellStyle","isCorner","isColumnHeader","selected","hovered","hovers","active","activeCell","isGrid","activeHeader","orders","rows","columns","f","formatters","orderByArrowSize","treeArrowSize","cellWidth","sizes","ev","row","columnWidth","cellBorderWidth","visibleRows","nodeType","offsetTop","offsetLeft","scrollTop","scrollBox","scrollLeft","cellHeight","offsetWidth","offsetHeight","offsetParent","isHeaderCellCap","rowOpen","sortColumnIndex","sortRowIndex","isNormal","gridId","parentGrid","title","userHeight","rowHeight","userWidth","cornerCell","visibleCells","unshift","lineWidth","cellHeightWithChildGrid","checkScrollHeight","cellWidthWithChildGrid","rd","save","clip","tree","showRowNumbers","childGrids","saveAppearance","cellGridHeight","grid","visible","orderBy","font","console","warn","toString","columnFilters","filterTextPrefix","aCell","selectionBorders","movingSelection","moveBorders","moveOffset","restore","drawRowHeader","rowData","index","a","showRowHeaders","rowHeaderCell","rowHeaderCellWidth","drawRow","treeHeight","rowSansTreeHeight","g","trees","columnHeaderCellWidth","scrollIndexLeft","scrollIndexRight","scrollPixelRight","scrollPixelLeft","treeGrid","scrollBarWidth","rowHeaders","visibleRowHeights","isChildGrid","requestAnimationFrame","u","currentCell","rowHeaderCellHeight","getRowHeaderCellHeight","getColumnHeaderCellWidth","performance","now","createRowOrders","getVisibleSchema","devicePixelRatio","backgroundColor","snapToRow","scrollPixelTop","scrollIndexTop","scrollIndexBottom","scrollPixelBottom","showNewRow","newRow","selectionOverlayBorderWidth","selectionOverlayBorderColor","selectionHandleBorderWidth","selectionHandleBorderColor","selectionHandleColor","az","touchSelectHandleZone","ax","ay","selectionMode","activeCellOverlayBorderWidth","activeCellOverlayBorderColor","getHeaderWidth","columnHeaderCell","rArgs","showColumnHeaders","order","isHeaderCell","endCap","reorderObject","dragOffset","reorderMarkerBackgroundColor","reorderMarkerBorderWidth","reorderMarkerBorderColor","dragMode","reorderMarkerIndexBorderWidth","reorderMarkerIndexBorderColor","reorderTarget","moveOverlayBorderWidth","moveOverlayBorderColor","setLineDash","moveOverlayBorderSegments","vb","nb","co","isScrollBoxCorner","scrollBarBoxMargin","scrollBarBorderColor","scrollBarBorderWidth","scrollBarBackgroundColor","scrollBoxHeight","scrollHeight","scrollBarBoxWidth","scrollBarBoxColor","scrollBarActiveColor","scrollBarBoxBorderRadius","scrollBoxWidth","scrollWidth","scrollBarCornerBorderColor","scrollBarCornerBackgroundColor","bar","box","gridBorderWidth","gridBorderColor","showPerformance","debug","fillArray","pop","perf","reduce","min","toFixed","htmlImages","startScale","scaleDelta","zoomDeltaStart","touchLength","touches","touchPosition","touchPosition1","scrollIndex","scrollPixel","canvasOffset","touchDelta","touchAnimateTo","scrollAnimation","touchPPS","xPPS","yPPS","touchPPST","xPPST","yPPST","touchDuration","pointerLockPosition","size","mouse","touch","touchStart","entities","hasFocus","dragContext","textAlign","dpl","pw","ph","px","py","calculateCssSize","sizeString","parentSize","parseFloat","wheeling","stopPropagation","fn","events","removeEventListener","sfn","idx","splice","preventDefault","defaultPrevented","resizeDomElement","parentIsCanvas","shadowRootParentElement","parentDOMNode","canvas","drawAfterResize","cellBorder","columnHeaderCellBorder","columnHeaderCellBorderWidth","ch","accumulator","column","hidden","top","left","widthBoxRatio","heightBoxRatio","scrollBarBoxMinSize","page","pageUpDownOverlap","resizeEditInput","scroll","dontDraw","mousemove","overridePos","contextMenu","input","getLayerPos","dragBounds","sBounds","delta","ctrl","ctrlKey","metaKey","persistantSelectionMode","getSchema","getCellAt","NativeEvent","previousCell","clearTimeout","scrollTimer","isInGrid","cellBoundaryCrossed","draggingItem","scrollModes","dragItem","cursor","selecting","getSelectionBounds","dragStart","dragStartObject","shiftKey","bottom","right","ignoreNextClick","selectRow","dragAddToSelection","selectionBounds","selectArea","autoScrollZone","click","checkSelectionChange","selectionChanged","selectedData","getSelectedData","endEdit","setActiveCell","selectAll","columnHeaderClickBehavior","selectColumn","treeArrowClickRadius","toggleTree","dragResizeColumn","resizingStartingWidth","resizingStartingHeight","minColumnWidth","minRowHeight","resizeScrollZone","resizeChildGrids","globalRowResize","stopDragResize","body","setStorageData","scrollGrid","scrollPointerLock","scrollStartMode","movementX","movementY","scrollMode","scrollStart","setTimeout","scrollRepeatRate","selectionScrollIncrement","stopScrollGrid","exitPointerLock","dragReorder","allowColumnReordering","allowRowReordering","source","reorderDeadZone","stopDragReorder","oIndex","tIndex","cr","row-reorder","column-reorder","dragMove","stopDragMove","moveSelection","mousedown","lastMouseDownTarget","button","move","requestPointerLock","concat","dragging","mouseup","controlInput","focus","keydown","last","cols","keyCode","beginEditAt","scrollIntoView","selectionFollowsActiveCell","keyup","keypress","dblclick","fitColumnToValues","autosize","scrollWheel","deltaX","deltaY","deltaMode","touchHaltAnimation","scrollTo","pasteItem","clipData","mimeType","normalizeRowData","importingRow","existingRow","offsetX","isArray","map","colKey","substring","split","sel","cellData","colIndex","cName","yi","paste","clipboardData","items","dti","getAsString","cut","copy","forEachSelectedCell","colName","fCopyCell","replace","trows","sData","rt","join","setData","touchScrollTimeout","animationFrames","getTouchPos","touchIndex","rect","getBoundingClientRect","clientX","clientY","easingFunctions","linear","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easing","touchEasingMethod","calculatePPSTimed","touchSigmaTimed","calculatePPS","touchSigma","touchEndAnimation","touchReleaseAnimationDurationMs","stopAnimation","touchEditCell","touchCell","clearInterval","calculatePPSTimer","touchDeadZone","touchingCell","touchstart","disposeContextMenu","touchContextTimeout","touchStartEvent","changedTouches","zoomAltered","touchStart1","touchScrollStart","contextmenuEvent","touchContextMenuTimeMs","setInterval","startingCell","touchEndEvents","touchmove","passive","touchend","touchcancel","touchSelect","handleType","touchSelecting","bounds","touchScroll","rScrollZone","bScrollZone","tScrollZone","lScrollZone","rh","cw","sbw","t1","t2","touchZoomSensitivity","touchZoomMin","touchZoomMax","selectionScrollZone","dz","touchReleaseAcceleration","scrollAnimationPPSThreshold","ctor","storageName","invalidSearchExpClass","localStyleLibraryStorageKey","filters","frozenRows","currentFilter","sorters","schemaHashes","uId","changes","componentL1Events","eventNames","expandToRow","col","low","high","step","columnHeaderCellHeight","localStorage","setItem","stringify","tempSchema","createColumnOrders","applyDefaultValue","defaultValue","createNewRowData","getSchemaNameHash","getBestGuessDataType","columnName","drawChildGrids","gridKey","setTimer","refreshFromOrigialData","originalData","validateColumn","setDefaults","obj1","obj2","setAttributes","setStyle","removeChild","eventParent","contextmenu","disconnect","tryLoadStoredOrders","storedSettings","getHeaderByName","getFontName","fontStyle","getFontHeight","parseStyleValue","initProp","propName","publicStyleKeyIntf","initScrollBox","setDom","ie","navigator","userAgent","edge","webKit","moz","cursorGrab","cursorGrabing","cursorGrabbing","appendTo","clearChangeLog","gotoCell","gotoRow","findColumnScrollLeft","findRowScrollTop","findColumnMaxTextLength","isCellVisible","clipElement","getSchemaFromData","setFilter","expandTree","collapseTree","insertRow","deleteRow","addRow","insertColumn","deleteColumn","addColumn","getClippingRect","setRowHeight","setColumnWidth","resetColumnWidths","resetRowHeights","selectNone","assertPxColor","clearPxColorAssertions","integerToAlpha","shadowRoot","filterFor","String","filterRegExp","regEnd","pattern","exec","flags","flagLength","invalidFilterRegEx","RegExp","toLocaleUpperCase","getItem","blur","TypeError","normalizeDataset","callback","syncFnInvoked","0","eventName","autoResizeColumns","setScrollTop","preventScrollEvent","setScrollLeft","sHeight","sWidth","supressDrawEvent","applyContextItemStyle","contextItemContainer","createInlineStyle","createContextMenu","parentContextMenu","createItems","removeChildContext","relatedTarget","container","childMenuArrow","contains","children","setAttribute","contextAddCallback","getAttribute","cPos","childContextMenuMarginLeft","childContextMenuMarginTop","createChildContext","createElement","addContent","content","appendChild","childContextMenuArrowHTML","clickIndex","Event","checkArrowVisibility","upArrow","downArrow","startHoverScroll","contextHoverScrollAmount","hoverScrollTimeout","contextHoverScrollRateMs","endHoverScroll","selectedIndex","loc","scrollOffset","zIndexTop","position","contextMenuArrowColor","zIndex","inputDropdown","maxHeight","innerHeight","autocompleteBottomMargin","minWidth","contextMenuArrowUpHTML","contextMenuArrowDownHTML","contextMenuWindowMargin","innerWidth","isFinite","createFilterContextMenuItems","checkRegExpErrorState","filterInput","background","contextFilterInputBackground","contextFilterInputColor","contextFilterInvalidRegExpBackground","contextFilterInvalidRegExpColor","fillAutoComplete","autoCompleteItems","maxAutoCompleteItems","disposeAutocomplete","createAutoCompleteContext","iRect","autoCompleteContext","filterContainer","filterLabel","filterAutoCompleteButton","onclick","en","filterOptionText","contextFilterButtonHTML","cf","removeFilterOptionText","addDefaultContextMenuItem","isNormalCell","isBackground","isScrollBar","showFilter","showCopy","copyText","execCommand","showPaste","clipBoardData","pasteText","showColumnSelector","columnSelectorText","toggleColumnVisibility","columnSelectorHiddenText","columnSelectorVisibleText","hideColumnText","showClearSettingsOption","clearSettingsOptionText","allowSorting","showOrderByOption","showOrderByOptionTextAsc","showOrderByOptionTextDesc","createDiposeEvent","contextPosition","contextMenuMarginLeft","contextMenuMarginTop","mobileContextMenuMargin","ele","boundingRect","eleRect","clipRect","parentRect","Infinity","bx2","getVisibleCellByIndex","editCell","mobileEditInputHeight","cellPaddingLeft","ignoreScrollOffset","abort","abortEdit","newValue","oldValue","aborted","editable","enumItems","enu","option","valueInEnum","multiLine","fontSize","editCellFontSize","nx","ny","className","css","canvas-datagrid-context-menu-filter-input","verticalAlign","marginLeft","padding","border","contextFilterInputBorder","borderRadius","contextFilterInputBorderRadius","lineHeight","fontWeight","fontFamily","contextFilterInputFontFamily","contextFilterInputFontSize","canvas-datagrid-context-menu-filter-button","contextMenuBackground","contextMenuColor","contextFilterButtonBorder","contextFilterButtonBorderRadius","contextMenuFilterButtonFontFamily","contextMenuFilterButtonFontSize","canvas-datagrid-context-child-arrow","cssFloat","childContextMenuArrowColor","contextMenuChildArrowFontSize","contextMenuFontFamily","canvas-datagrid-autocomplete","contextMenuFontSize","contextMenuBorder","contextMenuPadding","contextMenuBorderRadius","opacity","contextMenuOpacity","overflow","canvas-datagrid-autocomplete-item","canvas-datagrid-autocomplete-item:hover","contextMenuHoverBackground","contextMenuHoverColor","canvas-datagrid-canvas","canvas-datagrid","display","boxSizing","canvas-datagrid-control-input","canvas-datagrid-edit-mobile-input","outline","margin","mobileEditFontFamily","mobileEditFontSize","editCellBorder","editCellColor","editCellBackgroundColor","appearance","webkitAppearance","mozAppearance","canvas-datagrid-edit-input","editCellPaddingLeft","editCellFontFamily","boxShadow","editCellBoxShadow","canvas-datagrid-context-menu-item-mobile","contextMenuItemMargin","contextMenuItemBorderRadius","canvas-datagrid-context-menu-item","canvas-datagrid-context-menu-item:hover","canvas-datagrid-context-menu-label","contextMenuLabelMargin","contextMenuLabelDisplay","contextMenuLabelMinWidth","maxWidth","contextMenuLabelMaxWidth","canvas-datagrid-context-menu-mobile","canvas-datagrid-context-menu","whiteSpace","canvas-datagrid-invalid-search-regExp","contextMenuFilterInvalidExpresion","onblur","tagName","shadowCss","parentElement","getContext","textBaseline","createShadowRoot","attachShadow","mode","ordA","charCodeAt","ordZ","len","fromCharCode","floor","applyFilter","isColumnSelected","colIsSelected","shift","supressEvent","addCol","ri","st","dragObject","rowId","childGrid","treeGridHeight","direction","sortFunction","dontSetStorageData","sort","offsetY","xi","cidx","isColumnVisible","isRowVisible","useTouchScrollZones","moveBorder","tsz","touchScrollZone","moveMode","borderDragBehavior","xBorderBehavior","yBorderBehavior","isVerticalScrollBar","isHorizontalScrollBar","borderResizeZone","allowColumnResize","allowColumnResizeFromCell","allowRowHeaderResize","allowRowResize","allowRowResizeFromCell","maxCol","minCol"," ","rowHeaderCellFont","autosizePadding","autosizeHeaderCellPadding","rowHeaderCellPaddingRight","rowHeaderCellPaddingLeft","columnHeaderCellFont","headerCellPaddingRight","headerCellPaddingLeft","cellFont","cellPaddingRight","cellAutoResizePadding","total","headerCell","int","asc","localeCompare","date","Date","getTime"],"mappings":"CAAA,SAAAA,EAAAC,GACA,gBAAAC,UAAA,gBAAAC,QACAA,OAAAD,QAAAD,IACA,kBAAAG,gBAAAC,IACAD,UAAAH,GACA,gBAAAC,SACAA,QAAA,eAAAD,IAEAD,EAAA,eAAAC,KACCK,KAAA,WACD,MCAgB,UAAUC,GCN1B,QAAAC,GAAAC,GAGA,GAAAC,EAAAD,GACA,MAAAC,GAAAD,GAAAP,OAGA,IAAAC,GAAAO,EAAAD,IACAE,EAAAF,EACAG,GAAA,EACAV,WAUA,OANAK,GAAAE,GAAAI,KAAAV,EAAAD,QAAAC,IAAAD,QAAAM,GAGAL,EAAAS,GAAA,EAGAT,EAAAD,QAvBA,GAAAQ,KA4DA,OAhCAF,GAAAM,EAAAP,EAGAC,EAAAO,EAAAL,EAGAF,EAAAQ,EAAA,SAAAd,EAAAe,EAAAC,GACAV,EAAAW,EAAAjB,EAAAe,IACAG,OAAAC,eAAAnB,EAAAe,GACAK,cAAA,EACAC,YAAA,EACAC,IAAAN,KAMAV,EAAAiB,EAAA,SAAAtB,GACA,GAAAe,GAAAf,KAAAuB,WACA,WAA2B,MAAAvB,GAAA,SAC3B,WAAiC,MAAAA,GAEjC,OADAK,GAAAQ,EAAAE,EAAA,IAAAA,GACAA,GAIAV,EAAAW,EAAA,SAAAQ,EAAAC,GAAsD,MAAAR,QAAAS,UAAAC,eAAAjB,KAAAc,EAAAC,IAGtDpB,EAAAuB,EAAA,GAGAvB,IAAAwB,EAAA,KDgBM,SAAU7B,EAAQD,EAASM,GE7EjC,GAAAyB,GAAAC,CAEAD,UAuQCE,MAvQDD,EAAA,WACA,YACA,iBAAAE,GACAA,EAAAC,UACAC,aACA,6BACA,yBACA,iCACA,4BACA,4BACA,0BACA,sBACA,8BACA,oBACA,yBACA,8BACA,wBACA,mDACA,kCACA,qCACA,kDACA,4CACA,kCACA,+BACA,+BACA,oBACA,aACA,gBACA,iCACA,mCACA,uBACA,6BACA,6BACA,iBACA,YACA,wBACA,sBACA,+BACA,iDACA,sBACA,wBACA,sBACA,oCACA,yBACA,wBACA,kCACA,mCACA,yBACA,gCACA,2BACA,+BACA,yBACA,0BACA,gBACA,kBACA,kBACA,yBACA,qDACA,uDACA,iBACA,uBACA,sBACA,sBACA,iBACA,+BACA,oBACA,oCACA,iCACA,wCACA,uBACA,6BACA,8BACA,oBACA,sBACA,YACA,4BAEAC,SACA,uDACA,mDACA,8BACA,uCACA,qCACA,4DACA,4CACA,yDACA,oCACA,8BACA,4BACA,6BACA,2BACA,+DACA,+CACA,mEACA,mDACA,gEACA,gDACA,gCACA,gCACA,sBACA,6CACA,6BACA,iDACA,6CACA,uBACA,iCACA,+BACA,uBACA,kBACA,gCACA,mCACA,sDACA,sCACA,wBACA,sBACA,uBACA,qBACA,yDACA,yCACA,mCACA,+BACA,qDACA,yCACA,mCACA,iCACA,6DACA,yDACA,oCACA,gDACA,2CACA,8BACA,+CACA,kEACA,kDACA,oCACA,kCACA,mCACA,iCACA,+CACA,iEACA,0CACA,2DACA,qCACA,yCACA,0CACA,wCACA,qCACA,oBACA,iEACA,0CACA,uCACA,uDACA,gEACA,uCACA,4CACA,8CACA,sCACA,8DACA,6DACA,gDACA,wCACA,sCACA,mDACA,yDACA,kCACA,yCACA,2CACA,mDACA,2CACA,+DACA,uCACA,+BACA,wDACA,iDACA,sCACA,gCACA,2CACA,uCACA,qCACA,oCACA,4BACA,4BACA,8BACA,6BACA,8BACA,uDACA,mDACA,oCACA,sDACA,kDACA,0BACA,oCACA,4BACA,0BACA,6CACA,sBACA,kBACA,sBACA,iBACA,oBACA,+BACA,6BACA,sCACA,8BACA,6BACA,mDACA,sCACA,mBACA,sDACA,kDACA,kCACA,0DACA,uCACA,0DACA,sDACA,+BACA,6CACA,wCACA,2BACA,4CACA,+DACA,+CACA,iCACA,+BACA,gCACA,8BACA,kEACA,qDACA,4CACA,0BACA,kDACA,sDACA,kDACA,4BACA,mCACA,+CACA,yBACA,2BACA,wBACA,4DACA,wDACA,sBACA,wDACA,mCACA,iDACA,0BACA,iCACA,wDACA,oCACA,kDACA,2BACA,2BACA,4CACA,sBACA,0BACA,2BACA,yBACA,sBACA,uBACA,oBA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","file":"canvas-datagrid.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"canvasDatagrid\"] = factory();\n\telse\n\t\troot[\"canvasDatagrid\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId]) {\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/ \t\t}\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\ti: moduleId,\n/******/ \t\t\tl: false,\n/******/ \t\t\texports: {}\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.l = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// define getter function for harmony exports\n/******/ \t__webpack_require__.d = function(exports, name, getter) {\n/******/ \t\tif(!__webpack_require__.o(exports, name)) {\n/******/ \t\t\tObject.defineProperty(exports, name, {\n/******/ \t\t\t\tconfigurable: false,\n/******/ \t\t\t\tenumerable: true,\n/******/ \t\t\t\tget: getter\n/******/ \t\t\t});\n/******/ \t\t}\n/******/ \t};\n/******/\n/******/ \t// getDefaultExport function for compatibility with non-harmony modules\n/******/ \t__webpack_require__.n = function(module) {\n/******/ \t\tvar getter = module && module.__esModule ?\n/******/ \t\t\tfunction getDefault() { return module['default']; } :\n/******/ \t\t\tfunction getModuleExports() { return module; };\n/******/ \t\t__webpack_require__.d(getter, 'a', getter);\n/******/ \t\treturn getter;\n/******/ \t};\n/******/\n/******/ \t// Object.prototype.hasOwnProperty.call\n/******/ \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(__webpack_require__.s = 1);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['clipboardMimeType', 'text/html'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [\n    __webpack_require__(2),\n    __webpack_require__(0),\n    __webpack_require__(3),\n    __webpack_require__(4),\n    __webpack_require__(5),\n    __webpack_require__(6),\n    __webpack_require__(7),\n    __webpack_require__(8),\n    __webpack_require__(9)\n], __WEBPACK_AMD_DEFINE_RESULT__ = function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(0)], __WEBPACK_AMD_DEFINE_RESULT__ = function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (self.attributes.snapToRow) {\n                    y = rowHeaderCellHeight + self.style.cellBorderWidth;\n                } else {\n                    y = -self.scrollBox.scrollTop + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = h;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = rowHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) { return; }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {number} ev The name of the event to subscribe to.\n         * @param {number} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {number} ev The name of the event to unsubscribe from.\n         * @param {number} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                self.ignoreNextClick = true;\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var rh, cw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            rh = self.getRowHeaderCellHeight();\n            cw = self.getColumnHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - cw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - rh < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - rh - sbw) / (self.scrollBox.height - sbw - rh));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - cw - sbw) / (self.scrollBox.width - sbw - cw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return (self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseStyleValue(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        /**\n         * Array of frozen rows. (Not Implemented)\n         * @memberof canvasDatagrid\n         * @readonly\n         * @property frozenRows\n         */\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - bx2 - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - bx2 - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    display: 'inline-block',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\n!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n}.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ]);\n});\n\n\n// WEBPACK FOOTER //\n// canvas-datagrid.js"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 9e171f71802bc8f2cc45","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.defaults = {\n            attributes: [\n                ['allowColumnReordering', true],\n                ['allowColumnResize', true],\n                ['allowColumnResizeFromCell', false],\n                ['allowMovingSelection', true],\n                ['allowRowHeaderResize', true],\n                ['allowRowReordering', false],\n                ['allowRowResize', true],\n                ['allowRowResizeFromCell', false],\n                ['allowSorting', true],\n                ['autoResizeColumns', false],\n                ['borderDragBehavior', 'none'],\n                ['borderResizeZone', 10],\n                ['clearSettingsOptionText', 'Clear saved settings'],\n                ['clipboardMimeType', 'text/html'],\n                ['columnHeaderClickBehavior', 'sort'],\n                ['columnSelectorHiddenText', '&nbsp;&nbsp;&nbsp;'],\n                ['columnSelectorText', 'Add/Remove columns'],\n                ['columnSelectorVisibleText', '\\u2713'],\n                ['contextHoverScrollAmount', 2],\n                ['contextHoverScrollRateMs', 5],\n                ['copyText', 'Copy'],\n                ['debug', false],\n                ['editable', true],\n                ['filterOptionText', 'Filter %s'],\n                ['filterTextPrefix', '(filtered) '],\n                ['globalRowResize', false],\n                ['hideColumnText', 'Hide %s'],\n                ['maxAutoCompleteItems', 200],\n                ['multiLine', false],\n                ['name', ''],\n                ['pageUpDownOverlap', 1],\n                ['pasteText', 'Paste'],\n                ['persistantSelectionMode', false],\n                ['removeFilterOptionText', 'Remove filter on %s'],\n                ['reorderDeadZone', 3],\n                ['resizeScrollZone', 20],\n                ['saveAppearance', true],\n                ['scrollAnimationPPSThreshold', 0.75],\n                ['scrollPointerLock', false],\n                ['scrollRepeatRate', 75],\n                ['selectionFollowsActiveCell', false],\n                ['selectionHandleBehavior', 'none'],\n                ['selectionMode', 'cell'],\n                ['selectionScrollIncrement', 20],\n                ['selectionScrollZone', 20],\n                ['showClearSettingsOption', true],\n                ['showColumnHeaders', true],\n                ['showColumnSelector', true],\n                ['showCopy', true],\n                ['showFilter', true],\n                ['showNewRow', false],\n                ['showOrderByOption', true],\n                ['showOrderByOptionTextAsc', 'Order by %s ascending'],\n                ['showOrderByOptionTextDesc', 'Order by %s descending'],\n                ['showPaste', false],\n                ['showPerformance', false],\n                ['showRowHeaders', true],\n                ['showRowNumbers', true],\n                ['snapToRow', false],\n                ['touchContextMenuTimeMs', 800],\n                ['touchDeadZone', 3],\n                ['touchEasingMethod', 'easeOutQuad'],\n                ['touchReleaseAcceleration', 1000],\n                ['touchReleaseAnimationDurationMs', 2000],\n                ['touchScrollZone', 20],\n                ['touchSelectHandleZone', 20],\n                ['touchZoomSensitivity', 0.005],\n                ['touchZoomMin', 0.5],\n                ['touchZoomMax', 1.75],\n                ['tree', false],\n                ['treeHorizontalScroll', false]\n            ],\n            styles: [\n                ['activeCellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellBorderColor', 'rgba(110, 168, 255, 1)'],\n                ['activeCellBorderWidth', 0.25],\n                ['activeCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellFont', '16px sans-serif'],\n                ['activeCellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['activeCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['activeCellOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['activeCellOverlayBorderWidth', 0.5],\n                ['activeCellPaddingBottom', 5],\n                ['activeCellPaddingLeft', 5],\n                ['activeCellPaddingRight', 7],\n                ['activeCellPaddingTop', 5],\n                ['activeCellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['activeCellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['activeColumnHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeColumnHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['activeRowHeaderCellBackgroundColor', 'rgba(225, 225, 225, 1)'],\n                ['activeRowHeaderCellColor', 'rgba(0, 0, 0, 1)'],\n                ['autocompleteBottomMargin', 60],\n                ['autosizeHeaderCellPadding', 8],\n                ['autosizePadding', 5],\n                ['backgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cellAutoResizePadding', 13],\n                ['cellBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['cellBorderWidth', 0.5],\n                ['cellColor', 'rgba(0, 0, 0, 1)'],\n                ['cellFont', '16px sans-serif'],\n                ['cellGridHeight', 250],\n                ['cellHeight', 24],\n                ['cellHeightWithChildGrid', 150],\n                ['cellHorizontalAlignment', 'left'],\n                ['cellHoverBackgroundColor', 'rgba(255, 255, 255, 1)'],\n                ['cellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['cellPaddingBottom', 5],\n                ['cellPaddingLeft', 5],\n                ['cellPaddingRight', 7],\n                ['cellPaddingTop', 5],\n                ['cellSelectedBackgroundColor', 'rgba(236, 243, 255, 1)'],\n                ['cellSelectedColor', 'rgba(0, 0, 0, 1)'],\n                ['cellVerticalAlignment', 'center'],\n                ['cellWidthWithChildGrid', 250],\n                ['childContextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['childContextMenuArrowHTML', '&#x25BA;'],\n                ['childContextMenuMarginLeft', -11],\n                ['childContextMenuMarginTop', -6],\n                ['columnHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['columnHeaderCellBorderColor', 'rgba(152, 152, 152, 1)'],\n                ['columnHeaderCellBorderWidth', 0.25],\n                ['columnHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['columnHeaderCellFont', '16px sans-serif'],\n                ['columnHeaderCellHeight', 25],\n                ['columnHeaderCellHorizontalAlignment', 'left'],\n                ['columnHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['columnHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['columnHeaderCellPaddingBottom', 5],\n                ['columnHeaderCellPaddingLeft', 5],\n                ['columnHeaderCellPaddingRight', 7],\n                ['columnHeaderCellPaddingTop', 5],\n                ['columnHeaderCellVerticalAlignment', 'center'],\n                ['columnHeaderOrderByArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['columnHeaderOrderByArrowBorderWidth', 1],\n                ['columnHeaderOrderByArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['columnHeaderOrderByArrowHeight', 8],\n                ['columnHeaderOrderByArrowMarginLeft', 0],\n                ['columnHeaderOrderByArrowMarginRight', 5],\n                ['columnHeaderOrderByArrowMarginTop', 6],\n                ['columnHeaderOrderByArrowWidth', 13],\n                ['columnWidth', 250],\n                ['contextFilterButtonBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterButtonBorderRadius', '3px'],\n                ['contextFilterButtonHTML', '&#x25BC;'],\n                ['contextFilterInputBackground', 'rgba(255,255,255,1)'],\n                ['contextFilterInputBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextFilterInputBorderRadius', '0'],\n                ['contextFilterInputColor', 'rgba(0,0,0,1)'],\n                ['contextFilterInputFontFamily', 'sans-serif'],\n                ['contextFilterInputFontSize', '14px'],\n                ['contextFilterInvalidRegExpBackground', 'rgba(180, 6, 1, 1)'],\n                ['contextFilterInvalidRegExpColor', 'rgba(255, 255, 255, 1)'],\n                ['contextMenuArrowColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuArrowDownHTML', '&#x25BC;'],\n                ['contextMenuArrowUpHTML', '&#x25B2;'],\n                ['contextMenuBackground', 'rgba(240, 240, 240, 1)'],\n                ['contextMenuBorder', 'solid 1px rgba(158, 163, 169, 1)'],\n                ['contextMenuBorderRadius', '3px'],\n                ['contextMenuChildArrowFontSize', '12px'],\n                ['contextMenuColor', 'rgba(43, 48, 43, 1)'],\n                ['contextMenuFilterButtonFontFamily', 'sans-serif'],\n                ['contextMenuFilterButtonFontSize', '10px'],\n                ['contextMenuFilterInvalidExpresion', 'rgba(237, 155, 156, 1)'],\n                ['contextMenuFontFamily', 'sans-serif'],\n                ['contextMenuFontSize', '16px'],\n                ['contextMenuHoverBackground', 'rgba(182, 205, 250, 1)'],\n                ['contextMenuHoverColor', 'rgba(43, 48, 153, 1)'],\n                ['contextMenuItemBorderRadius', '3px'],\n                ['contextMenuItemMargin', '2px'],\n                ['contextMenuLabelDisplay', 'inline-block'],\n                ['contextMenuLabelMargin', '0 3px 0 0'],\n                ['contextMenuLabelMaxWidth', '700px'],\n                ['contextMenuLabelMinWidth', '75px'],\n                ['contextMenuMarginLeft', 3],\n                ['contextMenuMarginTop', -3],\n                ['contextMenuOpacity', '0.98'],\n                ['contextMenuPadding', '2px'],\n                ['contextMenuWindowMargin', 6],\n                ['cornerCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['cornerCellBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['editCellBackgroundColor', 'white'],\n                ['editCellBorder', 'solid 1px rgba(110, 168, 255, 1)'],\n                ['editCellBoxShadow', '0 2px 5px rgba(0,0,0,0.4)'],\n                ['editCellColor', 'black'],\n                ['editCellFontFamily', 'sans-serif'],\n                ['editCellFontSize', '16px'],\n                ['editCellPaddingLeft', 4],\n                ['gridBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['gridBorderWidth', 1],\n                ['height', 'auto'],\n                ['minColumnWidth', 45],\n                ['minHeight', 24],\n                ['minRowHeight', 24],\n                ['mobileContextMenuMargin', 10],\n                ['mobileEditInputHeight', 30],\n                ['mobileEditFontFamily', 'sans-serif'],\n                ['mobileEditFontSize', '16px'],\n                ['moveOverlayBorderWidth', 1],\n                ['moveOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['moveOverlayBorderSegments', '12, 7'],\n                ['name', 'default'],\n                ['reorderMarkerBackgroundColor', 'rgba(0, 0, 0, 0.1)'],\n                ['reorderMarkerBorderColor', 'rgba(0, 0, 0, 0.2)'],\n                ['reorderMarkerBorderWidth', 1.25],\n                ['reorderMarkerIndexBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['reorderMarkerIndexBorderWidth', 2.75],\n                ['rowHeaderCellBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['rowHeaderCellBorderColor', 'rgba(200, 200, 200, 1)'],\n                ['rowHeaderCellBorderWidth', 1],\n                ['rowHeaderCellColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellFont', '16px sans-serif'],\n                ['rowHeaderCellHeight', 25],\n                ['rowHeaderCellHorizontalAlignment', 'left'],\n                ['rowHeaderCellHoverBackgroundColor', 'rgba(235, 235, 235, 1)'],\n                ['rowHeaderCellHoverColor', 'rgba(0, 0, 0, 1)'],\n                ['rowHeaderCellPaddingBottom', 5],\n                ['rowHeaderCellPaddingLeft', 5],\n                ['rowHeaderCellPaddingRight', 5],\n                ['rowHeaderCellPaddingTop', 5],\n                ['rowHeaderCellSelectedBackgroundColor', 'rgba(217, 217, 217, 1)'],\n                ['rowHeaderCellSelectedColor', 'rgba(50, 50, 50, 1)'],\n                ['rowHeaderCellVerticalAlignment', 'center'],\n                ['rowHeaderCellWidth', 57],\n                ['scrollBarActiveColor', 'rgba(125, 125, 125, 1)'],\n                ['scrollBarBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarBorderWidth', 0.5],\n                ['scrollBarBoxBorderRadius', 4.125],\n                ['scrollBarBoxColor', 'rgba(192, 192, 192, 1)'],\n                ['scrollBarBoxMargin', 2],\n                ['scrollBarBoxMinSize', 15],\n                ['scrollBarBoxWidth', 8],\n                ['scrollBarCornerBackgroundColor', 'rgba(240, 240, 240, 1)'],\n                ['scrollBarCornerBorderColor', 'rgba(202, 202, 202, 1)'],\n                ['scrollBarWidth', 11],\n                ['selectionHandleBorderColor', 'rgba(255, 255, 255, 1)'],\n                ['selectionHandleBorderWidth', 1.5],\n                ['selectionHandleColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionHandleSize', 8],\n                ['selectionHandleType', 'square'],\n                ['selectionOverlayBorderColor', 'rgba(66, 133, 244, 1)'],\n                ['selectionOverlayBorderWidth', 0.75],\n                ['treeArrowBorderColor', 'rgba(195, 199, 202, 1)'],\n                ['treeArrowBorderWidth', 1],\n                ['treeArrowClickRadius', 5],\n                ['treeArrowColor', 'rgba(155, 155, 155, 1)'],\n                ['treeArrowHeight', 8],\n                ['treeArrowMarginLeft', 0],\n                ['treeArrowMarginRight', 5],\n                ['treeArrowMarginTop', 6],\n                ['treeArrowWidth', 13],\n                ['treeGridHeight', 250],\n                ['width', 'auto']\n            ]\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/defaults.js\n// module id = 0\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, evil: true*/\n/*globals Reflect: false, HTMLElement: true, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([\n    './component',\n    './defaults',\n    './draw',\n    './events',\n    './touch',\n    './intf',\n    './contextMenu',\n    './dom',\n    './publicMethods'\n], function context(component) {\n    'use strict';\n    component = component();\n    var modules = Array.prototype.slice.call(arguments);\n    function Grid(args) {\n        args = args || {};\n        var self = {};\n        self.isComponent = args.component === undefined;\n        self.intf = self.isComponent ? eval('Reflect.construct(HTMLElement, [], new.target)') : {};\n        self.args = args;\n        self.createGrid = function grid(args) {\n            args.component = false;\n            return new Grid(args);\n        };\n        modules.forEach(function (module) {\n            module(self);\n        });\n        self.intf.args = self.args;\n        self.intf.init = self.init;\n        if (!self.isComponent) {\n            self.init();\n        }\n        return self.intf;\n    }\n    if (window.HTMLElement) {\n        Grid.prototype = Object.create(window.HTMLElement.prototype);\n    }\n    // export web component\n    if (window.customElements) {\n        Grid.observedAttributes = component.getObservableAttributes();\n        Grid.prototype.disconnectedCallback = function () { this.dispose(); };\n        Grid.prototype.attributeChangedCallback = component.attributeChangedCallback;\n        Grid.prototype.connectedCallback = component.connectedCallback;\n        Grid.prototype.adoptedCallback = component.adoptedCallback;\n        window.customElements.define('canvas-datagrid', Grid);\n    }\n    // export global\n    if (window && !window.canvasDatagrid && !window.require) {\n        window.canvasDatagrid = function (args) { return new Grid(args); };\n    }\n    // export amd loader\n    module.exports = function grid(args) {\n        args = args || {};\n        args.component = false;\n        return new Grid(args);\n    };\n    return module.exports;\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/main.js\n// module id = 1\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine(['./defaults'], function (defaults) {\n    'use strict';\n    return function (self) {\n        self = self || {};\n        var typeMap, component = {};\n        function hyphenateProperty(prop, cust) {\n            var p = '';\n            Array.prototype.forEach.call(prop, function (char) {\n                if (char === char.toUpperCase()) {\n                    p += '-' + char.toLowerCase();\n                    return;\n                }\n                p += char;\n            });\n            return (cust ? '--cdg-' : '') + p;\n        }\n        function getDefaultItem(base, item) {\n            var i = {},\n                r;\n            defaults(i);\n            r = i.defaults[base].filter(function (i) {\n                return i[0].toLowerCase() === item.toLowerCase()\n                    || hyphenateProperty(i[0]) === item.toLowerCase()\n                    || hyphenateProperty(i[0], true) === item.toLowerCase();\n            })[0];\n            return r;\n        }\n        function applyComponentStyle(intf, self, supressChangeAndDrawEvents) {\n            var cStyle = window.getComputedStyle(intf, null),\n                defs = {};\n            self.computedStyle = cStyle;\n            defaults(defs);\n            defs = defs.defaults.styles;\n            defs.forEach(function (def) {\n                var val = cStyle.getPropertyValue(hyphenateProperty(def[0], true));\n                if (val !== \"\") {\n                    self.style[def[0]] = typeMap[typeof def[1]](val, def[1]);\n                }\n            });\n            self.draw(true);\n            if (!supressChangeAndDrawEvents) {\n                self.dispatchEvent('stylechanged', intf.style);\n            }\n        }\n        typeMap = {\n            data: function (strData) {\n                try {\n                    return JSON.parse(strData);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid data.');\n                }\n            },\n            schema: function (strSchema) {\n                try {\n                    return JSON.parse(strSchema);\n                } catch (e) {\n                    throw new Error('Cannot read JSON data in canvas-datagrid schema attribute.');\n                }\n            },\n            number: function (strNum, def) {\n                var n = parseInt(strNum, 10);\n                return isNaN(n) ? def : n;\n            },\n            boolean: function (strBool) {\n                return (/true/i).test(strBool);\n            },\n            string: function (str) {\n                return str;\n            }\n        };\n        component.getObservableAttributes = function () {\n            var i = {}, attrs = ['data', 'schema'];\n            defaults(i);\n            i.defaults.attributes.forEach(function (attr) {\n                attrs.push(attr[0].toLowerCase());\n            });\n            return attrs;\n        };\n        component.connectedCallback = function () {\n            var intf = this, s;\n            if (intf.initialized) { return; }\n            intf.initialized = true;\n            intf.args.parentNode = intf;\n            intf.args.attributes = intf.attributes;\n            //HACK init() will secretly return the internal reference object.\n            //since init is only run after instantiation in the component version\n            //it won't work in the amd version and won't return self, so it is still\n            //technically private since it's impossible to get at.\n            //this has to be done so intf setters can bet run and alter self without stack overflows\n            //intf.style.display = 'block';\n            s = intf.init();\n            component.observe(intf, s);\n            applyComponentStyle(intf, s, true);\n            Object.keys(intf.args.attributes).forEach(function (arg) {\n                if (intf.attributes[arg] === undefined) { return; }\n                intf.attributes[arg] = intf.args.attributes[arg];\n            });\n            s.resize();\n            ['style', 'data', 'schema'].forEach(function (key) {\n                Object.defineProperty(intf.args, key, {\n                    set: function (value) {\n                        s[key] = value;\n                        intf.draw();\n                    },\n                    get: function () {\n                        return s[key];\n                    }\n                });\n            });\n        };\n        component.adoptedCallback = function () {\n            this.resize();\n        };\n        component.attributeChangedCallback = function (attrName, oldVal, newVal) {\n            var tfn, intf = this, def;\n            if (attrName === 'style') {\n                return;\n            }\n            if (attrName === 'data') {\n                intf.args.data = typeMap.data(newVal);\n                return;\n            }\n            if (attrName === 'schema') {\n                intf.args.schema = typeMap.schema(newVal);\n                return;\n            }\n            if (attrName === 'class' || attrName === 'className') {\n                return;\n            }\n            def = getDefaultItem('attributes', attrName);\n            if (def) {\n                tfn = typeMap[typeof def[1]];\n                intf.attributes[def[0]] = tfn(newVal);\n                return;\n            }\n            if (/^on/.test(attrName)) {\n                intf.addEventListener('on' + attrName, function (e) {\n                    eval(newVal);\n                });\n            }\n            return;\n        };\n        component.observe = function (intf, self) {\n            var observer;\n            if (!window.MutationObserver) { return; }\n            self.applyComponentStyle = function () { applyComponentStyle(intf, self); self.resize(); };\n            /**\n             * Applies the computed css styles to the grid.  In some browsers, changing directives in attached style sheets does not automatically update the styles in this component.  It is necessary to call this method to update in these cases.\n             * @memberof canvasDatagrid\n             * @name applyComponentStyle\n             * @method\n             */\n            intf.applyComponentStyle = self.applyComponentStyle;\n            observer = new window.MutationObserver(function (mutations) {\n                var checkInnerHTML, checkStyle;\n                Array.prototype.forEach.call(mutations, function (mutation) {\n                    if (mutation.attributeName === 'class'\n                            || mutation.attributeName === 'style') {\n                        self.applyComponentStyle();\n                        return;\n                    }\n                    if (mutation.target.parentNode.nodeName === 'STYLE') {\n                        checkStyle = true;\n                        return;\n                    }\n                    if (mutation.addedNodes.length > 0 || mutation.type === 'characterData') {\n                        checkInnerHTML = true;\n                    }\n                });\n                if (checkStyle) {\n                    intf.applyComponentStyle();\n                }\n                if (checkInnerHTML) {\n                    intf.data = typeMap.data(intf.innerHTML);\n                }\n            });\n            observer.observe(intf, { characterData: true, childList: true, attributes: true, subtree: true });\n            Array.prototype.forEach.call(document.querySelectorAll('style'), function (el) {\n                observer.observe(el, { characterData: true, childList: true, attributes: true, subtree: true });\n            });\n        };\n        self.component = component;\n        return component;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/component.js\n// module id = 2\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals XMLSerializer: false, define: true, Blob: false, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var perfCounters = [],\n            drawCount = 0,\n            perfWindowSize = 300,\n            entityCount = [],\n            scrollDebugCounters = [],\n            touchPPSCounters = [];\n        self.htmlImageCache = {};\n        function drawPerfLine(w, h, x, y, perfArr, arrIndex, max, color, useAbs) {\n            var i = w / perfArr.length,\n                r = h / max;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x, y + h);\n            perfArr.forEach(function (n) {\n                var val = (arrIndex === undefined ? n : n[arrIndex]),\n                    cx,\n                    cy;\n                if (useAbs) {\n                    val = Math.abs(val);\n                }\n                cx = x + i;\n                cy = y + h - (val * r);\n                self.ctx.lineTo(cx, cy);\n                x += i;\n            });\n            self.ctx.moveTo(x + w, y + h);\n            self.ctx.strokeStyle = color;\n            self.ctx.stroke();\n        }\n        function drawOnAllImagesLoaded() {\n            var loaded = true;\n            Object.keys(self.htmlImageCache).forEach(function (html) {\n                if (!self.htmlImageCache[html].complete) {\n                    loaded = false;\n                }\n            });\n            if (loaded) {\n                self.draw();\n            }\n        }\n        function drawHtml(cell) {\n            var img,\n                v = cell.innerHTML || cell.formattedValue,\n                x = cell.x + self.canvasOffsetLeft,\n                y = cell.y + self.canvasOffsetTop;\n            if (self.htmlImageCache[v]) {\n                img = self.htmlImageCache[v];\n                if (img.height !== cell.height || img.width !== cell.width) {\n                    // height and width of the cell has changed, invalidate cache\n                    self.htmlImageCache[v] = undefined;\n                } else {\n                    if (!img.complete) {\n                        return;\n                    }\n                    return self.ctx.drawImage(img, x, y);\n                }\n            }\n            img = new Image(cell.width, cell.height);\n            self.htmlImageCache[v] = img;\n            img.onload = function () {\n                self.ctx.drawImage(img, x, y);\n                drawOnAllImagesLoaded();\n            };\n            img.src = 'data:image/svg+xml;base64,' + btoa(\n                '<svg xmlns=\"http://www.w3.org/2000/svg\" width=\"' + cell.width + '\" height=\"' + cell.height + '\">\\n' +\n                    '<foreignObject class=\"node\" x=\"0\" y=\"0\" width=\"100%\" height=\"100%\">\\n' +\n                    '<body xmlns=\"http://www.w3.org/1999/xhtml\" style=\"margin:0;padding:0;\">\\n' +\n                    v + '\\n' +\n                    '</body>' +\n                    '</foreignObject>\\n' +\n                    '</svg>\\n'\n            );\n        }\n        function drawOrderByArrow(x, y) {\n            var mt = self.style.columnHeaderOrderByArrowMarginTop * self.scale,\n                ml = self.style.columnHeaderOrderByArrowMarginLeft * self.scale,\n                mr = self.style.columnHeaderOrderByArrowMarginRight * self.scale,\n                aw = self.style.columnHeaderOrderByArrowWidth * self.scale,\n                ah = self.style.columnHeaderOrderByArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.columnHeaderOrderByArrowColor;\n            self.ctx.strokeStyle = self.style.columnHeaderOrderByArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.orderDirection === 'asc') {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y + ah);\n                self.ctx.lineTo(x + aw, y + ah);\n                self.ctx.lineTo(x + (aw * 0.5), y);\n                self.ctx.lineTo(x, y + ah);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function drawTreeArrow(cell, x, y) {\n            var mt = self.style.treeArrowMarginTop * self.scale,\n                mr = self.style.treeArrowMarginRight * self.scale,\n                ml = self.style.treeArrowMarginLeft * self.scale,\n                aw = self.style.treeArrowWidth * self.scale,\n                ah = self.style.treeArrowHeight * self.scale;\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillStyle = self.style.treeArrowColor;\n            self.ctx.strokeStyle = self.style.treeArrowBorderColor;\n            self.ctx.beginPath();\n            x = x + ml;\n            y = y + mt;\n            if (self.openChildren[cell.data[self.uniqueId]]) {\n                self.ctx.moveTo(x, y);\n                self.ctx.lineTo(x + aw, y);\n                self.ctx.lineTo(x + (aw * 0.5), y + ah);\n                self.ctx.moveTo(x, y);\n            } else {\n                self.ctx.lineTo(x, y);\n                self.ctx.lineTo(x + ah, y + (aw * 0.5));\n                self.ctx.lineTo(x, y + aw);\n                self.ctx.lineTo(x, y);\n            }\n            self.ctx.stroke();\n            self.ctx.fill();\n            return ml + aw + mr;\n        }\n        function radiusRect(x, y, w, h, radius) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            var r = x + w, b = y + h;\n            self.ctx.beginPath();\n            self.ctx.moveTo(x + radius, y);\n            self.ctx.lineTo(r - radius, y);\n            self.ctx.quadraticCurveTo(r, y, r, y + radius);\n            self.ctx.lineTo(r, y + h - radius);\n            self.ctx.quadraticCurveTo(r, b, r - radius, b);\n            self.ctx.lineTo(x + radius, b);\n            self.ctx.quadraticCurveTo(x, b, x, b - radius);\n            self.ctx.lineTo(x, y + radius);\n            self.ctx.quadraticCurveTo(x, y, x + radius, y);\n        }\n        function fillRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillRect(x, y, w, h);\n        }\n        function strokeRect(x, y, w, h) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.strokeRect(x, y, w, h);\n        }\n        function fillText(text, x, y) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.fillText(text, x, y);\n        }\n        function fillCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.fill();\n        }\n        function strokeCircle(x, y, r) {\n            x += self.canvasOffsetLeft;\n            y += self.canvasOffsetTop;\n            self.ctx.beginPath();\n            self.ctx.arc(x, y, r, 0, 2 * Math.PI);\n            self.ctx.stroke();\n        }\n        function fillHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return fillCircle(x, y, r * 0.5);\n            }\n            fillRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function strokeHandle(x, y, r) {\n            if (self.style.selectionHandleType === 'circle') {\n                return strokeCircle(x, y, r * 0.5);\n            }\n            strokeRect(x - r * 0.5, y - r * 0.5, r, r);\n        }\n        function addselectionHandle(c, pos) {\n            var hw = self.style.selectionHandleSize,\n                p = {\n                    tr: function () {\n                        fillHandle(c.x + c.width, c.y, hw);\n                        strokeHandle(c.x + c.width, c.y, hw);\n                    },\n                    br: function () {\n                        fillHandle(c.x + c.width, c.y + c.height, hw);\n                        strokeHandle(c.x + c.width, c.y + c.height, hw);\n                    },\n                    tl: function () {\n                        fillHandle(c.x, c.y, hw);\n                        strokeHandle(c.x, c.y, hw);\n                    },\n                    bl: function () {\n                        fillHandle(c.x, c.y + c.height, hw);\n                        strokeHandle(c.x, c.y + c.height, hw);\n                    }\n                };\n            p[pos]();\n        }\n        function addBorderLine(c, pos) {\n            self.ctx.beginPath();\n            var p = {\n                t: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                },\n                r: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                b: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft + c.width, c.y + self.canvasOffsetTop + c.height);\n                },\n                l: function () {\n                    self.ctx.moveTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop);\n                    self.ctx.lineTo(c.x + self.canvasOffsetLeft, c.y + self.canvasOffsetTop + c.height);\n                }\n            };\n            p[pos]();\n            self.ctx.stroke();\n        }\n        function addEllipsis(text, width) {\n            var c, w = 0;\n            if (self.ellipsisCache[text] && self.ellipsisCache[text][width]) {\n                return self.ellipsisCache[text][width];\n            }\n            //TODO Add ellipsis back when there is a fast way to do it\n            w = self.ctx.measureText(text).width;\n            self.ellipsisCache[text] = self.ellipsisCache[text] || {};\n            c = {value: text, width: w};\n            self.ellipsisCache[text][width] = c;\n            return c;\n        }\n        function drawText(cell) {\n            var paddingLeft = self.style[cell.style + 'PaddingLeft'] * self.scale,\n                paddingTop = self.style[cell.style + 'PaddingTop'] * self.scale,\n                paddingRight = self.style[cell.style + 'PaddingRight'] * self.scale,\n                paddingBottom = self.style[cell.style + 'PaddingBottom'] * self.scale,\n                vPos = paddingTop + cell.height - (cell.height * 0.5),\n                hPos = paddingLeft + cell.treeArrowWidth + cell.orderByArrowWidth;\n            cell.text = addEllipsis(cell.formattedValue, cell.width - paddingRight - paddingLeft);\n            cell.text.height = cell.fontHeight;\n            if (cell.horizontalAlignment === 'right') {\n                hPos = cell.width - cell.text.width - paddingRight;\n            } else if (cell.horizontalAlignment === 'center') {\n                hPos = (cell.width / 2) - (cell.text.width / 2);\n            }\n            if (cell.verticalAlignment === 'top') {\n                vPos = paddingTop + cell.text.height;\n            } else if (cell.verticalAlignment === 'bottom') {\n                vPos = cell.height - paddingBottom - cell.text.height;\n            }\n            cell.text.x = cell.x + hPos;\n            cell.text.y = cell.y + vPos;\n            fillText(cell.text.value, cell.text.x, cell.text.y);\n        }\n        /**\n         * Redraws the grid. No matter what the change, this is the only method required to refresh everything.\n         * @memberof canvasDatagrid\n         * @name draw\n         * @method\n         */\n         // r = literal row index\n         // rd = row data array\n         // i = user order index\n         // o = literal data index\n         // y = y drawing cursor\n         // x = x drawing cursor\n         // s = visible schema array\n         // cx = current x drawing cursor sub calculation var\n         // cy = current y drawing cursor sub calculation var\n         // a = static cell (like corner cell)\n         // p = perf counter\n         // l = data length\n         // u = current cell\n         // h = current height\n         // w = current width\n        self.draw = function (internal) {\n            if (self.dispatchEvent('beforedraw', {})) { return; }\n            if (!self.isChildGrid && (!self.height || !self.width)) {\n                return;\n            }\n            if (self.isChildGrid && internal) {\n                requestAnimationFrame(self.parentGrid.draw);\n                return;\n            }\n            if (self.intf.visible === false) {\n                return;\n            }\n            // initial values\n            var checkScrollHeight, rowHeaderCell, p, cx, cy, treeGrid, rowOpen,\n                rowHeight, cornerCell, y, x, c, h, w, s, r, rd, aCell,\n                selectionBorders = [],\n                moveBorders = [],\n                selectionHandles = [],\n                rowHeaders = [],\n                l = self.data.length,\n                u = self.currentCell || {},\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                cellHeight = self.style.cellHeight;\n            drawCount += 1;\n            p = performance.now();\n            self.visibleRowHeights = [];\n            // if data length has changed, there is no way to know\n            if (self.data.length > self.orders.rows.length) {\n                self.createRowOrders();\n            }\n            function drawScrollBars() {\n                var v = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-bar'\n                    },\n                    n = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-bar'\n                    },\n                    vb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'vertical-scroll-box'\n                    },\n                    nb = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        style: 'horizontal-scroll-box'\n                    },\n                    co = {\n                        x: 0,\n                        y: 0,\n                        height: 0,\n                        width: 0,\n                        isCorner: true,\n                        isScrollBoxCorner: true,\n                        style: 'scroll-box-corner'\n                    },\n                    m = (self.style.scrollBarBoxMargin * 2),\n                    d = self.style.scrollBarBoxMargin * 0.5;\n                self.ctx.strokeStyle = self.style.scrollBarBorderColor;\n                self.ctx.lineWidth = self.style.scrollBarBorderWidth;\n                // vertical\n                v.x += w - self.style.scrollBarWidth - self.style.scrollBarBorderWidth - d;\n                v.y += rowHeaderCellHeight;\n                v.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                v.height = h - rowHeaderCellHeight - self.style.scrollBarWidth - d - m;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(v.x, v.y, v.width, v.height + m);\n                strokeRect(v.x, v.y, v.width, v.height + m);\n                // vertical box\n                vb.x = v.x + self.style.scrollBarBoxMargin;\n                vb.y = rowHeaderCellHeight + self.style.scrollBarBoxMargin\n                    + ((v.height - self.scrollBox.scrollBoxHeight)\n                        * (self.scrollBox.scrollTop / self.scrollBox.scrollHeight));\n                vb.width = self.style.scrollBarBoxWidth;\n                vb.height = self.scrollBox.scrollBoxHeight;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/vertical/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (vb.height < v.height) {\n                    radiusRect(vb.x, vb.y, vb.width, vb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                // horizontal\n                n.x += columnHeaderCellWidth;\n                n.y += h - self.style.scrollBarWidth - d;\n                n.width = w - self.style.scrollBarWidth - columnHeaderCellWidth - d - m;\n                n.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth + d;\n                self.ctx.fillStyle = self.style.scrollBarBackgroundColor;\n                fillRect(n.x, n.y, n.width + m, n.height);\n                strokeRect(n.x, n.y, n.width + m, n.height);\n                // horizontal box\n                nb.y = n.y + self.style.scrollBarBoxMargin;\n                nb.x = columnHeaderCellWidth + self.style.scrollBarBoxMargin\n                    + ((n.width - self.scrollBox.scrollBoxWidth)\n                        * (self.scrollBox.scrollLeft / self.scrollBox.scrollWidth));\n                nb.width = self.scrollBox.scrollBoxWidth;\n                nb.height = self.style.scrollBarBoxWidth;\n                self.ctx.fillStyle = self.style.scrollBarBoxColor;\n                if (/horizontal/.test(u.context)) {\n                    self.ctx.fillStyle = self.style.scrollBarActiveColor;\n                }\n                if (nb.width < n.width) {\n                    radiusRect(nb.x, nb.y, nb.width, nb.height, self.style.scrollBarBoxBorderRadius);\n                    self.ctx.stroke();\n                    self.ctx.fill();\n                }\n                //corner\n                self.ctx.strokeStyle = self.style.scrollBarCornerBorderColor;\n                self.ctx.fillStyle = self.style.scrollBarCornerBackgroundColor;\n                co.x = n.x + n.width + m;\n                co.y = v.y + v.height + m;\n                co.width = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                co.height = self.style.scrollBarWidth + self.style.scrollBarBorderWidth;\n                radiusRect(co.x, co.y, co.width, co.height, 0);\n                self.ctx.stroke();\n                self.ctx.fill();\n                self.visibleCells.unshift(v);\n                self.visibleCells.unshift(vb);\n                self.visibleCells.unshift(n);\n                self.visibleCells.unshift(nb);\n                self.visibleCells.unshift(co);\n                self.scrollBox.bar = {\n                    v: v,\n                    h: n\n                };\n                self.scrollBox.box = {\n                    v: vb,\n                    h: nb\n                };\n            }\n            function createHandlesOverlayArray(cell) {\n                if (self.attributes.allowMovingSelection || self.mobile) {\n                    if (cell.selectionBorderTop && cell.selectionBorderRight && self.mobile) {\n                        selectionHandles.push([cell, 'tr']);\n                        cell.selectionHandle = 'tr';\n                    }\n                    if (cell.selectionBorderTop && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'tl']);\n                        cell.selectionHandle = 'tl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderLeft && self.mobile) {\n                        selectionHandles.push([cell, 'bl']);\n                        cell.selectionHandle = 'bl';\n                    }\n                    if (cell.selectionBorderBottom && cell.selectionBorderRight\n                            && (self.attributes.selectionHandleBehavior !== 'none' || self.mobile)) {\n                        selectionHandles.push([cell, 'br']);\n                        cell.selectionHandle = 'br';\n                    }\n                }\n            }\n            function createBorderOverlayArray(cell, drawArray, propPrefix, offsetPoint) {\n                offsetPoint = offsetPoint || {x: 0, y: 0};\n                cell.selectionBorder = '';\n                if (!cell.isRowHeader\n                        && self.selections[cell.rowIndex + -offsetPoint.y]\n                        && self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) !== -1) {\n                    if ((!self.selections[cell.rowIndex - 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex - 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1\n                            || cell.rowIndex === 0)\n                            && !cell.isHeader) {\n                        drawArray.push([cell, 't']);\n                        cell[propPrefix + 'BorderTop'] = true;\n                        cell[propPrefix + 'Border'] += 't';\n                    }\n                    if (!self.selections[cell.rowIndex + 1 + -offsetPoint.y]\n                            || self.selections[cell.rowIndex + 1 + -offsetPoint.y].indexOf(cell.columnIndex + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'b']);\n                        cell[propPrefix + 'BorderBottom'] = true;\n                        cell[propPrefix + 'Border'] += 'b';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === 0\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex - 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'l']);\n                        cell[propPrefix + 'BorderLeft'] = true;\n                        cell[propPrefix + 'Border'] += 'l';\n                    }\n                    if (!self.selections[cell.rowIndex + -offsetPoint.y] || cell.columnIndex === s.length\n                            || self.selections[cell.rowIndex + -offsetPoint.y].indexOf(cell.columnIndex + 1 + -offsetPoint.x) === -1) {\n                        drawArray.push([cell, 'r']);\n                        cell[propPrefix + 'BorderRight'] = true;\n                        cell[propPrefix + 'Border'] += 'r';\n                    }\n                }\n            }\n            function drawCell(d, rowIndex, rowOrderIndex) {\n                return function drawEach(header, headerIndex, columnOrderIndex) {\n                    var cellStyle = header.style || 'cell',\n                        cellGridAttributes,\n                        cell,\n                        isHeader = /HeaderCell/.test(cellStyle),\n                        isCorner = /cornerCell/.test(cellStyle),\n                        isRowHeader = 'rowHeaderCell' === cellStyle,\n                        isColumnHeader = 'columnHeaderCell' === cellStyle,\n                        selected = self.selections[rowOrderIndex] && self.selections[rowOrderIndex].indexOf(columnOrderIndex) !== -1,\n                        hovered = self.hovers[d[self.uniqueId]] && self.hovers[d[self.uniqueId]].indexOf(columnOrderIndex) !== -1,\n                        active = self.activeCell.rowIndex === rowOrderIndex && self.activeCell.columnIndex === columnOrderIndex,\n                        isGrid = typeof d[header.name] === 'object' && d[header.name] !== null && d[header.name] !== undefined,\n                        activeHeader = (self.orders.rows[self.activeCell.rowIndex] === rowOrderIndex\n                                || self.orders.columns[self.activeCell.columnIndex] === columnOrderIndex)\n                            && (columnOrderIndex === -1 || rowOrderIndex === -1)\n                            ? (isRowHeader ? 'activeRowHeaderCell' : 'activeColumnHeaderCell') : false,\n                        val,\n                        f = self.formatters[header.type || 'string'],\n                        orderByArrowSize = 0,\n                        treeArrowSize = 0,\n                        cellWidth = self.sizes.columns[isRowHeader ? 'cornerCell' : header[self.uniqueId]] || header.width,\n                        ev = {\n                            value: d[header.name],\n                            row: d,\n                            header: header\n                        };\n                    if (cellStyle === 'headerCellCap') {\n                        cellWidth = w - x;\n                    }\n                    // if no data or schema are defined, a width is provided to the stub column\n                    if (cellWidth === undefined) {\n                        cellWidth = self.style.columnWidth;\n                    }\n                    cellWidth = cellWidth * self.scale;\n                    if (x + cellWidth + self.style.cellBorderWidth < 0) {\n                        x += cellWidth + self.style.cellBorderWidth;\n                    }\n                    if (active) {\n                        cellStyle = 'activeCell';\n                    }\n                    if (self.visibleRows.indexOf(rowIndex) === -1 && !isHeader) {\n                        self.visibleRows.push(rowIndex);\n                    }\n                    val = self.dispatchEvent('formatcellvalue', ev);\n                    cx = x;\n                    cy = y;\n                    if (cellStyle === 'cornerCell') {\n                        cx = 0;\n                        cy = 0;\n                    } else if (isRowHeader) {\n                        cx = 0;\n                    } else if (isHeader) {\n                        cy = 0;\n                    }\n                    cell = {\n                        type: isGrid ? 'canvas-datagrid-cell' : header.type,\n                        style: cellStyle,\n                        nodeType: 'canvas-datagrid-cell',\n                        x: cx,\n                        y: cy,\n                        horizontalAlignment: self.style[cellStyle + 'HorizontalAlignment'],\n                        verticalAlignment: self.style[cellStyle + 'VerticalAlignment'],\n                        offsetTop: self.canvasOffsetTop + cy,\n                        offsetLeft: self.canvasOffsetLeft + cx,\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        active: active || activeHeader,\n                        hovered: hovered,\n                        selected: selected,\n                        width: cellWidth,\n                        height: cellHeight,\n                        offsetWidth: cellWidth,\n                        offsetHeight: cellHeight,\n                        parentNode: self.intf.parentNode,\n                        offsetParent: self.intf.parentNode,\n                        data: d,\n                        isCorner: isCorner,\n                        isHeader: isHeader,\n                        isColumnHeader: isColumnHeader,\n                        isHeaderCellCap: !!header.isHeaderCellCap,\n                        isRowHeader: isRowHeader,\n                        rowOpen: rowOpen,\n                        header: header,\n                        columnIndex: columnOrderIndex,\n                        rowIndex: rowOrderIndex,\n                        sortColumnIndex: headerIndex,\n                        sortRowIndex: rowIndex,\n                        isGrid: isGrid,\n                        isNormal: !isGrid && !isCorner && !isHeader,\n                        gridId: (self.attributes.name || '') + d[self.uniqueId] + ':' + header[self.uniqueId],\n                        parentGrid: self.intf,\n                        innerHTML: '',\n                        activeHeader: activeHeader,\n                        value: isHeader && !isRowHeader ? (header.title || header.name) : d[header.name]\n                    };\n                    ev.cell = cell;\n                    cell.userHeight = cell.isHeader ? self.sizes.rows[-1] : rowHeight;\n                    cell.userWidth = cell.isHeader ? self.sizes.columns.cornerCell : self.sizes.columns[header[self.uniqueId]];\n                    cell[self.uniqueId] = d[self.uniqueId];\n                    self.visibleCells.unshift(cell);\n                    if (self.dispatchEvent('beforerendercell', ev)) { return; }\n                    self.ctx.fillStyle = self.style[cellStyle + 'BackgroundColor'];\n                    self.ctx.strokeStyle = self.style[cellStyle + 'BorderColor'];\n                    self.ctx.lineWidth = self.style[cellStyle + 'BorderWidth'];\n                    if (hovered) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'HoverBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'HoverBorderColor'];\n                    }\n                    if (selected) {\n                        self.ctx.fillStyle = self.style[cellStyle + 'SelectedBackgroundColor'];\n                        self.ctx.strokeStyle = self.style[cellStyle + 'SelectedBorderColor'];\n                    }\n                    if (activeHeader) {\n                        self.ctx.fillStyle = self.style[activeHeader + 'BackgroundColor'];\n                    }\n                    self.dispatchEvent('rendercell', ev);\n                    if (cell.isGrid) {\n                        if (cell.height !== rowHeight) {\n                            cell.height = rowHeight || self.style.cellHeightWithChildGrid;\n                            checkScrollHeight = true;\n                        }\n                        cell.width = self.sizes.columns[header[self.uniqueId]] || self.style.cellWidthWithChildGrid;\n                    }\n                    if (rowOpen && !cell.isRowHeader) {\n                        cell.height = self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight;\n                    }\n                    if (!cell.isGrid) {\n                        fillRect(cx, cy, cell.width, cell.height);\n                        strokeRect(cx, cy, cell.width, cell.height);\n                    }\n                    self.ctx.save();\n                    radiusRect(cell.x, cell.y, cell.width, cell.height, 0);\n                    self.ctx.clip();\n                    self.dispatchEvent('afterrendercell', ev);\n                    if (cell.height !== cellHeight && !(rowOpen && !cell.isRowHeader)) {\n                        self.sizes.rows[isHeader ? -1 : d[self.uniqueId]] = cell.height;\n                        checkScrollHeight = true;\n                    }\n                    if (cell.width !== cellWidth) {\n                        self.sizes.columns[header[self.uniqueId]] = cell.width;\n                        checkScrollHeight = true;\n                    }\n                    if (isRowHeader && self.attributes.tree) {\n                        if (!self.dispatchEvent('rendertreearrow', ev)) {\n                            treeArrowSize = drawTreeArrow(cell, self.style[cellStyle + 'PaddingLeft'], cy, 0);\n                        }\n                    }\n                    if ((self.attributes.showRowNumbers && isRowHeader)\n                            || !isRowHeader) {\n                        if (cell.isGrid && !self.dispatchEvent('beforerendercellgrid', ev)) {\n                            if (!self.childGrids[cell.gridId]) {\n                                cellGridAttributes = self.args.cellGridAttributes || self.args;\n                                cellGridAttributes.name = self.attributes.saveAppearance ? cell.gridId : undefined;\n                                cellGridAttributes.parentNode = cell;\n                                cellGridAttributes.data = d[header.name];\n                                ev.cellGridAttributes = cellGridAttributes;\n                                if (self.dispatchEvent('beforecreatecellgrid', ev)) { return; }\n                                self.childGrids[cell.gridId] = self.createGrid(cellGridAttributes);\n                                self.sizes.rows[rd[self.uniqueId]]\n                                    = self.sizes.rows[rd[self.uniqueId]] || self.style.cellGridHeight;\n                                checkScrollHeight = true;\n                            }\n                            cell.grid = self.childGrids[cell.gridId];\n                            cell.grid.parentNode = cell;\n                            cell.grid.visible = true;\n                            cell.grid.draw();\n                            self.dispatchEvent('rendercellgrid', ev);\n                        } else if (!cell.isGrid) {\n                            if (self.childGrids[cell.gridId]) {\n                                self.childGrids[cell.gridId].parentNode.offsetHeight = 0;\n                            }\n                            if (isHeader && self.orderBy === header.name) {\n                                if (!self.dispatchEvent('renderorderbyarrow', ev)) {\n                                    orderByArrowSize = drawOrderByArrow(cx + self.style[cellStyle + 'PaddingLeft'], 0);\n                                }\n                            }\n                            self.ctx.fillStyle = self.style[cellStyle + 'Color'];\n                            if (hovered) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'HoverColor'];\n                            }\n                            if (selected) {\n                                self.ctx.fillStyle = self.style[cellStyle + 'SelectedColor'];\n                            }\n                            if (activeHeader) {\n                                self.ctx.fillStyle = self.style[activeHeader + 'Color'];\n                            }\n                            self.ctx.font = (self.style[cellStyle + 'FontHeight'] * self.scale) + 'px ' + self.style[cellStyle + 'FontName'];\n                            cell.fontHeight = (self.style[cellStyle + 'FontHeight'] * self.scale);\n                            cell.treeArrowWidth = treeArrowSize;\n                            cell.orderByArrowWidth = orderByArrowSize;\n                            val = val !== undefined ? val : f\n                                ? f(ev) : '';\n                            if (val === undefined && !f) {\n                                val = '';\n                                console.warn('canvas-datagrid: Unknown format '\n                                    + header.type + ' add a cellFormater');\n                            }\n                            cell.formattedValue = ((val !== undefined && val !== null) ? val : '').toString();\n                            if (self.columnFilters && self.columnFilters[val] !== undefined && isHeader) {\n                                cell.formattedValue = self.attributes.filterTextPrefix + val;\n                            }\n                            if (!self.dispatchEvent('rendertext', ev)) {\n                                if (cell.innerHTML || header.type === 'html') {\n                                    drawHtml(cell);\n                                } else {\n                                    drawText(cell);\n                                }\n                            }\n                        }\n                    }\n                    if (active) {\n                        aCell = cell;\n                    }\n                    createBorderOverlayArray(cell, selectionBorders, 'selection');\n                    // createBorderOverlayArray calculates data for createHandlesOverlayArray so it must go 2nd\n                    createHandlesOverlayArray(cell);\n                    if (self.movingSelection) {\n                        createBorderOverlayArray(cell, moveBorders, 'move', self.moveOffset);\n                    }\n                    self.ctx.restore();\n                    x += cell.width + self.style.cellBorderWidth;\n                    return cell.width;\n                };\n            }\n            function drawRowHeader(rowData, index, rowOrderIndex) {\n                var a;\n                if (self.attributes.showRowHeaders) {\n                    x = 0;\n                    rowHeaderCell = {'rowHeaderCell': index + 1 };\n                    rowHeaderCell[self.uniqueId] = rowData[self.uniqueId];\n                    a = {\n                        name: 'rowHeaderCell',\n                        width: self.style.rowHeaderCellWidth,\n                        style: 'rowHeaderCell',\n                        type: 'string',\n                        data: rowData[self.uniqueId],\n                        index: -1\n                    };\n                    a[self.uniqueId] = rowData[self.uniqueId];\n                    rowOpen = self.openChildren[rowData[self.uniqueId]];\n                    drawCell(rowHeaderCell, index, rowOrderIndex)(a, -1, -1);\n                }\n            }\n            function drawHeaders() {\n                var d, g = s.length, i, o, columnHeaderCell, header;\n                rowHeaders.forEach(function (rArgs) {\n                    y = rArgs[3];\n                    cellHeight = rArgs[4];\n                    drawRowHeader(rArgs[0], rArgs[1], rArgs[2]);\n                });\n                if (self.attributes.showColumnHeaders) {\n                    x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft;\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    y = 0;\n                    // cell height might have changed during drawing\n                    cellHeight = self.getRowHeaderCellHeight();\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        header = s[i];\n                        d = {\n                            title: header.title,\n                            name: header.name,\n                            width: header.width,\n                            style: 'columnHeaderCell',\n                            type: 'string',\n                            index: o,\n                            order: i\n                        };\n                        columnHeaderCell = {'columnHeaderCell': header.title || header.name};\n                        columnHeaderCell[self.uniqueId] = 'h' + header[self.uniqueId];\n                        d[self.uniqueId] = header[self.uniqueId];\n                        x += drawCell(columnHeaderCell, -1, -1)(d, o, i);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    // fill in the space right of the headers\n                    if (x < w) {\n                        c = {\n                            name: '',\n                            width: self.style.scrollBarWidth,\n                            style: 'headerCellCap',\n                            isHeaderCell: true,\n                            isHeaderCellCap: true,\n                            type: 'string',\n                            index: s.length\n                        };\n                        c[self.uniqueId] = 'columnHeaderCell';\n                        drawCell({endCap: ''}, -1, -1)(c, -1, -1);\n                    }\n                    // fill in the space right of the headers\n                    if (self.attributes.showRowHeaders) {\n                        cornerCell = {'cornerCell': '' };\n                        cornerCell[self.uniqueId] = 'cornerCell';\n                        x = 0;\n                        c = {\n                            name: 'cornerCell',\n                            width: self.style.rowHeaderCellWidth,\n                            style: 'cornerCell',\n                            type: 'string',\n                            index: -1\n                        };\n                        c[self.uniqueId] = 'cornerCell';\n                        drawCell(cornerCell, -1, -1)(c, -1, -1);\n                    }\n                }\n            }\n            function drawRow(r, d) {\n                var i, treeHeight, rowSansTreeHeight, o, g = s.length;\n                if (y - (cellHeight * 2) > h) {\n                    return false;\n                }\n                rd = self.data[r];\n                rowOpen = self.openChildren[rd[self.uniqueId]];\n                rowSansTreeHeight = (self.sizes.rows[rd[self.uniqueId]] || self.style.cellHeight) * self.scale;\n                treeHeight = (rowOpen ? self.sizes.trees[rd[self.uniqueId]] : 0) * self.scale;\n                rowHeight = (rowSansTreeHeight + treeHeight);\n                if (y < rowHeight * -1) {\n                    return false;\n                }\n                if (self.attributes.showRowHeaders) {\n                    x += columnHeaderCellWidth;\n                }\n                cellHeight = rowHeight;\n                for (o = self.scrollIndexLeft; o < g; o += 1) {\n                    i = self.orders.columns[o];\n                    x += drawCell(rd, r, d)(s[i], i, o);\n                    if (x > self.width) {\n                        self.scrollIndexRight = o;\n                        self.scrollPixelRight = x;\n                        break;\n                    }\n                }\n                // cell height might have changed during drawing\n                cellHeight = rowHeight;\n                x = (self.scrollBox.scrollLeft * -1) + self.scrollPixelLeft + self.style.cellBorderWidth;\n                // don't draw a tree for the new row\n                treeGrid = self.childGrids[rd[self.uniqueId]];\n                if (r !== self.data.length && rowOpen) {\n                    treeGrid.visible = true;\n                    treeGrid.parentNode = {\n                        offsetTop: y + rowSansTreeHeight + self.canvasOffsetTop,\n                        offsetLeft: columnHeaderCellWidth - 1 + self.canvasOffsetLeft,\n                        offsetHeight: treeHeight,\n                        offsetWidth: self.width - columnHeaderCellWidth - self.style.scrollBarWidth - 1,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: self.style,\n                        nodeType: 'canvas-datagrid-tree',\n                        scrollTop: self.scrollBox.scrollTop,\n                        scrollLeft: self.scrollBox.scrollLeft,\n                        rowIndex: r\n                    };\n                    self.visibleCells.unshift({\n                        rowIndex: x,\n                        columnIndex: 0,\n                        y: treeGrid.parentNode.offsetTop,\n                        x: treeGrid.parentNode.offsetLeft,\n                        height: treeGrid.parentNode.offsetHeight,\n                        width: treeGrid.parentNode.offsetWidth,\n                        style: 'tree-grid',\n                        type: treeGrid.parentNode.nodeType\n                    });\n                    treeGrid.draw();\n                } else if (treeGrid) {\n                    treeGrid.parentNode.offsetHeight = 0;\n                    delete self.sizes.trees[rd[self.uniqueId]];\n                }\n                rowHeaders.push([rd, r, d, y, rowHeight]);\n                self.visibleRowHeights[r] = rowHeight;\n                y += cellHeight + self.style.cellBorderWidth;\n                return true;\n            }\n            function initDraw() {\n                self.visibleRows = [];\n                s = self.getVisibleSchema();\n                self.visibleCells = [];\n                self.canvasOffsetTop = self.isChildGrid ? self.parentNode.offsetTop : 0;\n                self.canvasOffsetLeft = self.isChildGrid ? self.parentNode.offsetLeft : 0;\n                h = self.height;\n                w = self.width;\n                if (!self.isChildGrid) {\n                    self.ctx.scale(window.devicePixelRatio, window.devicePixelRatio);\n                }\n            }\n            function drawBackground() {\n                radiusRect(0, 0, w, h, 0);\n                self.ctx.clip();\n                self.ctx.fillStyle = self.style.backgroundColor;\n                fillRect(0, 0, w, h);\n            }\n            function drawRows() {\n                var o, n, i, g = s.length;\n                x = -self.scrollBox.scrollLeft + self.scrollPixelLeft + self.style.cellBorderWidth;\n                if (self.attributes.snapToRow) {\n                    y = rowHeaderCellHeight + self.style.cellBorderWidth;\n                } else {\n                    y = -self.scrollBox.scrollTop + rowHeaderCellHeight + self.scrollPixelTop + self.style.cellBorderWidth;\n                }\n                for (r = self.scrollIndexTop; r < l; r += 1) {\n                    n = self.orders.rows[r];\n                    if (!drawRow(n, r)) {\n                        self.scrollIndexBottom = r;\n                        self.scrollPixelBottom = y;\n                        break;\n                    }\n                }\n                if (self.attributes.showNewRow) {\n                    if (self.attributes.showRowHeaders) {\n                        x += columnHeaderCellWidth;\n                    }\n                    rowHeight = cellHeight = self.style.cellHeight;\n                    rowOpen = false;\n                    for (o = self.scrollIndexLeft; o < g; o += 1) {\n                        i = self.orders.columns[o];\n                        x += drawCell(self.newRow, self.data.length, self.data.length)(s[i], i, o);\n                        if (x > self.width + self.scrollBox.scrollLeft) {\n                            break;\n                        }\n                    }\n                    rowHeaders.push([self.newRow, self.data.length, self.data.length, y, rowHeight]);\n                }\n            }\n            function drawMoveMarkers() {\n                if (!self.movingSelection) { return; }\n                self.ctx.lineWidth = self.style.moveOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.moveOverlayBorderColor;\n                self.ctx.setLineDash(self.style.moveOverlayBorderSegments);\n                moveBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n                self.ctx.setLineDash([]);\n            }\n            function drawReorderMarkers() {\n                if (!self.reorderObject) { return; }\n                var b = {\n                        height: self.reorderObject.height,\n                        width: self.reorderObject.width,\n                        x: self.reorderObject.x + self.reorderObject.dragOffset.x,\n                        y: self.reorderObject.y + self.reorderObject.dragOffset.y\n                    },\n                    m = {\n                        width: w,\n                        height: h,\n                        x: 0,\n                        y: 0\n                    };\n                self.ctx.fillStyle = self.style.reorderMarkerBackgroundColor;\n                self.ctx.lineWidth = self.style.reorderMarkerBorderWidth;\n                self.ctx.strokeStyle = self.style.reorderMarkerBorderColor;\n                if (self.dragMode === 'row-reorder') {\n                    b.width = w;\n                    b.x = 0;\n                    m.width = w;\n                    m.height = h;\n                    m.y = self.currentCell.y;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.rowIndex !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex - 1 !== self.reorderObject.rowIndex\n                            && self.currentCell.rowIndex > -1\n                            && self.currentCell.rowIndex < l) {\n                        addBorderLine(m, 't');\n                    }\n                } else if (self.dragMode === 'column-reorder' && self.reorderObject) {\n                    b.height = h;\n                    b.y = 0;\n                    m.height = h;\n                    m.width = self.currentCell.width;\n                    m.y = 0;\n                    m.x = self.currentCell.x;\n                    fillRect(b.x, b.y, b.width, b.height);\n                    strokeRect(b.x, b.y, b.width, b.height);\n                    self.ctx.lineWidth = self.style.reorderMarkerIndexBorderWidth;\n                    self.ctx.strokeStyle = self.style.reorderMarkerIndexBorderColor;\n                    if (self.currentCell.columnIndex !== self.reorderObject.columnIndex\n                            && self.currentCell.columnIndex > -1\n                            && self.currentCell.columnIndex < s.length) {\n                        addBorderLine(m, self.reorderTarget.sortColumnIndex > self.reorderObject.sortColumnIndex ? 'r' : 'l');\n                    }\n                }\n            }\n            function drawBorder() {\n                self.ctx.lineWidth = self.style.gridBorderWidth;\n                self.ctx.strokeStyle = self.style.gridBorderColor;\n                strokeRect(0, 0, self.width, self.height);\n            }\n            function drawSelectionBorders() {\n                self.ctx.lineWidth = self.style.selectionOverlayBorderWidth;\n                self.ctx.strokeStyle = self.style.selectionOverlayBorderColor;\n                selectionBorders.forEach(function (c) {\n                    addBorderLine(c[0], c[1]);\n                });\n            }\n            function drawSelectionHandles() {\n                if (self.mobile || self.attributes.allowMovingSelection) {\n                    self.ctx.lineWidth = self.style.selectionHandleBorderWidth;\n                    self.ctx.strokeStyle = self.style.selectionHandleBorderColor;\n                    self.ctx.fillStyle = self.style.selectionHandleColor;\n                    selectionHandles.forEach(function (c) {\n                        addselectionHandle(c[0], c[1]);\n                        var az = self.attributes.touchSelectHandleZone / 2,\n                            ax = c[0].x + (c[1] === 'tl' || c[1] === 'bl' ? 0 : c[0].width) - az,\n                            ay = c[0].y + (c[1] === 'bl' || c[1] === 'br' ? c[0].height : 0) - az;\n                        self.visibleCells.unshift({\n                            x: ax,\n                            y: ay,\n                            height: self.style.selectionHandleSize + az,\n                            width: self.style.selectionHandleSize + az,\n                            style: 'selection-handle-' + c[1]\n                        });\n                    });\n                }\n            }\n            function drawActiveCell() {\n                if (!aCell) { return; }\n                if (self.attributes.selectionMode === 'row') {\n                    if (self.activeCell && self.activeCell.rowIndex === aCell.rowIndex) {\n                        self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                        self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                        strokeRect(0, aCell.y, self.getHeaderWidth() + columnHeaderCellWidth, self.visibleRowHeights[aCell.rowIndex]);\n                    }\n                } else {\n                    self.ctx.lineWidth = self.style.activeCellOverlayBorderWidth;\n                    self.ctx.strokeStyle = self.style.activeCellOverlayBorderColor;\n                    strokeRect(aCell.x, aCell.y, aCell.width, aCell.height);\n                }\n            }\n            function drawPerfLines() {\n                if (!self.attributes.showPerformance) { return; }\n                var pw = 250,\n                    px = self.width - pw - self.style.scrollBarWidth - (self.style.scrollBarBorderWidth * 2),\n                    py = rowHeaderCellHeight,\n                    ph = 100;\n                if (scrollDebugCounters.length === 0) { scrollDebugCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (touchPPSCounters.length === 0) { touchPPSCounters = self.fillArray(0, perfWindowSize, 1, function () { return [0, 0]; }); }\n                if (entityCount.length === 0) { entityCount = self.fillArray(0, perfWindowSize, 1, 0); }\n                self.ctx.lineWidth = 0.5;\n                function dpl(name, perfArr, arrIndex, max, color, useAbs, rowIndex) {\n                    var v;\n                    drawPerfLine(pw, ph, px, py, perfArr, arrIndex, max, color, useAbs);\n                    self.ctx.fillStyle = color;\n                    fillRect(3 + px, py + 9 + (rowIndex * 11), 8, 8);\n                    self.ctx.fillStyle = '#999999';\n                    v = arrIndex !== undefined ? perfArr[0][arrIndex] : perfArr[0];\n                    fillText(name + ' ' + (isNaN(v) ? 0 : v).toFixed(3), 14 + px, py + 16 + (rowIndex * 11));\n                }\n                self.ctx.textAlign = 'left';\n                self.ctx.font = '8px sans-serif';\n                self.ctx.fillStyle = 'rgba(29, 25, 26, 1.00)';\n                fillRect(px, py, pw, ph);\n                [['Scroll Height', scrollDebugCounters, 0, self.scrollBox.scrollHeight, 'rgba(248, 33, 103, 1.00)', false],\n                    ['Scroll Width', scrollDebugCounters, 1, self.scrollBox.scrollWidth, 'rgba(66, 255, 27, 1.00)', false],\n                    ['Performance', perfCounters, undefined, 200, 'rgba(252, 255, 37, 1.00)', false],\n                    ['Entities', entityCount, undefined, 1500, 'rgba(76, 231, 239, 1.00)', false],\n                    ['TouchPPSX', touchPPSCounters, 0, 1000, 'rgba(246, 102, 24, 1.00)', true],\n                    ['TouchPPSY', touchPPSCounters, 1, 1000, 'purple', true]\n                    ].forEach(function (i, index) {\n                    i.push(index);\n                    dpl.apply(null, i);\n                });\n                self.ctx.fillStyle = 'rgba(255, 255, 255, 0.8)';\n                entityCount.pop();\n                entityCount.unshift(self.visibleCells.length);\n                scrollDebugCounters.pop();\n                scrollDebugCounters.unshift([self.scrollBox.scrollTop, self.scrollBox.scrollLeft]);\n                touchPPSCounters.pop();\n                touchPPSCounters.unshift([self.yPPS, self.xPPS]);\n            }\n            function drawDebug() {\n                var d;\n                if (self.attributes.showPerformance || self.attributes.debug) {\n                    if (perfCounters.length === 0) { perfCounters = self.fillArray(0, perfWindowSize, 1, 0); }\n                    perfCounters.pop();\n                    perfCounters.unshift(performance.now() - p);\n                }\n                if (!self.attributes.debug) { return; }\n                self.ctx.font = '14px sans-serif';\n                d = {};\n                d.perf = (perfCounters.reduce(function (a, b) {\n                    return a + b;\n                }, 0) / Math.min(drawCount, perfCounters.length)).toFixed(1);\n                d.htmlImages = Object.keys(self.htmlImageCache).length;\n                d.reorderObject = 'x: ' + (self.reorderObject || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderObject || {rowIndex: 0}).rowIndex;\n                d.reorderTarget = 'x: ' + (self.reorderTarget || {columnIndex: 0}).columnIndex + ', y: ' + (self.reorderTarget || {rowIndex: 0}).rowIndex;\n                d.scale = self.scale;\n                d.startScale = self.startScale;\n                d.scaleDelta = self.scaleDelta;\n                d.zoomDeltaStart = self.zoomDeltaStart;\n                d.touchLength = self.touchLength;\n                d.touches = 'y0: ' + (self.touchPosition || {y: 0}).y + ' y1: ' + (self.touchPosition1 || {y: 0}).y;\n                d.scrollBox = self.scrollBox.toString();\n                d.scrollIndex = 'x: ' + self.scrollIndexLeft + ', y: ' + self.scrollIndexTop;\n                d.scrollPixel = 'x: ' + self.scrollPixelLeft + ', y: ' + self.scrollPixelTop;\n                d.canvasOffset = 'x: ' + self.canvasOffsetLeft + ', y: ' + self.canvasOffsetTop;\n                d.touchDelta = 'x: ' + self.touchDelta.x + ', y: ' + self.touchDelta.y;\n                d.touchAnimateTo = 'x: ' + self.touchAnimateTo.x + ', y: ' + self.touchAnimateTo.y;\n                d.scrollAnimation = 'x: ' + self.scrollAnimation.x + ', y: ' + self.scrollAnimation.y;\n                d.touchPPS = 'x: ' + self.xPPS + ', y: ' + self.yPPS;\n                d.touchPPST = 'x: ' + self.xPPST + ', y: ' + self.yPPST;\n                d.touchDuration = self.touchDuration;\n                d.pointerLockPosition =  self.pointerLockPosition ?\n                        self.pointerLockPosition.x + ', ' + self.pointerLockPosition.y : '';\n                d.size = 'w: ' + self.width + ', h: ' + self.height;\n                d.mouse = 'x: ' + self.mouse.x + ', y: ' + self.mouse.y;\n                d.touch = !self.touchStart\n                    ? '' : 'x: ' + self.touchStart.x + ', y: ' + self.touchStart.y;\n                d.entities = self.visibleCells.length;\n                d.hasFocus = self.hasFocus;\n                d.dragMode = self.dragMode;\n                if (self.currentCell) {\n                    d.columnIndex = self.currentCell.columnIndex;\n                    d.rowIndex = self.currentCell.rowIndex;\n                    d.sortColumnIndex = self.currentCell.sortColumnIndex;\n                    d.sortRowIndex = self.currentCell.sortRowIndex;\n                    d.context = self.currentCell.context;\n                    d.dragContext = self.currentCell.dragContext;\n                    d.style = self.currentCell.style;\n                    d.type = self.currentCell.type;\n                }\n                self.ctx.textAlign = 'right';\n                self.ctx.fillStyle = 'rgba(0, 0, 0, .60)';\n                fillRect(0, 0, self.width, self.height);\n                Object.keys(d).forEach(function (key, index) {\n                    var m = key + ': ' + d[key],\n                        lh = 14;\n                    self.ctx.fillStyle = 'rgba(37, 254, 21, 1)';\n                    fillText(m, w - 20, 140 + (index * lh));\n                });\n            }\n            self.ctx.save();\n            initDraw();\n            drawBackground();\n            drawRows();\n            drawSelectionBorders();\n            drawSelectionHandles();\n            drawActiveCell();\n            drawHeaders();\n            drawReorderMarkers();\n            drawMoveMarkers();\n            drawScrollBars();\n            if (checkScrollHeight) {\n                self.resize(true);\n            }\n            drawBorder();\n            drawDebug();\n            drawPerfLines();\n            if (self.dispatchEvent('afterdraw', {})) { return; }\n            self.ctx.restore();\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/draw.js\n// module id = 3\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var wheeling;\n        function calculateCssSize(sizeString, parentSize) {\n            var p;\n            if (sizeString === 'auto' || sizeString === '') { return parentSize; }\n            if (/%/.test(sizeString)) {\n                p = parseFloat(sizeString, 10);\n                return parentSize * (p * 0.01);\n            }\n            return parseFloat(sizeString, 10);\n        }\n        self.stopPropagation = function (e) { e.stopPropagation(); };\n        /**\n         * Adds an event listener to the given event.\n         * @memberof canvasDatagrid\n         * @name addEventListener\n         * @method\n         * @param {number} ev The name of the event to subscribe to.\n         * @param {number} fn The event procedure to execute when the event is raised.\n         */\n        self.addEventListener = function (ev, fn) {\n            self.events[ev] = self.events[ev] || [];\n            self.events[ev].unshift(fn);\n        };\n        /**\n         * Removes the given listener function from the given event.  Must be an actual reference to the function that was bound.\n         * @memberof canvasDatagrid\n         * @name removeEventListener\n         * @method\n         * @param {number} ev The name of the event to unsubscribe from.\n         * @param {number} fn The event procedure to execute when the event is raised.\n         */\n        self.removeEventListener = function (ev, fn) {\n            (self.events[ev] || []).forEach(function removeEachListener(sfn, idx) {\n                if (fn === sfn) {\n                    self.events[ev].splice(idx, 1);\n                }\n            });\n        };\n        /**\n         * Fires the given event, padding an event object to the event subscribers.\n         * @memberof canvasDatagrid\n         * @name dispatchEvent\n         * @method\n         * @param {number} ev The name of the event to dispatch.\n         * @param {number} e The event object.\n         */\n        self.dispatchEvent = function (ev, e) {\n            var defaultPrevented;\n            function preventDefault() {\n                defaultPrevented = true;\n            }\n            if (!self.events[ev]) { return; }\n            self.events[ev].forEach(function dispatchEachEvent(fn) {\n                e.ctx = self.ctx;\n                e.preventDefault = preventDefault;\n                fn.apply(self.intf, [e]);\n            });\n            return defaultPrevented;\n        };\n        self.resizeDomElement = function () {\n            if (!self.parentIsCanvas) {\n                if (self.shadowRootParentElement) {\n                    // shadow dom browsers\n                    self.width = calculateCssSize(self.style.width, self.shadowRootParentElement.offsetWidth);\n                    self.height = calculateCssSize(self.style.height, self.shadowRootParentElement.offsetHeight);\n                } else {\n                    // pre shadow dom browsers\n                    self.width = self.parentDOMNode.offsetWidth;\n                    self.height = self.parentDOMNode.offsetHeight;\n                }\n                self.canvas.style.width = self.width + 'px';\n                self.canvas.style.height = self.height + 'px';\n                self.canvas.width = self.width * window.devicePixelRatio;\n                self.canvas.height = self.height * window.devicePixelRatio;\n            }\n            self.canvasOffsetLeft = self.args.canvasOffsetLeft || 0;\n            self.canvasOffsetTop = self.args.canvasOffsetTop || 0;\n        };\n        self.resize = function (drawAfterResize) {\n            var cellBorder = self.style.cellBorderWidth * 2,\n                columnHeaderCellBorder =  self.style.columnHeaderCellBorderWidth * 2,\n                scrollHeight,\n                scrollWidth,\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                ch = self.style.cellHeight,\n                // TODO: What the hell are these numbers!?  They are probably some value in the style.\n                scrollDragPositionOffsetY = 30,\n                scrollDragPositionOffsetX = 15;\n            if (self.isChildGrid) {\n                self.width = self.parentNode.offsetWidth;\n                self.height = self.parentNode.offsetHeight;\n            } else {\n                self.resizeDomElement();\n            }\n            scrollHeight = self.data.reduce(function reduceData(accumulator, row) {\n                return accumulator\n                    + (((self.sizes.rows[row[self.uniqueId]] || ch) + (self.sizes.trees[row[self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n            }, 0) || 0;\n            scrollWidth = self.getVisibleSchema().reduce(function reduceSchema(accumulator, column) {\n                if (column.hidden) { return accumulator; }\n                return accumulator + ((self.sizes.columns[column[self.uniqueId]] || column.width || self.style.columnWidth) * self.scale) + cellBorder;\n            }, 0) || 0;\n            if (self.attributes.showNewRow) {\n                scrollHeight += ch + cellBorder;\n            }\n            self.scrollBox.width = self.width - columnHeaderCellWidth;\n            self.scrollBox.height = self.height - rowHeaderCellHeight - columnHeaderCellBorder;\n            self.scrollBox.top = rowHeaderCellHeight + columnHeaderCellBorder;\n            self.scrollBox.left = columnHeaderCellWidth;\n            self.scrollBox.scrollHeight = scrollHeight + self.style.scrollBarWidth - self.scrollBox.height;\n            self.scrollBox.scrollWidth = scrollWidth + self.style.scrollBarWidth - self.scrollBox.width;\n            self.scrollBox.widthBoxRatio = ((self.scrollBox.width - scrollDragPositionOffsetX)\n                / (self.scrollBox.scrollWidth + self.scrollBox.width - scrollDragPositionOffsetX));\n            self.scrollBox.scrollBoxWidth = self.scrollBox.width\n                * self.scrollBox.widthBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.heightBoxRatio = ((self.scrollBox.height - scrollDragPositionOffsetY)\n                / (self.scrollBox.scrollHeight + (self.scrollBox.height - scrollDragPositionOffsetY)));\n            self.scrollBox.scrollBoxHeight = self.scrollBox.height\n                * self.scrollBox.heightBoxRatio\n                - self.style.scrollBarWidth;\n            self.scrollBox.scrollBoxWidth = Math.max(self.scrollBox.scrollBoxWidth, self.style.scrollBarBoxMinSize);\n            self.scrollBox.scrollBoxHeight = Math.max(self.scrollBox.scrollBoxHeight, self.style.scrollBarBoxMinSize);\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            self.resizeEditInput();\n            self.scroll(true);\n            if (drawAfterResize) {\n                self.draw(true);\n            }\n            self.dispatchEvent('resize', {});\n            return true;\n        };\n        self.scroll = function (e, dontDraw) {\n            var s = self.getVisibleSchema(),\n                cellBorder = self.style.cellBorderWidth * 2,\n                ch = self.style.cellHeight;\n            self.scrollIndexTop = 0;\n            self.scrollPixelTop = 0;\n            self.scrollIndexLeft = 0;\n            self.scrollPixelLeft = 0;\n            while (self.scrollPixelTop < self.scrollBox.scrollTop && self.scrollIndexTop < self.data.length) {\n                self.scrollPixelTop +=\n                    (((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                        + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale)\n                    + cellBorder;\n                self.scrollIndexTop += 1;\n            }\n            while (self.scrollPixelLeft < self.scrollBox.scrollLeft && self.scrollIndexLeft < s.length) {\n                self.scrollPixelLeft +=\n                    ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale)\n                    + cellBorder;\n                self.scrollIndexLeft += 1;\n            }\n            if (self.data.length > 0) {\n                self.scrollIndexLeft = Math.max(self.scrollIndexLeft - 1, 0);\n                self.scrollPixelLeft = Math.max(self.scrollPixelLeft\n                    - ((self.sizes.columns[s[self.scrollIndexLeft][self.uniqueId]] || s[self.scrollIndexLeft].width) * self.scale), 0);\n                self.scrollIndexTop = Math.max(self.scrollIndexTop - 1, 0);\n                self.scrollPixelTop = Math.max((self.scrollPixelTop\n                    - ((self.sizes.rows[self.data[self.scrollIndexTop][self.uniqueId]] || ch)\n                    + (self.sizes.trees[self.data[self.scrollIndexTop][self.uniqueId]] || 0)) * self.scale), 0);\n            }\n            self.ellipsisCache = {};\n            if (!dontDraw) {\n                self.draw(true);\n            }\n            //TODO: figure out why this has to be delayed for child grids\n            //BUG: wheeling event on 3rd level hierarchy fails to move input box\n            requestAnimationFrame(self.resizeEditInput);\n            self.dispatchEvent('scroll', {top: self.scrollBox.scrollTop, left: self.scrollBox.scrollLeft});\n        };\n        self.mousemove = function (e, overridePos) {\n            if (self.contextMenu || self.input) {\n                return;\n            }\n            self.mouse = overridePos || self.getLayerPos(e);\n            var ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                i,\n                s = self.getSchema(),\n                dragBounds,\n                sBounds,\n                x = self.mouse.x,\n                y = self.mouse.y,\n                o = self.getCellAt(x, y),\n                delta,\n                ev = {NativeEvent: e, cell: o, x: x, y: y},\n                previousCell = self.currentCell;\n            clearTimeout(self.scrollTimer);\n            if (!self.isInGrid({x: x, y: y})) {\n                self.hasFocus = false;\n            }\n            if (self.dispatchEvent('mousemove', ev)) {\n                return;\n            }\n            if (o && self.currentCell && (self.currentCell.rowIndex !== o.rowIndex\n                    || self.currentCell.columnIndex !== o.columnIndex)) {\n                self.cellBoundaryCrossed = true;\n                ev.cell = previousCell;\n                self.dispatchEvent('cellmouseout', ev);\n                ev.cell = o;\n                self.dispatchEvent('cellmouseover', ev);\n            }\n            self.currentCell = o;\n            if (!self.hasFocus) {\n                return;\n            }\n            self.hovers = {};\n            if (!self.draggingItem\n                    && o\n                    && self.scrollModes.indexOf(o.context) === -1) {\n                self.dragItem = o;\n                self.dragMode = o.dragContext;\n                self.canvas.style.cursor = o.context;\n                if (o.context === 'cell' && o.data) {\n                    self.canvas.style.cursor = 'default';\n                    self.hovers[o.data[self.uniqueId]] = [o.columnIndex];\n                }\n                if ((self.selecting || self.reorderObject)\n                        && o.context === 'cell'\n                        && o.data) {\n                    sBounds = self.getSelectionBounds();\n                    delta = {\n                        x: Math.abs(self.dragStart.x - x),\n                        y: Math.abs(self.dragStart.y - y)\n                    };\n                    if (self.dragStartObject.columnIndex !== -1 && e.shiftKey) {\n                        self.dragStartObject = {\n                            rowIndex: self.activeCell.rowIndex,\n                            columnIndex: self.activeCell.columnIndex\n                        };\n                    }\n                    dragBounds = {\n                        top: Math.min(self.dragStartObject.rowIndex, o.rowIndex),\n                        left: Math.min(self.dragStartObject.columnIndex, o.columnIndex),\n                        bottom: Math.max(self.dragStartObject.rowIndex, o.rowIndex),\n                        right: Math.max(self.dragStartObject.columnIndex, o.columnIndex)\n                    };\n                    if (self.dragStartObject.columnIndex === -1) {\n                        dragBounds.left = -1;\n                        dragBounds.right = s.length - 1;\n                        dragBounds.top = Math.min(sBounds.top, o.rowIndex);\n                        dragBounds.bottom = Math.max(sBounds.bottom, o.rowIndex);\n                    }\n                    if (self.dragStartObject.rowIndex !== o.rowIndex\n                                || self.dragStartObject.columnIndex !== o.columnIndex) {\n                        self.ignoreNextClick = true;\n                    }\n                    if (self.cellBoundaryCrossed || (delta.x === 0 && delta.y === 0) || (self.attributes.selectionMode === 'row')) {\n                        if ((self.attributes.selectionMode === 'row') || self.dragStartObject.columnIndex === -1) {\n                            self.selectRow(o.rowIndex, ctrl, null, true);\n                        } else {\n                            if (!self.dragAddToSelection && o.rowIndex !== undefined) {\n                                if (self.selections[o.rowIndex] && self.selections[o.rowIndex].indexOf(o.columnIndex) !== -1) {\n                                    self.selections[o.rowIndex].splice(self.selections[o.rowIndex].indexOf(o.columnIndex), 1);\n                                }\n                            } else {\n                                self.selections[o.rowIndex] = self.selections[o.rowIndex] || [];\n                                if (self.selections[o.rowIndex].indexOf(o.columnIndex) === -1) {\n                                    self.selections[o.rowIndex].push(o.columnIndex);\n                                }\n                            }\n                        }\n                    }\n                    if ((!self.selectionBounds || (dragBounds.top !== self.selectionBounds.top\n                            || dragBounds.left !== self.selectionBounds.left\n                            || dragBounds.bottom !== self.selectionBounds.bottom\n                            || dragBounds.right !== self.selectionBounds.right)) && !ctrl) {\n                        self.selections = [];\n                        sBounds = dragBounds;\n                        if (self.attributes.selectionMode === 'row') {\n                            for (i = sBounds.top; i <= sBounds.bottom; i += 1) {\n                                self.selectRow(i, true, null, true);\n                            }\n                        } else {\n                            self.selectArea(sBounds, true);\n                        }\n                    }\n                    self.autoScrollZone(e, x, y, ctrl);\n                }\n            }\n            self.cellBoundaryCrossed = false;\n            self.draw(true);\n        };\n        self.click = function (e, overridePos) {\n            var i,\n                selectionChanged,\n                ctrl = (e.ctrlKey || e.metaKey || self.attributes.persistantSelectionMode),\n                pos = overridePos || self.getLayerPos(e);\n            self.currentCell = self.getCellAt(pos.x, pos.y);\n            if (self.currentCell.grid !== undefined) {\n                return;\n            }\n            function checkSelectionChange() {\n                if (!selectionChanged) { return; }\n                self.dispatchEvent('selectionchanged', {\n                    selectedData: self.getSelectedData(),\n                    selections: self.selections,\n                    selectionBounds: self.selectionBounds\n                });\n            }\n            if (self.input) {\n                self.endEdit();\n            }\n            if (self.ignoreNextClick) {\n                self.ignoreNextClick = false;\n                return;\n            }\n            i = self.currentCell;\n            if (self.dispatchEvent('click', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (['rowHeaderCell', 'columnHeaderCell'].indexOf(self.currentCell.style) === -1 && !ctrl) {\n                self.setActiveCell(i.columnIndex, i.rowIndex);\n            }\n            if (self.currentCell.context === 'cell') {\n                if (self.currentCell.style === 'cornerCell') {\n                    self.selectAll();\n                    self.draw();\n                    checkSelectionChange();\n                    return;\n                }\n                if (self.currentCell.style === 'columnHeaderCell') {\n                    if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                        if (self.orderBy === i.header.name) {\n                            self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                        } else {\n                            self.orderDirection = 'asc';\n                        }\n                        self.order(i.header.name, self.orderDirection);\n                        checkSelectionChange();\n                        return;\n                    }\n                    if (self.attributes.columnHeaderClickBehavior === 'select') {\n                        self.selectColumn(i.header.index, ctrl, e.shiftKey, true);\n                        checkSelectionChange();\n                        self.draw();\n                        return;\n                    }\n                }\n                self.selections[i.rowIndex] = self.selections[i.rowIndex] || [];\n                if (((self.attributes.selectionMode === 'row') || self.currentCell.style === 'rowHeaderCell')) {\n                    if (self.currentCell.style === 'rowHeaderCell'\n                            && self.attributes.tree && pos.x > 0\n                            && pos.x - self.currentCell.x < self.style.treeArrowWidth\n                            + self.style.treeArrowMarginLeft\n                            + self.style.treeArrowMarginRight + self.style.treeArrowClickRadius\n                            && pos.y - self.currentCell.y < self.style.treeArrowHeight\n                            + self.style.treeArrowMarginTop + self.style.treeArrowClickRadius\n                            && pos.y > 0) {\n                        self.toggleTree(i.rowIndex);\n                        return;\n                    }\n                    selectionChanged = true;\n                    self.selectRow(i.rowIndex, ctrl, null, true);\n                }\n                if (e.shiftKey && !ctrl) {\n                    self.selectionBounds = self.getSelectionBounds();\n                    self.selectArea(undefined, false);\n                }\n            }\n            checkSelectionChange();\n            self.draw(true);\n        };\n        self.dragResizeColumn = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = self.resizingStartingWidth + pos.x - self.dragStart.x;\n            y = self.resizingStartingHeight + pos.y - self.dragStart.y;\n            if (x < self.style.minColumnWidth) {\n                x = self.style.minColumnWidth;\n            }\n            if (y < self.style.minRowHeight) {\n                y = self.style.minRowHeight;\n            }\n            if (self.dispatchEvent('resizecolumn', {x: x, y: y, draggingItem: self.draggingItem})) { return false; }\n            if (self.scrollBox.scrollLeft > self.scrollBox.scrollWidth - self.attributes.resizeScrollZone\n                    && self.dragMode === 'ew-resize') {\n                self.resize(true);\n                self.scrollBox.scrollLeft += x;\n            }\n            if (self.dragMode === 'ew-resize') {\n                self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] = x;\n                if (['rowHeaderCell', 'cornerCell'].indexOf(self.draggingItem.header.style) !== -1) {\n                    self.resize(true);\n                }\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.dragMode === 'ns-resize') {\n                if (self.draggingItem.rowOpen) {\n                    self.sizes.trees[self.draggingItem.data[self.uniqueId]] = y;\n                } else if (self.attributes.globalRowResize) {\n                    self.style.cellHeight = y;\n                } else {\n                    self.sizes.rows[self.draggingItem.data[self.uniqueId]] = y;\n                }\n                self.dispatchEvent('resizerow', {row: y});\n                self.resizeChildGrids();\n                return;\n            }\n            self.ellipsisCache = {};\n        };\n        self.stopDragResize = function () {\n            self.resize();\n            document.body.removeEventListener('mousemove', self.dragResizeColumn, false);\n            document.body.removeEventListener('mouseup', self.stopDragResize, false);\n            self.setStorageData();\n            self.draw(true);\n            self.ignoreNextClick = true;\n        };\n        self.scrollGrid = function (e) {\n            var pos = self.getLayerPos(e);\n            if (self.attributes.scrollPointerLock && self.pointerLockPosition\n                    && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                self.pointerLockPosition.x += e.movementX;\n                self.pointerLockPosition.y += e.movementY;\n                self.pointerLockPosition.x = Math.min(self.width - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.x));\n                self.pointerLockPosition.y = Math.min(self.height - self.style.scrollBarWidth, Math.max(0, self.pointerLockPosition.y));\n                pos = self.pointerLockPosition;\n            }\n            self.scrollMode = self.getCellAt(pos.x, pos.y).context;\n            if (self.scrollMode === 'horizontal-scroll-box' && self.scrollStartMode !== 'horizontal-scroll-box') {\n                self.scrollStartMode = 'horizontal-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.left = self.scrollBox.scrollLeft;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box' && self.scrollStartMode !== 'vertical-scroll-box') {\n                self.scrollStartMode = 'vertical-scroll-box';\n                self.dragStart = pos;\n                self.scrollStart.top = self.scrollBox.scrollTop;\n                clearTimeout(self.scrollTimer);\n                return;\n            }\n            if (self.scrollStartMode === 'vertical-scroll-box'\n                    && self.scrollMode !== 'vertical-scroll-box') {\n                self.scrollMode = 'vertical-scroll-box';\n            }\n            if (self.scrollStartMode === 'horizontal-scroll-box'\n                    && self.scrollMode !== 'horizontal-scroll-box') {\n                self.scrollMode = 'horizontal-scroll-box';\n            }\n            clearTimeout(self.scrollTimer);\n            if (self.scrollModes.indexOf(self.scrollMode) === -1) {\n                return;\n            }\n            if (self.scrollMode === 'vertical-scroll-box') {\n                self.scrollBox.scrollTop = self.scrollStart.top + ((pos.y - self.dragStart.y)\n                    / self.scrollBox.heightBoxRatio);\n            } else if (self.scrollMode === 'vertical-scroll-top') {\n                self.scrollBox.scrollTop -= (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'vertical-scroll-bottom') {\n                self.scrollBox.scrollTop += (self.page * self.style.cellHeight);\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n            if (self.scrollMode === 'horizontal-scroll-box') {\n                self.scrollBox.scrollLeft = self.scrollStart.left + ((pos.x - self.dragStart.x)\n                    / self.scrollBox.widthBoxRatio);\n            } else if (self.scrollMode === 'horizontal-scroll-right') {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            } else if (self.scrollMode === 'horizontal-scroll-left') {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                self.scrollTimer = setTimeout(self.scrollGrid, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.stopScrollGrid = function () {\n            clearTimeout(self.scrollTimer);\n            if (document.exitPointerLock) {\n                document.exitPointerLock();\n            }\n            document.body.removeEventListener('mousemove', self.scrollGrid, false);\n        };\n        self.dragReorder = function (e) {\n            var pos, x, y;\n            pos = self.getLayerPos(e);\n            x = pos.x - self.dragStart.x;\n            y = pos.y - self.dragStart.y;\n            if (!self.attributes.allowColumnReordering && self.dragMode === 'column-reorder') {\n                return;\n            }\n            if (!self.attributes.allowRowReordering && self.dragMode === 'row-reorder') {\n                return;\n            }\n            if (self.dispatchEvent('reordering', {\n                    NativeEvent: e,\n                    source: self.dragStartObject,\n                    target: self.currentCell,\n                    dragMode: self.dragMode\n                })) {\n                return;\n            }\n            if (Math.abs(x) > self.attributes.reorderDeadZone || Math.abs(y) > self.attributes.reorderDeadZone) {\n                self.reorderObject = self.draggingItem;\n                self.reorderTarget = self.currentCell;\n                self.reorderObject.dragOffset = {\n                    x: x,\n                    y: y\n                };\n                self.autoScrollZone(e, pos.x, pos.y, false);\n            }\n        };\n        self.stopDragReorder = function (e) {\n            var oIndex,\n                tIndex,\n                cr = {\n                    'row-reorder': self.orders.rows,\n                    'column-reorder': self.orders.columns\n                },\n                i = {\n                    'row-reorder': 'rowIndex',\n                    'column-reorder': 'columnIndex'\n                }[self.dragMode];\n            document.body.removeEventListener('mousemove', self.dragReorder, false);\n            document.body.removeEventListener('mouseup', self.stopDragReorder, false);\n            if (self.reorderObject\n                    && self.reorderTarget\n                    && ((self.dragMode === 'column-reorder' && self.reorderTarget.columnIndex > -1\n                        && self.reorderTarget.columnIndex < self.getVisibleSchema().length)\n                    || (self.dragMode === 'row-reorder' && self.reorderTarget.rowIndex > -1\n                        && self.reorderTarget.rowIndex < self.data.length))\n                    && self.reorderObject[i] !== self.reorderTarget[i]\n                    && !self.dispatchEvent('reorder', {\n                        NativeEvent: e,\n                        source: self.reorderObject,\n                        target: self.reorderTarget,\n                        dragMode: self.dragMode\n                    })) {\n                oIndex = cr[self.dragMode].indexOf(self.reorderObject[i]);\n                tIndex = cr[self.dragMode].indexOf(self.reorderTarget[i]);\n                self.ignoreNextClick = true;\n                cr[self.dragMode].splice(oIndex, 1);\n                cr[self.dragMode].splice(tIndex, 0, self.reorderObject[i]);\n                self.setStorageData();\n            }\n            self.reorderObject = undefined;\n            self.reorderTarget = undefined;\n            self.draw(true);\n        };\n        self.dragMove = function (e) {\n            if (self.dispatchEvent('moving', {NativeEvent: e, cell: self.currentCell})) { return; }\n            var pos = self.getLayerPos(e);\n            self.moveOffset = {\n                x: self.currentCell.columnIndex - self.dragStartObject.columnIndex,\n                y: self.currentCell.rowIndex - self.dragStartObject.rowIndex\n            };\n            if (Math.abs(pos.x) > self.attributes.reorderDeadZone || Math.abs(pos.y) > self.attributes.reorderDeadZone) {\n                setTimeout(function () {\n                    self.autoScrollZone(e, pos.x, pos.y, false);\n                }, 1);\n            }\n        };\n        self.stopDragMove = function (e) {\n            document.body.removeEventListener('mousemove', self.dragMove, false);\n            document.body.removeEventListener('mouseup', self.stopDragMove, false);\n            var b = self.getSelectionBounds();\n            if (self.dispatchEvent('endmove', {NativeEvent: e, cell: self.currentCell})) {\n                self.movingSelection = undefined;\n                self.moveOffset = undefined;\n                self.draw(true);\n                return;\n            }\n            if (self.moveOffset) {\n                self.moveTo(self.movingSelection, b.left + self.moveOffset.x, b.top + self.moveOffset.y);\n                self.moveSelection(self.moveOffset.x, self.moveOffset.y);\n            }\n            self.movingSelection = undefined;\n            self.moveOffset = undefined;\n            self.draw(true);\n        };\n        self.mousedown = function (e, overridePos) {\n            self.lastMouseDownTarget = e.target;\n            if (self.dispatchEvent('mousedown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (e.button === 2 || self.input) { return; }\n            var ctrl = (e.ctrlKey || e.metaKey),\n                move = /-move/.test(self.dragMode),\n                resize = /-resize/.test(self.dragMode);\n            self.dragStart = overridePos || self.getLayerPos(e);\n            self.scrollStart = {\n                left: self.scrollBox.scrollLeft,\n                top: self.scrollBox.scrollTop\n            };\n            self.dragStartObject = self.getCellAt(self.dragStart.x, self.dragStart.y);\n            self.dragAddToSelection = !self.dragStartObject.selected;\n            if (!ctrl && !e.shiftKey && !/(vertical|horizontal)-scroll-(bar|box)/\n                    .test(self.dragStartObject.context)\n                    && self.currentCell\n                    && !self.currentCell.isColumnHeader\n                    && !move\n                    && !resize) {\n                self.selections = [];\n            }\n            if (self.dragStartObject.isGrid) {\n                return;\n            }\n            if (self.scrollModes.indexOf(self.dragStartObject.context) !== -1) {\n                self.scrollMode = self.dragStartObject.context;\n                self.scrollStartMode = self.dragStartObject.context;\n                self.scrollGrid(e);\n                if (self.attributes.scrollPointerLock\n                        && ['horizontal-scroll-box', 'vertical-scroll-box'].indexOf(self.scrollStartMode) !== -1) {\n                    self.pointerLockPosition = {\n                        x: self.dragStart.x,\n                        y: self.dragStart.y\n                    };\n                    self.canvas.requestPointerLock();\n                }\n                document.body.addEventListener('mousemove', self.scrollGrid, false);\n                document.body.addEventListener('mouseup', self.stopScrollGrid, false);\n                self.ignoreNextClick = true;\n                return;\n            }\n            if (self.dragMode === 'cell') {\n                self.selecting = true;\n                if (self.attributes.selectionMode === 'row') {\n                    self.selectRow(self.dragStartObject.rowIndex, ctrl, null, true);\n                }\n                return self.mousemove(e);\n            }\n            if (move) {\n                self.draggingItem = self.dragItem;\n                self.movingSelection = self.selections.concat([]);\n                self.dragging = self.dragStartObject;\n                if (self.dispatchEvent('beginmove', {NativeEvent: e, cell: self.currentCell})) { return; }\n                document.body.addEventListener('mousemove', self.dragMove, false);\n                document.body.addEventListener('mouseup', self.stopDragMove, false);\n                return self.mousemove(e);\n            }\n            if (resize) {\n                self.draggingItem = self.dragItem;\n                if (self.draggingItem.rowOpen) {\n                    self.resizingStartingHeight = self.sizes.trees[self.draggingItem.data[self.uniqueId]];\n                } else {\n                    self.resizingStartingHeight = self.sizes.rows[self.draggingItem.data[self.uniqueId]] || self.style.cellHeight;\n                }\n                self.resizingStartingWidth = self.sizes.columns[self.draggingItem.header.style === 'rowHeaderCell'\n                       ? 'cornerCell' : self.draggingItem.header[self.uniqueId]] || self.draggingItem.width;\n                document.body.addEventListener('mousemove', self.dragResizeColumn, false);\n                document.body.addEventListener('mouseup', self.stopDragResize, false);\n            }\n            if (['row-reorder', 'column-reorder'].indexOf(self.dragMode) !== -1) {\n                self.draggingItem = self.dragStartObject;\n                document.body.addEventListener('mousemove', self.dragReorder, false);\n                document.body.addEventListener('mouseup', self.stopDragReorder, false);\n            }\n        };\n        self.mouseup = function (e) {\n            clearTimeout(self.scrollTimer);\n            self.cellBoundaryCrossed = true;\n            self.selecting = undefined;\n            self.draggingItem = undefined;\n            self.dragStartObject = undefined;\n            if (self.dispatchEvent('mouseup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            if (self.currentCell && self.currentCell.grid !== undefined) {\n                return;\n            }\n            if (self.contextMenu || self.input) { return; }\n            if (self.dragStart && self.isInGrid(self.dragStart)) {\n                self.controlInput.focus();\n            }\n            e.preventDefault();\n        };\n        self.keydown = function (e) {\n            var i,\n                x = self.activeCell.columnIndex,\n                y = self.activeCell.rowIndex,\n                ctrl = (e.ctrlKey || e.metaKey),\n                last = self.data.length - 1,\n                cols = self.getVisibleSchema().length - 1;\n            if (self.dispatchEvent('keydown', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            self.page = self.visibleRows.length - 3 - self.attributes.pageUpDownOverlap;\n            if (self.attributes.showNewRow) {\n                last += 1;\n            }\n            if (e.keyCode === 9) {\n                e.preventDefault();\n            }\n            // esc\n            if (e.keyCode === 27) {\n                self.selections = [];\n                self.draw(true);\n            // ctrl + a\n            } else if (ctrl && e.keyCode === 65) {\n                self.selectAll();\n            //ArrowDown\n            } else if (e.keyCode === 40) {\n                y += 1;\n            //ArrowUp\n            } else if (e.keyCode === 38) {\n                y -= 1;\n            //ArrowLeft Tab\n            } else if (e.keyCode === 37 || (e.shiftKey && e.keyCode === 9)) {\n                x -= 1;\n            //ArrowRight Tab\n            } else if (e.keyCode === 39 || (!e.shiftKey && e.keyCode === 9)) {\n                x += 1;\n            //PageUp\n            } else if (e.keyCode === 33) {\n                y -= self.page;\n                e.preventDefault();\n            //PageDown\n            } else if (e.keyCode === 34) {\n                y += self.page;\n                e.preventDefault();\n            //Home ArrowUp\n            } else if (e.keyCode === 36 || (ctrl && e.keyCode === 38)) {\n                y = 0;\n            //End ArrowDown\n            } else if (e.keyCode === 35 || (ctrl && e.keyCode === 40)) {\n                y = self.data.length - 1;\n            //ArrowRight\n            } else if (ctrl && e.keyCode === 39) {\n                x = cols;\n            //ArrowLeft\n            } else if (ctrl && e.keyCode === 37) {\n                x = 0;\n            }\n            //Enter\n            if (e.keyCode === 13) {\n                return self.beginEditAt(x, y);\n            }\n            //Space\n            if (e.keyCode === 32) {\n                self.selections = [];\n                self.selections[Math.max(y, 0)] = [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                if (self.attributes.selectionMode === 'row') {\n                    for (i = self.selectionBounds.top; i <= self.selectionBounds.bottom; i += 1) {\n                        self.selectRow(i, ctrl, null, true);\n                    }\n                } else {\n                    self.selectArea(undefined, ctrl);\n                }\n                e.preventDefault();\n                self.draw(true);\n                return;\n            }\n            if (x < 0) {\n                x = 0;\n            }\n            if (y > last) {\n                y = last;\n            }\n            if (y < 0) {\n                y = 0;\n            }\n            if (x > cols) {\n                x = cols;\n            }\n            // Arrows\n            if (e.shiftKey && [37, 38, 39, 40].indexOf(e.keyCode) !== -1) {\n                self.selections[Math.max(y, 0)] = self.selections[Math.max(y, 0)] || [];\n                self.selections[Math.max(y, 0)].push(x);\n                self.selectionBounds = self.getSelectionBounds();\n                self.selectArea(undefined, ctrl);\n                self.draw(true);\n            }\n            if (x !== self.activeCell.columnIndex || y !== self.activeCell.rowIndex) {\n                self.scrollIntoView(x !== self.activeCell.columnIndex ? x : undefined, y !== self.activeCell.rowIndex ? y : undefined);\n                self.setActiveCell(x, y);\n                if (!e.shiftKey && self.attributes.selectionFollowsActiveCell) {\n                    if (!ctrl) {\n                        self.selections = [];\n                    }\n                    self.selections[y] = self.selections[y] || [];\n                    self.selections[y].push(x);\n                    self.dispatchEvent('selectionchanged', {\n                        selectedData: self.getSelectedData(),\n                        selections: self.selections,\n                        selectionBounds: self.selectionBounds\n                    });\n                }\n                self.draw(true);\n            }\n        };\n        self.keyup = function (e) {\n            if (self.dispatchEvent('keyup', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n        };\n        self.keypress = function (e) {\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.dispatchEvent('keypress', {NativeEvent: e, cell: self.currentCell})) { return; }\n        };\n        self.dblclick = function (e) {\n            if (self.dispatchEvent('dblclick', {NativeEvent: e, cell: self.currentCell})) { return; }\n            if (!self.hasFocus) {\n                return;\n            }\n            if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'columnHeaderCell') {\n                self.fitColumnToValues(self.currentCell.header.name);\n            } else if (self.currentCell.context === 'ew-resize'\n                    && self.currentCell.style === 'cornerCell') {\n                self.autosize();\n            } else if (['cell', 'activeCell'].indexOf(self.currentCell.style) !== -1) {\n                self.beginEditAt(self.currentCell.columnIndex, self.currentCell.rowIndex);\n            }\n        };\n        self.scrollWheel = function (e) {\n            var l,\n                t,\n                deltaX = e.deltaX === undefined ? e.NativeEvent.deltaX : e.deltaX,\n                deltaY = e.deltaY === undefined ? e.NativeEvent.deltaY : e.deltaY,\n                deltaMode = e.deltaMode === undefined ? e.NativeEvent.deltaMode : e.deltaMode;\n            if (wheeling) {\n                return;\n            }\n            if (self.dispatchEvent('wheel', {NativeEvent: e})) {\n                return;\n            }\n            e = e.NativeEvent || e;\n            self.touchHaltAnimation = true;\n            l = self.scrollBox.scrollLeft;\n            t = self.scrollBox.scrollTop;\n            if (self.hasFocus) {\n                //BUG Issue 42: https://github.com/TonyGermaneri/canvas-datagrid/issues/42\n                //https://stackoverflow.com/questions/20110224/what-is-the-height-of-a-line-in-a-wheel-event-deltamode-dom-delta-line\n                if (deltaMode === 1) {\n                    // line mode = 17 pixels per line\n                    deltaY = deltaY * 17;\n                }\n                if ((self.scrollBox.scrollTop < self.scrollBox.scrollHeight && deltaY > 0)\n                        || (self.scrollBox.scrollLeft < self.scrollBox.scrollWidth && deltaX > 0)\n                        || (self.scrollBox.scrollTop > 0 && deltaY < 0)\n                        || (self.scrollBox.scrollLeft > 0 && deltaX < 0)) {\n                    e.preventDefault(e);\n                }\n                wheeling = setTimeout(function () {\n                    wheeling = undefined;\n                    self.scrollBox.scrollTo(deltaX + l, deltaY + t);\n                }, 1);\n            }\n        };\n        self.pasteItem = function (clipData, x, y, mimeType) {\n            var l, s = self.getVisibleSchema(), yi = y - 1, sel = [];\n            function normalizeRowData(importingRow, existingRow, offsetX, schema, mimeType, rowIndex) {\n                var r = existingRow;\n                if (!Array.isArray(importingRow) && importingRow !== null && typeof importingRow === 'object') {\n                    importingRow = Object.keys(importingRow).map(function (colKey) {\n                        return importingRow[colKey];\n                    });\n                }\n                if (/^text\\/html/.test(mimeType)) {\n                    importingRow = importingRow.substring(4, importingRow.length - 5).split('</td><td>');\n                }\n                if (typeof importingRow === 'string') {\n                    importingRow = [importingRow];\n                }\n                sel[rowIndex] = [];\n                importingRow.forEach(function (cellData, colIndex) {\n                    var cName = schema[colIndex + offsetX].name;\n                    if (importingRow[colIndex] === undefined || importingRow[colIndex] === null) {\n                        r[cName] = existingRow[cName];\n                        return;\n                    }\n                    sel[rowIndex].push(colIndex + offsetX);\n                    r[cName] = importingRow[colIndex];\n                });\n                return r;\n            }\n            if (/^text\\/html/.test(mimeType)) {\n                if (!/^(<meta[^>]+>)?<table>/.test(clipData.substring(0, 29))) {\n                    console.warn('Unrecognized HTML format.  HTML must be a simple table, e.g.: <table><tr><td>data</td></tr></table>.  Data with the mime type text/html not in this format will not be imported as row data.');\n                    return;\n                }\n                // strip table beginning and ending off, then split at rows\n                clipData = clipData.substring(clipData.indexOf('<table><tr>') + 11, clipData.length - 13).split('</tr><tr>');\n            } else {\n                clipData = clipData.split('\\n');\n            }\n            l = clipData.length;\n            clipData.forEach(function (rowData) {\n                yi += 1;\n                self.data[yi] = normalizeRowData(rowData, self.data[yi], x, s, mimeType, yi);\n            });\n            self.selections = sel;\n            return l;\n        };\n        self.paste = function (e) {\n            var d;\n            function getItem(dti) {\n                var type = dti.type;\n                dti.getAsString(function (s) {\n                    self.pasteItem(s, self.activeCell.columnIndex, self.activeCell.rowIndex, type);\n                    self.draw();\n                });\n            }\n            d = Array.prototype.filter.call(e.clipboardData.items, function (dti) {\n                return dti.type === 'text/html';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/csv';\n            })[0] || Array.prototype.filter(function (dti) {\n                return dti.type === 'text/plain';\n            })[0];\n            if (!d) {\n                console.warn('Cannot find supported clipboard data type.  Supported types are text/html, text/csv, text/plain.');\n                return;\n            }\n            getItem(d);\n        };\n        self.cut = function (e) {\n            self.copy(e);\n            self.forEachSelectedCell(function (data, index, colName) {\n                data[index][colName] = '';\n            });\n        };\n        self.copy = function (e) {\n            if (self.dispatchEvent('copy', {NativeEvent: e})) { return; }\n            if (!self.hasFocus || !e.clipboardData) { return; }\n            var t,\n                d,\n                rows = [],\n                trows = [],\n                sData = self.getSelectedData();\n            function fCopyCell(d) {\n                d = d === null || d === undefined ? '' : d;\n                return '<td>' + (typeof d === 'string' ? d.replace(/</g, '&lt;').replace(/>/g, '&gt;') : d) + '</td>';\n            }\n            if (sData.length > 0) {\n                sData.forEach(function (row) {\n                    if (row) {\n                        // r = array for HTML, rt = array for plain text\n                        var r = [],\n                            rt = [];\n                        Object.keys(row).forEach(function (key) {\n                            // escape strings\n                            if (row[key] !== null\n                                    && row[key] !== false\n                                    && row[key] !== undefined\n                                    && row[key].replace) {\n                                rt.push('\"' + row[key].replace(/\"/g, '\"\"') + '\"');\n                                r.push(fCopyCell(row[key]));\n                                return;\n                            }\n                            rt.push(row[key]);\n                            r.push(fCopyCell(row[key]));\n                        });\n                        rows.push(r.join(''));\n                        trows.push(rt.join(','));\n                    }\n                });\n                d = '<table><tr>' + rows.join('</tr><tr>') + '</tr></table>';\n                t = trows.join('\\n');\n                e.clipboardData.setData('text/html', d);\n                e.clipboardData.setData('text/plain', t);\n                e.clipboardData.setData('text/csv', t);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/events.js\n// module id = 4\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true, plusplus: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var touchTimerMs = 50,\n            touchScrollTimeout;\n        self.scrollAnimation = {};\n        self.touchDelta = {};\n        self.touchAnimateTo = {};\n        self.animationFrames = 0;\n        self.getTouchPos = function (e, touchIndex) {\n            var t = touchIndex ? e.touches[touchIndex] : e.touches[0],\n                rect = self.canvas.getBoundingClientRect(),\n                pos;\n            if (!t) { return; }\n            pos = {\n                x: t.clientX - rect.left,\n                y: t.clientY - rect.top\n            };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        // shamelessly stolen from from https://gist.github.com/gre/1650294\n        self.easingFunctions = {\n            linear: function (t) { return t; },\n            easeInQuad: function (t) { return t * t; },\n            easeOutQuad: function (t) { return t * (2 - t); },\n            easeInOutQuad: function (t) { return t < 0.5 ? 2 * t * t : -1 + (4 - 2 * t) * t; },\n            easeInCubic: function (t) { return t * t * t; },\n            easeOutCubic: function (t) { return (--t) * t * t + 1; },\n            easeInOutCubic: function (t) { return t < 0.5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1; },\n            easeInQuart: function (t) { return t * t * t * t; },\n            easeOutQuart: function (t) { return 1 - (--t) * t * t * t; },\n            easeInOutQuart: function (t) { return t < 0.5 ? 8 * t  * t  * t * t : 1 - 8 * (--t) * t * t * t; },\n            easeInQuint: function (t) { return t * t * t * t * t; },\n            easeOutQuint: function (t) { return 1 + (--t) * t *  t * t * t; },\n            easeInOutQuint: function (t) { return t < 0.5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t; }\n        };\n        self.easing = function (t, b, c, d) {\n            return c * self.easingFunctions[self.attributes.touchEasingMethod](t / d) + b;\n        };\n        self.calculatePPSTimed = function () {\n            self.xPPST = -((self.touchDelta.x - self.touchSigmaTimed.x) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.yPPST = -((self.touchDelta.y - self.touchSigmaTimed.y) / (self.touchDelta.t - self.touchSigmaTimed.t));\n            self.touchSigmaTimed = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.calculatePPS = function () {\n            self.xPPS = -((self.touchDelta.x - self.touchSigma.x) / (self.touchDelta.t - self.touchSigma.t));\n            self.yPPS = -((self.touchDelta.y - self.touchSigma.y) / (self.touchDelta.t - self.touchSigma.t));\n            self.touchSigma = {\n                x: self.touchDelta.x,\n                y: self.touchDelta.y,\n                t: performance.now()\n            };\n        };\n        self.touchEndAnimation = function () {\n            if (!self.canvas || !self.scrollBox.scrollTo) { return requestAnimationFrame(self.touchEndAnimation); }\n            var n = performance.now(),\n                d = self.attributes.touchReleaseAnimationDurationMs,\n                t;\n            t = n - self.touchDelta.t;\n            self.animationFrames += 1;\n            self.scrollAnimation.x = self.easing(t, self.touchDelta.scrollLeft, self.touchAnimateTo.x, d);\n            self.scrollAnimation.y = self.easing(t, self.touchDelta.scrollTop, self.touchAnimateTo.y, d);\n            if (t > d || (self.scrollAnimation.y === self.scrollBox.scrollTop\n                    && self.scrollAnimation.x === self.scrollBox.scrollLeft) || self.stopAnimation) {\n                return;\n            }\n            self.scrollBox.scrollTo(self.scrollAnimation.x, self.scrollAnimation.y);\n            requestAnimationFrame(self.touchEndAnimation);\n        };\n        self.touchEditCell = function (cell) {\n            self.beginEditAt(cell.columnIndex, cell.rowIndex);\n        };\n        self.touchCell = function (e) {\n            return function () {\n                clearInterval(self.calculatePPSTimer);\n                var i, pos = self.getTouchPos(e);\n                if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone) {\n                    i = self.getCellAt(pos.x, pos.y);\n                    if (!i) { return; }\n                    if (self.touchingCell && self.touchingCell.rowIndex === i.rowIndex\n                            && self.touchingCell.columnIndex === i.columnIndex) {\n                        self.touchEditCell(i);\n                        return;\n                    }\n                    if (self.input) {\n                        self.endEdit();\n                    }\n                    self.touchingCell = i;\n                    self.selectArea({\n                        top: i.rowIndex,\n                        bottom: i.rowIndex,\n                        left: i.columnIndex,\n                        right: i.columnIndex\n                    });\n                    self.draw(true);\n                }\n            };\n        };\n        self.touchstart = function (e) {\n            if (self.dispatchEvent('touchstart', {NativeEvent: e})) { return; }\n            self.disposeContextMenu();\n            clearInterval(self.calculatePPSTimer);\n            clearTimeout(self.touchContextTimeout);\n            self.touchStartEvent = e;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            self.stopPropagation(e);\n            e.preventDefault();\n            if (e.changedTouches[0]) {\n                self.touchStart = self.getTouchPos(e);\n            }\n            if (e.touches.length === 1 && e.changedTouches[0] && !self.zoomAltered) {\n                self.touchLength = 1;\n                self.touchStart = self.touchStart || self.touchStart1;\n                self.touchScrollStart = {\n                    x: self.scrollBox.scrollLeft,\n                    y: self.scrollBox.scrollTop,\n                    t: performance.now()\n                };\n                self.touchDelta = {\n                    x: 0,\n                    y: 0,\n                    scrollLeft: self.scrollBox.scrollLeft,\n                    scrollTop: self.scrollBox.scrollTop,\n                    t: self.touchScrollStart.t\n                };\n                self.touchSigma = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchSigmaTimed = {\n                    x: self.touchDelta.x,\n                    y: self.touchDelta.y,\n                    t: self.touchDelta.t\n                };\n                self.touchContextTimeout = setTimeout(function () {\n                    self.contextmenuEvent(e, self.touchStart);\n                }, self.attributes.touchContextMenuTimeMs);\n                self.calculatePPSTimer = setInterval(self.calculatePPSTimed, touchTimerMs);\n                self.startingCell = self.getCellAt(self.touchStart.x, self.touchStart.y, true);\n                if (self.startingCell && (self.startingCell.isGrid || ['tree', 'inherit'].indexOf(self.startingCell.context) !== -1)) {\n                    self.hasFocus = false;\n                    return;\n                }\n                self.hasFocus = true;\n                if (self.startingCell.isHeader) {\n                    if (self.startingCell.isRowHeader) {\n                        self.selectArea({\n                            top: self.startingCell.rowIndex,\n                            bottom: self.startingCell.rowIndex,\n                            left: 0,\n                            right: self.getSchema().length - 1,\n                        });\n                        self.draw(true);\n                    } else if (self.startingCell.isColumnHeader) {\n                        if (self.attributes.columnHeaderClickBehavior === 'sort') {\n                            if (self.orderBy === self.startingCell.header.name) {\n                                self.orderDirection = self.orderDirection === 'asc' ? 'desc' : 'asc';\n                            } else {\n                                self.orderDirection = 'asc';\n                            }\n                            self.order(self.startingCell.header.name, self.orderDirection);\n                        }\n                        if (self.attributes.columnHeaderClickBehavior === 'select') {\n                            self.selectArea({\n                                top: 0,\n                                bottom: self.data.length - 1,\n                                left: self.startingCell.columnIndex,\n                                right: self.startingCell.columnIndex,\n                            });\n                            self.draw(true);\n                        }\n                    }\n                    self.touchEndEvents(e);\n                    return;\n                }\n            }\n            if (self.zoomAltered) { return; }\n            document.body.addEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.addEventListener('touchend', self.touchend, false);\n            document.body.addEventListener('touchcancel', self.touchcancel, false);\n            self.draw(true);\n        };\n        self.touchSelect = function (cell, handleType) {\n            if (cell.rowIndex === undefined || cell.columnIndex === undefined) { return; }\n            self.touchSelecting = true;\n            var bounds = self.getSelectionBounds();\n            if (handleType === 'selection-handle-bl'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex <= bounds.right) {\n                bounds.bottom = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tl'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex <= bounds.right) {\n                bounds.top = cell.rowIndex;\n                bounds.left = cell.columnIndex;\n            } else if (handleType === 'selection-handle-tr'\n                    && cell.rowIndex <= bounds.bottom\n                    && cell.columnIndex >= bounds.left) {\n                bounds.top = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            } else if (handleType === 'selection-handle-br'\n                    && cell.rowIndex >= bounds.top\n                    && cell.columnIndex >= bounds.left) {\n                bounds.bottom = cell.rowIndex;\n                bounds.right = cell.columnIndex;\n            }\n            if (self.attributes.selectionMode === 'row' || cell.rowIndex === -1) {\n                bounds.left = 0;\n                bounds.right = self.getSchema().length - 1;\n            } else {\n                bounds.left = Math.max(0, bounds.left);\n            }\n            self.selectArea(bounds);\n            self.draw(true);\n        };\n        self.touchmove = function (e) {\n            var rh, cw, rScrollZone, lScrollZone, bScrollZone, tScrollZone, sbw, t1, t2;\n            if (self.dispatchEvent('touchmove', {NativeEvent: e})) { return; }\n            clearTimeout(touchScrollTimeout);\n            if (e.changedTouches[0]) {\n                self.touchPosition = self.getTouchPos(e);\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = self.getTouchPos(e, 1);\n            }\n            if (Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) > self.attributes.touchDeadZone) {\n                clearTimeout(self.touchContextTimeout);\n            }\n            if (e.touches.length === 2 && self.touchPosition && self.touchPosition1) {\n                t1 = self.touchPosition.y;\n                t2 = self.touchPosition1.y;\n                if (!self.zoomDeltaStart) {\n                    self.zoomDeltaStart = Math.abs(t1 - t2);\n                    self.startScale = self.scale;\n                }\n                self.touchLength = 2;\n                self.scaleDelta = self.zoomDeltaStart - Math.abs(t1 - t2);\n                self.scale = self.startScale - (self.scaleDelta * self.attributes.touchZoomSensitivity);\n                self.scale = Math.min(Math.max(self.scale, self.attributes.touchZoomMin), self.attributes.touchZoomMax);\n                self.zoomAltered = true;\n                self.resize(true);\n                self.resizeChildGrids();\n                return;\n            }\n            if (self.zoomAltered) { return; }\n            self.touchLength = 1;\n            self.touchPosition = self.touchPosition || self.touchPosition1;\n            rh = self.getRowHeaderCellHeight();\n            cw = self.getColumnHeaderCellWidth();\n            rScrollZone = self.width - self.style.scrollBarWidth - self.touchPosition.x < self.attributes.selectionScrollZone;\n            lScrollZone = self.touchPosition.x - cw < self.attributes.selectionScrollZone;\n            bScrollZone = self.height - self.style.scrollBarWidth - self.touchPosition.y < self.attributes.selectionScrollZone;\n            tScrollZone = self.touchPosition.y - rh < self.attributes.selectionScrollZone;\n            sbw = self.style.scrollBarWidth;\n            function touchScroll() {\n                var x = self.scrollBox.scrollLeft,\n                    y = self.scrollBox.scrollTop;\n                x += (rScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y += (bScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                y -= (tScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                x -= (lScrollZone ? self.attributes.selectionScrollIncrement : 0);\n                self.scrollBox.scrollTo(x, y);\n                touchScrollTimeout = setTimeout(touchScroll, self.attributes.scrollRepeatRate);\n            }\n            e.stopPropagation();\n            self.touchDelta = {\n                x: self.touchPosition.x - self.touchStart.x,\n                y: self.touchPosition.y - self.touchStart.y,\n                scrollLeft: self.scrollBox.scrollLeft,\n                scrollTop: self.scrollBox.scrollTop,\n                t: performance.now()\n            };\n            self.currentCell = self.getCellAt(self.touchPosition.x, self.touchPosition.y);\n            self.calculatePPS();\n            self.touchDuration = performance.now() - self.touchScrollStart.t;\n            self.stopAnimation = true;\n            self.animationFrames = 0;\n            if (self.touchSelecting && (rScrollZone || lScrollZone || tScrollZone || bScrollZone)) {\n                touchScroll();\n            }\n            if (/vertical-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollTop = self.scrollBox.scrollHeight\n                    * ((self.touchPosition.y - rh - sbw) / (self.scrollBox.height - sbw - rh));\n                return;\n            }\n            if (/horizontal-scroll-/.test(self.startingCell.style)) {\n                self.scrollBox.scrollLeft = self.scrollBox.scrollWidth\n                    * ((self.touchPosition.x - cw - sbw) / (self.scrollBox.width - sbw - cw));\n                return;\n            }\n            if (/selection-handle-/.test(self.startingCell.style)) {\n                self.touchSelect(self.currentCell, self.startingCell.style);\n                return;\n            }\n            self.scrollBox.scrollTo(self.touchScrollStart.x - self.touchDelta.x,\n                self.touchScrollStart.y - self.touchDelta.y);\n            self.draw(true);\n        };\n        self.touchEndEvents = function (e) {\n            self.zoomDeltaStart = undefined;\n            self.touchSelecting = false;\n            clearInterval(self.touchScrollTimeout);\n            clearInterval(self.touchContextTimeout);\n            clearInterval(self.calculatePPSTimer);\n            e.stopPropagation();\n            document.body.removeEventListener('touchmove', self.touchmove, {passive: false});\n            document.body.removeEventListener('touchend', self.touchend, false);\n            document.body.removeEventListener('touchcancel', self.touchcancel, false);\n        };\n        self.touchend = function (e) {\n            if (self.dispatchEvent('touchend', {NativeEvent: e})) { return; }\n            self.zoomDeltaStart = undefined;\n            if (e.changedTouches[0]) {\n                self.touchPosition = undefined;\n            }\n            if (e.changedTouches[1]) {\n                self.touchPosition1 = undefined;\n            }\n            if (self.zoomAltered) {\n                if (e.touches.length === 0) {\n                    self.zoomAltered = false;\n                }\n                return;\n            }\n            var dz = Math.abs(self.touchDelta.x) + Math.abs(self.touchDelta.y) < self.attributes.touchDeadZone;\n            if (isNaN(self.xPPS)) {\n                self.xPPS = 0;\n            }\n            if (isNaN(self.yPPS)) {\n                self.yPPS = 0;\n            }\n            if (isNaN(self.xPPST)) {\n                self.xPPST = 0;\n            }\n            if (isNaN(self.yPPST)) {\n                self.yPPST = 0;\n            }\n            self.touchAnimateTo.x = self.xPPS * self.attributes.touchReleaseAcceleration;\n            self.touchAnimateTo.y = self.yPPS * self.attributes.touchReleaseAcceleration;\n            self.calculatePPSTimed();\n            if (dz && !self.contextMenu) {\n                self.touchCell(self.touchStartEvent)();\n            } else if (self.animationFrames === 0\n                    && (Math.abs(self.xPPST) > self.attributes.scrollAnimationPPSThreshold\n                        || Math.abs(self.yPPST) > self.attributes.scrollAnimationPPSThreshold)\n                    && !/-scroll-/.test(self.startingCell.style)\n                    && !dz) {\n                self.stopAnimation = false;\n                self.touchEndAnimation();\n            }\n            self.touchEndEvents(e);\n        };\n        self.touchcancel = function (e) {\n            if (self.dispatchEvent('touchcancel', {NativeEvent: e})) { return; }\n            self.touchEndEvents(e);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/touch.js\n// module id = 5\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals HTMLElement: false, Reflect: false, define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self, ctor) {\n        self.scale = 1;\n        self.orders = {\n            rows: [],\n            columns: []\n        };\n        self.visibleRowHeights = [];\n        self.hasFocus = false;\n        self.activeCell = {\n            columnIndex: 0,\n            rowIndex: 0\n        };\n        self.storageName = 'canvasDataGrid';\n        self.invalidSearchExpClass = 'canvas-datagrid-invalid-search-regExp';\n        self.localStyleLibraryStorageKey = 'canvas-datagrid-user-style-library';\n        self.uniqueId = '_canvasDataGridUniqueId';\n        self.orderBy = self.uniqueId;\n        self.orderDirection = 'asc';\n        self.columnFilters = {};\n        self.filters = {};\n        self.frozenRows = [];\n        self.ellipsisCache = {};\n        self.scrollBox = {};\n        self.visibleRows = [];\n        self.sizes = {\n            rows: {},\n            columns: {},\n            trees: {}\n        };\n        self.currentFilter = function () {\n            return true;\n        };\n        self.selections = [];\n        self.hovers = {};\n        self.attributes = {};\n        self.style = {};\n        self.formatters = {};\n        self.sorters = {};\n        self.schemaHashes = {};\n        self.events = {};\n        self.uId = 0;\n        self.changes = [];\n        self.scrollIndexTop = 0;\n        self.scrollPixelTop = 0;\n        self.scrollIndexLeft = 0;\n        self.scrollPixelLeft = 0;\n        self.childGrids = {};\n        self.openChildren = {};\n        self.scrollModes = [\n            'vertical-scroll-box',\n            'vertical-scroll-top',\n            'vertical-scroll-bottom',\n            'horizontal-scroll-box',\n            'horizontal-scroll-right',\n            'horizontal-scroll-left'\n        ];\n        self.componentL1Events = {};\n        self.eventNames = ['afterdraw', 'afterrendercell', 'attributechanged', 'beforebeginedit',\n            'beforecreatecellgrid', 'beforedraw', 'beforeendedit', 'beforerendercell', 'beforerendercellgrid',\n            'beginedit', 'cellmouseout', 'cellmouseover', 'click', 'collapsetree', 'contextmenu', 'copy',\n            'datachanged', 'dblclick', 'endedit', 'expandtree', 'formatcellvalue', 'keydown', 'keypress',\n            'keyup', 'mousedown', 'mousemove', 'mouseup', 'newrow', 'ordercolumn', 'rendercell', 'rendercellgrid',\n            'renderorderbyarrow', 'rendertext', 'rendertreearrow', 'reorder', 'reordering', 'resize',\n            'resizecolumn', 'resizerow', 'schemachanged', 'scroll', 'selectionchanged', 'stylechanged',\n            'touchcancel', 'touchend', 'touchmove', 'touchstart', 'wheel'];\n        self.mouse = { x: 0, y: 0};\n        self.getSelectedData = function (expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    d[index][s[col].name] = self.data[index][s[col].name];\n                });\n            });\n            return d;\n        };\n        self.fillArray = function (low, high, step, def) {\n            step = step || 1;\n            var i = [], x;\n            for (x = low; x <= high; x += step) {\n                i[x] = def === undefined ? x : (typeof def === 'function' ? def(x) : def);\n            }\n            return i;\n        };\n        self.getRowHeaderCellHeight = function () {\n            if (!self.attributes.showColumnHeaders) { return 0; }\n            return (self.sizes.rows[-1] || self.style.columnHeaderCellHeight) * self.scale;\n        };\n        self.getColumnHeaderCellWidth = function () {\n            if (!self.attributes.showRowHeaders) { return 0; }\n            return (self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth) * self.scale;\n        };\n        self.setStorageData = function () {\n            if (!self.attributes.saveAppearance) { return; }\n            localStorage.setItem(self.storageName + '-' + self.attributes.name, JSON.stringify({\n                sizes: {\n                    rows: self.sizes.rows,\n                    columns: self.sizes.columns\n                },\n                orders: {\n                    rows: self.orders.rows,\n                    columns: self.orders.columns\n                },\n                orderBy: self.orderBy,\n                orderDirection: self.orderDirection\n            }));\n        };\n        self.getSchema = function () {\n            return self.schema || self.tempSchema;\n        };\n        self.createColumnOrders = function () {\n            var s = self.getSchema();\n            self.orders.columns = self.fillArray(0, s.length - 1);\n        };\n        self.createRowOrders = function () {\n            self.orders.rows = self.fillArray(0, self.data.length - 1);\n        };\n        self.getVisibleSchema = function () {\n            return self.getSchema().filter(function (col) { return !col.hidden; });\n        };\n        self.applyDefaultValue = function (row, header) {\n            var d = header.defaultValue || '';\n            if (typeof d === 'function') {\n                d = d.apply(self.intf, [header]);\n            }\n            row[header.name] = d;\n        };\n        self.createNewRowData = function () {\n            self.newRow = {};\n            self.newRow[self.uniqueId] = self.uId;\n            self.uId += 1;\n            self.getSchema().forEach(function forEachHeader(header) {\n                self.applyDefaultValue(self.newRow, header);\n            });\n        };\n        self.getSchemaNameHash = function (key) {\n            var n = 0;\n            while (self.schemaHashes[key]) {\n                n += 1;\n                key = key + n;\n            }\n            return key;\n        };\n        self.filter = function (type) {\n            var f = self.filters[type];\n            if (!f && type !== undefined) {\n                console.warn('Cannot find filter for type %s, falling back to substring match.', type);\n                f = self.filters.string;\n            }\n            return f;\n        };\n        self.getBestGuessDataType = function (columnName) {\n            var t, x, l = self.data.length;\n            for (x = 0; x < l; x += 1) {\n                if ([null, undefined].indexOf(self.data[x][columnName]) !== -1) {\n                    t = typeof self.data[x];\n                    return t === 'object' ? 'string' : t;\n                }\n            }\n            return 'string';\n        };\n        self.drawChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].draw();\n            });\n        };\n        self.resizeChildGrids = function () {\n            Object.keys(self.childGrids).forEach(function (gridKey) {\n                self.childGrids[gridKey].resize();\n            });\n        };\n        self.autoScrollZone = function (e, x, y, ctrl) {\n            var setTimer,\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth(),\n                rowHeaderCellHeight = self.getRowHeaderCellHeight();\n            if (x > self.width - self.attributes.selectionScrollZone && x < self.width) {\n                self.scrollBox.scrollLeft += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y > self.height - self.attributes.selectionScrollZone && y < self.height) {\n                self.scrollBox.scrollTop += self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (x - self.attributes.selectionScrollZone - columnHeaderCellWidth < 0) {\n                self.scrollBox.scrollLeft -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (y - self.attributes.selectionScrollZone - rowHeaderCellHeight < 0) {\n                self.scrollBox.scrollTop -= self.attributes.selectionScrollIncrement;\n                setTimer = true;\n            }\n            if (setTimer && !ctrl && self.currentCell && self.currentCell.columnIndex !== -1) {\n                self.scrollTimer = setTimeout(self.mousemove, self.attributes.scrollRepeatRate, e);\n            }\n        };\n        self.refreshFromOrigialData = function () {\n            self.data = self.originalData.filter(function (row) {\n                return true;\n            });\n        };\n        self.validateColumn = function (c, s) {\n            if (!c.name) {\n                throw new Error('A column must contain at least a name.');\n            }\n            if (s.filter(function (i) { return i.name === c.name; }).length > 0) {\n                throw new Error('A column with the name '\n                    + c.name + ' already exists and cannot be added again.');\n            }\n            return true;\n        };\n        self.setDefaults = function (obj1, obj2, key, def) {\n            obj1[key] = obj2[key] === undefined ? def : obj2[key];\n        };\n        self.setAttributes = function () {\n            self.defaults.attributes.forEach(function eachAttribute(i) {\n                self.setDefaults(self.attributes, self.args, i[0], i[1]);\n            });\n        };\n        self.setStyle = function () {\n            self.defaults.styles.forEach(function eachStyle(i) {\n                self.setDefaults(self.style, self.args.style || {}, i[0], i[1]);\n            });\n        };\n        self.autosize = function (colName) {\n            self.getVisibleSchema().forEach(function (col) {\n                if (col.name === colName || colName === undefined) {\n                    self.fitColumnToValues(col.name);\n                }\n            });\n            self.fitColumnToValues('cornerCell');\n        };\n        self.dispose = function () {\n            if (!self.isChildGrid && self.canvas && self.canvas.parentNode) {\n                self.canvas.parentNode.removeChild(self.canvas);\n            }\n            self.eventParent.removeEventListener('mouseup', self.mouseup, false);\n            self.eventParent.removeEventListener('mousedown', self.mousedown, false);\n            self.eventParent.removeEventListener('dblclick', self.dblclick, false);\n            self.eventParent.removeEventListener('click', self.click, false);\n            self.eventParent.removeEventListener('mousemove', self.mousemove);\n            self.eventParent.removeEventListener('wheel', self.scrollWheel, false);\n            self.canvas.removeEventListener('contextmenu', self.contextmenu, false);\n            self.canvas.removeEventListener('copy', self.copy);\n            self.controlInput.removeEventListener('keypress', self.keypress, false);\n            self.controlInput.removeEventListener('keyup', self.keyup, false);\n            self.controlInput.removeEventListener('keydown', self.keydown, false);\n            window.removeEventListener('resize', self.resize);\n            if (self.observer && self.observer.disconnect) {\n                self.observer.disconnect();\n            }\n        };\n        self.tryLoadStoredOrders = function () {\n            var s;\n            if (self.storedSettings\n                    && typeof self.storedSettings.orders === 'object'\n                    && self.storedSettings.orders !== null) {\n                if (self.storedSettings.orders.rows.length >= self.data.length) {\n                    self.orders.rows = self.storedSettings.orders.rows;\n                }\n                s = self.getSchema();\n                if (self.storedSettings.orders.columns.length === s.length) {\n                    self.orders.columns = self.storedSettings.orders.columns;\n                }\n                self.orderBy = self.storedSettings.orderBy === undefined\n                    ? self.uniqueId : self.storedSettings.orderBy;\n                self.orderDirection = self.storedSettings.orderDirection === undefined\n                    ? self.uniqueId : self.storedSettings.orderDirection;\n                if (self.orderBy !== self.uniqueId && self.getHeaderByName(self.orderBy) && self.orderDirection) {\n                    self.order(self.orderBy, self.orderDirection);\n                }\n            }\n        };\n        self.getFontName = function (fontStyle) {\n            return fontStyle.replace(/\\d+\\.?\\d*px/, '');\n        };\n        self.getFontHeight = function (fontStyle) {\n            return parseFloat(fontStyle, 10);\n        };\n        self.parseStyleValue = function (key) {\n            if (/Font/.test(key)) {\n                self.style[key + 'Height'] = self.getFontHeight(self.style[key]);\n                self.style[key + 'Name'] = self.getFontName(self.style[key]);\n                return;\n            }\n            if (key === 'moveOverlayBorderSegments') {\n                self.style[key] = self.style[key].split(',')\n                    .map(function (i) { return parseInt(i, 10); });\n            }\n        };\n        self.initProp = function (propName) {\n            if (!self.args[propName]) { return; }\n            Object.keys(self.args[propName]).forEach(function (key) {\n                self[propName][key] = self.args[propName][key];\n            });\n        };\n        self.init = function () {\n            if (self.initialized) { return; }\n            var publicStyleKeyIntf = {};\n            self.setAttributes();\n            self.setStyle();\n            self.initScrollBox();\n            self.setDom();\n            self.type = 'canvas-datagrid';\n            self.initialized = true;\n            self.ie = /Trident/.test(window.navigator.userAgent);\n            self.edge = /Edge/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.moz = /Gecko/.test(window.navigator.userAgent);\n            self.webKit = /WebKit/.test(window.navigator.userAgent);\n            self.mobile = /Mobile/i.test(window.navigator.userAgent);\n            self.cursorGrab = 'grab';\n            self.cursorGrabing = 'grabbing';\n            self.cursorGrab = self.webKit ? '-webkit-grab' : self.cursorGrab;\n            self.cursorGrabing = self.moz ? '-webkit-grabbing' : self.cursorGrabbing;\n            self.pointerLockPosition = {x: 0, y: 0};\n            Object.keys(self.style).forEach(self.parseStyleValue);\n            self.intf.moveSelection = self.moveSelection;\n            self.intf.moveTo = self.moveTo;\n            self.intf.type = self.type;\n            self.intf.addEventListener = self.addEventListener;\n            self.intf.removeEventListener = self.removeEventListener;\n            self.intf.dispatchEvent = self.dispatchEvent;\n            /**\n             * Releases grid resources and removes grid elements.\n             * @memberof canvasDatagrid\n             * @name dispose\n             * @method\n             */\n            self.intf.dispose = self.dispose;\n            /**\n             * Appends the grid to another element later.  Not implemented.\n             * @memberof canvasDatagrid\n             * @name appendTo\n             * @method\n             * @param {number} el The element to append the grid to.\n             */\n            self.intf.appendTo = self.appendTo;\n            self.intf.filters = self.filters;\n            self.intf.sorters = self.sorters;\n            self.intf.autosize = self.autosize;\n            self.intf.beginEditAt = self.beginEditAt;\n            self.intf.endEdit = self.endEdit;\n            self.intf.setActiveCell = self.setActiveCell;\n            self.intf.forEachSelectedCell = self.forEachSelectedCell;\n            self.intf.scrollIntoView = self.scrollIntoView;\n            self.intf.clearChangeLog = self.clearChangeLog;\n            self.intf.gotoCell = self.gotoCell;\n            self.intf.gotoRow = self.gotoRow;\n            self.intf.findColumnScrollLeft = self.findColumnScrollLeft;\n            self.intf.findRowScrollTop = self.findRowScrollTop;\n            self.intf.fitColumnToValues = self.fitColumnToValues;\n            self.intf.findColumnMaxTextLength = self.findColumnMaxTextLength;\n            self.intf.disposeContextMenu = self.disposeContextMenu;\n            self.intf.getCellAt = self.getCellAt;\n            self.intf.isCellVisible = self.isCellVisible;\n            self.intf.order = self.order;\n            self.intf.draw = self.draw;\n            self.intf.selectArea = self.selectArea;\n            self.intf.clipElement = self.clipElement;\n            self.intf.getSchemaFromData = self.getSchemaFromData;\n            self.intf.setFilter = self.setFilter;\n            self.intf.selectRow = self.selectRow;\n            self.intf.parentGrid = self.parentGrid;\n            self.intf.toggleTree = self.toggleTree;\n            self.intf.expandTree = self.expandTree;\n            self.intf.collapseTree = self.collapseTree;\n            self.intf.canvas = self.canvas;\n            self.intf.context = self.ctx;\n            self.intf.insertRow = self.insertRow;\n            self.intf.deleteRow = self.deleteRow;\n            self.intf.addRow = self.addRow;\n            self.intf.insertColumn = self.insertColumn;\n            self.intf.deleteColumn = self.deleteColumn;\n            self.intf.addColumn = self.addColumn;\n            self.intf.getClippingRect = self.getClippingRect;\n            self.intf.setRowHeight = self.setRowHeight;\n            self.intf.setColumnWidth = self.setColumnWidth;\n            self.intf.resetColumnWidths = self.resetColumnWidths;\n            self.intf.resetRowHeights = self.resetRowHeights;\n            self.intf.resize = self.resize;\n            self.intf.selectColumn = self.selectColumn;\n            self.intf.selectRow = self.selectRow;\n            self.intf.selectAll = self.selectAll;\n            self.intf.selectNone = self.selectNone;\n            self.intf.drawChildGrids = self.drawChildGrids;\n            self.intf.assertPxColor = self.assertPxColor;\n            self.intf.clearPxColorAssertions = self.clearPxColorAssertions;\n            self.intf.integerToAlpha = self.integerToAlpha;\n            self.intf.copy = self.copy;\n            Object.keys(self.style).forEach(function (key) {\n                // unless this line is here, Object.keys() will not work on <instance>.style\n                publicStyleKeyIntf[key] = undefined;\n                Object.defineProperty(publicStyleKeyIntf, key, {\n                    get: function () {\n                        return self.style[key];\n                    },\n                    set: function (value) {\n                        self.parseStyleValue(value);\n                        self.style[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: key, value: value});\n                    }\n                });\n            });\n            Object.defineProperty(self.intf, 'shadowRoot', {\n                get: function () {\n                    return self.shadowRoot;\n                }\n            });\n            Object.defineProperty(self.intf, 'activeCell', {\n                get: function () {\n                    return self.activeCell;\n                }\n            });\n            Object.defineProperty(self.intf, 'hasFocus', {\n                get: function () {\n                    return self.hasFocus;\n                }\n            });\n            if (!self.args.component) {\n                Object.defineProperty(self.intf, 'style', {\n                    get: function () {\n                        return publicStyleKeyIntf;\n                    },\n                    set: function (value) {\n                        Object.keys(value).forEach(function (key) {\n                            self.parseStyleValue(value);\n                            self.style[key] = value[key];\n                        });\n                        self.draw(true);\n                        self.dispatchEvent('stylechanged', {name: 'style', value: value});\n                    }\n                });\n            }\n            Object.defineProperty(self.intf, 'attributes', { value: {}});\n            Object.keys(self.attributes).forEach(function (key) {\n                Object.defineProperty(self.intf.attributes, key, {\n                    get: function () {\n                        return self.attributes[key];\n                    },\n                    set: function (value) {\n                        self.attributes[key] = value;\n                        self.draw(true);\n                        self.dispatchEvent('attributechanged', {name: key, value: value[key]});\n                    }\n                });\n            });\n            self.filters.string = function (value, filterFor) {\n                value = String(value);\n                var filterRegExp,\n                    regEnd = /\\/(i|g|m)*$/,\n                    pattern = regEnd.exec(filterFor),\n                    flags = pattern ? pattern[0].substring(1) : '',\n                    flagLength = flags.length;\n                self.invalidFilterRegEx = undefined;\n                if (filterFor.substring(0, 1) === '/' && pattern) {\n                    try {\n                        filterRegExp = new RegExp(filterFor.substring(1, filterFor.length - (flagLength + 1)), flags);\n                    } catch (e) {\n                        self.invalidFilterRegEx = e;\n                        return;\n                    }\n                    return filterRegExp.test(value);\n                }\n                return value.toString ? value.toString().toLocaleUpperCase()\n                    .indexOf(filterFor.toLocaleUpperCase()) !== -1 : false;\n            };\n            self.filters.number = function (value, filterFor) {\n                if (!filterFor) { return true; }\n                return value === filterFor;\n            };\n            if (self.attributes.name && self.attributes.saveAppearance) {\n                self.storedSettings = localStorage.getItem(self.storageName + '-' + self.attributes.name);\n                if (self.storedSettings) {\n                    try {\n                        self.storedSettings = JSON.parse(self.storedSettings);\n                    } catch (e) {\n                        console.warn('could not read settings from localStore', e);\n                        self.storedSettings = undefined;\n                    }\n                }\n                if (self.storedSettings) {\n                    if (typeof self.storedSettings.sizes === 'object'\n                            && self.storedSettings.sizes !== null) {\n                        self.sizes.rows = self.storedSettings.sizes.rows;\n                        self.sizes.columns = self.storedSettings.sizes.columns;\n                        ['trees', 'columns', 'rows'].forEach(function (i) {\n                            if (!self.sizes[i]) {\n                                self.sizes[i] = {};\n                            }\n                        });\n                    }\n                }\n            }\n            ['formatters', 'filters', 'sorters'].forEach(self.initProp);\n            if (self.args.data) {\n                self.intf.data = self.args.data;\n            }\n            if (!self.data) {\n                self.intf.data = [];\n            }\n            if (self.args.schema) {\n                self.intf.schema = self.args.schema;\n            }\n            if (self.isChildGrid) {\n                requestAnimationFrame(function () { self.resize(true); });\n            } else {\n                self.resize(true);\n            }\n            return self;\n        };\n        /**\n         * Removes focus from the grid.\n         * @memberof canvasDatagrid\n         * @name blur\n         * @method\n         */\n        self.intf.blur = function (e) {\n            self.hasFocus = false;\n        };\n        /**\n         * Focuses on the grid.\n         * @memberof canvasDatagrid\n         * @name focus\n         * @method\n         */\n        self.intf.focus = function () {\n            self.hasFocus = true;\n            self.controlInput.focus();\n        };\n        Object.defineProperty(self.intf, 'height', {\n            get: function () {\n                return self.parentNode.height;\n            },\n            set: function (value) {\n                self.parentNode.height = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'width', {\n            get: function () {\n                return self.parentNode.width;\n            },\n            set: function (value) {\n                self.parentNode.width = value;\n                self.resize(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRowHeights', {\n            get: function () {\n                return self.visibleRowHeights;\n            }\n        });\n        Object.defineProperty(self.intf, 'openChildren', {\n            get: function () {\n                return self.openChildren;\n            }\n        });\n        Object.defineProperty(self.intf, 'childGrids', {\n            get: function () {\n                return Object.keys(self.childGrids).map(function (gridId) {\n                    return self.childGrids[gridId];\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'isChildGrid', {\n            get: function () {\n                return self.isChildGrid;\n            }\n        });\n        Object.defineProperty(self.intf, 'parentNode', {\n            get: function () {\n                return self.parentNode;\n            },\n            set: function (value) {\n                if (!self.isChildGrid) {\n                    throw new TypeError('Cannot set property parentNode which has only a getter');\n                }\n                self.parentNode = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetParent', {\n            get: function () {\n                return self.parentNode;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetLeft', {\n            get: function () {\n                return self.parentNode.offsetLeft;\n            }\n        });\n        Object.defineProperty(self.intf, 'offsetTop', {\n            get: function () {\n                return self.parentNode.offsetTop;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollHeight', {\n            get: function () {\n                return self.scrollBox.scrollHeight;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollWidth', {\n            get: function () {\n                return self.scrollBox.scrollWidth;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollTop', {\n            get: function () {\n                return self.scrollBox.scrollTop;\n            },\n            set: function (value) {\n                self.scrollBox.scrollTop = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollLeft', {\n            get: function () {\n                return self.scrollBox.scrollLeft;\n            },\n            set: function (value) {\n                self.scrollBox.scrollLeft = value;\n            }\n        });\n        Object.defineProperty(self.intf, 'sizes', {\n            get: function () {\n                return self.sizes;\n            }\n        });\n        Object.defineProperty(self.intf, 'input', {\n            get: function () {\n                return self.input;\n            }\n        });\n        Object.defineProperty(self.intf, 'controlInput', {\n            get: function () {\n                return self.controlInput;\n            }\n        });\n        Object.defineProperty(self.intf, 'currentCell', {\n            get: function () {\n                return self.currentCell;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleCells', {\n            get: function () {\n                return self.visibleCells;\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleRows', {\n            get: function () {\n                return self.visibleRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'selections', {\n            get: function () {\n                return self.selections;\n            }\n        });\n        Object.defineProperty(self.intf, 'dragMode', {\n            get: function () {\n                return self.dragMode;\n            }\n        });\n        Object.defineProperty(self.intf, 'changes', {\n            get: function () {\n                return self.changes;\n            }\n        });\n        self.intf.formatters = self.formatters;\n        self.normalizeDataset = function (data, callback) {\n            var i, d, max, syncFnInvoked;\n            if (data === null || data === '' || data === undefined) {\n                return callback([]);\n            }\n            if (typeof data === 'string'\n                    || typeof data === 'number'\n                    || typeof data === 'boolean') {\n                data = [{'0': data}];\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if ((!Array.isArray(data[0]) && typeof data[0] === 'object' && data[0] !== null)\n                            || (Array.isArray(data) && data.length === 0)) {\n                return callback(data);\n            }\n            if (typeof data === 'function') {\n                i = data.apply(self.intf, [function (d) {\n                    if (syncFnInvoked) {\n                        console.warn('Detected a callback to the data setter function after the same function already returned a value synchronously.');\n                    }\n                    self.normalizeDataset(d, callback);\n                }]);\n                if (i) {\n                    syncFnInvoked = true;\n                    self.normalizeDataset(i, callback);\n                }\n                return;\n            }\n            if (!Array.isArray(data) && typeof data === 'object') {\n                data = [data];\n            }\n            if (Array.isArray(data)) {\n                if (!Array.isArray(data[0])) {\n                    //array of something?  throw it all into 1 row!\n                    data = [data];\n                }\n                // find the longest length\n                max = 0;\n                d = [];\n                data.forEach(function (row) {\n                    max = Math.max(max, row.length);\n                });\n                // map against length indexes\n                data.forEach(function (row, index) {\n                    var x;\n                    d[index] = {};\n                    for (x = 0; x < max; x += 1) {\n                        d[index][x] = row[x];\n                    }\n                });\n                return callback(d);\n            }\n            throw new Error('Unsupported data type.  Must be an array of arrays or an array of objects, function or string.');\n        };\n        self.eventNames.forEach(function (eventName) {\n            Object.defineProperty(self.intf, 'on' + eventName, {\n                get: function () {\n                    return self.componentL1Events[eventName];\n                },\n                set: function (value) {\n                    self.events[eventName] = [];\n                    self.componentL1Events[eventName] = value;\n                    if (!value) { return; }\n                    self.addEventListener(eventName, value);\n                }\n            });\n        });\n        /**\n         * Array of frozen rows. (Not Implemented)\n         * @memberof canvasDatagrid\n         * @readonly\n         * @property frozenRows\n         */\n        Object.defineProperty(self.intf, 'frozenRows', {\n            get: function () {\n                return self.frozenRows;\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollIndexRect', {\n            get: function () {\n                return {\n                    top: self.scrollIndexTop,\n                    right: self.scrollIndexRight,\n                    bottom: self.scrollIndexBottom,\n                    left: self.scrollIndexLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'scrollPixelRect', {\n            get: function () {\n                return {\n                    top: self.scrollPixelTop,\n                    right: self.scrollPixelRight,\n                    bottom: self.scrollPixelBottom,\n                    left: self.scrollPixelLeft\n                };\n            }\n        });\n        Object.defineProperty(self.intf, 'selectionBounds', {\n            get: function () {\n                return self.getSelectionBounds();\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedRows', {\n            get: function () {\n                return self.getSelectedData(true);\n            }\n        });\n        Object.defineProperty(self.intf, 'selectedCells', {\n            get: function () {\n                return self.getSelectedData();\n            }\n        });\n        Object.defineProperty(self.intf, 'visibleSchema', {\n            get: function () {\n                return self.getVisibleSchema().map(function eachDataRow(col) {\n                    return col;\n                });\n            }\n        });\n        Object.defineProperty(self.intf, 'ctx', {\n            get: function () {\n                return self.ctx;\n            }\n        });\n        Object.defineProperty(self.intf, 'schema', {\n            get: function schemaGetter() {\n                return self.getSchema();\n            },\n            set: function schemaSetter(value) {\n                if (!Array.isArray(value) || typeof value[0] !== 'object') {\n                    throw new Error('Schema must be an array of objects.');\n                }\n                if (value[0].name === undefined) {\n                    throw new Error('Expected schema to contain an object with at least a name property.');\n                }\n                self.schema = value.map(function eachSchemaColumn(column, index) {\n                    column.width = column.width || self.style.columnWidth;\n                    column[self.uniqueId] = self.getSchemaNameHash(column.name);\n                    column.filter = column.filter || self.filter(column.type);\n                    column.type = column.type || 'string';\n                    column.index = index;\n                    column.columnIndex = index;\n                    column.rowIndex = -1;\n                    return column;\n                });\n                self.tempSchema = undefined;\n                self.createNewRowData();\n                self.createColumnOrders();\n                self.tryLoadStoredOrders();\n                self.resize(true);\n                self.dispatchEvent('schemachanged', {schema: self.schema});\n            }\n        });\n        Object.defineProperty(self.intf, 'data', {\n            get: function dataGetter() {\n                return self.data.map(function (row) {\n                    delete row[self.uniqueId];\n                    return row;\n                });\n            },\n            set: function dataSetter(value) {\n                self.normalizeDataset(value, function (d) {\n                    self.originalData = d.map(function eachDataRow(row) {\n                        row[self.uniqueId] = self.uId;\n                        self.uId += 1;\n                        return row;\n                    });\n                    self.changes = [];\n                    //TODO apply filter to incoming dataset\n                    self.data = self.originalData;\n                    if (!self.schema) {\n                        self.tempSchema = self.getSchemaFromData();\n                    }\n                    if (!self.schema && self.data.length === 0) {\n                        self.tempSchema = [{name: ''}];\n                        self.tempSchema[0][self.uniqueId] = self.getSchemaNameHash('');\n                    }\n                    if (self.tempSchema && !self.schema) {\n                        self.createColumnOrders();\n                        self.tryLoadStoredOrders();\n                        self.dispatchEvent('schemachanged', {schema: self.tempSchema});\n                    }\n                    self.createNewRowData();\n                    if (self.attributes.autoResizeColumns && self.data.length > 0\n                            && self.storedSettings === undefined) {\n                        self.autosize();\n                    }\n                    self.fitColumnToValues('cornerCell', true);\n                    if (!self.resize() || !self.isChildGrid) { self.draw(true); }\n                    self.createRowOrders();\n                    self.tryLoadStoredOrders();\n                    self.dispatchEvent('datachanged', {data: self.data});\n                });\n            }\n        });\n        self.initScrollBox = function () {\n            var sHeight = 0,\n                sWidth = 0,\n                scrollTop = 0,\n                scrollLeft = 0,\n                scrollHeight = 0,\n                scrollWidth = 0,\n                scrollBoxHeight = 20,\n                scrollBoxWidth = 20;\n            function setScrollTop(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollTop value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollHeight) {\n                    value = scrollHeight;\n                }\n                if (scrollHeight < 0) {\n                    value = 0;\n                }\n                scrollTop = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            function setScrollLeft(value, preventScrollEvent) {\n                if (isNaN(value)) {\n                    throw new Error('ScrollLeft value must be a number');\n                }\n                if (value < 0) {\n                    value = 0;\n                }\n                if (value > scrollWidth) {\n                    value = scrollWidth;\n                }\n                if (scrollWidth < 0) {\n                    value = 0;\n                }\n                scrollLeft = value;\n                if (!preventScrollEvent) {\n                    self.scroll();\n                }\n            }\n            self.scrollBox.toString = function () {\n                return '{\"width\": ' + scrollWidth\n                    + ', \"height\": ' + scrollHeight\n                    + ', \"left\": ' + scrollLeft\n                    + ', \"top\": ' + scrollTop + '}';\n            };\n            self.scrollBox.scrollTo = function (x, y, supressDrawEvent) {\n                setScrollLeft(x, true);\n                setScrollTop(y, supressDrawEvent);\n            };\n            Object.defineProperty(self.scrollBox, 'scrollBoxHeight', {\n                get: function () {\n                    return scrollBoxHeight;\n                },\n                set: function (value) {\n                    scrollBoxHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollBoxWidth', {\n                get: function () {\n                    return scrollBoxWidth;\n                },\n                set: function (value) {\n                    scrollBoxWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'height', {\n                get: function () {\n                    return sHeight;\n                },\n                set: function (value) {\n                    if (scrollHeight < value) {\n                        scrollTop = 0;\n                    }\n                    sHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'width', {\n                get: function () {\n                    return sWidth;\n                },\n                set: function (value) {\n                    sWidth = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollTop', {\n                get: function () {\n                    return scrollTop;\n                },\n                set: setScrollTop\n            });\n            Object.defineProperty(self.scrollBox, 'scrollLeft', {\n                get: function () {\n                    return scrollLeft;\n                },\n                set: setScrollLeft\n            });\n            Object.defineProperty(self.scrollBox, 'scrollHeight', {\n                get: function () {\n                    return scrollHeight;\n                },\n                set: function (value) {\n                    if (scrollTop > value) {\n                        scrollTop = Math.max(value, 0);\n                    }\n                    if (scrollHeight < sHeight) {\n                        scrollTop = 0;\n                    }\n                    scrollHeight = value;\n                }\n            });\n            Object.defineProperty(self.scrollBox, 'scrollWidth', {\n                get: function () {\n                    return scrollWidth;\n                },\n                set: function (value) {\n                    if (scrollLeft > value) {\n                        scrollLeft = Math.max(value, 0);\n                    }\n                    scrollWidth = value;\n                }\n            });\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/intf.js\n// module id = 6\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false, Event: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        var zIndexTop = 9000, hoverScrollTimeout, autoCompleteContext;\n        function applyContextItemStyle(contextItemContainer) {\n            self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item' + (self.mobile ? '-mobile' : ''));\n            contextItemContainer.addEventListener('mouseover', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n            });\n            contextItemContainer.addEventListener('mouseout', function () {\n                self.createInlineStyle(contextItemContainer, 'canvas-datagrid-context-menu-item');\n            });\n        }\n        function createContextMenu(ev, pos, items, parentContextMenu) {\n            var container = document.createElement('div'),\n                upArrow = document.createElement('div'),\n                downArrow = document.createElement('div'),\n                children = [],\n                selectedIndex = -1,\n                intf = {},\n                rect;\n            if (!Array.isArray(items)) { throw new Error('createContextMenu expects an array.'); }\n            function createItems() {\n                items.forEach(function (item) {\n                    var contextItemContainer = document.createElement('div'),\n                        childMenuArrow;\n                    function removeChildContext(e) {\n                        if (e.relatedTarget === container\n                                || item.contextMenu.container === e.relatedTarget\n                                || childMenuArrow === e.relatedTarget\n                                || (contextItemContainer === e.relatedTarget)\n                                || item.contextMenu.container.contains(e.relatedTarget)\n                                ) { return; }\n                        item.contextMenu.dispose();\n                        children.splice(children.indexOf(item.contextMenu), 1);\n                        item.contextMenu = undefined;\n                        contextItemContainer.removeEventListener('mouseout', removeChildContext);\n                        container.removeEventListener('mouseout', removeChildContext);\n                        contextItemContainer.setAttribute('contextOpen', '0');\n                        contextItemContainer.setAttribute('opening', '0');\n                    }\n                    function contextAddCallback(items) {\n                        // check yet again if the user hasn't moved off\n                        if (contextItemContainer.getAttribute('opening') !== '1' ||\n                                contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        var cPos = contextItemContainer.getBoundingClientRect();\n                        cPos = {\n                            left: cPos.left + self.style.childContextMenuMarginLeft + container.offsetWidth,\n                            top: cPos.top + self.style.childContextMenuMarginTop,\n                            bottom: cPos.bottom,\n                            right: cPos.right\n                        };\n                        item.contextMenu = createContextMenu(ev, cPos, items, intf);\n                        contextItemContainer.setAttribute('contextOpen', '1');\n                        contextItemContainer.addEventListener('mouseout', removeChildContext);\n                        container.addEventListener('mouseout', removeChildContext);\n                        children.push(item.contextMenu);\n                    }\n                    function createChildContext() {\n                        var i;\n                        if (contextItemContainer.getAttribute('contextOpen') === '1') {\n                            return;\n                        }\n                        contextItemContainer.setAttribute('opening', '1');\n                        if (typeof item.items === 'function') {\n                            i  = item.items.apply(intf, [function (items) {\n                                contextAddCallback(items);\n                            }]);\n                            if (i !== undefined && Array.isArray(i)) {\n                                contextAddCallback(i);\n                            }\n                            return;\n                        }\n                        contextAddCallback(item.items);\n                    }\n                    function addItem(item) {\n                        function addContent(content) {\n                            if (content === null) { return; }\n                            if (typeof content === 'function') {\n                                return addContent(content(ev));\n                            }\n                            if (typeof content === 'object') {\n                                contextItemContainer.appendChild(content);\n                                return;\n                            }\n                            applyContextItemStyle(contextItemContainer);\n                            contextItemContainer.innerHTML = content;\n                            return;\n                        }\n                        addContent(item.title);\n                        item.contextItemContainer = contextItemContainer;\n                        if ((item.items && item.items.length > 0) || typeof item.items === 'function') {\n                            childMenuArrow = document.createElement('div');\n                            self.createInlineStyle(childMenuArrow, 'canvas-datagrid-context-child-arrow');\n                            childMenuArrow.innerHTML = self.style.childContextMenuArrowHTML;\n                            contextItemContainer.appendChild(childMenuArrow);\n                            contextItemContainer.addEventListener('mouseover', createChildContext);\n                            contextItemContainer.addEventListener('mouseout', function () {\n                                contextItemContainer.setAttribute('opening', '0');\n                            });\n                        }\n                        if (item.click) {\n                            contextItemContainer.addEventListener('click', function (ev) {\n                                item.click.apply(self, [ev]);\n                            });\n                        }\n                    }\n                    addItem(item);\n                    container.appendChild(contextItemContainer);\n                });\n            }\n            function clickIndex(idx) {\n                items[idx].contextItemContainer.dispatchEvent(new Event('click'));\n            }\n            function checkArrowVisibility() {\n                if (container.scrollTop > 0) {\n                    self.parentDOMNode.appendChild(upArrow);\n                } else if (upArrow.parentNode) {\n                    upArrow.parentNode.removeChild(upArrow);\n                }\n                if (container.scrollTop >= container.scrollHeight - container.offsetHeight && downArrow.parentNode) {\n                    downArrow.parentNode.removeChild(downArrow);\n                } else if (container.scrollHeight - container.offsetHeight > 0\n                        && !(container.scrollTop >= container.scrollHeight - container.offsetHeight)) {\n                    self.parentDOMNode.appendChild(downArrow);\n                }\n            }\n            function startHoverScroll(type) {\n                return function t() {\n                    var a = self.attributes.contextHoverScrollAmount;\n                    if (type === 'up' && container.scrollTop === 0) { return; }\n                    if (type === 'down' && container.scrollTop === container.scrollHeight) { return; }\n                    container.scrollTop += (type === 'up' ? -a : a);\n                    hoverScrollTimeout = setTimeout(t, self.attributes.contextHoverScrollRateMs, type);\n                };\n            }\n            function endHoverScroll(type) {\n                return function () {\n                    clearTimeout(hoverScrollTimeout);\n                };\n            }\n            function init() {\n                var loc = {},\n                    s = self.scrollOffset(self.canvas);\n                createItems();\n                self.createInlineStyle(container, 'canvas-datagrid-context-menu' + (self.mobile ? '-mobile' : ''));\n                loc.x = pos.left - s.left;\n                loc.y = pos.top - s.top;\n                loc.height = 0;\n                zIndexTop += 1;\n                container.style.position = 'absolute';\n                upArrow.style.color = self.style.contextMenuArrowColor;\n                downArrow.style.color = self.style.contextMenuArrowColor;\n                [upArrow, downArrow].forEach(function (el) {\n                    el.style.textAlign = 'center';\n                    el.style.position = 'absolute';\n                    el.style.zIndex = zIndexTop + 1;\n                });\n                container.style.zIndex = zIndexTop;\n                if (parentContextMenu && parentContextMenu.inputDropdown) {\n                    container.style.maxHeight = window.innerHeight - loc.y - self.style.autocompleteBottomMargin + 'px';\n                    container.style.minWidth = pos.width + 'px';\n                    loc.y += pos.height;\n                }\n                if (self.mobile) {\n                    container.style.width = pos.width + 'px';\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                container.addEventListener('scroll', checkArrowVisibility);\n                container.addEventListener('wheel', function (e) {\n                    if (self.hasFocus) {\n                        container.scrollTop += e.deltaY;\n                        container.scrollLeft += e.deltaX;\n                    }\n                    checkArrowVisibility();\n                });\n                upArrow.innerHTML = self.style.contextMenuArrowUpHTML;\n                downArrow.innerHTML = self.style.contextMenuArrowDownHTML;\n                container.appendChild(upArrow);\n                document.body.appendChild(downArrow);\n                document.body.appendChild(container);\n                rect = container.getBoundingClientRect();\n                if (rect.bottom > window.innerHeight && !(parentContextMenu && parentContextMenu.inputDropdown)) {\n                    loc.y = window.innerHeight - container.offsetHeight;\n                    if (loc.y < 0) { loc.y = 0; }\n                    if (container.offsetHeight > window.innerHeight) {\n                        container.style.height = window.innerHeight - self.style.contextMenuWindowMargin + 'px';\n                    }\n                }\n                if (rect.right > window.innerWidth) {\n                    if (parentContextMenu) {\n                        loc.x = parentContextMenu.container.offsetLeft - container.offsetWidth;\n                    } else {\n                        loc.x = window.innerWidth - container.offsetWidth;\n                    }\n                }\n                container.style.left = loc.x + 'px';\n                container.style.top = loc.y + 'px';\n                rect = container.getBoundingClientRect();\n                upArrow.style.top = rect.top + 'px';\n                downArrow.style.top = rect.top + rect.height - downArrow.offsetHeight + 'px';\n                upArrow.style.left = rect.left + 'px';\n                downArrow.style.left = rect.left + 'px';\n                downArrow.style.width = container.offsetWidth + 'px';\n                upArrow.style.width = container.offsetWidth + 'px';\n                downArrow.addEventListener('mouseover', startHoverScroll('down'));\n                downArrow.addEventListener('mouseout', endHoverScroll('down'));\n                upArrow.addEventListener('mouseover', startHoverScroll('up'));\n                upArrow.addEventListener('mouseout', endHoverScroll('up'));\n                checkArrowVisibility();\n            }\n            intf.parentGrid = self.intf;\n            intf.parentContextMenu = parentContextMenu;\n            intf.container = container;\n            init();\n            intf.clickIndex = clickIndex;\n            intf.rect = rect;\n            intf.items = items;\n            intf.upArrow = upArrow;\n            intf.downArrow = downArrow;\n            intf.dispose = function () {\n                clearTimeout(hoverScrollTimeout);\n                children.forEach(function (c) {\n                    c.dispose();\n                });\n                [downArrow, upArrow, container].forEach(function (el) {\n                    if (el.parentNode) { el.parentNode.removeChild(el); }\n                });\n            };\n            Object.defineProperty(intf, 'selectedIndex', {\n                get: function () {\n                    return selectedIndex;\n                },\n                set: function (value) {\n                    if (typeof value !== 'number' || isNaN(value || !isFinite(value))) {\n                        throw new Error('Context menu selected index must be a sane number.');\n                    }\n                    selectedIndex = value;\n                    if (selectedIndex > items.length - 1) {\n                        selectedIndex = items.length - 1;\n                    }\n                    if (selectedIndex < 0) {\n                        selectedIndex = 0;\n                    }\n                    items.forEach(function (item, index) {\n                        if (index === selectedIndex) {\n                            return self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item:hover');\n                        }\n                        self.createInlineStyle(item.contextItemContainer, 'canvas-datagrid-context-menu-item');\n                    });\n                }\n            });\n            return intf;\n        }\n        function createFilterContextMenuItems(e) {\n            var filterContainer = document.createElement('div'),\n                filterLabel = document.createElement('div'),\n                filterAutoCompleteButton = document.createElement('button'),\n                filterInput = document.createElement('input'),\n                n = e.cell && e.cell.header ? e.cell.header.title || e.cell.header.name : '',\n                autoCompleteItems,\n                iRect;\n            function checkRegExpErrorState() {\n                filterInput.style.background = self.style.contextFilterInputBackground;\n                filterInput.style.color = self.style.contextFilterInputColor;\n                if (self.invalidFilterRegEx) {\n                    filterInput.style.background = self.style.contextFilterInvalidRegExpBackground;\n                    filterInput.style.color = self.style.contextFilterInvalidRegExpColor;\n                }\n            }\n            function fillAutoComplete() {\n                autoCompleteItems = {};\n                self.data.filter(function (d, i) { return i < self.attributes.maxAutoCompleteItems; }).forEach(function (row) {\n                    var value = row[e.cell.header.name];\n                    if (autoCompleteItems[value]) { return; }\n                    autoCompleteItems[value] = {\n                        title: self.formatters[e.cell.header.type || 'string']({ cell: { value: value }}),\n                        click: function (e) {\n                            filterInput.value = value;\n                            e.stopPropagation();\n                            filterInput.dispatchEvent(new Event('keyup'));\n                            self.disposeAutocomplete();\n                            return;\n                        }\n                    };\n                });\n                autoCompleteItems = Object.keys(autoCompleteItems).map(function (key) {\n                    return autoCompleteItems[key];\n                });\n            }\n            function createAutoCompleteContext(ev) {\n                if (ev && [40, 38, 13, 9].indexOf(ev.keyCode) !== -1) { return; }\n                fillAutoComplete();\n                iRect = filterInput.getBoundingClientRect();\n                if (autoCompleteContext) {\n                    autoCompleteContext.dispose();\n                    autoCompleteContext = undefined;\n                }\n                autoCompleteContext = createContextMenu(e, {\n                    left: iRect.left,\n                    top: iRect.top,\n                    right: iRect.right,\n                    bottom: iRect.bottom,\n                    height: iRect.height,\n                    width: iRect.width\n                }, autoCompleteItems, {inputDropdown: true});\n                autoCompleteContext.selectedIndex = 0;\n            }\n            self.createInlineStyle(filterLabel, 'canvas-datagrid-context-menu-label');\n            self.createInlineStyle(filterAutoCompleteButton, 'canvas-datagrid-context-menu-filter-button');\n            self.createInlineStyle(filterInput, 'canvas-datagrid-context-menu-filter-input');\n            checkRegExpErrorState();\n            filterInput.onclick = self.disposeAutocomplete;\n            filterInput.addEventListener('keydown', function (e) {\n                //down\n                if (e.keyCode === 40) {\n                    autoCompleteContext.selectedIndex += 1;\n                }\n                //up\n                if (e.keyCode === 38) {\n                    autoCompleteContext.selectedIndex -= 1;\n                }\n                //enter\n                if (e.keyCode === 13) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    self.disposeContextMenu();\n                }\n                //tab\n                if (e.keyCode === 9) {\n                    autoCompleteContext.clickIndex(autoCompleteContext.selectedIndex);\n                    e.preventDefault();\n                }\n                //esc\n                if (e.keyCode === 27) {\n                    self.disposeContextMenu();\n                }\n            });\n            filterInput.addEventListener('keyup', function () {\n                self.setFilter(e.cell.header.name, filterInput.value);\n            });\n            filterInput.addEventListener('keyup', createAutoCompleteContext);\n            ['focus', 'blur', 'keydown', 'keyup', 'change'].forEach(function (en) {\n                filterInput.addEventListener(en, checkRegExpErrorState);\n            });\n            filterInput.value = e.cell.header ? self.columnFilters[e.cell.header.name] || '' : '';\n            filterLabel.innerHTML = self.attributes.filterOptionText.replace(/%s/g, n);\n            filterAutoCompleteButton.onclick = function () {\n                if (autoCompleteContext) {\n                    return self.disposeAutocomplete();\n                }\n                createAutoCompleteContext();\n            };\n            filterAutoCompleteButton.innerHTML = self.style.contextFilterButtonHTML;\n            filterContainer.addEventListener('click', function (e) {\n                return e.stopPropagation();\n            });\n            filterContainer.appendChild(filterLabel);\n            filterContainer.appendChild(filterInput);\n            filterContainer.appendChild(filterAutoCompleteButton);\n            e.items.push({\n                title: filterContainer\n            });\n            if (Object.keys(self.columnFilters).length) {\n                Object.keys(self.columnFilters).forEach(function (cf) {\n                    var h = self.getHeaderByName(cf);\n                    e.items.push({\n                        title: self.attributes.removeFilterOptionText.replace(/%s/g, h.title || h.name),\n                        click: function removeFilterClick(e) {\n                            e.preventDefault();\n                            self.setFilter(cf, '');\n                            self.controlInput.focus();\n                        }\n                    });\n                });\n            }\n        }\n        function addDefaultContextMenuItem(e) {\n            var isNormalCell = !(e.cell.isBackground || e.cell.isHeaderCellCap\n                    || e.cell.isScrollBar || e.cell.isCorner || e.cell.isRowHeader)\n                    && e.cell.header;\n            if (self.attributes.showFilter && isNormalCell) {\n                createFilterContextMenuItems(e);\n            }\n            if (self.attributes.showCopy\n                    && self.selections.reduce(function (p, r) {\n                        return p + r.length;\n                    }, 0) > 0) {\n                e.items.push({\n                    title: self.attributes.copyText,\n                    click: function () {\n                        document.execCommand('copy');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.showPaste && self.clipBoardData) {\n                e.items.push({\n                    title: self.attributes.pasteText,\n                    click: function () {\n                        self.paste(self.clipBoardData, e.cell.columnIndex, e.cell.rowIndex);\n                        self.draw();\n                    }\n                });\n            }\n            if (self.attributes.showColumnSelector) {\n                e.items.push({\n                    title: self.attributes.columnSelectorText,\n                    items: function () {\n                        var d = [];\n                        self.getSchema().forEach(function (column) {\n                            function toggleColumnVisibility(e) {\n                                column.hidden = !column.hidden;\n                                e.preventDefault();\n                                self.stopPropagation(e);\n                                self.disposeContextMenu();\n                                self.draw();\n                            }\n                            var el = document.createElement('div');\n                            applyContextItemStyle(el);\n                            el.addEventListener('touchstart', toggleColumnVisibility);\n                            el.addEventListener('click', toggleColumnVisibility);\n                            el.innerHTML = (column.hidden ? self.attributes.columnSelectorHiddenText\n                                    : self.attributes.columnSelectorVisibleText)\n                                    + (column.title || column.name);\n                            d.push({\n                                title: el\n                            });\n                        });\n                        return d;\n                    }\n                });\n                if (e.cell && e.cell.header) {\n                    e.items.push({\n                        title: self.attributes.hideColumnText\n                            .replace(/%s/ig, e.cell.header.title || e.cell.header.name),\n                        click: function (ev) {\n                            e.cell.header.hidden = true;\n                            ev.preventDefault();\n                            self.stopPropagation(ev);\n                            self.disposeContextMenu();\n                            setTimeout(self.draw, 10);\n                        }\n                    });\n                }\n            }\n            if (self.attributes.saveAppearance && self.attributes.showClearSettingsOption\n                    && (Object.keys(self.sizes.rows).length > 0\n                        || Object.keys(self.sizes.columns).length > 0)) {\n                e.items.push({\n                    title: self.attributes.clearSettingsOptionText,\n                    click: function (e) {\n                        e.preventDefault();\n                        self.sizes.rows = {};\n                        self.sizes.columns = {};\n                        self.createRowOrders();\n                        self.createColumnOrders();\n                        self.storedSettings = undefined;\n                        self.dispatchEvent('resizecolumn', {columnWidth: self.style.columnWidth});\n                        self.dispatchEvent('resizerow', {cellHeight: self.style.cellHeight});\n                        self.setStorageData();\n                        self.resize(true);\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n            if (self.attributes.allowSorting && self.attributes.showOrderByOption && isNormalCell) {\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextAsc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'asc');\n                        self.controlInput.focus();\n                    }\n                });\n                e.items.push({\n                    title: self.attributes.showOrderByOptionTextDesc.replace('%s', e.cell.header.title || e.cell.header.name),\n                    click: function (ev) {\n                        ev.preventDefault();\n                        self.order(e.cell.header.name, 'desc');\n                        self.disposeContextMenu();\n                        self.controlInput.focus();\n                    }\n                });\n            }\n        }\n        self.disposeAutocomplete = function () {\n            if (autoCompleteContext) {\n                autoCompleteContext.dispose();\n                autoCompleteContext = undefined;\n            }\n        };\n        self.disposeContextMenu = function () {\n            document.removeEventListener('click', self.disposeContextMenu);\n            zIndexTop = 9000;\n            self.disposeAutocomplete();\n            if (self.contextMenu) {\n                self.contextMenu.dispose();\n            }\n            self.contextMenu = undefined;\n        };\n        self.contextmenuEvent = function (e, overridePos) {\n            if (!self.hasFocus && e.target !== self.canvas) {\n                return;\n            }\n            function createDiposeEvent() {\n                requestAnimationFrame(function () {\n                    document.addEventListener('click', self.disposeContextMenu);\n                    document.removeEventListener('mouseup', createDiposeEvent);\n                });\n            }\n            var contextPosition,\n                items = [],\n                pos = overridePos || self.getLayerPos(e, true),\n                ev = {\n                    NativeEvent: e,\n                    cell: self.getCellAt(pos.x, pos.y),\n                    items: items\n                };\n            if (!ev.cell.isGrid) {\n                addDefaultContextMenuItem(ev);\n            }\n            if (self.dispatchEvent('contextmenu', ev)) {\n                return;\n            }\n            if (!ev.cell.isGrid) {\n                if (self.contextMenu) {\n                    self.disposeContextMenu();\n                }\n                contextPosition = {\n                    left: pos.x + pos.rect.left + self.style.contextMenuMarginLeft + self.canvasOffsetLeft,\n                    top: pos.y + pos.rect.top + self.style.contextMenuMarginTop + self.canvasOffsetTop,\n                    right: ev.cell.width + ev.cell.x + pos.rect.left,\n                    bottom: ev.cell.height + ev.cell.y + pos.rect.top,\n                    height: ev.cell.height,\n                    width: ev.cell.width\n                };\n                if (self.mobile) {\n                    contextPosition.left = self.style.mobileContextMenuMargin + 'px';\n                    contextPosition.width = self.width - (self.style.mobileContextMenuMargin * 2) + 'px';\n                }\n                self.contextMenu = createContextMenu(ev, contextPosition, items);\n                document.addEventListener('mouseup', createDiposeEvent);\n                e.preventDefault();\n            }\n        };\n        return;\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/contextMenu.js\n// module id = 7\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        self.getClippingRect = function (ele) {\n            var boundingRect = self.position(self.parentNode),\n                eleRect = self.position(ele),\n                s = self.scrollOffset(self.canvas),\n                clipRect = {\n                    x: 0,\n                    y: 0,\n                    h: 0,\n                    w: 0\n                },\n                parentRect = {\n                    x: -Infinity,\n                    y: -Infinity,\n                    h: Infinity,\n                    w: Infinity\n                },\n                rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.getColumnHeaderCellWidth();\n            boundingRect.top -= s.top;\n            boundingRect.left -= s.left;\n            eleRect.top -= s.top;\n            eleRect.left -= s.left;\n            clipRect.h = boundingRect.top + boundingRect.height - ele.offsetTop - self.style.scrollBarWidth;\n            clipRect.w = boundingRect.left + boundingRect.width - ele.offsetLeft - self.style.scrollBarWidth;\n            clipRect.x = boundingRect.left + (eleRect.left * -1) + columnHeaderCellWidth;\n            clipRect.y = boundingRect.top + (eleRect.top * -1) + rowHeaderCellHeight;\n            return {\n                x: clipRect.x > parentRect.x ? clipRect.x : parentRect.x,\n                y: clipRect.y > parentRect.y ? clipRect.y : parentRect.y,\n                h: clipRect.h < parentRect.h ? clipRect.h : parentRect.h,\n                w: clipRect.w < parentRect.w ? clipRect.w : parentRect.w\n            };\n        };\n        self.clipElement = function (ele) {\n            var clipRect = self.getClippingRect(ele);\n            if (clipRect.w < 0) { clipRect.w = 0; }\n            if (clipRect.h < 0) { clipRect.h = 0; }\n            ele.style.clip = 'rect('\n                + clipRect.y + 'px,'\n                + clipRect.w + 'px,'\n                + clipRect.h + 'px,'\n                + clipRect.x + 'px'\n                + ')';\n            // INFO https://developer.mozilla.org/en-US/docs/Web/CSS/clip\n            // clip has been \"deprecated\" for clipPath.  Of course nothing but chrome\n            // supports clip path, so we'll keep using clip until someday clipPath becomes\n            // more widely support.  The code below works correctly, but setting clipPath and clip\n            // at the same time has undesirable results.\n            // ele.style.clipPath = 'polygon('\n            //     + clipRect.x + 'px ' + clipRect.y + 'px,'\n            //     + clipRect.x + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.h + 'px,'\n            //     + clipRect.w + 'px ' + clipRect.y + 'px'\n            //     + ')';\n        };\n        self.scrollOffset = function (e) {\n            var x = 0, y = 0;\n            while (e.parentNode && e.nodeName !== 'CANVAS-DATAGRID') {\n                if (e.nodeType !== 'canvas-datagrid-tree'\n                        && e.nodeType !== 'canvas-datagrid-cell') {\n                    x -= e.scrollLeft;\n                    y -= e.scrollTop;\n                }\n                e = e.parentNode;\n            }\n            return {left: x, top: y};\n        };\n        self.resizeEditInput = function () {\n            if (self.input) {\n                var pos = self.canvas.getBoundingClientRect(),\n                    s = self.scrollOffset(self.canvas),\n                    bx2 = (self.style.cellBorderWidth * 2),\n                    cell = self.getVisibleCellByIndex(self.input.editCell.columnIndex, self.input.editCell.rowIndex)\n                        || {x: -100, y: -100, height: 0, width: 0};\n                if (self.mobile) {\n                    self.input.style.left = '0';\n                    self.input.style.top = (self.height - self.style.mobileEditInputHeight) - bx2 - 1 + 'px';\n                    self.input.style.height = self.style.mobileEditInputHeight + 'px';\n                    self.input.style.width = self.width - bx2 - 1 + 'px';\n                    return;\n                }\n                self.input.style.left = pos.left + cell.x - self.style.cellBorderWidth + self.canvasOffsetLeft - s.left + 'px';\n                self.input.style.top = pos.top + cell.y - bx2 + self.canvasOffsetTop - s.top + 'px';\n                self.input.style.height = cell.height - bx2 - 1 + 'px';\n                self.input.style.width = cell.width - bx2 - self.style.cellPaddingLeft + 'px';\n                self.clipElement(self.input);\n            }\n        };\n        self.position = function (e, ignoreScrollOffset) {\n            var x = 0, y = 0, s = e, h, w;\n            while (e.offsetParent && e.nodeName !== 'CANVAS-DATAGRID') {\n                x += e.offsetLeft;\n                y += e.offsetTop;\n                h = e.offsetHeight;\n                w = e.offsetWidth;\n                e = e.offsetParent;\n            }\n            if (ignoreScrollOffset) {\n                return {left: x, top: y, height: h, width: w};\n            }\n            e = s;\n            s = self.scrollOffset(e);\n            return { left: x + s.left, top: y + s.top, height: h, width: w };\n        };\n        self.getLayerPos = function (e) {\n            var rect = self.canvas.getBoundingClientRect(),\n                pos = {\n                    x: e.clientX - rect.left,\n                    y: e.clientY - rect.top\n                };\n            if (self.isChildGrid) {\n                pos.x -= self.canvasOffsetLeft;\n                pos.y -= self.canvasOffsetTop;\n            }\n            return {\n                x: pos.x,\n                y: pos.y,\n                rect: rect\n            };\n        };\n        /**\n         * Ends editing, optionally aborting the edit.\n         * @memberof canvasDatagrid\n         * @name endEdit\n         * @method\n         * @param {boolean} abort When true, abort the edit.\n         */\n        self.endEdit = function (abort) {\n            var cell = self.input.editCell,\n                y = cell.rowIndex;\n            function abortEdit() {\n                abort = true;\n            }\n            if (self.dispatchEvent('beforeendedit', {\n                    cell: cell,\n                    newValue: self.input.value,\n                    oldValue: cell.value,\n                    abort: abortEdit,\n                    input: self.input\n                })) { return false; }\n            if (self.input.value !== cell.value && !abort) {\n                self.changes[y] = self.changes[y] || {};\n                self.changes[y][cell.header.name] = self.input.value;\n                cell.data[cell.header.name] = self.input.value;\n                if (y === self.data.length) {\n                    if (self.dispatchEvent('newrow', {\n                            value: self.input.value,\n                            defaultValue: cell.value,\n                            aborted: abort,\n                            cell: cell,\n                            input: self.input\n                        })) { return false; }\n                    self.uId += 1;\n                    self.addRow(cell.data);\n                    self.createNewRowData();\n                }\n                self.draw(true);\n            }\n            document.body.removeChild(self.input);\n            self.controlInput.focus();\n            self.dispatchEvent('endedit', {\n                cell: cell,\n                value: self.input.value,\n                aborted: abort,\n                input: self.input\n            });\n            self.input = undefined;\n            return true;\n        };\n        /**\n         * Begins editing at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name beginEditAt\n         * @method\n         * @param {number} x The column index of the cell to edit.\n         * @param {number} y The row index of the cell to edit.\n         */\n        self.beginEditAt = function (x, y) {\n            if (!self.attributes.editable) { return; }\n            if (self.input) {\n                self.endEdit();\n            }\n            var cell = self.getVisibleCellByIndex(x, y),\n                s = self.getVisibleSchema(),\n                enumItems,\n                enu,\n                option,\n                valueInEnum;\n            if (!(cell && cell.header)) { return; }\n            //HACK for IE10, does not like literal enum\n            enu = cell.header['enum'];\n            if (self.dispatchEvent('beforebeginedit', {cell: cell})) { return false; }\n            self.scrollIntoView(x, y);\n            self.setActiveCell(x, y);\n            if (enu) {\n                self.input = document.createElement('select');\n            } else {\n                self.input = document.createElement(self.attributes.multiLine\n                    ? 'textarea' : 'input');\n            }\n            cell = self.getVisibleCellByIndex(x, y);\n            if (enu) {\n                // add enums\n                if (typeof enu === 'function') {\n                    enumItems = enu.apply(self.intf, [{cell: cell}]);\n                } else if (Array.isArray(enu)) {\n                    enumItems = enu;\n                }\n                enumItems.forEach(function (e) {\n                    var i = document.createElement('option'),\n                        val,\n                        title;\n                    if (Array.isArray(e)) {\n                        val = e[0];\n                        title = e[1];\n                    } else {\n                        val = e;\n                        title = e;\n                    }\n                    if (val === cell.value) { valueInEnum = true; }\n                    i.value = val;\n                    i.innerHTML = title;\n                    self.input.appendChild(i);\n                });\n                if (!valueInEnum) {\n                    option = document.createElement('option');\n                    option.value = cell.value;\n                    option.innerHTML = cell.value;\n                    self.input.appendChild(option);\n                }\n                self.input.addEventListener('change', function () {\n                    self.endEdit();\n                    self.draw(true);\n                });\n            }\n            document.body.appendChild(self.input);\n            self.createInlineStyle(self.input, self.mobile ? 'canvas-datagrid-edit-mobile-input' : 'canvas-datagrid-edit-input');\n            self.input.style.position = 'absolute';\n            self.input.editCell = cell;\n            self.resizeEditInput();\n            self.input.style.zIndex = '2';\n            self.input.style.fontSize = (parseInt(self.style.editCellFontSize, 10) * self.scale) + 'px';\n            self.input.value = cell.value;\n            self.input.focus();\n            self.input.addEventListener('click', self.stopPropagation);\n            self.input.addEventListener('dblclick', self.stopPropagation);\n            self.input.addEventListener('mouseup', self.stopPropagation);\n            self.input.addEventListener('mousedown', self.stopPropagation);\n            self.input.addEventListener('keydown', function (e) {\n                var nx = cell.columnIndex,\n                    ny = cell.rowIndex;\n                // esc\n                if (e.keyCode === 27) {\n                    self.endEdit(true);\n                    self.draw(true);\n                // enter\n                } else if (e.keyCode === 13\n                        && (!self.attributes.multiLine\n                            || (self.attributes.multiLine && e.shiftKey))) {\n                    self.endEdit();\n                    self.draw(true);\n                } else if (e.keyCode === 9) {\n                    e.preventDefault();\n                    if (!self.endEdit()) {\n                        return;\n                    }\n                    if (e.shiftKey) {\n                        nx -= 1;\n                    } else {\n                        nx += 1;\n                    }\n                    if (nx < 0) {\n                        nx = s.length - 1;\n                        ny -= 1;\n                    }\n                    if (nx > s.length - 1) {\n                        nx = 0;\n                        ny += 1;\n                    }\n                    if (ny < 0) {\n                        ny = self.data.length - 1;\n                    }\n                    if (ny > self.data.length - 1) {\n                        ny = 0;\n                    }\n                    self.scrollIntoView(nx, ny);\n                    self.beginEditAt(nx, ny);\n                }\n            });\n            self.dispatchEvent('beginedit', {cell: cell, input: self.input});\n        };\n        self.createInlineStyle = function (el, className) {\n            var css = {\n                'canvas-datagrid-context-menu-filter-input': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextFilterInputBackground,\n                    color: self.style.contextFilterInputColor,\n                    border: self.style.contextFilterInputBorder,\n                    borderRadius: self.style.contextFilterInputBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextFilterInputFontFamily,\n                    fontSize: self.style.contextFilterInputFontSize\n                },\n                'canvas-datagrid-context-menu-filter-button': {\n                    height: '19px',\n                    verticalAlign: 'bottom',\n                    marginLeft: '2px',\n                    padding: '0',\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextFilterButtonBorder,\n                    borderRadius: self.style.contextFilterButtonBorderRadius,\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFilterButtonFontFamily,\n                    fontSize: self.style.contextMenuFilterButtonFontSize\n                },\n                'canvas-datagrid-context-child-arrow': {\n                    cssFloat: 'right',\n                    color: self.style.childContextMenuArrowColor,\n                    fontSize: self.style.contextMenuChildArrowFontSize,\n                    fontFamily: self.style.contextMenuFontFamily,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-autocomplete': {\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    position: 'absolute',\n                    zIndex: 9999,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-autocomplete-item': {\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor\n                },\n                'canvas-datagrid-autocomplete-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-canvas': {\n                    position: 'absolute',\n                    zIndex: '-1'\n                },\n                'canvas-datagrid': {\n                    display: 'block',\n                    background: self.style.backgroundColor,\n                    zIndex: '1',\n                    boxSizing: 'content-box',\n                    padding: '0'\n                },\n                'canvas-datagrid-control-input': {\n                    position: 'fixed',\n                    top: '-5px',\n                    left: '-5px',\n                    border: 'none',\n                    opacity: '0',\n                    cursor: 'pointer',\n                    width: '1px',\n                    height: '1px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize\n                },\n                'canvas-datagrid-edit-mobile-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 0',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.mobileEditFontFamily,\n                    fontSize: self.style.mobileEditFontSize,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-edit-input': {\n                    boxSizing: 'content-box',\n                    outline: 'none',\n                    margin: '0',\n                    padding: '0 0 0 ' + self.style.editCellPaddingLeft + 'px',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.editCellFontFamily,\n                    fontSize: self.style.editCellFontSize,\n                    boxShadow: self.style.editCellBoxShadow,\n                    border: self.style.editCellBorder,\n                    color: self.style.editCellColor,\n                    background: self.style.editCellBackgroundColor,\n                    appearance: 'none',\n                    webkitAppearance: 'none',\n                    mozAppearance: 'none',\n                    borderRadius: '0'\n                },\n                'canvas-datagrid-context-menu-item-mobile': {\n                    display: 'inline-block',\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    color: 'inherit',\n                    background: 'inherit',\n                    margin: self.style.contextMenuItemMargin,\n                    borderRadius: self.style.contextMenuItemBorderRadius,\n                    verticalAlign: 'middle'\n                },\n                'canvas-datagrid-context-menu-item:hover': {\n                    background: self.style.contextMenuHoverBackground,\n                    color: self.style.contextMenuHoverColor\n                },\n                'canvas-datagrid-context-menu-label': {\n                    margin: self.style.contextMenuLabelMargin,\n                    display: self.style.contextMenuLabelDisplay,\n                    minWidth: self.style.contextMenuLabelMinWidth,\n                    maxWidth: self.style.contextMenuLabelMaxWidth\n                },\n                'canvas-datagrid-context-menu-mobile': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden'\n                },\n                'canvas-datagrid-context-menu': {\n                    lineHeight: 'normal',\n                    fontWeight: 'normal',\n                    fontFamily: self.style.contextMenuFontFamily,\n                    fontSize: self.style.contextMenuFontSize,\n                    background: self.style.contextMenuBackground,\n                    color: self.style.contextMenuColor,\n                    border: self.style.contextMenuBorder,\n                    padding: self.style.contextMenuPadding,\n                    borderRadius: self.style.contextMenuBorderRadius,\n                    opacity: self.style.contextMenuOpacity,\n                    overflow: 'hidden',\n                    whiteSpace: 'nowrap'\n                },\n                'canvas-datagrid-invalid-search-regExp': {\n                    background: self.style.contextMenuFilterInvalidExpresion\n                }\n            };\n            if (css[className]) {\n                Object.keys(css[className]).map(function (prop) {\n                    el.style[prop] = css[className][prop];\n                });\n            }\n            return;\n        };\n        self.appendTo = function (n) {\n            self.parentNode = n || document.createElement('canvas');\n            if (self.parentNode && /canvas-datagrid-(cell|tree)/.test(self.parentNode.nodeType)) {\n                self.isChildGrid = true;\n                self.parentGrid = self.parentNode.parentGrid;\n                self.ctx = self.parentGrid.context;\n                self.canvas = self.parentGrid.canvas;\n                self.controlInput = self.parentGrid.controlInput;\n                self.eventParent = self.canvas;\n            } else {\n                self.controlInput = document.createElement('input');\n                self.controlInput.onblur = self.intf.blur;\n                self.createInlineStyle(self.controlInput, 'canvas-datagrid-control-input');\n                self.isChildGrid = false;\n                self.parentDOMNode = self.parentNode;\n                self.parentNode = self.parentDOMNode;\n                self.parentIsCanvas = /^canvas$/i.test(self.parentDOMNode.tagName);\n                if (self.isComponent) {\n                    self.shadowCss = document.createElement('style');\n                    self.shadowCss.innerHTML = ':host canvas { display:flex; flex-direction: column; padding: 0; margin: 0; }';\n                    self.parentDOMNode = self.parentNode.parentElement;\n                    self.canvas = document.createElement('canvas');\n                    self.parentNode.appendChild(self.shadowCss);\n                    self.parentNode.appendChild(self.canvas);\n                    self.parentNode.appendChild(self.controlInput);\n                } else if (self.parentIsCanvas) {\n                    self.canvas = self.parentDOMNode;\n                    self.parentDOMNode.appendChild(self.controlInput);\n                } else {\n                    self.canvas = document.createElement('canvas');\n                    self.parentDOMNode.appendChild(self.canvas);\n                    self.parentDOMNode.appendChild(self.controlInput);\n                }\n                self.createInlineStyle(self.canvas, 'canvas-datagrid');\n                self.ctx = self.canvas.getContext('2d');\n                self.ctx.textBaseline = 'alphabetic';\n                self.eventParent = self.canvas;\n            }\n            self.controlInput.setAttribute('readonly', true);\n            self.controlInput.addEventListener('blur', function (e) {\n                if (e.target !== self.canvas) {\n                    self.hasFocus = false;\n                }\n            });\n            window.addEventListener('resize', self.resize);\n            if (window.MutationObserver) {\n                self.observer = new window.MutationObserver(function (mutations) {\n                    mutations.forEach(function (mutation) {\n                        self.resize(true);\n                    });\n                });\n                [self.canvas.parentNode].forEach(function (el) {\n                    if (!el) { return; }\n                    self.observer.observe(el, { attributes: true });\n                });\n            }\n            self.eventParent.addEventListener('scroll', self.resize, false);\n            self.eventParent.addEventListener('touchstart', self.touchstart, false);\n            self.eventParent.addEventListener('mouseup', self.mouseup, false);\n            self.eventParent.addEventListener('mousedown', self.mousedown, false);\n            self.eventParent.addEventListener('dblclick', self.dblclick, false);\n            self.eventParent.addEventListener('click', self.click, false);\n            self.eventParent.addEventListener('mousemove', self.mousemove);\n            self.eventParent.addEventListener('wheel', self.scrollWheel, false);\n            self.canvas.addEventListener('contextmenu', self.contextmenuEvent, false);\n            self.controlInput.addEventListener('copy', self.copy);\n            self.controlInput.addEventListener('cut', self.cut);\n            self.controlInput.addEventListener('paste', self.paste);\n            self.controlInput.addEventListener('keypress', self.keypress, false);\n            self.controlInput.addEventListener('keyup', self.keyup, false);\n            self.controlInput.addEventListener('keydown', self.keydown, false);\n        };\n        self.setDom = function () {\n            if (self.args.parentNode && self.args.parentNode.createShadowRoot) {\n                if (this.isComponent) {\n                    self.shadowRootParentElement = self.args.parentNode.parentElement;\n                } else {\n                    self.shadowRootParentElement = self.args.parentNode;\n                }\n                self.shadowRoot = self.args.parentNode.attachShadow({mode: self.args.debug ? 'open' : 'closed'});\n                self.args.parentNode = self.shadowRoot;\n            }\n            self.appendTo(self.args.parentNode);\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/dom.js\n// module id = 8\n// module chunks = 0","/*jslint browser: true, unparam: true, todo: true*/\n/*globals define: true, MutationObserver: false, requestAnimationFrame: false, performance: false, btoa: false*/\ndefine([], function () {\n    'use strict';\n    return function (self) {\n        // all methods here are exposed by intf\n        // to users\n        /**\n         * Converts a integer into a letter A - ZZZZZ...\n         * @memberof canvasDatagrid\n         * @name integerToAlpha\n         * @method\n         * @param {column} n The number to convert.\n         */\n        self.integerToAlpha = function (n) {\n            var ordA = 'a'.charCodeAt(0),\n                ordZ = 'z'.charCodeAt(0),\n                len = ordZ - ordA + 1,\n                s = '';\n            while (n >= 0) {\n                s = String.fromCharCode(n % len + ordA) + s;\n                n = Math.floor(n / len) - 1;\n            }\n            return s;\n        };\n        /**\n         * Inserts a new column before the specified index into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name insertColumn\n         * @method\n         * @param {column} c The column to insert into the schema.\n         * @param {number} index The index of the column to insert before.\n         */\n        self.insertColumn = function (c, index) {\n            var s = self.getSchema();\n            if (s.length < index) {\n                throw new Error('Index is beyond the length of the schema.');\n            }\n            self.validateColumn(c, s);\n            s.splice(index, 0, c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a column from the schema at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteColumn\n         * @tutorial schema\n         * @method\n         * @param {number} index The index of the column to delete.\n         */\n        self.deleteColumn = function (index) {\n            var s = self.getSchema();\n            // remove data matching this column name from data\n            self.data.forEach(function (row) {\n                delete row[s[index].name];\n            });\n            s.splice(index, 1);\n            self.intf.schema = s;\n        };\n        /**\n         * Adds a new column into the schema.\n         * @see canvasDatagrid#schema\n         * @tutorial schema\n         * @memberof canvasDatagrid\n         * @name addColumn\n         * @method\n         * @param {column} c The column to add to the schema.\n         */\n        self.addColumn = function (c) {\n            var s = self.getSchema();\n            self.validateColumn(c, s);\n            s.push(c);\n            self.data.forEach(function (row) {\n                self.applyDefaultValue(row, c);\n            });\n            self.intf.schema = s;\n        };\n        /**\n         * Deletes a row from the dataset at the specified index.\n         * @memberof canvasDatagrid\n         * @name deleteRow\n         * @method\n         * @param {number} index The index of the row to delete.\n         */\n        self.deleteRow = function (index) {\n            self.originalData.splice(index, 1);\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Inserts a new row into the dataset before the specified index.\n         * @memberof canvasDatagrid\n         * @name insertRow\n         * @method\n         * @param {object} d data.\n         * @param {number} index The index of the row to insert before.\n         */\n        self.insertRow = function (d, index) {\n            if (self.originalData.length < index) {\n                throw new Error('Index is beyond the length of the dataset.');\n            }\n            self.originalData.splice(index, 0, d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[index], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Adds a new row into the dataset.\n         * @memberof canvasDatagrid\n         * @name addRow\n         * @method\n         * @param {object} d data.\n         */\n        self.addRow = function (d) {\n            self.originalData.push(d);\n            self.getSchema().forEach(function (c) {\n                if (d[c.name] === undefined) {\n                    self.applyDefaultValue(self.originalData[self.originalData.length - 1], c);\n                }\n            });\n            self.setFilter();\n            self.resize(true);\n        };\n        /**\n         * Sets the height of a given row by index number.\n         * @memberof canvasDatagrid\n         * @name setRowHeight\n         * @method\n         * @param {number} rowIndex The index of the row to set.\n         * @param {number} height Height to set the row to.\n         */\n        self.setRowHeight = function (rowIndex, height) {\n            self.sizes.rows[self.data[rowIndex][self.uniqueId]] = height;\n            self.draw(true);\n        };\n        /**\n         * Sets the width of a given column by index number.\n         * @memberof canvasDatagrid\n         * @name setColumnWidth\n         * @method\n         * @param {number} colIndex The index of the column to set.\n         * @param {number} width Width to set the column to.\n         */\n        self.setColumnWidth = function (colIndex, width) {\n            var s = self.getSchema();\n            self.sizes.columns[s[colIndex][self.uniqueId]] = width;\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the width of the columns due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetColumnWidths\n         * @tutorial schema\n         * @method\n         */\n        self.resetColumnWidths = function () {\n            self.sizes.columns = {};\n            self.draw(true);\n        };\n        /**\n         * Removes any changes to the height of the rows due to user or api interaction, setting them back to the schema or style default.\n         * @memberof canvasDatagrid\n         * @name resetRowHeights\n         * @tutorial schema\n         * @method\n         */\n        self.resetRowHeights = function () {\n            self.sizes.rows = {};\n            self.draw(true);\n        };\n        /**\n         * Sets the value of the filter.\n         * @memberof canvasDatagrid\n         * @name setFilter\n         * @method\n         * @param {string} column Name of the column to filter.\n         * @param {string} value The value to filter for.\n         */\n        self.setFilter = function (column, value) {\n            function applyFilter() {\n                self.refreshFromOrigialData();\n                Object.keys(self.columnFilters).forEach(function (filter) {\n                    var header = self.getHeaderByName(column);\n                    if (!header) {\n                        return;\n                    }\n                    self.currentFilter = header.filter || self.filter(column.type || 'string');\n                    self.data = self.data.filter(function (row) {\n                        return self.currentFilter(row[filter], self.columnFilters[filter]);\n                    });\n                });\n                self.resize();\n                self.draw(true);\n            }\n            if (column === undefined && value === undefined) {\n                self.columnFilters = {};\n                return applyFilter();\n            }\n            if (column && (value === '' || value === undefined)) {\n                delete self.columnFilters[column];\n            } else {\n                self.columnFilters[column] = value;\n            }\n            applyFilter();\n        };\n        /**\n         * Returns the number of pixels to scroll down to line up with row rowIndex.\n         * @memberof canvasDatagrid\n         * @name findRowScrollTop\n         * @method\n         * @param {number} rowIndex The row index of the row to scroll find.\n         */\n        self.findRowScrollTop = function (rowIndex) {\n            var top = 0, x = 0, l = self.data.length,\n                cellBorder = self.style.cellBorderWidth * 2;\n            if (!self.attributes.showNewRow) {\n                l -= 1;\n            }\n            if (rowIndex > l) {\n                throw new Error('Impossible row index');\n            }\n            while (x < rowIndex) {\n                top += (self.sizes.rows[self.data[x][self.uniqueId]] || self.style.cellHeight) + cellBorder;\n                x += 1;\n            }\n            //TODO: This is not super accurate, causes pageUp/Dn to not move around right\n            return top - (self.sizes.rows[self.data[rowIndex][self.uniqueId]] || self.style.cellHeight);\n        };\n        /**\n         * Returns the number of pixels to scroll to the left to line up with column columnIndex.\n         * @memberof canvasDatagrid\n         * @name findColumnScrollLeft\n         * @method\n         * @param {number} columnIndex The column index of the column to find.\n         */\n        self.findColumnScrollLeft = function (columnIndex) {\n            var left = 0, y = 0, s = self.getSchema(), l = s.length - 1;\n            if (columnIndex > l) {\n                throw new Error('Impossible column index');\n            }\n            while (y < columnIndex) {\n                left += self.sizes.columns[s[y][self.uniqueId]] || s[y].width;\n                y += 1;\n            }\n            return left;\n        };\n        /**\n         * Scrolls the cell at cell x, row y.\n         * @memberof canvasDatagrid\n         * @name gotoCell\n         * @method\n         * @param {number} x The column index of the cell to scroll to.\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoCell = function (x, y) {\n            if (x !== undefined) {\n                self.scrollBox.scrollLeft = self.findColumnScrollLeft(x);\n            }\n            if (y !== undefined) {\n                self.scrollBox.scrollTop = self.findRowScrollTop(y);\n            }\n        };\n        /**\n         * Scrolls the row y.\n         * @memberof canvasDatagrid\n         * @name gotoRow\n         * @method\n         * @param {number} y The row index of the cell to scroll to.\n         */\n        self.gotoRow = function (y) {\n            self.gotoCell(0, y);\n        };\n        /**\n         * Scrolls the cell at cell x, row y into view if it is not already.\n         * @memberof canvasDatagrid\n         * @name scrollIntoView\n         * @method\n         * @param {number} x The column index of the cell to scroll into view.\n         * @param {number} y The row index of the cell to scroll into view.\n         */\n        self.scrollIntoView = function (x, y) {\n            if (self.visibleCells.filter(function (cell) {\n                    return (cell.rowIndex === y || y === undefined)\n                        && (cell.columnIndex === x || x === undefined)\n                        && cell.x > 0\n                        && cell.y > 0\n                        && cell.x + cell.width < self.width\n                        && cell.y + cell.height < self.height;\n                }).length === 0) {\n                self.gotoCell(x, y);\n            }\n        };\n        /**\n         * Sets the active cell. Requires redrawing.\n         * @memberof canvasDatagrid\n         * @name setActiveCell\n         * @method\n         * @param {number} x The column index of the cell to set active.\n         * @param {number} y The row index of the cell to set active.\n         */\n        self.setActiveCell = function (x, y) {\n            self.activeCell = {\n                rowIndex: y,\n                columnIndex: x\n            };\n        };\n        /**\n         * Removes the selection.\n         * @memberof canvasDatagrid\n         * @name selectNone\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectNone = function (dontDraw) {\n            self.selections = [];\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Selects every visible cell.\n         * @memberof canvasDatagrid\n         * @name selectAll\n         * @param {boolean} dontDraw Suppress the draw method after the selection change.\n         * @method\n         */\n        self.selectAll = function (dontDraw) {\n            self.selectArea({\n                top: 0,\n                left: 0,\n                right: self.getVisibleSchema().length - 1,\n                bottom: self.data.length - 1\n            });\n            if (dontDraw) { return; }\n            self.draw();\n        };\n        /**\n         * Returns true if the selected columnIndex is selected on every row.\n         * @memberof canvasDatagrid\n         * @name isColumnSelected\n         * @method\n         * @param {number} columnIndex The column index to check.\n         */\n        self.isColumnSelected = function (columnIndex) {\n            var colIsSelected = true;\n            self.data.forEach(function (row, rowIndex) {\n                if (!self.selections[rowIndex] || self.selections[rowIndex].indexOf(self.orders.columns[columnIndex]) === -1) {\n                    colIsSelected = false;\n                }\n            });\n            return colIsSelected;\n        };\n        /**\n         * Runs the defined method on each selected cell.\n         * @memberof canvasDatagrid\n         * @name forEachSelectedCell\n         * @method\n         * @param {number} fn The function to execute.  The signature of the function is: (data, rowIndex, columnName).\n         * @param {number} expandToRow When true the data in the array is expanded to the entire row.\n         */\n        self.forEachSelectedCell = function (fn, expandToRow) {\n            var d = [], s = expandToRow ? self.getSchema() : self.getVisibleSchema(), l = self.data.length;\n            self.selections.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) {\n                    d[index] = null;\n                    return;\n                }\n                d[index] = {};\n                row.forEach(function (col) {\n                    if (col === -1 || !s[col]) { return; }\n                    fn(self.data, index, s[col].name);\n                });\n            });\n        };\n        /**\n         * Selects a column.\n         * @memberof canvasDatagrid\n         * @name selectColumn\n         * @method\n         * @param {number} columnIndex The column index to select.\n         * @param {boolean} toggleSelectMode When true, behaves as if you were holding control/command when you clicked the column.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the column.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectColumn = function (columnIndex, ctrl, shift, supressEvent) {\n            var s, e, x;\n            function addCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) === -1) {\n                        self.selections[rowIndex].push(i);\n                    }\n                });\n            }\n            function removeCol(i) {\n                self.data.forEach(function (row, rowIndex) {\n                    self.selections[rowIndex] = self.selections[rowIndex] || [];\n                    if (self.selections[rowIndex].indexOf(i) !== -1) {\n                        self.selections[rowIndex].splice(self.selections[rowIndex].indexOf(i), 1);\n                    }\n                });\n            }\n            if (shift) {\n                if (!self.activeCell) { return; }\n                s = Math.min(self.activeCell.columnIndex, columnIndex);\n                e = Math.max(self.activeCell.columnIndex, columnIndex);\n                for (x = s; e > x; x += 1) {\n                    addCol(x);\n                }\n            }\n            if (!ctrl && !shift) {\n                self.selections = [];\n                self.activeCell.columnIndex = columnIndex;\n                self.activeCell.rowIndex = self.scrollIndexTop;\n            }\n            if (ctrl && self.isColumnSelected(columnIndex)) {\n                removeCol(columnIndex);\n            } else {\n                addCol(columnIndex);\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.getSelectionBounds()\n            });\n        };\n        /**\n         * Selects a row.\n         * @memberof canvasDatagrid\n         * @name selectRow\n         * @method\n         * @param {number} rowIndex The row index to select.\n         * @param {boolean} ctrl When true, behaves as if you were holding control/command when you clicked the row.\n         * @param {boolean} shift When true, behaves as if you were holding shift when you clicked the row.\n         * @param {boolean} supressSelectionchangedEvent When true, prevents the selectionchanged event from firing.\n         */\n        self.selectRow = function (rowIndex, ctrl, shift, supressEvent) {\n            var x, st, en, s = self.getSchema();\n            function addRow(ri) {\n                self.selections[ri] = [];\n                self.selections[ri].push(-1);\n                s.forEach(function (col) {\n                    self.selections[ri].push(col.index);\n                });\n            }\n            if (self.dragAddToSelection === false || self.dragObject === undefined) {\n                if (self.selections[rowIndex] && self.selections[rowIndex].length - 1 === s.length) {\n                    if (ctrl) {\n                        self.selections[rowIndex] = [];\n                        return;\n                    }\n                }\n            }\n            if (self.dragAddToSelection === true || self.dragObject === undefined) {\n                if (shift && self.dragObject === undefined) {\n                    if (!self.activeCell) { return; }\n                    st = Math.min(self.activeCell.rowIndex, rowIndex);\n                    en = Math.max(self.activeCell.rowIndex, rowIndex);\n                    for (x = st; en >= x; x += 1) {\n                        addRow(x);\n                    }\n                } else {\n                    addRow(rowIndex);\n                }\n            }\n            if (supressEvent) { return; }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Collapse a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name collapseTree\n         * @method\n         * @param {number} index The index of the row to collapse.\n         */\n        self.collapseTree = function (rowIndex) {\n            var rowId = self.data[rowIndex][self.uniqueId];\n            self.dispatchEvent('collapsetree', {\n                childGrid: self.childGrids[rowId],\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId].blur();\n            self.openChildren[rowId].dispose();\n            delete self.openChildren[rowId];\n            delete self.sizes.trees[rowId];\n            delete self.childGrids[rowId];\n            self.dispatchEvent('resizerow', {\n                cellHeight: self.style.cellHeight\n            });\n            self.resize(true);\n            self.draw(true);\n        };\n        /**\n         * Expands a tree grid by row index.\n         * @memberof canvasDatagrid\n         * @name expandTree\n         * @method\n         * @param {number} index The index of the row to expand.\n         */\n        self.expandTree = function (rowIndex) {\n            var rowHeaderCellHeight = self.getRowHeaderCellHeight(),\n                columnHeaderCellWidth = self.sizes.columns.cornerCell || self.style.rowHeaderCellWidth,\n                rowId = self.data[rowIndex][self.uniqueId],\n                h = self.sizes.trees[rowId] || self.style.treeGridHeight,\n                treeGrid;\n            if (!self.childGrids[rowId]) {\n                treeGrid = self.createGrid({\n                    debug: self.attributes.debug,\n                    name: self.attributes.saveAppearance\n                        ? self.attributes.name + 'tree' + rowId : undefined,\n                    parentNode: {\n                        parentGrid: self.intf,\n                        nodeType: 'canvas-datagrid-tree',\n                        offsetHeight: h,\n                        offsetWidth: self.width - columnHeaderCellWidth,\n                        header: { width: self.width - columnHeaderCellWidth },\n                        offsetLeft: columnHeaderCellWidth,\n                        offsetTop: rowHeaderCellHeight,\n                        offsetParent: self.intf.parentNode,\n                        parentNode: self.intf.parentNode,\n                        style: 'tree',\n                        data: self.data[rowIndex]\n                    }\n                });\n                self.childGrids[rowId] = treeGrid;\n            }\n            treeGrid = self.childGrids[rowId];\n            treeGrid.visible = true;\n            self.dispatchEvent('expandtree', {\n                treeGrid: treeGrid,\n                data: self.data[rowIndex],\n                rowIndex: rowIndex\n            });\n            self.openChildren[rowId] = treeGrid;\n            self.sizes.trees[rowId] = h;\n            self.dispatchEvent('resizerow', {height: self.style.cellHeight});\n            self.resize(true);\n        };\n        /**\n         * Toggles tree grid open and close by row index.\n         * @memberof canvasDatagrid\n         * @name toggleTree\n         * @method\n         * @param {number} index The index of the row to toggle.\n         */\n        self.toggleTree = function (rowIndex) {\n            var i = self.openChildren[self.data[rowIndex][self.uniqueId]];\n            if (i) {\n                return self.collapseTree(rowIndex);\n            }\n            self.expandTree(rowIndex);\n        };\n        /**\n         * Returns a header from the schema by name.\n         * @memberof canvasDatagrid\n         * @name getHeaderByName\n         * @tutorial schema\n         * @method\n         * @returns {header} header with the selected name, or undefined.\n         * @param {string} name The name of the column to resize.\n         */\n        self.getHeaderByName = function (name) {\n            var x, i = self.getSchema();\n            for (x = 0; x < i.length; x += 1) {\n                if (i[x].name === name) {\n                    return i[x];\n                }\n            }\n        };\n        /**\n         * Resizes a column to fit the longest value in the column. Call without a value to resize all columns.\n         * Warning, can be slow on very large record sets (1m records ~3-5 seconds on an i7).\n         * @memberof canvasDatagrid\n         * @name fitColumnToValues\n         * @method\n         * @param {string} name The name of the column to resize.\n         */\n        self.fitColumnToValues = function (name, internal) {\n            self.sizes.columns[name === 'cornerCell' ? name : self.getHeaderByName(name)[self.uniqueId]]\n                = self.findColumnMaxTextLength(name);\n            if (!internal) {\n                self.resize();\n                self.draw(true);\n            }\n        };\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @overload\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {number} columnIndex The column index of the cell to check.\n         * @param {number} rowIndex The row index of the cell to check.\n         */\n        /**\n         * Checks if a cell is currently visible.\n         * @memberof canvasDatagrid\n         * @name isCellVisible\n         * @method\n         * @returns {boolean} when true, the cell is visible, when false the cell is not currently drawn.\n         * @param {cell} cell The cell to check for.  Alternatively you can pass an object { x: <x-pixel-value>, y: <y-pixel-value> }.\n         */\n        self.isCellVisible = function (cell, rowIndex) {\n            // overload\n            if (rowIndex !== undefined) {\n                return self.visibleCells.filter(function (c) {\n                    return c.columnIndex === cell && c.rowIndex === rowIndex;\n                }).length > 0;\n            }\n            var x, l = self.visibleCells.length;\n            for (x = 0; x < l; x += 1) {\n                if (cell.x === self.visibleCells[x].x && cell.y === self.visibleCells[x].y) {\n                    return true;\n                }\n            }\n            return false;\n        };\n        /**\n         * Sets the order of the data.\n         * @memberof canvasDatagrid\n         * @name order\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} columnName Number of pixels from the left.\n         * @param {string} direction `asc` for ascending or `desc` for descending.\n         * @param {function} [sortFunction] When defined, override the default sorting method defined in the column's schema and use this one.\n         * @param {bool} [dontSetStorageData] Don't store this setting for future use.\n         */\n        self.order = function (columnName, direction, sortFunction, dontSetStorageData) {\n            var f,\n                c = self.getSchema().filter(function (col) {\n                    return col.name === columnName;\n                });\n            self.orderBy = columnName;\n            if (c.length === 0) {\n                throw new Error('Cannot sort.  No such column name');\n            }\n            f = sortFunction || self.sorters[c[0].type];\n            if (!f && c[0].type !== undefined) {\n                console.warn('Cannot sort type \"%s\" falling back to string sort.', c[0].type);\n            }\n            self.data = self.data.sort(typeof f === 'function' ? f(columnName, direction) : self.sorters.string);\n            self.dispatchEvent('ordercolumn', {name: columnName, direction: direction});\n            self.draw(true);\n            if (dontSetStorageData) { return; }\n            self.setStorageData();\n        };\n        self.isInGrid = function (e) {\n            if (e.x < 0\n                    || e.x > self.width\n                    || e.y < 0\n                    || e.y > self.height) {\n                return false;\n            }\n            return true;\n        };\n        /**\n         * Moves the current selection relative to the its current position.  Note: this method does not move the selected data, just the selection itself.\n         * @memberof canvasDatagrid\n         * @name moveSelection\n         * @method\n         * @param {number} offsetX The number of columns to offset the selection.\n         * @param {number} offsetY The number of rows to offset the selection.\n         */\n        self.moveSelection = function (offsetX, offsetY) {\n            var sel = [];\n            self.selections.forEach(function (row, rowIndex) {\n                sel[rowIndex + offsetY] = [];\n                row.forEach(function (colIndex) {\n                    sel[rowIndex + offsetY].push(colIndex + offsetX);\n                });\n            });\n            self.selections = sel;\n        };\n        /**\n         * Moves data in the provided selection to another position in the grid.  Moving data off the edge of the schema (columns/x) will truncate data.\n         * @memberof canvasDatagrid\n         * @name moveTo\n         * @method\n         * @param {array} sel 2D array representing selected rows and columns.  `canvasDatagrid.selections` is in this format and can be used here.\n         * @param {number} x The column index to start inserting the selection at.\n         * @param {number} y The row index to start inserting the selection at.\n         */\n        self.moveTo = function (sel, x, y) {\n            var d = self.getSelectedData(),\n                s = self.getVisibleSchema(),\n                l = sel.length,\n                xi,\n                yi = y - 1;\n            sel.forEach(function (row, index) {\n                if (index === l) { return; }\n                if (row.length === 0) { return; }\n                row.forEach(function (col) {\n                    if (!s[col]) { return; }\n                    self.data[index][s[col].name] = null;\n                });\n            });\n            sel.forEach(function (row, index) {\n                yi += 1;\n                xi = x - 1;\n                row.forEach(function (col, cidx) {\n                    xi += 1;\n                    if (col === -1\n                            || !s[xi]\n                            || !s[col]\n                            || self.data.length - 1 < yi\n                            || yi < 0) { return; }\n                    self.data[yi][s[xi].name] = d[index][s[col].name];\n                });\n            });\n        };\n        /**\n         * Checks if a given column is visible.\n         * @memberof canvasDatagrid\n         * @name isColumnVisible\n         * @method\n         * @returns {boolean} When true, the column is visible.\n         * @param {number} columnIndex Column index.\n         */\n        self.isColumnVisible = function (columnIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === columnIndex;\n            }).length > 0;\n        };\n        /**\n         * Checks if a given row is visible.\n         * @memberof canvasDatagrid\n         * @name isRowVisible\n         * @method\n         * @returns {boolean} When true, the row is visible.\n         * @param {number} rowIndex Row index.\n         */\n        self.isRowVisible = function (rowIndex) {\n            return self.visibleCells.filter(function (c) {\n                return c.rowIndex === rowIndex;\n            }).length > 0;\n        };\n        /**\n         * Gets the cell at columnIndex and rowIndex.\n         * @memberof canvasDatagrid\n         * @name getVisibleCellByIndex\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Column index.\n         * @param {number} y Row index.\n         */\n        self.getVisibleCellByIndex = function (x, y) {\n            return self.visibleCells.filter(function (c) {\n                return c.columnIndex === x && c.rowIndex === y;\n            })[0];\n        };\n        /**\n         * Gets the cell at grid pixel coordinate x and y.  Author's note.  This function ties drawing and events together.  This is a very complex function and is core to the component.\n         * @memberof canvasDatagrid\n         * @name getCellAt\n         * @method\n         * @returns {cell} cell at the selected location.\n         * @param {number} x Number of pixels from the left.\n         * @param {number} y Number of pixels from the top.\n         */\n        self.getCellAt = function (x, y, useTouchScrollZones) {\n            function getBorder(cell) {\n                if (cell.x + cell.width - (self.attributes.borderResizeZone * 0.4) < x && cell.x + cell.width + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'r';\n                }\n                if (cell.x - (self.attributes.borderResizeZone * 0.4) < x && cell.x + (self.attributes.borderResizeZone * 0.6) > x) {\n                    return 'l';\n                }\n                if (cell.y + cell.height - (self.attributes.borderResizeZone * 0.4) < y && cell.y + cell.height + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 'b';\n                }\n                if (cell.y - (self.attributes.borderResizeZone * 0.4) < y && cell.y + (self.attributes.borderResizeZone * 0.6) > y) {\n                    return 't';\n                }\n            }\n            var border,\n                tsz = useTouchScrollZones ? self.attributes.touchScrollZone : 0,\n                moveMode = self.attributes.borderDragBehavior === 'move',\n                i,\n                l = self.visibleCells.length,\n                moveBorder,\n                xBorderBehavior = moveMode ? self.cursorGrab : 'ew-resize',\n                yBorderBehavior = moveMode ? self.cursorGrab : 'ns-resize',\n                cell;\n            if (!self.visibleCells || !self.visibleCells.length) { return; }\n            self.hasFocus = true;\n            if (!(y < self.height\n                && y > 0\n                && x < self.width\n                && x > 0)) {\n                self.hasFocus = false;\n                return {\n                    dragContext: 'inherit',\n                    context: 'inherit'\n                };\n            }\n            for (i = 0; i < l; i += 1) {\n                cell = self.visibleCells[i];\n                if (useTouchScrollZones && /(vertical|horizontal)-scroll-/.test(cell.style)) {\n                    cell.x -= tsz;\n                    cell.y -= tsz;\n                    cell.height += tsz;\n                    cell.width += tsz;\n                }\n                if (cell.x - self.style.cellBorderWidth < x\n                        && cell.x + cell.width + self.style.cellBorderWidth > x\n                        && cell.y - self.style.cellBorderWidth < y\n                        && cell.y + cell.height + self.style.cellBorderWidth > y) {\n                    if (/selection-handle-/.test(cell.style)) {\n                        cell.dragContext = cell.style;\n                        cell.context = 'crosshair';\n                        return cell;\n                    }\n                    if (/vertical-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'vertical-scroll-box';\n                        cell.context = 'vertical-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isVerticalScrollBar = true;\n                        if (y > self.scrollBox.box.v.y + self.scrollBox.scrollBoxHeight) {\n                            cell.dragContext = 'vertical-scroll-bottom';\n                            cell.context = 'vertical-scroll-bottom';\n                        } else if (y < self.scrollBox.box.v.y) {\n                            cell.dragContext = 'vertical-scroll-top';\n                            cell.context = 'vertical-scroll-top';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    if (/horizontal-scroll-(bar|box)/.test(cell.style)) {\n                        cell.dragContext = 'horizontal-scroll-box';\n                        cell.context = 'horizontal-scroll-box';\n                        cell.isScrollBar = true;\n                        cell.isHorizontalScrollBar = true;\n                        if (x > self.scrollBox.box.h.x + self.scrollBox.scrollBoxWidth) {\n                            cell.dragContext = 'horizontal-scroll-right';\n                            cell.context = 'horizontal-scroll-right';\n                        } else if (x < self.scrollBox.box.h.x) {\n                            cell.dragContext = 'horizontal-scroll-left';\n                            cell.context = 'horizontal-scroll-left';\n                        }\n                        self.canvas.style.cursor = 'default';\n                        return cell;\n                    }\n                    border = getBorder(cell);\n                    // check if the border of this cell is the border of the selection and if so show move cursor in move mode\n                    moveBorder = moveMode && cell.selectionBorder && cell.selectionBorder.indexOf(border) !== -1;\n                    if (['l', 'r'].indexOf(border) !== -1\n                            && (self.attributes.allowColumnResize || moveBorder)\n                            && ((self.attributes.allowColumnResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && ((self.attributes.allowRowHeaderResize && (cell.isRowHeader || cell.isCorner)) || !(cell.isRowHeader && cell.isCorner))) {\n                        if (((cell.isColumnHeader || cell.isCorner) || (self.attributes.allowColumnResizeFromCell && cell.isNormal)) && border === 'r') {\n                            cell.context = 'ew-resize';\n                            cell.dragContext = 'ew-resize';\n                            return cell;\n                        }\n                        if (!(cell.isColumnHeader || cell.isCorner) && moveBorder) {\n                            cell.context = xBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (['t', 'b'].indexOf(border) !== -1\n                            && (self.attributes.allowRowResize || moveBorder)\n                            && ((self.attributes.allowRowResizeFromCell && cell.isNormal) || !cell.isNormal || moveBorder)\n                            && !cell.isColumnHeader) {\n                        if (((cell.isRowHeader || cell.isCorner) || (self.attributes.allowRowResizeFromCell && cell.isNormal)) && border === 'b') {\n                            cell.context = 'ns-resize';\n                            cell.dragContext = 'ns-resize';\n                            return cell;\n                        }\n                        if (!(cell.isRowHeader || cell.isCorner) && moveBorder) {\n                            cell.context = yBorderBehavior;\n                            cell.dragContext = border + '-move';\n                            return cell;\n                        }\n                    }\n                    if (cell.style === 'columnHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'column-reorder';\n                        return cell;\n                    }\n                    if (cell.style === 'rowHeaderCell') {\n                        cell.context = 'cell';\n                        cell.dragContext = 'row-reorder';\n                        return cell;\n                    }\n                    if (cell.isGrid) {\n                        self.hasFocus = false;\n                        cell.dragContext = 'cell-grid';\n                        cell.context = 'cell-grid';\n                        return cell;\n                    }\n                    if (cell.style === 'tree-grid') {\n                        self.hasFocus = false;\n                        cell.dragContext = 'tree';\n                        cell.context = 'tree';\n                        return cell;\n                    }\n                    cell.dragContext = 'cell';\n                    cell.context = 'cell';\n                    return cell;\n                }\n            }\n            self.hasFocus = true;\n            self.canvas.style.cursor = 'default';\n            return {\n                dragContext: 'background',\n                context: 'background',\n                style: 'background',\n                isBackground: true\n            };\n        };\n        /**\n         * Gets the bounds of current selection. \n         * @returns {rect} selection.\n         * @memberof canvasDatagrid\n         * @name getSelectionBounds\n         * @method\n         */\n        self.getSelectionBounds = function () {\n            var low = {x: Infinity, y: Infinity},\n                high = {x: -Infinity, y: -Infinity};\n            self.data.forEach(function (row, rowIndex) {\n                var maxCol, minCol;\n                if (self.selections[rowIndex] && self.selections[rowIndex].length) {\n                    low.y = rowIndex < low.y ? rowIndex : low.y;\n                    high.y = rowIndex > high.y ? rowIndex : high.y;\n                    maxCol = Math.max.apply(null, self.selections[rowIndex]);\n                    minCol = Math.min.apply(null, self.selections[rowIndex]);\n                    low.x = minCol < low.x ? minCol : low.x;\n                    high.x = maxCol > high.x ? maxCol : high.x;\n                }\n            });\n            return {\n                top: low.y,\n                left: low.x,\n                bottom: high.y,\n                right: high.x\n            };\n        };\n        /**\n         * Returns an auto generated schema based on data structure.\n         * @memberof canvasDatagrid\n         * @name getSchemaFromData\n         * @method\n         * @tutorial schema\n         * @returns {schema} schema A schema based on the first item in the data array.\n         */\n        self.getSchemaFromData = function () {\n            return Object.keys(self.data[0] || {' ': ''}).map(function mapEachSchemaColumn(key, index) {\n                var type = self.getBestGuessDataType(key),\n                    i = {\n                        name: key,\n                        title: isNaN(parseInt(key, 10)) ? key : self.integerToAlpha(key).toUpperCase(),\n                        width: self.style.columnWidth,\n                        index: index,\n                        type: type,\n                        filter: self.filter(type)\n                    };\n                if (key === self.uniqueId) {\n                    i.hidden = true;\n                }\n                i[self.uniqueId] = self.getSchemaNameHash(key);\n                return i;\n            });\n        };\n        /**\n         * Clears the change log grid.changes that keeps track of changes to the data set.\n         * This does not undo changes or alter data it is simply a convince array to keep\n         * track of changes made to the data since last this method was called.\n         * @memberof canvasDatagrid\n         * @name clearChangeLog\n         * @method\n         */\n        self.clearChangeLog = function () {\n            self.changes = [];\n        };\n        /**\n         * Selects an area of the grid.\n         * @memberof canvasDatagrid\n         * @name selectArea\n         * @method\n         * @param {rect} bounds A rect object representing the selected values.\n         */\n        self.selectArea = function (bounds, ctrl) {\n            self.selectionBounds = bounds || self.selectionBounds;\n            var x, y, s = self.getSchema();\n            if (!ctrl) {\n                self.selections = [];\n            }\n            if (self.selectionBounds.top < -1\n                    || self.selectionBounds.bottom > self.data.length\n                    || self.selectionBounds.left < -1\n                    || self.selectionBounds.right > s.length) {\n                throw new Error('Impossible selection area');\n            }\n            for (x = self.selectionBounds.top; x <= self.selectionBounds.bottom; x += 1) {\n                self.selections[x] = [];\n                for (y = self.selectionBounds.left; y <= self.selectionBounds.right; y += 1) {\n                    if (self.selections[x].indexOf(y) === -1) {\n                        self.selections[x].push(y);\n                    }\n                }\n            }\n            self.dispatchEvent('selectionchanged', {\n                selectedData: self.getSelectedData(),\n                selections: self.selections,\n                selectionBounds: self.selectionBounds\n            });\n        };\n        /**\n         * Returns the maximum text width for a given column by column name.\n         * @memberof canvasDatagrid\n         * @name findColumnMaxTextLength\n         * @method\n         * @returns {number} The number of pixels wide the maximum width value in the selected column.\n         * @param {string} name The name of the column to calculate the value's width of.\n         */\n        self.findColumnMaxTextLength = function (name) {\n            var m = -Infinity;\n            if (name === 'cornerCell') {\n                self.ctx.font = self.style.rowHeaderCellFont;\n                return self.ctx.measureText((self.data.length + (self.attributes.showNewRow ? 1 : 0)).toString()).width\n                    + self.style.autosizePadding + self.style.autosizeHeaderCellPadding\n                    + self.style.rowHeaderCellPaddingRight\n                    + self.style.rowHeaderCellPaddingLeft\n                    + (self.attributes.tree ? self.style.treeArrowWidth\n                        + self.style.treeArrowMarginLeft + self.style.treeArrowMarginRight : 0);\n            }\n            self.getSchema().forEach(function (col) {\n                if (col.name !== name) { return; }\n                self.ctx.font = self.style.columnHeaderCellFont;\n                var t = self.ctx.measureText(col.title || col.name).width\n                    + self.style.headerCellPaddingRight\n                    + self.style.headerCellPaddingLeft;\n                m = t > m ? t : m;\n            });\n            self.data.forEach(function (row) {\n                self.ctx.font = self.style.cellFont;\n                var t = self.ctx.measureText(row[name]).width\n                    + self.style.cellPaddingRight\n                    + self.style.cellPaddingLeft + self.style.cellAutoResizePadding;\n                m = t > m ? t : m;\n            });\n            return m;\n        };\n        /**\n         * Gets the total width of all header columns.\n         * @memberof canvasDatagrid\n         * @name getHeaderWidth\n         * @method\n         */\n        self.getHeaderWidth = function () {\n            return self.getVisibleSchema().reduce(function (total, header) {\n                return total + header.width;\n            }, 0);\n        };\n        self.formatters.string = function cellFormatterString(e) {\n            return e.cell.value !== undefined ? e.cell.value : '';\n        };\n        self.formatters.rowHeaderCell = self.formatters.string;\n        self.formatters.headerCell = self.formatters.string;\n        self.formatters.number = self.formatters.string;\n        self.formatters.int = self.formatters.string;\n        self.formatters.html = self.formatters.string;\n        self.sorters.string = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (a[columnName] === undefined || a[columnName] === null) {\n                    return 1;\n                }\n                if (b[columnName] === undefined || b[columnName] === null) {\n                    return 0;\n                }\n                if (asc) {\n                    if (!a[columnName].localeCompare) { return 1; }\n                    return a[columnName].localeCompare(b[columnName]);\n                }\n                if (!b[columnName].localeCompare) { return 1; }\n                return b[columnName].localeCompare(a[columnName]);\n            };\n        };\n        self.sorters.number = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return a[columnName] - b[columnName];\n                }\n                return b[columnName] - a[columnName];\n            };\n        };\n        self.sorters.date = function (columnName, direction) {\n            var asc = direction === 'asc';\n            return function (a, b) {\n                if (asc) {\n                    return new Date(a[columnName]).getTime()\n                        - new Date(b[columnName]).getTime();\n                }\n                return new Date(b[columnName]).getTime()\n                        - new Date(a[columnName]).getTime();\n            };\n        };\n    };\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./lib/publicMethods.js\n// module id = 9\n// module chunks = 0"],"sourceRoot":""}