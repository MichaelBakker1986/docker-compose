{
  "Length": {
    "args": "v1",
    "body": "return String(v1).length"
  },
  "OnER": {
    "args": "v,onerrv",
    "body": "return isNaN(v) ? onerrv : v"
  },
  "Oner": {
    "args": "v,onerrv",
    "body": "return isNaN(v) ? onerrv : v"
  },
  "OnEr": {
    "args": "v,onerrv",
    "body": "return isNaN(v) ? onerrv : v"
  },
  "OnZero": {
    "args": "v,onzerov",
    "body": "return v > 0 ? v : onzerov"
  },
  "SUM": {
    "args": "values",
    "body": "var returnValue = 0; for (var i = 0; i < values.length; i++) { returnValue += values[i]; } return returnValue;"
  },
  "OnNeg": {
    "args": "arg0,arg1",
    "body": "if (arg0 < 0) { return arg1; } return arg0"
  },
  "OnZeroOrNA": {
    "args": "arg0,arg1",
    "body": "return (arg0 == undefined || isNaN(arg0)) ? arg1 : arg0"
  },
  "OnZeroOrNa": {
    "args": "v,arg1",
    "body": "return (v == undefined || isNaN(v)) ? arg1 : v"
  },
  "Exp": {
    "args": "v",
    "body": "return Math.pow(v, 2)"
  },
  "OnERorNA": {
    "args": "v,onerrornav",
    "body": "if (v == undefined || isNaN(v)) { return onerrornav; } return v"
  },
  "Round": {
    "args": "v,decimals",
    "body": "var pow = Math.pow(10, decimals); return Math.round(v * pow) / pow"
  },
  "AVG": {
    "args": "vs",
    "body": "EJS.AVERAGE(vs)"
  },
  "MATCH": {
    "args": "v,p",
    "body": "return v === undefined? false : v.match(p);"
  },
  "ZeroOnNaN": {
    "args": "v",
    "body": "return parseFloat(isNaN(v) ? 0 : v)"
  },
  "VALIDDATE": {
    "args": "d",
    "body": "if (Object.prototype.toString.call(d) === '[object Date]' ) {if ( isNaN( d.getTime() ) ) {  return false; } else { return true; } }else { return false; }"
  },
  "GET": {
    "args": "url,name",
    "body": "{ $.getJSON( 'js/data.json', function( data ) { CACHE[name] = data; }); }"
  },
  "EvaluateAsString": {
    "args": "value",
    "body": "return String(value)"
  },
  "FirstUC": {
    "args": "value",
    "body": "{ return value }"
  },
  "AddMonth": {
    "args": "value,ammount",
    "body": "{ return 1 }"
  },
  "ForAll": {
    "args": "elements",
    "body": "{ for (var i = 0; i < elements.length; i++) { if (elements[i] ){ return 1 } } return 0; }"
  },
  "PROXY": {
    "args": "proxy",
    "body": "{ return proxy }"
  },
  "Pos": {
    "args": "one,two",
    "body": "{ return (two==null) ? -1 : two.indexOf(one); }"
  },
  "Count": {
    "args": "elements",
    "body": "{ var counter = 0; for (var i = 0; i < elements.length; i++) { if (elements[i] ){ counter++ } } return counter; }"
  },
  "ValueT": {
    "args": "one",
    "body": "{ var retrunValue = 1; while(one.prev.hash){ retrunValue++;one=one.prev } return retrunValue }"
  },
  "FirstValueT": {
    "args": "x,values,first,last",
    "body": "{ return x }"
  },
  "LastValueT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "DMYtoDate": {
    "args": "d,m,y",
    "body": "{ return new Date(d,m,y).toLocaleString(); }"
  },
  "FirstDateInT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "TableLookup": {
    "args": "row,col",
    "body": "{ return row + col }"
  },
  "GetFrac": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "VSum": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "FormulasetInT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "RelMut": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "YearInT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "YearToT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "GetT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "FirstTInYear": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "FirstTinYear": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "FirstTinformulaset": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "PeriodInT": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "LastDateInT": {
    "args": "one",
    "body": "return 2016"
  },
  "FirstTinFormulaset": {
    "args": "one",
    "body": "return 1"
  },
  "FesExpression": {
    "args": "one",
    "body": "return one"
  },
  "RoundUp": {
    "args": "num,precision",
    "body": "return Math.ceil(num * precision) / precision"
  },
  "Mut": {
    "args": "one",
    "body": "return 1"
  },
  "VSUM": {
    "args": "one",
    "body": "{ return 1 }"
  },
  "GetPoint": {
    "args": "one",
    "body": "return 1"
  },
  "Exists": {
    "args": "one",
    "body": "return 1"
  },
  "DateToMonth": {
    "args": "one",
    "body": "return one"
  },
  "HAvg": {
    "args": "one",
    "body": "return 1"
  },
  "HOVR": {
    "args": "one",
    "body": "return 1"
  },
  "BaseCurrencyValue": {
    "args": "one",
    "body": "return 1"
  },
  "LastTinFormulaset": {
    "args": "one",
    "body": "return one"
  },
  "FirstLC": {
    "args": "one",
    "body": "return 1"
  },
  "ExpandFraction": {
    "args": "one",
    "body": "return 1"
  },
  "ExpandLevel": {
    "args": "one",
    "body": "return 1"
  },
  "MaxValueT": {
    "args": "one",
    "body": "return 1"
  },
  "ValueOfT": {
    "args": "one",
    "body": "return 1"
  },
  "GuessTerm": {
    "args": "one",
    "body": "return 1"
  },
  "ExpandOriginalValue": {
    "args": "one",
    "body": "return 1"
  },
  "Datetot": {
    "args": "one",
    "body": "return x"
  },
  "DateToT": {
    "args": "x",
    "body": "return x"
  },
  "Not": {
    "args": "one",
    "body": "return !one"
  },
  "not": {
    "args": "one",
    "body": "return !one"
  },
  "Str": {
    "args": "one",
    "body": "return String(one)"
  },
  "DateToYear": {
    "args": "one",
    "body": "return new Date(one)"
  },
  "DateToDay": {
    "args": "one",
    "body": "return 1"
  },
  "CumNormal": {
    "args": "one",
    "body": "return 1"
  },
  "SubStr": {
    "args": "value,from,to",
    "body": "return String(value).substring(from,to)"
  },
  "Val": {
    "args": "input",
    "body": "return isNaN(input) ? Number(input) : NA"
  },
  "SumFor": {
    "args": "one,two,three,fours",
    "body": "return 1"
  },
  "MinMax": {
    "args": "value,min,max,fallback",
    "body": "return isNaN(value) ? fallback : value < min ? min : value > max ? max : value"
  },
  "LN": {
    "args": "one",
    "body": "return 1"
  },
  "BivarNormal": {
    "args": "one",
    "body": "return 1"
  },
  "GoalSeek": {
    "args": "one",
    "body": "return 1"
  },
  "OnNEG": {
    "args": "a,b",
    "body": "return a < 0 ? a : b"
  },
  "OnError": {
    "args": "a,b",
    "body": "return isNaN(a) ? b : a"
  },
  "DateStr": {
    "args": "date",
    "body": "return new Date(date).toString()"
  },
  "DateToYearNum": {
    "args": "string",
    "body": "return string"
  },
  "VAL": {
    "args": "input",
    "body": "return isNaN(input) ? Number(input) : NA"
  },
  "BeforeStr": {
    "args": "input,before",
    "body": "return String(input).substring(0,String(input).indexOf(String(before)))"
  },
  "AfterStr": {
    "args": "input,after",
    "body": "return String(input).substring(String(input).indexOf(String(after)))"
  },
  "MutCalc": 1,
  "CalculatedInBaseCurrency": 1,
  "ScaleFactor": 1,
  "NoTrend": 1,
  "Trend": 1,
  "ApplicationStartDateTime": 1,
  "Values": 1,
  "X": 1,
  "MaxT": 1,
  "NumberOfyears": 17,
  "NA": 1e-10,
  "On": 1,
  "No": 0,
  "Off": 0,
  "True": 1,
  "False": 0,
  "ViewScaleFactor": 1,
  "Backward": 1,
  "Decimals": 2
}