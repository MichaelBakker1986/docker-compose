{
  "uimodel": {
    "_root": {
      "nodes": [
        "BR_value",
        "FR_value"
      ]
    },
    "BR_value": {
      "id": "BR",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "C1_value",
        "C2_value",
        "C3_value"
      ]
    },
    "C1_value": {
      "id": "C1",
      "type": "QuestionType",
      "displayAs": "ListAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C2_value": {
      "id": "C2",
      "type": "QuestionType",
      "displayAs": "ListAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C3_value": {
      "id": "C3",
      "type": "QuestionType",
      "displayAs": "BooleanAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "FR_value": {
      "id": "FR",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "FRS2_value",
        "FRS_value",
        "C301_value",
        "C400_value",
        "C443_value"
      ]
    },
    "FRS2_value": {
      "id": "FRS2",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "C4_value",
        "C5_value",
        "C6_value",
        "C7_value",
        "C8_value",
        "C9_value",
        "C10_value",
        "C11_value",
        "C12_value",
        "C13_value"
      ]
    },
    "C4_value": {
      "id": "C4",
      "type": "QuestionType",
      "displayAs": "MemoAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C5_value": {
      "id": "C5",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C6_value": {
      "id": "C6",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C7_value": {
      "id": "C7",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C8_value": {
      "id": "C8",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C9_value": {
      "id": "C9",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C10_value": {
      "id": "C10",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C11_value": {
      "id": "C11",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C12_value": {
      "id": "C12",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C13_value": {
      "id": "C13",
      "type": "ResultType",
      "displayAs": "TextAnswerType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": []
    },
    "FRS_value": {
      "id": "FRS",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "C14_value",
        "C15_value",
        "C16_value",
        "C17_value",
        "C18_value",
        "C19_value",
        "C20_value",
        "C21_value",
        "C22_value"
      ]
    },
    "C14_value": {
      "id": "C14",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C15_value": {
      "id": "C15",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C16_value": {
      "id": "C16",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C17_value": {
      "id": "C17",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C18_value": {
      "id": "C18",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C19_value": {
      "id": "C19",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C20_value": {
      "id": "C20",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C21_value": {
      "id": "C21",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C22_value": {
      "id": "C22",
      "type": "ResultType",
      "displayAs": "TextAnswerType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": []
    },
    "C301_value": {
      "id": "C301",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "C23_value",
        "C24_value",
        "C25_value",
        "C26_value",
        "C27_value",
        "C28_value"
      ]
    },
    "C23_value": {
      "id": "C23",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C24_value": {
      "id": "C24",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C25_value": {
      "id": "C25",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C26_value": {
      "id": "C26",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C27_value": {
      "id": "C27",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C28_value": {
      "id": "C28",
      "type": "ResultType",
      "displayAs": "TextAnswerType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": []
    },
    "C400_value": {
      "id": "C400",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "C29_value",
        "C30_value",
        "C31_value",
        "C32_value",
        "C33_value"
      ]
    },
    "C29_value": {
      "id": "C29",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C30_value": {
      "id": "C30",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C31_value": {
      "id": "C31",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C32_value": {
      "id": "C32",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C33_value": {
      "id": "C33",
      "type": "ResultType",
      "displayAs": "TextAnswerType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": []
    },
    "C443_value": {
      "id": "C443",
      "type": "SectionType",
      "mandatoryRule": false,
      "validationRule": false,
      "nodes": [
        "C34_value",
        "C35_value",
        "C36_value",
        "C37_value",
        "C38_value",
        "C39_value",
        "C40_value"
      ]
    },
    "C34_value": {
      "id": "C34",
      "type": "QuestionType",
      "displayAs": "ListAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C35_value": {
      "id": "C35",
      "type": "QuestionType",
      "displayAs": "NumberAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C36_value": {
      "id": "C36",
      "type": "QuestionType",
      "displayAs": "AmountAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C37_value": {
      "id": "C37",
      "type": "QuestionType",
      "displayAs": "ListAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C38_value": {
      "id": "C38",
      "type": "QuestionType",
      "displayAs": "ListAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C39_value": {
      "id": "C39",
      "type": "QuestionType",
      "displayAs": "NumberAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    },
    "C40_value": {
      "id": "C40",
      "type": "QuestionType",
      "displayAs": "NumberAnswerType",
      "mandatoryRule": true,
      "validationRule": false,
      "nodes": []
    }
  },
  "uiLinks": {
    "BR_title": {
      "name": "BR_title",
      "ref": 0
    },
    "BR_visible": {
      "name": "BR_visible",
      "ref": 1
    },
    "C1_choices": {
      "name": "C1_choices",
      "ref": 2
    },
    "C1_validateInput": {
      "name": "C1_validateInput",
      "ref": 3
    },
    "C1_required": {
      "name": "C1_required",
      "ref": 1
    },
    "C1_title": {
      "name": "C1_title",
      "ref": 4
    },
    "C1_visible": {
      "name": "C1_visible",
      "ref": 1
    },
    "C1_value": {
      "name": "C1_value",
      "ref": 5
    },
    "C1_locked": {
      "name": "C1_locked",
      "ref": 6
    },
    "C2_choices": {
      "name": "C2_choices",
      "ref": 7
    },
    "C2_validateInput": {
      "name": "C2_validateInput",
      "ref": 8
    },
    "C2_required": {
      "name": "C2_required",
      "ref": 1
    },
    "C2_title": {
      "name": "C2_title",
      "ref": 9
    },
    "C2_visible": {
      "name": "C2_visible",
      "ref": 1
    },
    "C2_value": {
      "name": "C2_value",
      "ref": 5
    },
    "C2_locked": {
      "name": "C2_locked",
      "ref": 6
    },
    "C3_choices": {
      "name": "C3_choices",
      "ref": 10
    },
    "C3_validateInput": {
      "name": "C3_validateInput",
      "ref": 11
    },
    "C3_required": {
      "name": "C3_required",
      "ref": 1
    },
    "C3_title": {
      "name": "C3_title",
      "ref": 12
    },
    "C3_visible": {
      "name": "C3_visible",
      "ref": 1
    },
    "C3_value": {
      "name": "C3_value",
      "ref": 5
    },
    "C3_locked": {
      "name": "C3_locked",
      "ref": 6
    },
    "BR_locked": {
      "name": "BR_locked",
      "ref": 1
    },
    "FR_title": {
      "name": "FR_title",
      "ref": 13
    },
    "FR_visible": {
      "name": "FR_visible",
      "ref": 1
    },
    "FRS2_title": {
      "name": "FRS2_title",
      "ref": 14
    },
    "FRS2_visible": {
      "name": "FRS2_visible",
      "ref": 1
    },
    "C4_validateInput": {
      "name": "C4_validateInput",
      "ref": 15
    },
    "C4_required": {
      "name": "C4_required",
      "ref": 6
    },
    "C4_title": {
      "name": "C4_title",
      "ref": 16
    },
    "C4_visible": {
      "name": "C4_visible",
      "ref": 1
    },
    "C4_value": {
      "name": "C4_value",
      "ref": 5
    },
    "C4_locked": {
      "name": "C4_locked",
      "ref": 6
    },
    "C5_validateInput": {
      "name": "C5_validateInput",
      "ref": 17
    },
    "C5_required": {
      "name": "C5_required",
      "ref": 6
    },
    "C5_title": {
      "name": "C5_title",
      "ref": 18
    },
    "C5_visible": {
      "name": "C5_visible",
      "ref": 1
    },
    "C5_value": {
      "name": "C5_value",
      "ref": 5
    },
    "C5_locked": {
      "name": "C5_locked",
      "ref": 6
    },
    "C6_validateInput": {
      "name": "C6_validateInput",
      "ref": 19
    },
    "C6_required": {
      "name": "C6_required",
      "ref": 6
    },
    "C6_title": {
      "name": "C6_title",
      "ref": 20
    },
    "C6_visible": {
      "name": "C6_visible",
      "ref": 1
    },
    "C6_value": {
      "name": "C6_value",
      "ref": 5
    },
    "C6_locked": {
      "name": "C6_locked",
      "ref": 6
    },
    "C7_validateInput": {
      "name": "C7_validateInput",
      "ref": 21
    },
    "C7_required": {
      "name": "C7_required",
      "ref": 6
    },
    "C7_title": {
      "name": "C7_title",
      "ref": 22
    },
    "C7_visible": {
      "name": "C7_visible",
      "ref": 1
    },
    "C7_value": {
      "name": "C7_value",
      "ref": 5
    },
    "C7_locked": {
      "name": "C7_locked",
      "ref": 6
    },
    "C8_validateInput": {
      "name": "C8_validateInput",
      "ref": 23
    },
    "C8_required": {
      "name": "C8_required",
      "ref": 6
    },
    "C8_title": {
      "name": "C8_title",
      "ref": 24
    },
    "C8_visible": {
      "name": "C8_visible",
      "ref": 1
    },
    "C8_value": {
      "name": "C8_value",
      "ref": 5
    },
    "C8_locked": {
      "name": "C8_locked",
      "ref": 6
    },
    "C9_validateInput": {
      "name": "C9_validateInput",
      "ref": 25
    },
    "C9_required": {
      "name": "C9_required",
      "ref": 6
    },
    "C9_title": {
      "name": "C9_title",
      "ref": 26
    },
    "C9_visible": {
      "name": "C9_visible",
      "ref": 1
    },
    "C9_value": {
      "name": "C9_value",
      "ref": 5
    },
    "C9_locked": {
      "name": "C9_locked",
      "ref": 6
    },
    "C10_validateInput": {
      "name": "C10_validateInput",
      "ref": 27
    },
    "C10_required": {
      "name": "C10_required",
      "ref": 6
    },
    "C10_title": {
      "name": "C10_title",
      "ref": 28
    },
    "C10_visible": {
      "name": "C10_visible",
      "ref": 1
    },
    "C10_value": {
      "name": "C10_value",
      "ref": 5
    },
    "C10_locked": {
      "name": "C10_locked",
      "ref": 6
    },
    "C11_validateInput": {
      "name": "C11_validateInput",
      "ref": 29
    },
    "C11_required": {
      "name": "C11_required",
      "ref": 6
    },
    "C11_title": {
      "name": "C11_title",
      "ref": 30
    },
    "C11_visible": {
      "name": "C11_visible",
      "ref": 1
    },
    "C11_value": {
      "name": "C11_value",
      "ref": 5
    },
    "C11_locked": {
      "name": "C11_locked",
      "ref": 6
    },
    "C12_validateInput": {
      "name": "C12_validateInput",
      "ref": 31
    },
    "C12_required": {
      "name": "C12_required",
      "ref": 6
    },
    "C12_title": {
      "name": "C12_title",
      "ref": 32
    },
    "C12_visible": {
      "name": "C12_visible",
      "ref": 1
    },
    "C12_value": {
      "name": "C12_value",
      "ref": 5
    },
    "C12_locked": {
      "name": "C12_locked",
      "ref": 6
    },
    "C13_title": {
      "name": "C13_title",
      "ref": 33
    },
    "C13_visible": {
      "name": "C13_visible",
      "ref": 1
    },
    "C13_value": {
      "name": "C13_value",
      "ref": 34
    },
    "C13_locked": {
      "name": "C13_locked",
      "ref": 1
    },
    "FRS2_locked": {
      "name": "FRS2_locked",
      "ref": 1
    },
    "FRS_title": {
      "name": "FRS_title",
      "ref": 35
    },
    "FRS_visible": {
      "name": "FRS_visible",
      "ref": 1
    },
    "C14_validateInput": {
      "name": "C14_validateInput",
      "ref": 36
    },
    "C14_required": {
      "name": "C14_required",
      "ref": 6
    },
    "C14_title": {
      "name": "C14_title",
      "ref": 16
    },
    "C14_visible": {
      "name": "C14_visible",
      "ref": 1
    },
    "C14_value": {
      "name": "C14_value",
      "ref": 5
    },
    "C14_locked": {
      "name": "C14_locked",
      "ref": 6
    },
    "C15_validateInput": {
      "name": "C15_validateInput",
      "ref": 37
    },
    "C15_required": {
      "name": "C15_required",
      "ref": 6
    },
    "C15_title": {
      "name": "C15_title",
      "ref": 18
    },
    "C15_visible": {
      "name": "C15_visible",
      "ref": 1
    },
    "C15_value": {
      "name": "C15_value",
      "ref": 5
    },
    "C15_locked": {
      "name": "C15_locked",
      "ref": 6
    },
    "C16_validateInput": {
      "name": "C16_validateInput",
      "ref": 38
    },
    "C16_required": {
      "name": "C16_required",
      "ref": 6
    },
    "C16_title": {
      "name": "C16_title",
      "ref": 20
    },
    "C16_visible": {
      "name": "C16_visible",
      "ref": 1
    },
    "C16_value": {
      "name": "C16_value",
      "ref": 5
    },
    "C16_locked": {
      "name": "C16_locked",
      "ref": 6
    },
    "C17_validateInput": {
      "name": "C17_validateInput",
      "ref": 39
    },
    "C17_required": {
      "name": "C17_required",
      "ref": 6
    },
    "C17_title": {
      "name": "C17_title",
      "ref": 22
    },
    "C17_visible": {
      "name": "C17_visible",
      "ref": 1
    },
    "C17_value": {
      "name": "C17_value",
      "ref": 5
    },
    "C17_locked": {
      "name": "C17_locked",
      "ref": 6
    },
    "C18_validateInput": {
      "name": "C18_validateInput",
      "ref": 40
    },
    "C18_required": {
      "name": "C18_required",
      "ref": 6
    },
    "C18_title": {
      "name": "C18_title",
      "ref": 24
    },
    "C18_visible": {
      "name": "C18_visible",
      "ref": 1
    },
    "C18_value": {
      "name": "C18_value",
      "ref": 5
    },
    "C18_locked": {
      "name": "C18_locked",
      "ref": 6
    },
    "C19_validateInput": {
      "name": "C19_validateInput",
      "ref": 41
    },
    "C19_required": {
      "name": "C19_required",
      "ref": 6
    },
    "C19_title": {
      "name": "C19_title",
      "ref": 26
    },
    "C19_visible": {
      "name": "C19_visible",
      "ref": 1
    },
    "C19_value": {
      "name": "C19_value",
      "ref": 5
    },
    "C19_locked": {
      "name": "C19_locked",
      "ref": 6
    },
    "C20_validateInput": {
      "name": "C20_validateInput",
      "ref": 42
    },
    "C20_required": {
      "name": "C20_required",
      "ref": 6
    },
    "C20_title": {
      "name": "C20_title",
      "ref": 28
    },
    "C20_visible": {
      "name": "C20_visible",
      "ref": 1
    },
    "C20_value": {
      "name": "C20_value",
      "ref": 5
    },
    "C20_locked": {
      "name": "C20_locked",
      "ref": 6
    },
    "C21_validateInput": {
      "name": "C21_validateInput",
      "ref": 43
    },
    "C21_required": {
      "name": "C21_required",
      "ref": 6
    },
    "C21_title": {
      "name": "C21_title",
      "ref": 32
    },
    "C21_visible": {
      "name": "C21_visible",
      "ref": 1
    },
    "C21_value": {
      "name": "C21_value",
      "ref": 5
    },
    "C21_locked": {
      "name": "C21_locked",
      "ref": 6
    },
    "C22_title": {
      "name": "C22_title",
      "ref": 33
    },
    "C22_visible": {
      "name": "C22_visible",
      "ref": 1
    },
    "C22_value": {
      "name": "C22_value",
      "ref": 44
    },
    "C22_locked": {
      "name": "C22_locked",
      "ref": 1
    },
    "FRS_locked": {
      "name": "FRS_locked",
      "ref": 1
    },
    "C301_title": {
      "name": "C301_title",
      "ref": 45
    },
    "C301_visible": {
      "name": "C301_visible",
      "ref": 1
    },
    "C23_validateInput": {
      "name": "C23_validateInput",
      "ref": 46
    },
    "C23_required": {
      "name": "C23_required",
      "ref": 6
    },
    "C23_title": {
      "name": "C23_title",
      "ref": 47
    },
    "C23_visible": {
      "name": "C23_visible",
      "ref": 1
    },
    "C23_value": {
      "name": "C23_value",
      "ref": 5
    },
    "C23_locked": {
      "name": "C23_locked",
      "ref": 6
    },
    "C24_validateInput": {
      "name": "C24_validateInput",
      "ref": 48
    },
    "C24_required": {
      "name": "C24_required",
      "ref": 6
    },
    "C24_title": {
      "name": "C24_title",
      "ref": 49
    },
    "C24_visible": {
      "name": "C24_visible",
      "ref": 1
    },
    "C24_value": {
      "name": "C24_value",
      "ref": 5
    },
    "C24_locked": {
      "name": "C24_locked",
      "ref": 6
    },
    "C25_validateInput": {
      "name": "C25_validateInput",
      "ref": 50
    },
    "C25_required": {
      "name": "C25_required",
      "ref": 6
    },
    "C25_title": {
      "name": "C25_title",
      "ref": 51
    },
    "C25_visible": {
      "name": "C25_visible",
      "ref": 1
    },
    "C25_value": {
      "name": "C25_value",
      "ref": 5
    },
    "C25_locked": {
      "name": "C25_locked",
      "ref": 6
    },
    "C26_validateInput": {
      "name": "C26_validateInput",
      "ref": 52
    },
    "C26_required": {
      "name": "C26_required",
      "ref": 6
    },
    "C26_title": {
      "name": "C26_title",
      "ref": 53
    },
    "C26_visible": {
      "name": "C26_visible",
      "ref": 1
    },
    "C26_value": {
      "name": "C26_value",
      "ref": 5
    },
    "C26_locked": {
      "name": "C26_locked",
      "ref": 6
    },
    "C27_validateInput": {
      "name": "C27_validateInput",
      "ref": 54
    },
    "C27_required": {
      "name": "C27_required",
      "ref": 6
    },
    "C27_title": {
      "name": "C27_title",
      "ref": 55
    },
    "C27_visible": {
      "name": "C27_visible",
      "ref": 1
    },
    "C27_value": {
      "name": "C27_value",
      "ref": 5
    },
    "C27_locked": {
      "name": "C27_locked",
      "ref": 6
    },
    "C28_title": {
      "name": "C28_title",
      "ref": 33
    },
    "C28_visible": {
      "name": "C28_visible",
      "ref": 1
    },
    "C28_value": {
      "name": "C28_value",
      "ref": 56
    },
    "C28_locked": {
      "name": "C28_locked",
      "ref": 1
    },
    "C301_locked": {
      "name": "C301_locked",
      "ref": 1
    },
    "C400_title": {
      "name": "C400_title",
      "ref": 57
    },
    "C400_visible": {
      "name": "C400_visible",
      "ref": 1
    },
    "C29_validateInput": {
      "name": "C29_validateInput",
      "ref": 58
    },
    "C29_required": {
      "name": "C29_required",
      "ref": 6
    },
    "C29_title": {
      "name": "C29_title",
      "ref": 59
    },
    "C29_visible": {
      "name": "C29_visible",
      "ref": 1
    },
    "C29_value": {
      "name": "C29_value",
      "ref": 5
    },
    "C29_locked": {
      "name": "C29_locked",
      "ref": 6
    },
    "C30_validateInput": {
      "name": "C30_validateInput",
      "ref": 60
    },
    "C30_required": {
      "name": "C30_required",
      "ref": 6
    },
    "C30_title": {
      "name": "C30_title",
      "ref": 61
    },
    "C30_visible": {
      "name": "C30_visible",
      "ref": 1
    },
    "C30_value": {
      "name": "C30_value",
      "ref": 5
    },
    "C30_locked": {
      "name": "C30_locked",
      "ref": 6
    },
    "C31_validateInput": {
      "name": "C31_validateInput",
      "ref": 62
    },
    "C31_required": {
      "name": "C31_required",
      "ref": 6
    },
    "C31_title": {
      "name": "C31_title",
      "ref": 63
    },
    "C31_visible": {
      "name": "C31_visible",
      "ref": 1
    },
    "C31_value": {
      "name": "C31_value",
      "ref": 5
    },
    "C31_locked": {
      "name": "C31_locked",
      "ref": 6
    },
    "C32_validateInput": {
      "name": "C32_validateInput",
      "ref": 64
    },
    "C32_required": {
      "name": "C32_required",
      "ref": 6
    },
    "C32_title": {
      "name": "C32_title",
      "ref": 65
    },
    "C32_visible": {
      "name": "C32_visible",
      "ref": 1
    },
    "C32_value": {
      "name": "C32_value",
      "ref": 5
    },
    "C32_locked": {
      "name": "C32_locked",
      "ref": 6
    },
    "C33_title": {
      "name": "C33_title",
      "ref": 33
    },
    "C33_visible": {
      "name": "C33_visible",
      "ref": 1
    },
    "C33_value": {
      "name": "C33_value",
      "ref": 66
    },
    "C33_locked": {
      "name": "C33_locked",
      "ref": 1
    },
    "C400_locked": {
      "name": "C400_locked",
      "ref": 1
    },
    "C443_title": {
      "name": "C443_title",
      "ref": 67
    },
    "C443_visible": {
      "name": "C443_visible",
      "ref": 1
    },
    "C34_choices": {
      "name": "C34_choices",
      "ref": 68
    },
    "C34_validateInput": {
      "name": "C34_validateInput",
      "ref": 69
    },
    "C34_required": {
      "name": "C34_required",
      "ref": 6
    },
    "C34_title": {
      "name": "C34_title",
      "ref": 70
    },
    "C34_visible": {
      "name": "C34_visible",
      "ref": 1
    },
    "C34_value": {
      "name": "C34_value",
      "ref": 5
    },
    "C34_locked": {
      "name": "C34_locked",
      "ref": 6
    },
    "C35_validateInput": {
      "name": "C35_validateInput",
      "ref": 71
    },
    "C35_required": {
      "name": "C35_required",
      "ref": 1
    },
    "C35_title": {
      "name": "C35_title",
      "ref": 72
    },
    "C35_visible": {
      "name": "C35_visible",
      "ref": 1
    },
    "C35_value": {
      "name": "C35_value",
      "ref": 5
    },
    "C35_locked": {
      "name": "C35_locked",
      "ref": 6
    },
    "C36_validateInput": {
      "name": "C36_validateInput",
      "ref": 73
    },
    "C36_required": {
      "name": "C36_required",
      "ref": 1
    },
    "C36_title": {
      "name": "C36_title",
      "ref": 74
    },
    "C36_visible": {
      "name": "C36_visible",
      "ref": 1
    },
    "C36_value": {
      "name": "C36_value",
      "ref": 5
    },
    "C36_locked": {
      "name": "C36_locked",
      "ref": 6
    },
    "C37_choices": {
      "name": "C37_choices",
      "ref": 75
    },
    "C37_validateInput": {
      "name": "C37_validateInput",
      "ref": 76
    },
    "C37_required": {
      "name": "C37_required",
      "ref": 1
    },
    "C37_title": {
      "name": "C37_title",
      "ref": 77
    },
    "C37_visible": {
      "name": "C37_visible",
      "ref": 1
    },
    "C37_value": {
      "name": "C37_value",
      "ref": 5
    },
    "C37_locked": {
      "name": "C37_locked",
      "ref": 6
    },
    "C38_choices": {
      "name": "C38_choices",
      "ref": 78
    },
    "C38_validateInput": {
      "name": "C38_validateInput",
      "ref": 79
    },
    "C38_required": {
      "name": "C38_required",
      "ref": 6
    },
    "C38_title": {
      "name": "C38_title",
      "ref": 80
    },
    "C38_visible": {
      "name": "C38_visible",
      "ref": 1
    },
    "C38_value": {
      "name": "C38_value",
      "ref": 5
    },
    "C38_locked": {
      "name": "C38_locked",
      "ref": 6
    },
    "C39_validateInput": {
      "name": "C39_validateInput",
      "ref": 81
    },
    "C39_required": {
      "name": "C39_required",
      "ref": 1
    },
    "C39_title": {
      "name": "C39_title",
      "ref": 82
    },
    "C39_visible": {
      "name": "C39_visible",
      "ref": 1
    },
    "C39_value": {
      "name": "C39_value",
      "ref": 5
    },
    "C39_locked": {
      "name": "C39_locked",
      "ref": 6
    },
    "C40_validateInput": {
      "name": "C40_validateInput",
      "ref": 83
    },
    "C40_required": {
      "name": "C40_required",
      "ref": 1
    },
    "C40_title": {
      "name": "C40_title",
      "ref": 84
    },
    "C40_visible": {
      "name": "C40_visible",
      "ref": 1
    },
    "C40_value": {
      "name": "C40_value",
      "ref": 5
    },
    "C40_locked": {
      "name": "C40_locked",
      "ref": 6
    },
    "C443_locked": {
      "name": "C443_locked",
      "ref": 1
    },
    "FR_locked": {
      "name": "FR_locked",
      "ref": 1
    }
  },
  "variables": {
    "BR": {
      "name": "BR"
    },
    "C1": {
      "name": "C1"
    },
    "C2": {
      "name": "C2"
    },
    "C3": {
      "name": "C3"
    },
    "FR": {
      "name": "FR"
    },
    "FRS2": {
      "name": "FRS2"
    },
    "C4": {
      "name": "C4"
    },
    "C5": {
      "name": "C5"
    },
    "C6": {
      "name": "C6"
    },
    "C7": {
      "name": "C7"
    },
    "C8": {
      "name": "C8"
    },
    "C9": {
      "name": "C9"
    },
    "C10": {
      "name": "C10"
    },
    "C11": {
      "name": "C11"
    },
    "C12": {
      "name": "C12"
    },
    "C13": {
      "name": "C13"
    },
    "FRS": {
      "name": "FRS"
    },
    "C14": {
      "name": "C14"
    },
    "C15": {
      "name": "C15"
    },
    "C16": {
      "name": "C16"
    },
    "C17": {
      "name": "C17"
    },
    "C18": {
      "name": "C18"
    },
    "C19": {
      "name": "C19"
    },
    "C20": {
      "name": "C20"
    },
    "C21": {
      "name": "C21"
    },
    "C22": {
      "name": "C22"
    },
    "C301": {
      "name": "C301"
    },
    "C23": {
      "name": "C23"
    },
    "C24": {
      "name": "C24"
    },
    "C25": {
      "name": "C25"
    },
    "C26": {
      "name": "C26"
    },
    "C27": {
      "name": "C27"
    },
    "C28": {
      "name": "C28"
    },
    "C400": {
      "name": "C400"
    },
    "C29": {
      "name": "C29"
    },
    "C30": {
      "name": "C30"
    },
    "C31": {
      "name": "C31"
    },
    "C32": {
      "name": "C32"
    },
    "C33": {
      "name": "C33"
    },
    "C443": {
      "name": "C443"
    },
    "C34": {
      "name": "C34"
    },
    "C35": {
      "name": "C35"
    },
    "C36": {
      "name": "C36"
    },
    "C37": {
      "name": "C37"
    },
    "C38": {
      "name": "C38"
    },
    "C39": {
      "name": "C39"
    },
    "C40": {
      "name": "C40"
    }
  },
  "formulas": [
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "BUSINESS RISK"
              },
              "alternate": {
                "type": "Literal",
                "value": "BUSINESS RISK"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'BUSINESS RISK' : 'BUSINESS RISK';",
      "refs": {
        "BR_title": true
      },
      "deps": {},
      "index": 0,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'BUSINESS RISK' : 'BUSINESS RISK';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "Identifier",
              "name": true
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "true;",
      "refs": {
        "BR_visible": true,
        "C1_required": true,
        "C1_visible": true,
        "C2_required": true,
        "C2_visible": true,
        "C3_required": true,
        "C3_visible": true,
        "BR_locked": true,
        "FR_visible": true,
        "FRS2_visible": true,
        "C4_visible": true,
        "C5_visible": true,
        "C6_visible": true,
        "C7_visible": true,
        "C8_visible": true,
        "C9_visible": true,
        "C10_visible": true,
        "C11_visible": true,
        "C12_visible": true,
        "C13_visible": true,
        "C13_locked": true,
        "FRS2_locked": true,
        "FRS_visible": true,
        "C14_visible": true,
        "C15_visible": true,
        "C16_visible": true,
        "C17_visible": true,
        "C18_visible": true,
        "C19_visible": true,
        "C20_visible": true,
        "C21_visible": true,
        "C22_visible": true,
        "C22_locked": true,
        "FRS_locked": true,
        "C301_visible": true,
        "C23_visible": true,
        "C24_visible": true,
        "C25_visible": true,
        "C26_visible": true,
        "C27_visible": true,
        "C28_visible": true,
        "C28_locked": true,
        "C301_locked": true,
        "C400_visible": true,
        "C29_visible": true,
        "C30_visible": true,
        "C31_visible": true,
        "C32_visible": true,
        "C33_visible": true,
        "C33_locked": true,
        "C400_locked": true,
        "C443_visible": true,
        "C34_visible": true,
        "C35_required": true,
        "C35_visible": true,
        "C36_required": true,
        "C36_visible": true,
        "C37_required": true,
        "C37_visible": true,
        "C38_visible": true,
        "C39_required": true,
        "C39_visible": true,
        "C40_required": true,
        "C40_visible": true,
        "C443_locked": true,
        "FR_locked": true
      },
      "deps": {},
      "index": 1,
      "parsed": "true;"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Very good"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Zeer goed"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Good"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Goed"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Average"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Gemiddeld"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "D"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Below average"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Ondergemiddeld"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "E"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Special attention"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Speciale aandacht"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                }
              ]
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Very good' : 'Zeer goed' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Good' : 'Goed' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Average' : 'Gemiddeld' }, { 'name': 'D', 'value': 'en' === SETTINGS.LANGUAGE ? 'Below average' : 'Ondergemiddeld' }, { 'name': 'E', 'value': 'en' === SETTINGS.LANGUAGE ? 'Special attention' : 'Speciale aandacht' }];",
      "refs": {
        "C1_choices": true
      },
      "deps": {},
      "index": 2,
      "parsed": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Very good' : 'Zeer goed' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Good' : 'Goed' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Average' : 'Gemiddeld' }, { 'name': 'D', 'value': 'en' === SETTINGS.LANGUAGE ? 'Below average' : 'Ondergemiddeld' }, { 'name': 'E', 'value': 'en' === SETTINGS.LANGUAGE ? 'Special attention' : 'Speciale aandacht' }];"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "this.C1_value('C1_value',x,y,z,v)"
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Literal",
                    "value": "E"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C1_value('C1_value',x,y,z,v)"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": ""
                },
                "alternate": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Literal",
                      "value": "D"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "this.C1_value('C1_value',x,y,z,v)"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": ""
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "this.C1_value('C1_value',x,y,z,v)"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": ""
                    },
                    "alternate": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Literal",
                          "value": "B"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "this.C1_value('C1_value',x,y,z,v)"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": ""
                      },
                      "alternate": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "A"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "this.C1_value('C1_value',x,y,z,v)"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": ""
                        },
                        "alternate": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "Literal",
                              "value": "Value "
                            },
                            "right": {
                              "type": "Identifier",
                              "name": "this.C1_value('C1_value',x,y,z,v)"
                            }
                          },
                          "right": {
                            "type": "Literal",
                            "value": " must be one of these: A, B, C, D, E"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C1 === undefined ? '' : 'E' === C1 ? '' : 'D' === C1 ? '' : 'C' === C1 ? '' : 'B' === C1 ? '' : 'A' === C1 ? '' : 'Value ' + C1 + ' must be one of these: A, B, C, D, E';",
      "refs": {
        "C1_validateInput": true
      },
      "deps": {
        "C1_value": true
      },
      "index": 3,
      "parsed": "this.C1_value('C1_value',x,y,z,v) === undefined ? '' : 'E' === this.C1_value('C1_value',x,y,z,v) ? '' : 'D' === this.C1_value('C1_value',x,y,z,v) ? '' : 'C' === this.C1_value('C1_value',x,y,z,v) ? '' : 'B' === this.C1_value('C1_value',x,y,z,v) ? '' : 'A' === this.C1_value('C1_value',x,y,z,v) ? '' : 'Value ' + this.C1_value('C1_value',x,y,z,v) + ' must be one of these: A, B, C, D, E';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Credit history"
              },
              "alternate": {
                "type": "Literal",
                "value": "Kredietverleden"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Credit history' : 'Kredietverleden';",
      "refs": {
        "C1_title": true
      },
      "deps": {},
      "index": 4,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Credit history' : 'Kredietverleden';"
    },
    {
      "type": "noCacheUnlocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "Identifier",
              "name": "undefined"
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "undefined;",
      "refs": {
        "C1_value": true,
        "C2_value": true,
        "C3_value": true,
        "C4_value": true,
        "C5_value": true,
        "C6_value": true,
        "C7_value": true,
        "C8_value": true,
        "C9_value": true,
        "C10_value": true,
        "C11_value": true,
        "C12_value": true,
        "C14_value": true,
        "C15_value": true,
        "C16_value": true,
        "C17_value": true,
        "C18_value": true,
        "C19_value": true,
        "C20_value": true,
        "C21_value": true,
        "C23_value": true,
        "C24_value": true,
        "C25_value": true,
        "C26_value": true,
        "C27_value": true,
        "C29_value": true,
        "C30_value": true,
        "C31_value": true,
        "C32_value": true,
        "C34_value": true,
        "C35_value": true,
        "C36_value": true,
        "C37_value": true,
        "C38_value": true,
        "C39_value": true,
        "C40_value": true
      },
      "deps": {},
      "index": 5,
      "parsed": "undefined;"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "Identifier",
              "name": false
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "false;",
      "refs": {
        "C1_locked": true,
        "C2_locked": true,
        "C3_locked": true,
        "C4_required": true,
        "C4_locked": true,
        "C5_required": true,
        "C5_locked": true,
        "C6_required": true,
        "C6_locked": true,
        "C7_required": true,
        "C7_locked": true,
        "C8_required": true,
        "C8_locked": true,
        "C9_required": true,
        "C9_locked": true,
        "C10_required": true,
        "C10_locked": true,
        "C11_required": true,
        "C11_locked": true,
        "C12_required": true,
        "C12_locked": true,
        "C14_required": true,
        "C14_locked": true,
        "C15_required": true,
        "C15_locked": true,
        "C16_required": true,
        "C16_locked": true,
        "C17_required": true,
        "C17_locked": true,
        "C18_required": true,
        "C18_locked": true,
        "C19_required": true,
        "C19_locked": true,
        "C20_required": true,
        "C20_locked": true,
        "C21_required": true,
        "C21_locked": true,
        "C23_required": true,
        "C23_locked": true,
        "C24_required": true,
        "C24_locked": true,
        "C25_required": true,
        "C25_locked": true,
        "C26_required": true,
        "C26_locked": true,
        "C27_required": true,
        "C27_locked": true,
        "C29_required": true,
        "C29_locked": true,
        "C30_required": true,
        "C30_locked": true,
        "C31_required": true,
        "C31_locked": true,
        "C32_required": true,
        "C32_locked": true,
        "C34_required": true,
        "C34_locked": true,
        "C35_locked": true,
        "C36_locked": true,
        "C37_locked": true,
        "C38_required": true,
        "C38_locked": true,
        "C39_locked": true,
        "C40_locked": true
      },
      "deps": {},
      "index": 6,
      "parsed": "false;"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Reduced"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Gunstig"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Average"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Gemiddeld"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Increased"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Verhoogd"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                }
              ]
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Reduced' : 'Gunstig' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Average' : 'Gemiddeld' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Increased' : 'Verhoogd' }];",
      "refs": {
        "C2_choices": true
      },
      "deps": {},
      "index": 7,
      "parsed": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Reduced' : 'Gunstig' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Average' : 'Gemiddeld' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Increased' : 'Verhoogd' }];"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "this.C2_value('C2_value',x,y,z,v)"
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Literal",
                    "value": "C"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C2_value('C2_value',x,y,z,v)"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": ""
                },
                "alternate": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Literal",
                      "value": "B"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "this.C2_value('C2_value',x,y,z,v)"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": ""
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "this.C2_value('C2_value',x,y,z,v)"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": ""
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Literal",
                          "value": "Value "
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "this.C2_value('C2_value',x,y,z,v)"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": " must be one of these: A, B, C"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C2 === undefined ? '' : 'C' === C2 ? '' : 'B' === C2 ? '' : 'A' === C2 ? '' : 'Value ' + C2 + ' must be one of these: A, B, C';",
      "refs": {
        "C2_validateInput": true
      },
      "deps": {
        "C2_value": true
      },
      "index": 8,
      "parsed": "this.C2_value('C2_value',x,y,z,v) === undefined ? '' : 'C' === this.C2_value('C2_value',x,y,z,v) ? '' : 'B' === this.C2_value('C2_value',x,y,z,v) ? '' : 'A' === this.C2_value('C2_value',x,y,z,v) ? '' : 'Value ' + this.C2_value('C2_value',x,y,z,v) + ' must be one of these: A, B, C';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Risk profile"
              },
              "alternate": {
                "type": "Literal",
                "value": "Risicoprofiel"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Risk profile' : 'Risicoprofiel';",
      "refs": {
        "C2_title": true
      },
      "deps": {},
      "index": 9,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Risk profile' : 'Risicoprofiel';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Stable and sustainable"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Stabiel en zeer bestendig"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Stable"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Stabiel"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Instable / no info"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Instabiel / geen info"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                }
              ]
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Stable and sustainable' : 'Stabiel en zeer bestendig' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Stable' : 'Stabiel' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Instable / no info' : 'Instabiel / geen info' }];",
      "refs": {
        "C3_choices": true
      },
      "deps": {},
      "index": 10,
      "parsed": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Stable and sustainable' : 'Stabiel en zeer bestendig' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Stable' : 'Stabiel' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Instable / no info' : 'Instabiel / geen info' }];"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "this.C3_value('C3_value',x,y,z,v)"
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Literal",
                    "value": "C"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C3_value('C3_value',x,y,z,v)"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": ""
                },
                "alternate": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Literal",
                      "value": "B"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "this.C3_value('C3_value',x,y,z,v)"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": ""
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "this.C3_value('C3_value',x,y,z,v)"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": ""
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Literal",
                          "value": "Value "
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "this.C3_value('C3_value',x,y,z,v)"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": " must be one of these: A, B, C"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C3 === undefined ? '' : 'C' === C3 ? '' : 'B' === C3 ? '' : 'A' === C3 ? '' : 'Value ' + C3 + ' must be one of these: A, B, C';",
      "refs": {
        "C3_validateInput": true
      },
      "deps": {
        "C3_value": true
      },
      "index": 11,
      "parsed": "this.C3_value('C3_value',x,y,z,v) === undefined ? '' : 'C' === this.C3_value('C3_value',x,y,z,v) ? '' : 'B' === this.C3_value('C3_value',x,y,z,v) ? '' : 'A' === this.C3_value('C3_value',x,y,z,v) ? '' : 'Value ' + this.C3_value('C3_value',x,y,z,v) + ' must be one of these: A, B, C';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Source of income"
              },
              "alternate": {
                "type": "Literal",
                "value": "Inkomstenbron"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Source of income' : 'Inkomstenbron';",
      "refs": {
        "C3_title": true
      },
      "deps": {},
      "index": 12,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Source of income' : 'Inkomstenbron';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "FINANCIAL RISK"
              },
              "alternate": {
                "type": "Literal",
                "value": "FINANCIAL RISK"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'FINANCIAL RISK' : 'FINANCIAL RISK';",
      "refs": {
        "FR_title": true
      },
      "deps": {},
      "index": 13,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'FINANCIAL RISK' : 'FINANCIAL RISK';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Assets (market value)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Bezittingen (marktwaarde)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Assets (market value)' : 'Bezittingen (marktwaarde)';",
      "refs": {
        "FRS2_title": true
      },
      "deps": {},
      "index": 14,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Assets (market value)' : 'Bezittingen (marktwaarde)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C4_value('C4_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C4_value('C4_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C4_value('C4_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C4_value('C4_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C4_value('C4_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C4_value('C4_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C4 === undefined || !isNaN(parseFloat(C4)) && parseFloat(C4) && C4 >= 0 && true && C4 <= 999999999 && true && true ? '' : 'value ' + C4 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C4_validateInput": true
      },
      "deps": {
        "C4_value": true
      },
      "index": 15,
      "parsed": "this.C4_value('C4_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C4_value('C4_value',x,y,z,v))) && parseFloat(this.C4_value('C4_value',x,y,z,v)) && this.C4_value('C4_value',x,y,z,v) >= 0 && true && this.C4_value('C4_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C4_value('C4_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Cash & marketable securities"
              },
              "alternate": {
                "type": "Literal",
                "value": "Kassaldi & verhandelbare effecten"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Cash & marketable securities' : 'Kassaldi & verhandelbare effecten';",
      "refs": {
        "C4_title": true,
        "C14_title": true
      },
      "deps": {},
      "index": 16,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Cash & marketable securities' : 'Kassaldi & verhandelbare effecten';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C5_value('C5_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C5_value('C5_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C5_value('C5_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C5_value('C5_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C5_value('C5_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C5_value('C5_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C5 === undefined || !isNaN(parseFloat(C5)) && parseFloat(C5) && C5 >= 0 && true && C5 <= 999999999 && true && true ? '' : 'value ' + C5 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C5_validateInput": true
      },
      "deps": {
        "C5_value": true
      },
      "index": 17,
      "parsed": "this.C5_value('C5_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C5_value('C5_value',x,y,z,v))) && parseFloat(this.C5_value('C5_value',x,y,z,v)) && this.C5_value('C5_value',x,y,z,v) >= 0 && true && this.C5_value('C5_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C5_value('C5_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Residential real estate - owner occupied"
              },
              "alternate": {
                "type": "Literal",
                "value": "Residentieel onroerend goed - eigen gebruik"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Residential real estate - owner occupied' : 'Residentieel onroerend goed - eigen gebruik';",
      "refs": {
        "C5_title": true,
        "C15_title": true
      },
      "deps": {},
      "index": 18,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Residential real estate - owner occupied' : 'Residentieel onroerend goed - eigen gebruik';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C6_value('C6_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C6_value('C6_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C6_value('C6_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C6_value('C6_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C6_value('C6_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C6_value('C6_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C6 === undefined || !isNaN(parseFloat(C6)) && parseFloat(C6) && C6 >= 0 && true && C6 <= 999999999 && true && true ? '' : 'value ' + C6 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C6_validateInput": true
      },
      "deps": {
        "C6_value": true
      },
      "index": 19,
      "parsed": "this.C6_value('C6_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C6_value('C6_value',x,y,z,v))) && parseFloat(this.C6_value('C6_value',x,y,z,v)) && this.C6_value('C6_value',x,y,z,v) >= 0 && true && this.C6_value('C6_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C6_value('C6_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Residential real estate - other"
              },
              "alternate": {
                "type": "Literal",
                "value": "Residentieel onroerend goed - overig"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Residential real estate - other' : 'Residentieel onroerend goed - overig';",
      "refs": {
        "C6_title": true,
        "C16_title": true
      },
      "deps": {},
      "index": 20,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Residential real estate - other' : 'Residentieel onroerend goed - overig';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C7_value('C7_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C7_value('C7_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C7_value('C7_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C7_value('C7_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C7_value('C7_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C7_value('C7_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C7 === undefined || !isNaN(parseFloat(C7)) && parseFloat(C7) && C7 >= 0 && true && C7 <= 999999999 && true && true ? '' : 'value ' + C7 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C7_validateInput": true
      },
      "deps": {
        "C7_value": true
      },
      "index": 21,
      "parsed": "this.C7_value('C7_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C7_value('C7_value',x,y,z,v))) && parseFloat(this.C7_value('C7_value',x,y,z,v)) && this.C7_value('C7_value',x,y,z,v) >= 0 && true && this.C7_value('C7_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C7_value('C7_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Commercial real estate - residential real estate"
              },
              "alternate": {
                "type": "Literal",
                "value": "Commercieel onroerend goed - woningen"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - residential real estate' : 'Commercieel onroerend goed - woningen';",
      "refs": {
        "C7_title": true,
        "C17_title": true
      },
      "deps": {},
      "index": 22,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - residential real estate' : 'Commercieel onroerend goed - woningen';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C8_value('C8_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C8_value('C8_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C8_value('C8_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C8_value('C8_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C8_value('C8_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C8_value('C8_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C8 === undefined || !isNaN(parseFloat(C8)) && parseFloat(C8) && C8 >= 0 && true && C8 <= 999999999 && true && true ? '' : 'value ' + C8 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C8_validateInput": true
      },
      "deps": {
        "C8_value": true
      },
      "index": 23,
      "parsed": "this.C8_value('C8_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C8_value('C8_value',x,y,z,v))) && parseFloat(this.C8_value('C8_value',x,y,z,v)) && this.C8_value('C8_value',x,y,z,v) >= 0 && true && this.C8_value('C8_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C8_value('C8_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Commercial real estate - retail"
              },
              "alternate": {
                "type": "Literal",
                "value": "Commercieel onroerend goed - retail"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - retail' : 'Commercieel onroerend goed - retail';",
      "refs": {
        "C8_title": true,
        "C18_title": true
      },
      "deps": {},
      "index": 24,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - retail' : 'Commercieel onroerend goed - retail';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C9_value('C9_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C9_value('C9_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C9_value('C9_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C9_value('C9_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C9_value('C9_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C9_value('C9_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C9 === undefined || !isNaN(parseFloat(C9)) && parseFloat(C9) && C9 >= 0 && true && C9 <= 999999999 && true && true ? '' : 'value ' + C9 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C9_validateInput": true
      },
      "deps": {
        "C9_value": true
      },
      "index": 25,
      "parsed": "this.C9_value('C9_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C9_value('C9_value',x,y,z,v))) && parseFloat(this.C9_value('C9_value',x,y,z,v)) && this.C9_value('C9_value',x,y,z,v) >= 0 && true && this.C9_value('C9_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C9_value('C9_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Commercial real estate - office buildings"
              },
              "alternate": {
                "type": "Literal",
                "value": "Commercieel onroerend goed - kantoren"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - office buildings' : 'Commercieel onroerend goed - kantoren';",
      "refs": {
        "C9_title": true,
        "C19_title": true
      },
      "deps": {},
      "index": 26,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - office buildings' : 'Commercieel onroerend goed - kantoren';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C10_value('C10_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C10_value('C10_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C10_value('C10_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C10_value('C10_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C10_value('C10_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C10_value('C10_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C10 === undefined || !isNaN(parseFloat(C10)) && parseFloat(C10) && C10 >= 0 && true && C10 <= 999999999 && true && true ? '' : 'value ' + C10 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C10_validateInput": true
      },
      "deps": {
        "C10_value": true
      },
      "index": 27,
      "parsed": "this.C10_value('C10_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C10_value('C10_value',x,y,z,v))) && parseFloat(this.C10_value('C10_value',x,y,z,v)) && this.C10_value('C10_value',x,y,z,v) >= 0 && true && this.C10_value('C10_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C10_value('C10_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Commercial real estate - other"
              },
              "alternate": {
                "type": "Literal",
                "value": "Commercieel onroerend goed - overig"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - other' : 'Commercieel onroerend goed - overig';",
      "refs": {
        "C10_title": true,
        "C20_title": true
      },
      "deps": {},
      "index": 28,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Commercial real estate - other' : 'Commercieel onroerend goed - overig';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C11_value('C11_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C11_value('C11_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C11_value('C11_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C11_value('C11_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C11_value('C11_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C11_value('C11_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C11 === undefined || !isNaN(parseFloat(C11)) && parseFloat(C11) && C11 >= 0 && true && C11 <= 999999999 && true && true ? '' : 'value ' + C11 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C11_validateInput": true
      },
      "deps": {
        "C11_value": true
      },
      "index": 29,
      "parsed": "this.C11_value('C11_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C11_value('C11_value',x,y,z,v))) && parseFloat(this.C11_value('C11_value',x,y,z,v)) && this.C11_value('C11_value',x,y,z,v) >= 0 && true && this.C11_value('C11_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C11_value('C11_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Net equity unlisted companies (controlling interest)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Eigen vermogen niet beursgenoteerde vennootschap(pen), controlerend belang"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Net equity unlisted companies (controlling interest)' : 'Eigen vermogen niet beursgenoteerde vennootschap(pen), controlerend belang';",
      "refs": {
        "C11_title": true
      },
      "deps": {},
      "index": 30,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Net equity unlisted companies (controlling interest)' : 'Eigen vermogen niet beursgenoteerde vennootschap(pen), controlerend belang';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C12_value('C12_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C12_value('C12_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C12_value('C12_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C12_value('C12_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C12_value('C12_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C12_value('C12_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C12 === undefined || !isNaN(parseFloat(C12)) && parseFloat(C12) && C12 >= 0 && true && C12 <= 999999999 && true && true ? '' : 'value ' + C12 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C12_validateInput": true
      },
      "deps": {
        "C12_value": true
      },
      "index": 31,
      "parsed": "this.C12_value('C12_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C12_value('C12_value',x,y,z,v))) && parseFloat(this.C12_value('C12_value',x,y,z,v)) && this.C12_value('C12_value',x,y,z,v) >= 0 && true && this.C12_value('C12_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C12_value('C12_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Other"
              },
              "alternate": {
                "type": "Literal",
                "value": "Overig"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Other' : 'Overig';",
      "refs": {
        "C12_title": true,
        "C21_title": true
      },
      "deps": {},
      "index": 32,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Other' : 'Overig';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Total"
              },
              "alternate": {
                "type": "Literal",
                "value": "Total"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Total' : 'Total';",
      "refs": {
        "C13_title": true,
        "C22_title": true,
        "C28_title": true,
        "C33_title": true
      },
      "deps": {},
      "index": 33,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Total' : 'Total';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "BinaryExpression",
                            "operator": "+",
                            "left": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "isNaN"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C4_value('C4_value',x,y,z,v)"
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "Literal",
                                    "value": 0
                                  },
                                  "alternate": {
                                    "type": "Identifier",
                                    "name": "this.C4_value('C4_value',x,y,z,v)"
                                  }
                                }
                              ]
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "ConditionalExpression",
                                  "test": {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "isNaN"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C5_value('C5_value',x,y,z,v)"
                                      }
                                    ]
                                  },
                                  "consequent": {
                                    "type": "Literal",
                                    "value": 0
                                  },
                                  "alternate": {
                                    "type": "Identifier",
                                    "name": "this.C5_value('C5_value',x,y,z,v)"
                                  }
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "parseFloat"
                            },
                            "arguments": [
                              {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "isNaN"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "this.C6_value('C6_value',x,y,z,v)"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "Literal",
                                  "value": 0
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "this.C6_value('C6_value',x,y,z,v)"
                                }
                              }
                            ]
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "parseFloat"
                          },
                          "arguments": [
                            {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "this.C7_value('C7_value',x,y,z,v)"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 0
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "this.C7_value('C7_value',x,y,z,v)"
                              }
                            }
                          ]
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "parseFloat"
                        },
                        "arguments": [
                          {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isNaN"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C8_value('C8_value',x,y,z,v)"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 0
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "this.C8_value('C8_value',x,y,z,v)"
                            }
                          }
                        ]
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isNaN"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "this.C9_value('C9_value',x,y,z,v)"
                              }
                            ]
                          },
                          "consequent": {
                            "type": "Literal",
                            "value": 0
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "this.C9_value('C9_value',x,y,z,v)"
                          }
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parseFloat"
                    },
                    "arguments": [
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isNaN"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "this.C10_value('C10_value',x,y,z,v)"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "this.C10_value('C10_value',x,y,z,v)"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "parseFloat"
                  },
                  "arguments": [
                    {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isNaN"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "this.C11_value('C11_value',x,y,z,v)"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "this.C11_value('C11_value',x,y,z,v)"
                      }
                    }
                  ]
                }
              },
              "right": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "parseFloat"
                },
                "arguments": [
                  {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isNaN"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "this.C12_value('C12_value',x,y,z,v)"
                        }
                      ]
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "this.C12_value('C12_value',x,y,z,v)"
                    }
                  }
                ]
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "parseFloat(isNaN(C4) ? 0 : C4) + parseFloat(isNaN(C5) ? 0 : C5) + parseFloat(isNaN(C6) ? 0 : C6) + parseFloat(isNaN(C7) ? 0 : C7) + parseFloat(isNaN(C8) ? 0 : C8) + parseFloat(isNaN(C9) ? 0 : C9) + parseFloat(isNaN(C10) ? 0 : C10) + parseFloat(isNaN(C11) ? 0 : C11) + parseFloat(isNaN(C12) ? 0 : C12);",
      "refs": {
        "C13_value": true
      },
      "deps": {
        "C4_value": true,
        "C5_value": true,
        "C6_value": true,
        "C7_value": true,
        "C8_value": true,
        "C9_value": true,
        "C10_value": true,
        "C11_value": true,
        "C12_value": true
      },
      "index": 34,
      "parsed": "parseFloat(isNaN(this.C4_value('C4_value',x,y,z,v)) ? 0 : this.C4_value('C4_value',x,y,z,v)) + parseFloat(isNaN(this.C5_value('C5_value',x,y,z,v)) ? 0 : this.C5_value('C5_value',x,y,z,v)) + parseFloat(isNaN(this.C6_value('C6_value',x,y,z,v)) ? 0 : this.C6_value('C6_value',x,y,z,v)) + parseFloat(isNaN(this.C7_value('C7_value',x,y,z,v)) ? 0 : this.C7_value('C7_value',x,y,z,v)) + parseFloat(isNaN(this.C8_value('C8_value',x,y,z,v)) ? 0 : this.C8_value('C8_value',x,y,z,v)) + parseFloat(isNaN(this.C9_value('C9_value',x,y,z,v)) ? 0 : this.C9_value('C9_value',x,y,z,v)) + parseFloat(isNaN(this.C10_value('C10_value',x,y,z,v)) ? 0 : this.C10_value('C10_value',x,y,z,v)) + parseFloat(isNaN(this.C11_value('C11_value',x,y,z,v)) ? 0 : this.C11_value('C11_value',x,y,z,v)) + parseFloat(isNaN(this.C12_value('C12_value',x,y,z,v)) ? 0 : this.C12_value('C12_value',x,y,z,v));"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Liabilities (face value)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Schulden (nominale waarde)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Liabilities (face value)' : 'Schulden (nominale waarde)';",
      "refs": {
        "FRS_title": true
      },
      "deps": {},
      "index": 35,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Liabilities (face value)' : 'Schulden (nominale waarde)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C14_value('C14_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C14_value('C14_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C14_value('C14_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C14_value('C14_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C14_value('C14_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C14_value('C14_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C14 === undefined || !isNaN(parseFloat(C14)) && parseFloat(C14) && C14 >= 0 && true && C14 <= 999999999 && true && true ? '' : 'value ' + C14 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C14_validateInput": true
      },
      "deps": {
        "C14_value": true
      },
      "index": 36,
      "parsed": "this.C14_value('C14_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C14_value('C14_value',x,y,z,v))) && parseFloat(this.C14_value('C14_value',x,y,z,v)) && this.C14_value('C14_value',x,y,z,v) >= 0 && true && this.C14_value('C14_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C14_value('C14_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C15_value('C15_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C15_value('C15_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C15_value('C15_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C15_value('C15_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C15_value('C15_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C15_value('C15_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C15 === undefined || !isNaN(parseFloat(C15)) && parseFloat(C15) && C15 >= 0 && true && C15 <= 999999999 && true && true ? '' : 'value ' + C15 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C15_validateInput": true
      },
      "deps": {
        "C15_value": true
      },
      "index": 37,
      "parsed": "this.C15_value('C15_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C15_value('C15_value',x,y,z,v))) && parseFloat(this.C15_value('C15_value',x,y,z,v)) && this.C15_value('C15_value',x,y,z,v) >= 0 && true && this.C15_value('C15_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C15_value('C15_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C16_value('C16_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C16_value('C16_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C16_value('C16_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C16_value('C16_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C16_value('C16_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C16_value('C16_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C16 === undefined || !isNaN(parseFloat(C16)) && parseFloat(C16) && C16 >= 0 && true && C16 <= 999999999 && true && true ? '' : 'value ' + C16 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C16_validateInput": true
      },
      "deps": {
        "C16_value": true
      },
      "index": 38,
      "parsed": "this.C16_value('C16_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C16_value('C16_value',x,y,z,v))) && parseFloat(this.C16_value('C16_value',x,y,z,v)) && this.C16_value('C16_value',x,y,z,v) >= 0 && true && this.C16_value('C16_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C16_value('C16_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C17_value('C17_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C17_value('C17_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C17_value('C17_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C17_value('C17_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C17_value('C17_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C17_value('C17_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C17 === undefined || !isNaN(parseFloat(C17)) && parseFloat(C17) && C17 >= 0 && true && C17 <= 999999999 && true && true ? '' : 'value ' + C17 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C17_validateInput": true
      },
      "deps": {
        "C17_value": true
      },
      "index": 39,
      "parsed": "this.C17_value('C17_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C17_value('C17_value',x,y,z,v))) && parseFloat(this.C17_value('C17_value',x,y,z,v)) && this.C17_value('C17_value',x,y,z,v) >= 0 && true && this.C17_value('C17_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C17_value('C17_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C18_value('C18_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C18_value('C18_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C18_value('C18_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C18_value('C18_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C18_value('C18_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C18_value('C18_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C18 === undefined || !isNaN(parseFloat(C18)) && parseFloat(C18) && C18 >= 0 && true && C18 <= 999999999 && true && true ? '' : 'value ' + C18 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C18_validateInput": true
      },
      "deps": {
        "C18_value": true
      },
      "index": 40,
      "parsed": "this.C18_value('C18_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C18_value('C18_value',x,y,z,v))) && parseFloat(this.C18_value('C18_value',x,y,z,v)) && this.C18_value('C18_value',x,y,z,v) >= 0 && true && this.C18_value('C18_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C18_value('C18_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C19_value('C19_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C19_value('C19_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C19_value('C19_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C19_value('C19_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C19_value('C19_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C19_value('C19_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C19 === undefined || !isNaN(parseFloat(C19)) && parseFloat(C19) && C19 >= 0 && true && C19 <= 999999999 && true && true ? '' : 'value ' + C19 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C19_validateInput": true
      },
      "deps": {
        "C19_value": true
      },
      "index": 41,
      "parsed": "this.C19_value('C19_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C19_value('C19_value',x,y,z,v))) && parseFloat(this.C19_value('C19_value',x,y,z,v)) && this.C19_value('C19_value',x,y,z,v) >= 0 && true && this.C19_value('C19_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C19_value('C19_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C20_value('C20_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C20_value('C20_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C20_value('C20_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C20_value('C20_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C20_value('C20_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C20_value('C20_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C20 === undefined || !isNaN(parseFloat(C20)) && parseFloat(C20) && C20 >= 0 && true && C20 <= 999999999 && true && true ? '' : 'value ' + C20 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C20_validateInput": true
      },
      "deps": {
        "C20_value": true
      },
      "index": 42,
      "parsed": "this.C20_value('C20_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C20_value('C20_value',x,y,z,v))) && parseFloat(this.C20_value('C20_value',x,y,z,v)) && this.C20_value('C20_value',x,y,z,v) >= 0 && true && this.C20_value('C20_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C20_value('C20_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C21_value('C21_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C21_value('C21_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C21_value('C21_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C21_value('C21_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C21_value('C21_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C21_value('C21_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C21 === undefined || !isNaN(parseFloat(C21)) && parseFloat(C21) && C21 >= 0 && true && C21 <= 999999999 && true && true ? '' : 'value ' + C21 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C21_validateInput": true
      },
      "deps": {
        "C21_value": true
      },
      "index": 43,
      "parsed": "this.C21_value('C21_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C21_value('C21_value',x,y,z,v))) && parseFloat(this.C21_value('C21_value',x,y,z,v)) && this.C21_value('C21_value',x,y,z,v) >= 0 && true && this.C21_value('C21_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C21_value('C21_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "parseFloat"
                            },
                            "arguments": [
                              {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "isNaN"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "this.C14_value('C14_value',x,y,z,v)"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "Literal",
                                  "value": 0
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "this.C14_value('C14_value',x,y,z,v)"
                                }
                              }
                            ]
                          },
                          "right": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "parseFloat"
                            },
                            "arguments": [
                              {
                                "type": "ConditionalExpression",
                                "test": {
                                  "type": "CallExpression",
                                  "callee": {
                                    "type": "Identifier",
                                    "name": "isNaN"
                                  },
                                  "arguments": [
                                    {
                                      "type": "Identifier",
                                      "name": "this.C15_value('C15_value',x,y,z,v)"
                                    }
                                  ]
                                },
                                "consequent": {
                                  "type": "Literal",
                                  "value": 0
                                },
                                "alternate": {
                                  "type": "Identifier",
                                  "name": "this.C15_value('C15_value',x,y,z,v)"
                                }
                              }
                            ]
                          }
                        },
                        "right": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "parseFloat"
                          },
                          "arguments": [
                            {
                              "type": "ConditionalExpression",
                              "test": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "Identifier",
                                    "name": "this.C16_value('C16_value',x,y,z,v)"
                                  }
                                ]
                              },
                              "consequent": {
                                "type": "Literal",
                                "value": 0
                              },
                              "alternate": {
                                "type": "Identifier",
                                "name": "this.C16_value('C16_value',x,y,z,v)"
                              }
                            }
                          ]
                        }
                      },
                      "right": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "parseFloat"
                        },
                        "arguments": [
                          {
                            "type": "ConditionalExpression",
                            "test": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "isNaN"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C17_value('C17_value',x,y,z,v)"
                                }
                              ]
                            },
                            "consequent": {
                              "type": "Literal",
                              "value": 0
                            },
                            "alternate": {
                              "type": "Identifier",
                              "name": "this.C17_value('C17_value',x,y,z,v)"
                            }
                          }
                        ]
                      }
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isNaN"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "this.C18_value('C18_value',x,y,z,v)"
                              }
                            ]
                          },
                          "consequent": {
                            "type": "Literal",
                            "value": 0
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "this.C18_value('C18_value',x,y,z,v)"
                          }
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parseFloat"
                    },
                    "arguments": [
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isNaN"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "this.C19_value('C19_value',x,y,z,v)"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "this.C19_value('C19_value',x,y,z,v)"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "parseFloat"
                  },
                  "arguments": [
                    {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isNaN"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "this.C20_value('C20_value',x,y,z,v)"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "this.C20_value('C20_value',x,y,z,v)"
                      }
                    }
                  ]
                }
              },
              "right": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "parseFloat"
                },
                "arguments": [
                  {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isNaN"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "this.C21_value('C21_value',x,y,z,v)"
                        }
                      ]
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "this.C21_value('C21_value',x,y,z,v)"
                    }
                  }
                ]
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "parseFloat(isNaN(C14) ? 0 : C14) + parseFloat(isNaN(C15) ? 0 : C15) + parseFloat(isNaN(C16) ? 0 : C16) + parseFloat(isNaN(C17) ? 0 : C17) + parseFloat(isNaN(C18) ? 0 : C18) + parseFloat(isNaN(C19) ? 0 : C19) + parseFloat(isNaN(C20) ? 0 : C20) + parseFloat(isNaN(C21) ? 0 : C21);",
      "refs": {
        "C22_value": true
      },
      "deps": {
        "C14_value": true,
        "C15_value": true,
        "C16_value": true,
        "C17_value": true,
        "C18_value": true,
        "C19_value": true,
        "C20_value": true,
        "C21_value": true
      },
      "index": 44,
      "parsed": "parseFloat(isNaN(this.C14_value('C14_value',x,y,z,v)) ? 0 : this.C14_value('C14_value',x,y,z,v)) + parseFloat(isNaN(this.C15_value('C15_value',x,y,z,v)) ? 0 : this.C15_value('C15_value',x,y,z,v)) + parseFloat(isNaN(this.C16_value('C16_value',x,y,z,v)) ? 0 : this.C16_value('C16_value',x,y,z,v)) + parseFloat(isNaN(this.C17_value('C17_value',x,y,z,v)) ? 0 : this.C17_value('C17_value',x,y,z,v)) + parseFloat(isNaN(this.C18_value('C18_value',x,y,z,v)) ? 0 : this.C18_value('C18_value',x,y,z,v)) + parseFloat(isNaN(this.C19_value('C19_value',x,y,z,v)) ? 0 : this.C19_value('C19_value',x,y,z,v)) + parseFloat(isNaN(this.C20_value('C20_value',x,y,z,v)) ? 0 : this.C20_value('C20_value',x,y,z,v)) + parseFloat(isNaN(this.C21_value('C21_value',x,y,z,v)) ? 0 : this.C21_value('C21_value',x,y,z,v));"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Income"
              },
              "alternate": {
                "type": "Literal",
                "value": "Inkomsten"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Income' : 'Inkomsten';",
      "refs": {
        "C301_title": true
      },
      "deps": {},
      "index": 45,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Income' : 'Inkomsten';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C23_value('C23_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C23_value('C23_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C23_value('C23_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C23_value('C23_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C23_value('C23_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C23_value('C23_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C23 === undefined || !isNaN(parseFloat(C23)) && parseFloat(C23) && C23 >= 0 && true && C23 <= 999999999 && true && true ? '' : 'value ' + C23 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C23_validateInput": true
      },
      "deps": {
        "C23_value": true
      },
      "index": 46,
      "parsed": "this.C23_value('C23_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C23_value('C23_value',x,y,z,v))) && parseFloat(this.C23_value('C23_value',x,y,z,v)) && this.C23_value('C23_value',x,y,z,v) >= 0 && true && this.C23_value('C23_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C23_value('C23_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Salary, pension and other sustainable regular income payments"
              },
              "alternate": {
                "type": "Literal",
                "value": "Salaris, pensioen en overige duurzame periodieke uitkeringen"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Salary, pension and other sustainable regular income payments' : 'Salaris, pensioen en overige duurzame periodieke uitkeringen';",
      "refs": {
        "C23_title": true
      },
      "deps": {},
      "index": 47,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Salary, pension and other sustainable regular income payments' : 'Salaris, pensioen en overige duurzame periodieke uitkeringen';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C24_value('C24_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C24_value('C24_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C24_value('C24_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C24_value('C24_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C24_value('C24_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C24_value('C24_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C24 === undefined || !isNaN(parseFloat(C24)) && parseFloat(C24) && C24 >= 0 && true && C24 <= 999999999 && true && true ? '' : 'value ' + C24 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C24_validateInput": true
      },
      "deps": {
        "C24_value": true
      },
      "index": 48,
      "parsed": "this.C24_value('C24_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C24_value('C24_value',x,y,z,v))) && parseFloat(this.C24_value('C24_value',x,y,z,v)) && this.C24_value('C24_value',x,y,z,v) >= 0 && true && this.C24_value('C24_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C24_value('C24_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Stable rental income (real estate)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Bestendige huuropbrengsten (onroerend goed)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Stable rental income (real estate)' : 'Bestendige huuropbrengsten (onroerend goed)';",
      "refs": {
        "C24_title": true
      },
      "deps": {},
      "index": 49,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Stable rental income (real estate)' : 'Bestendige huuropbrengsten (onroerend goed)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C25_value('C25_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C25_value('C25_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C25_value('C25_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C25_value('C25_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C25_value('C25_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C25_value('C25_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C25 === undefined || !isNaN(parseFloat(C25)) && parseFloat(C25) && C25 >= 0 && true && C25 <= 999999999 && true && true ? '' : 'value ' + C25 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C25_validateInput": true
      },
      "deps": {
        "C25_value": true
      },
      "index": 50,
      "parsed": "this.C25_value('C25_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C25_value('C25_value',x,y,z,v))) && parseFloat(this.C25_value('C25_value',x,y,z,v)) && this.C25_value('C25_value',x,y,z,v) >= 0 && true && this.C25_value('C25_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C25_value('C25_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Stable dividend income (investments and/or controlling interest)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Bestendige dividendinkomsten (investeringen en/of aanmerkelijk belang)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Stable dividend income (investments and/or controlling interest)' : 'Bestendige dividendinkomsten (investeringen en/of aanmerkelijk belang)';",
      "refs": {
        "C25_title": true
      },
      "deps": {},
      "index": 51,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Stable dividend income (investments and/or controlling interest)' : 'Bestendige dividendinkomsten (investeringen en/of aanmerkelijk belang)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C26_value('C26_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C26_value('C26_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C26_value('C26_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C26_value('C26_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C26_value('C26_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C26_value('C26_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C26 === undefined || !isNaN(parseFloat(C26)) && parseFloat(C26) && C26 >= 0 && true && C26 <= 999999999 && true && true ? '' : 'value ' + C26 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C26_validateInput": true
      },
      "deps": {
        "C26_value": true
      },
      "index": 52,
      "parsed": "this.C26_value('C26_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C26_value('C26_value',x,y,z,v))) && parseFloat(this.C26_value('C26_value',x,y,z,v)) && this.C26_value('C26_value',x,y,z,v) >= 0 && true && this.C26_value('C26_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C26_value('C26_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Stable interest income (deposits/bonds etc)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Bestendige renteinkomsten (deposito's / obligaties etc.)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Stable interest income (deposits/bonds etc)' : 'Bestendige renteinkomsten (deposito\\'s / obligaties etc.)';",
      "refs": {
        "C26_title": true
      },
      "deps": {},
      "index": 53,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Stable interest income (deposits/bonds etc)' : 'Bestendige renteinkomsten (deposito\\'s / obligaties etc.)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C27_value('C27_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C27_value('C27_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C27_value('C27_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C27_value('C27_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C27_value('C27_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C27_value('C27_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C27 === undefined || !isNaN(parseFloat(C27)) && parseFloat(C27) && C27 >= 0 && true && C27 <= 999999999 && true && true ? '' : 'value ' + C27 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C27_validateInput": true
      },
      "deps": {
        "C27_value": true
      },
      "index": 54,
      "parsed": "this.C27_value('C27_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C27_value('C27_value',x,y,z,v))) && parseFloat(this.C27_value('C27_value',x,y,z,v)) && this.C27_value('C27_value',x,y,z,v) >= 0 && true && this.C27_value('C27_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C27_value('C27_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Stable other income"
              },
              "alternate": {
                "type": "Literal",
                "value": "Overige bestendige inkomsten"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Stable other income' : 'Overige bestendige inkomsten';",
      "refs": {
        "C27_title": true
      },
      "deps": {},
      "index": 55,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Stable other income' : 'Overige bestendige inkomsten';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "BinaryExpression",
              "operator": "+",
              "left": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "BinaryExpression",
                    "operator": "+",
                    "left": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isNaN"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "this.C23_value('C23_value',x,y,z,v)"
                              }
                            ]
                          },
                          "consequent": {
                            "type": "Literal",
                            "value": 0
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "this.C23_value('C23_value',x,y,z,v)"
                          }
                        }
                      ]
                    },
                    "right": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "parseFloat"
                      },
                      "arguments": [
                        {
                          "type": "ConditionalExpression",
                          "test": {
                            "type": "CallExpression",
                            "callee": {
                              "type": "Identifier",
                              "name": "isNaN"
                            },
                            "arguments": [
                              {
                                "type": "Identifier",
                                "name": "this.C24_value('C24_value',x,y,z,v)"
                              }
                            ]
                          },
                          "consequent": {
                            "type": "Literal",
                            "value": 0
                          },
                          "alternate": {
                            "type": "Identifier",
                            "name": "this.C24_value('C24_value',x,y,z,v)"
                          }
                        }
                      ]
                    }
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parseFloat"
                    },
                    "arguments": [
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isNaN"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "this.C25_value('C25_value',x,y,z,v)"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "this.C25_value('C25_value',x,y,z,v)"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "parseFloat"
                  },
                  "arguments": [
                    {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isNaN"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "this.C26_value('C26_value',x,y,z,v)"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "this.C26_value('C26_value',x,y,z,v)"
                      }
                    }
                  ]
                }
              },
              "right": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "parseFloat"
                },
                "arguments": [
                  {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isNaN"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "this.C27_value('C27_value',x,y,z,v)"
                        }
                      ]
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "this.C27_value('C27_value',x,y,z,v)"
                    }
                  }
                ]
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "parseFloat(isNaN(C23) ? 0 : C23) + parseFloat(isNaN(C24) ? 0 : C24) + parseFloat(isNaN(C25) ? 0 : C25) + parseFloat(isNaN(C26) ? 0 : C26) + parseFloat(isNaN(C27) ? 0 : C27);",
      "refs": {
        "C28_value": true
      },
      "deps": {
        "C23_value": true,
        "C24_value": true,
        "C25_value": true,
        "C26_value": true,
        "C27_value": true
      },
      "index": 56,
      "parsed": "parseFloat(isNaN(this.C23_value('C23_value',x,y,z,v)) ? 0 : this.C23_value('C23_value',x,y,z,v)) + parseFloat(isNaN(this.C24_value('C24_value',x,y,z,v)) ? 0 : this.C24_value('C24_value',x,y,z,v)) + parseFloat(isNaN(this.C25_value('C25_value',x,y,z,v)) ? 0 : this.C25_value('C25_value',x,y,z,v)) + parseFloat(isNaN(this.C26_value('C26_value',x,y,z,v)) ? 0 : this.C26_value('C26_value',x,y,z,v)) + parseFloat(isNaN(this.C27_value('C27_value',x,y,z,v)) ? 0 : this.C27_value('C27_value',x,y,z,v));"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Expenses"
              },
              "alternate": {
                "type": "Literal",
                "value": "Uitgaven"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Expenses' : 'Uitgaven';",
      "refs": {
        "C400_title": true
      },
      "deps": {},
      "index": 57,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Expenses' : 'Uitgaven';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C29_value('C29_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C29_value('C29_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C29_value('C29_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C29_value('C29_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C29_value('C29_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C29_value('C29_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C29 === undefined || !isNaN(parseFloat(C29)) && parseFloat(C29) && C29 >= 0 && true && C29 <= 999999999 && true && true ? '' : 'value ' + C29 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C29_validateInput": true
      },
      "deps": {
        "C29_value": true
      },
      "index": 58,
      "parsed": "this.C29_value('C29_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C29_value('C29_value',x,y,z,v))) && parseFloat(this.C29_value('C29_value',x,y,z,v)) && this.C29_value('C29_value',x,y,z,v) >= 0 && true && this.C29_value('C29_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C29_value('C29_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Interest and repayments ABN AMRO credit facilities"
              },
              "alternate": {
                "type": "Literal",
                "value": "Rente en aflossingen van ABN AMRO kredietfaciliteiten"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Interest and repayments ABN AMRO credit facilities' : 'Rente en aflossingen van ABN AMRO kredietfaciliteiten';",
      "refs": {
        "C29_title": true
      },
      "deps": {},
      "index": 59,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Interest and repayments ABN AMRO credit facilities' : 'Rente en aflossingen van ABN AMRO kredietfaciliteiten';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C30_value('C30_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C30_value('C30_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C30_value('C30_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C30_value('C30_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C30_value('C30_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C30_value('C30_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C30 === undefined || !isNaN(parseFloat(C30)) && parseFloat(C30) && C30 >= 0 && true && C30 <= 999999999 && true && true ? '' : 'value ' + C30 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C30_validateInput": true
      },
      "deps": {
        "C30_value": true
      },
      "index": 60,
      "parsed": "this.C30_value('C30_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C30_value('C30_value',x,y,z,v))) && parseFloat(this.C30_value('C30_value',x,y,z,v)) && this.C30_value('C30_value',x,y,z,v) >= 0 && true && this.C30_value('C30_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C30_value('C30_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Interest and repayments on other liabilities (e.g. family, other banks etc.)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Rente en aflossingen van overige schulden (bijv. familie, andere banken etc.)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Interest and repayments on other liabilities (e.g. family, other banks etc.)' : 'Rente en aflossingen van overige schulden (bijv. familie, andere banken etc.)';",
      "refs": {
        "C30_title": true
      },
      "deps": {},
      "index": 61,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Interest and repayments on other liabilities (e.g. family, other banks etc.)' : 'Rente en aflossingen van overige schulden (bijv. familie, andere banken etc.)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C31_value('C31_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C31_value('C31_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C31_value('C31_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C31_value('C31_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C31_value('C31_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C31_value('C31_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C31 === undefined || !isNaN(parseFloat(C31)) && parseFloat(C31) && C31 >= 0 && true && C31 <= 999999999 && true && true ? '' : 'value ' + C31 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C31_validateInput": true
      },
      "deps": {
        "C31_value": true
      },
      "index": 62,
      "parsed": "this.C31_value('C31_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C31_value('C31_value',x,y,z,v))) && parseFloat(this.C31_value('C31_value',x,y,z,v)) && this.C31_value('C31_value',x,y,z,v) >= 0 && true && this.C31_value('C31_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C31_value('C31_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Other expenses"
              },
              "alternate": {
                "type": "Literal",
                "value": "Overige uitgaven"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Other expenses' : 'Overige uitgaven';",
      "refs": {
        "C31_title": true
      },
      "deps": {},
      "index": 63,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Other expenses' : 'Overige uitgaven';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C32_value('C32_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C32_value('C32_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C32_value('C32_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C32_value('C32_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C32_value('C32_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C32_value('C32_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C32 === undefined || !isNaN(parseFloat(C32)) && parseFloat(C32) && C32 >= 0 && true && C32 <= 999999999 && true && true ? '' : 'value ' + C32 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C32_validateInput": true
      },
      "deps": {
        "C32_value": true
      },
      "index": 64,
      "parsed": "this.C32_value('C32_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C32_value('C32_value',x,y,z,v))) && parseFloat(this.C32_value('C32_value',x,y,z,v)) && this.C32_value('C32_value',x,y,z,v) >= 0 && true && this.C32_value('C32_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C32_value('C32_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Tax payments"
              },
              "alternate": {
                "type": "Literal",
                "value": "Belastingen"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Tax payments' : 'Belastingen';",
      "refs": {
        "C32_title": true
      },
      "deps": {},
      "index": 65,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Tax payments' : 'Belastingen';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "BinaryExpression",
              "operator": "*",
              "left": {
                "type": "BinaryExpression",
                "operator": "*",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "*",
                  "left": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parseFloat"
                    },
                    "arguments": [
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isNaN"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "this.C29_value('C29_value',x,y,z,v)"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "this.C29_value('C29_value',x,y,z,v)"
                        }
                      }
                    ]
                  },
                  "right": {
                    "type": "CallExpression",
                    "callee": {
                      "type": "Identifier",
                      "name": "parseFloat"
                    },
                    "arguments": [
                      {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "CallExpression",
                          "callee": {
                            "type": "Identifier",
                            "name": "isNaN"
                          },
                          "arguments": [
                            {
                              "type": "Identifier",
                              "name": "this.C30_value('C30_value',x,y,z,v)"
                            }
                          ]
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": 0
                        },
                        "alternate": {
                          "type": "Identifier",
                          "name": "this.C30_value('C30_value',x,y,z,v)"
                        }
                      }
                    ]
                  }
                },
                "right": {
                  "type": "CallExpression",
                  "callee": {
                    "type": "Identifier",
                    "name": "parseFloat"
                  },
                  "arguments": [
                    {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "CallExpression",
                        "callee": {
                          "type": "Identifier",
                          "name": "isNaN"
                        },
                        "arguments": [
                          {
                            "type": "Identifier",
                            "name": "this.C31_value('C31_value',x,y,z,v)"
                          }
                        ]
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": 0
                      },
                      "alternate": {
                        "type": "Identifier",
                        "name": "this.C31_value('C31_value',x,y,z,v)"
                      }
                    }
                  ]
                }
              },
              "right": {
                "type": "CallExpression",
                "callee": {
                  "type": "Identifier",
                  "name": "parseFloat"
                },
                "arguments": [
                  {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "CallExpression",
                      "callee": {
                        "type": "Identifier",
                        "name": "isNaN"
                      },
                      "arguments": [
                        {
                          "type": "Identifier",
                          "name": "this.C32_value('C32_value',x,y,z,v)"
                        }
                      ]
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": 0
                    },
                    "alternate": {
                      "type": "Identifier",
                      "name": "this.C32_value('C32_value',x,y,z,v)"
                    }
                  }
                ]
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "parseFloat(isNaN(C29) ? 0 : C29) * parseFloat(isNaN(C30) ? 0 : C30) * parseFloat(isNaN(C31) ? 0 : C31) * parseFloat(isNaN(C32) ? 0 : C32);",
      "refs": {
        "C33_value": true
      },
      "deps": {
        "C29_value": true,
        "C30_value": true,
        "C31_value": true,
        "C32_value": true
      },
      "index": 66,
      "parsed": "parseFloat(isNaN(this.C29_value('C29_value',x,y,z,v)) ? 0 : this.C29_value('C29_value',x,y,z,v)) * parseFloat(isNaN(this.C30_value('C30_value',x,y,z,v)) ? 0 : this.C30_value('C30_value',x,y,z,v)) * parseFloat(isNaN(this.C31_value('C31_value',x,y,z,v)) ? 0 : this.C31_value('C31_value',x,y,z,v)) * parseFloat(isNaN(this.C32_value('C32_value',x,y,z,v)) ? 0 : this.C32_value('C32_value',x,y,z,v));"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Other information"
              },
              "alternate": {
                "type": "Literal",
                "value": "Overige gegevens"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Other information' : 'Overige gegevens';",
      "refs": {
        "C443_title": true
      },
      "deps": {},
      "index": 67,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Other information' : 'Overige gegevens';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Netherlands"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Netherlands"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "PBI / France"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "PBI / Frankrijk"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "PBI / non France"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "PBI / ex Frankrijk"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                }
              ]
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Netherlands' : 'Netherlands' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'PBI / France' : 'PBI / Frankrijk' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'PBI / non France' : 'PBI / ex Frankrijk' }];",
      "refs": {
        "C34_choices": true
      },
      "deps": {},
      "index": 68,
      "parsed": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Netherlands' : 'Netherlands' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'PBI / France' : 'PBI / Frankrijk' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'PBI / non France' : 'PBI / ex Frankrijk' }];"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "this.C34_value('C34_value',x,y,z,v)"
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Literal",
                    "value": "C"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C34_value('C34_value',x,y,z,v)"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": ""
                },
                "alternate": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Literal",
                      "value": "B"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "this.C34_value('C34_value',x,y,z,v)"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": ""
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "this.C34_value('C34_value',x,y,z,v)"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": ""
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Literal",
                          "value": "Value "
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "this.C34_value('C34_value',x,y,z,v)"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": " must be one of these: A, B, C"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C34 === undefined ? '' : 'C' === C34 ? '' : 'B' === C34 ? '' : 'A' === C34 ? '' : 'Value ' + C34 + ' must be one of these: A, B, C';",
      "refs": {
        "C34_validateInput": true
      },
      "deps": {
        "C34_value": true
      },
      "index": 69,
      "parsed": "this.C34_value('C34_value',x,y,z,v) === undefined ? '' : 'C' === this.C34_value('C34_value',x,y,z,v) ? '' : 'B' === this.C34_value('C34_value',x,y,z,v) ? '' : 'A' === this.C34_value('C34_value',x,y,z,v) ? '' : 'Value ' + this.C34_value('C34_value',x,y,z,v) + ' must be one of these: A, B, C';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Cluster"
              },
              "alternate": {
                "type": "Literal",
                "value": "Cluster"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Cluster' : 'Cluster';",
      "refs": {
        "C34_title": true
      },
      "deps": {},
      "index": 70,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Cluster' : 'Cluster';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C35_value('C35_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C35_value('C35_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C35_value('C35_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": true
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "Identifier",
                            "name": "this.C35_value('C35_value',x,y,z,v)"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1800
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C35_value('C35_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 9999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C35_value('C35_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value > 1800 and value <= 9999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C35 === undefined || !isNaN(parseFloat(C35)) && parseFloat(C35) && true && C35 > 1800 && C35 <= 9999 && true && true ? '' : 'value ' + C35 + ' must be a number and value > 1800 and value <= 9999';",
      "refs": {
        "C35_validateInput": true
      },
      "deps": {
        "C35_value": true
      },
      "index": 71,
      "parsed": "this.C35_value('C35_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C35_value('C35_value',x,y,z,v))) && parseFloat(this.C35_value('C35_value',x,y,z,v)) && true && this.C35_value('C35_value',x,y,z,v) > 1800 && this.C35_value('C35_value',x,y,z,v) <= 9999 && true && true ? '' : 'value ' + this.C35_value('C35_value',x,y,z,v) + ' must be a number and value > 1800 and value <= 9999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Liquidity of assets (in # days)"
              },
              "alternate": {
                "type": "Literal",
                "value": "Liquiditeit van de activa (in # dagen)"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Liquidity of assets (in # days)' : 'Liquiditeit van de activa (in # dagen)';",
      "refs": {
        "C35_title": true
      },
      "deps": {},
      "index": 72,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Liquidity of assets (in # days)' : 'Liquiditeit van de activa (in # dagen)';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C36_value('C36_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C36_value('C36_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C36_value('C36_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "BinaryExpression",
                            "operator": ">=",
                            "left": {
                              "type": "Identifier",
                              "name": "this.C36_value('C36_value',x,y,z,v)"
                            },
                            "right": {
                              "type": "Literal",
                              "value": 0
                            }
                          }
                        },
                        "right": {
                          "type": "Identifier",
                          "name": true
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C36_value('C36_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 999999999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C36_value('C36_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value >= 0 and value <= 999999999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C36 === undefined || !isNaN(parseFloat(C36)) && parseFloat(C36) && C36 >= 0 && true && C36 <= 999999999 && true && true ? '' : 'value ' + C36 + ' must be a number and value >= 0 and value <= 999999999';",
      "refs": {
        "C36_validateInput": true
      },
      "deps": {
        "C36_value": true
      },
      "index": 73,
      "parsed": "this.C36_value('C36_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C36_value('C36_value',x,y,z,v))) && parseFloat(this.C36_value('C36_value',x,y,z,v)) && this.C36_value('C36_value',x,y,z,v) >= 0 && true && this.C36_value('C36_value',x,y,z,v) <= 999999999 && true && true ? '' : 'value ' + this.C36_value('C36_value',x,y,z,v) + ' must be a number and value >= 0 and value <= 999999999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Outstanding credit facilities at ABN AMRO"
              },
              "alternate": {
                "type": "Literal",
                "value": "Uitstaande positie van de kredietfaciliteiten bij ABN AMRO"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Outstanding credit facilities at ABN AMRO' : 'Uitstaande positie van de kredietfaciliteiten bij ABN AMRO';",
      "refs": {
        "C36_title": true
      },
      "deps": {},
      "index": 74,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Outstanding credit facilities at ABN AMRO' : 'Uitstaande positie van de kredietfaciliteiten bij ABN AMRO';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Private Individual"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Private Individual"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Private Investment Companies (incl. personal holdings and special purpose vehicles)"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Private Investment Companies (incl. personal holdings and special purpose vehicles)"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Foundation"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Stichting"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "D"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Trust"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Trust"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                }
              ]
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Private Individual' : 'Private Individual' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Private Investment Companies (incl. personal holdings and special purpose vehicles)' : 'Private Investment Companies (incl. personal holdings and special purpose vehicles)' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Foundation' : 'Stichting' }, { 'name': 'D', 'value': 'en' === SETTINGS.LANGUAGE ? 'Trust' : 'Trust' }];",
      "refs": {
        "C37_choices": true
      },
      "deps": {},
      "index": 75,
      "parsed": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'Private Individual' : 'Private Individual' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'Private Investment Companies (incl. personal holdings and special purpose vehicles)' : 'Private Investment Companies (incl. personal holdings and special purpose vehicles)' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Foundation' : 'Stichting' }, { 'name': 'D', 'value': 'en' === SETTINGS.LANGUAGE ? 'Trust' : 'Trust' }];"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "this.C37_value('C37_value',x,y,z,v)"
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Literal",
                    "value": "D"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C37_value('C37_value',x,y,z,v)"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": ""
                },
                "alternate": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Literal",
                      "value": "C"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "this.C37_value('C37_value',x,y,z,v)"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": ""
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "this.C37_value('C37_value',x,y,z,v)"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": ""
                    },
                    "alternate": {
                      "type": "ConditionalExpression",
                      "test": {
                        "type": "BinaryExpression",
                        "operator": "===",
                        "left": {
                          "type": "Literal",
                          "value": "A"
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "this.C37_value('C37_value',x,y,z,v)"
                        }
                      },
                      "consequent": {
                        "type": "Literal",
                        "value": ""
                      },
                      "alternate": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "BinaryExpression",
                          "operator": "+",
                          "left": {
                            "type": "Literal",
                            "value": "Value "
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "this.C37_value('C37_value',x,y,z,v)"
                          }
                        },
                        "right": {
                          "type": "Literal",
                          "value": " must be one of these: A, B, C, D"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C37 === undefined ? '' : 'D' === C37 ? '' : 'C' === C37 ? '' : 'B' === C37 ? '' : 'A' === C37 ? '' : 'Value ' + C37 + ' must be one of these: A, B, C, D';",
      "refs": {
        "C37_validateInput": true
      },
      "deps": {
        "C37_value": true
      },
      "index": 76,
      "parsed": "this.C37_value('C37_value',x,y,z,v) === undefined ? '' : 'D' === this.C37_value('C37_value',x,y,z,v) ? '' : 'C' === this.C37_value('C37_value',x,y,z,v) ? '' : 'B' === this.C37_value('C37_value',x,y,z,v) ? '' : 'A' === this.C37_value('C37_value',x,y,z,v) ? '' : 'Value ' + this.C37_value('C37_value',x,y,z,v) + ' must be one of these: A, B, C, D';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Legal status of client"
              },
              "alternate": {
                "type": "Literal",
                "value": "Juridische status van cliënt"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Legal status of client' : 'Juridische status van cliënt';",
      "refs": {
        "C37_title": true
      },
      "deps": {},
      "index": 77,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Legal status of client' : 'Juridische status van cliënt';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ArrayExpression",
              "elements": [
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "New client"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Nieuwe klant"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "B"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "New credit from existing client"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Nieuw krediet van bestaande relatie"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                },
                {
                  "type": "ObjectExpression",
                  "properties": [
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "name"
                      },
                      "computed": false,
                      "value": {
                        "type": "Literal",
                        "value": "C"
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    },
                    {
                      "type": "Property",
                      "key": {
                        "type": "Literal",
                        "value": "value"
                      },
                      "computed": false,
                      "value": {
                        "type": "ConditionalExpression",
                        "test": {
                          "type": "BinaryExpression",
                          "operator": "===",
                          "left": {
                            "type": "Literal",
                            "value": "en"
                          },
                          "right": {
                            "type": "Identifier",
                            "name": "SETTINGS.LANGUAGE"
                          }
                        },
                        "consequent": {
                          "type": "Literal",
                          "value": "Existing borrower"
                        },
                        "alternate": {
                          "type": "Literal",
                          "value": "Bestaande kredietrelatie"
                        }
                      },
                      "kind": "init",
                      "method": false,
                      "shorthand": false
                    }
                  ]
                }
              ]
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'New client' : 'Nieuwe klant' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'New credit from existing client' : 'Nieuw krediet van bestaande relatie' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Existing borrower' : 'Bestaande kredietrelatie' }];",
      "refs": {
        "C38_choices": true
      },
      "deps": {},
      "index": 78,
      "parsed": "[ { 'name': 'A', 'value': 'en' === SETTINGS.LANGUAGE ? 'New client' : 'Nieuwe klant' }, { 'name': 'B', 'value': 'en' === SETTINGS.LANGUAGE ? 'New credit from existing client' : 'Nieuw krediet van bestaande relatie' }, { 'name': 'C', 'value': 'en' === SETTINGS.LANGUAGE ? 'Existing borrower' : 'Bestaande kredietrelatie' }];"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Identifier",
                  "name": "this.C38_value('C38_value',x,y,z,v)"
                },
                "right": {
                  "type": "Identifier",
                  "name": "undefined"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "ConditionalExpression",
                "test": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Literal",
                    "value": "C"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C38_value('C38_value',x,y,z,v)"
                  }
                },
                "consequent": {
                  "type": "Literal",
                  "value": ""
                },
                "alternate": {
                  "type": "ConditionalExpression",
                  "test": {
                    "type": "BinaryExpression",
                    "operator": "===",
                    "left": {
                      "type": "Literal",
                      "value": "B"
                    },
                    "right": {
                      "type": "Identifier",
                      "name": "this.C38_value('C38_value',x,y,z,v)"
                    }
                  },
                  "consequent": {
                    "type": "Literal",
                    "value": ""
                  },
                  "alternate": {
                    "type": "ConditionalExpression",
                    "test": {
                      "type": "BinaryExpression",
                      "operator": "===",
                      "left": {
                        "type": "Literal",
                        "value": "A"
                      },
                      "right": {
                        "type": "Identifier",
                        "name": "this.C38_value('C38_value',x,y,z,v)"
                      }
                    },
                    "consequent": {
                      "type": "Literal",
                      "value": ""
                    },
                    "alternate": {
                      "type": "BinaryExpression",
                      "operator": "+",
                      "left": {
                        "type": "BinaryExpression",
                        "operator": "+",
                        "left": {
                          "type": "Literal",
                          "value": "Value "
                        },
                        "right": {
                          "type": "Identifier",
                          "name": "this.C38_value('C38_value',x,y,z,v)"
                        }
                      },
                      "right": {
                        "type": "Literal",
                        "value": " must be one of these: A, B, C"
                      }
                    }
                  }
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C38 === undefined ? '' : 'C' === C38 ? '' : 'B' === C38 ? '' : 'A' === C38 ? '' : 'Value ' + C38 + ' must be one of these: A, B, C';",
      "refs": {
        "C38_validateInput": true
      },
      "deps": {
        "C38_value": true
      },
      "index": 79,
      "parsed": "this.C38_value('C38_value',x,y,z,v) === undefined ? '' : 'C' === this.C38_value('C38_value',x,y,z,v) ? '' : 'B' === this.C38_value('C38_value',x,y,z,v) ? '' : 'A' === this.C38_value('C38_value',x,y,z,v) ? '' : 'Value ' + this.C38_value('C38_value',x,y,z,v) + ' must be one of these: A, B, C';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Status client relationship"
              },
              "alternate": {
                "type": "Literal",
                "value": "Status van de klantrelatie"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Status client relationship' : 'Status van de klantrelatie';",
      "refs": {
        "C38_title": true
      },
      "deps": {},
      "index": 80,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Status client relationship' : 'Status van de klantrelatie';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C39_value('C39_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C39_value('C39_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C39_value('C39_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": true
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "Identifier",
                            "name": "this.C39_value('C39_value',x,y,z,v)"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1800
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C39_value('C39_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 9999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C39_value('C39_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value > 1800 and value <= 9999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C39 === undefined || !isNaN(parseFloat(C39)) && parseFloat(C39) && true && C39 > 1800 && C39 <= 9999 && true && true ? '' : 'value ' + C39 + ' must be a number and value > 1800 and value <= 9999';",
      "refs": {
        "C39_validateInput": true
      },
      "deps": {
        "C39_value": true
      },
      "index": 81,
      "parsed": "this.C39_value('C39_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C39_value('C39_value',x,y,z,v))) && parseFloat(this.C39_value('C39_value',x,y,z,v)) && true && this.C39_value('C39_value',x,y,z,v) > 1800 && this.C39_value('C39_value',x,y,z,v) <= 9999 && true && true ? '' : 'value ' + this.C39_value('C39_value',x,y,z,v) + ' must be a number and value > 1800 and value <= 9999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Inception year customer at ABN AMRO"
              },
              "alternate": {
                "type": "Literal",
                "value": "Jaartal sinds niet-kredietklant bij ABN AMRO"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Inception year customer at ABN AMRO' : 'Jaartal sinds niet-kredietklant bij ABN AMRO';",
      "refs": {
        "C39_title": true
      },
      "deps": {},
      "index": 82,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Inception year customer at ABN AMRO' : 'Jaartal sinds niet-kredietklant bij ABN AMRO';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "LogicalExpression",
                "operator": "||",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "===",
                  "left": {
                    "type": "Identifier",
                    "name": "this.C40_value('C40_value',x,y,z,v)"
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "undefined"
                  }
                },
                "right": {
                  "type": "LogicalExpression",
                  "operator": "&&",
                  "left": {
                    "type": "LogicalExpression",
                    "operator": "&&",
                    "left": {
                      "type": "LogicalExpression",
                      "operator": "&&",
                      "left": {
                        "type": "LogicalExpression",
                        "operator": "&&",
                        "left": {
                          "type": "LogicalExpression",
                          "operator": "&&",
                          "left": {
                            "type": "LogicalExpression",
                            "operator": "&&",
                            "left": {
                              "type": "UnaryExpression",
                              "operator": "!",
                              "argument": {
                                "type": "CallExpression",
                                "callee": {
                                  "type": "Identifier",
                                  "name": "isNaN"
                                },
                                "arguments": [
                                  {
                                    "type": "CallExpression",
                                    "callee": {
                                      "type": "Identifier",
                                      "name": "parseFloat"
                                    },
                                    "arguments": [
                                      {
                                        "type": "Identifier",
                                        "name": "this.C40_value('C40_value',x,y,z,v)"
                                      }
                                    ]
                                  }
                                ]
                              },
                              "prefix": true
                            },
                            "right": {
                              "type": "CallExpression",
                              "callee": {
                                "type": "Identifier",
                                "name": "parseFloat"
                              },
                              "arguments": [
                                {
                                  "type": "Identifier",
                                  "name": "this.C40_value('C40_value',x,y,z,v)"
                                }
                              ]
                            }
                          },
                          "right": {
                            "type": "Identifier",
                            "name": true
                          }
                        },
                        "right": {
                          "type": "BinaryExpression",
                          "operator": ">",
                          "left": {
                            "type": "Identifier",
                            "name": "this.C40_value('C40_value',x,y,z,v)"
                          },
                          "right": {
                            "type": "Literal",
                            "value": 1800
                          }
                        }
                      },
                      "right": {
                        "type": "BinaryExpression",
                        "operator": "<=",
                        "left": {
                          "type": "Identifier",
                          "name": "this.C40_value('C40_value',x,y,z,v)"
                        },
                        "right": {
                          "type": "Literal",
                          "value": 9999
                        }
                      }
                    },
                    "right": {
                      "type": "Identifier",
                      "name": true
                    }
                  },
                  "right": {
                    "type": "Identifier",
                    "name": true
                  }
                }
              },
              "consequent": {
                "type": "Literal",
                "value": ""
              },
              "alternate": {
                "type": "BinaryExpression",
                "operator": "+",
                "left": {
                  "type": "BinaryExpression",
                  "operator": "+",
                  "left": {
                    "type": "Literal",
                    "value": "value "
                  },
                  "right": {
                    "type": "Identifier",
                    "name": "this.C40_value('C40_value',x,y,z,v)"
                  }
                },
                "right": {
                  "type": "Literal",
                  "value": " must be a number and value > 1800 and value <= 9999"
                }
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "C40 === undefined || !isNaN(parseFloat(C40)) && parseFloat(C40) && true && C40 > 1800 && C40 <= 9999 && true && true ? '' : 'value ' + C40 + ' must be a number and value > 1800 and value <= 9999';",
      "refs": {
        "C40_validateInput": true
      },
      "deps": {
        "C40_value": true
      },
      "index": 83,
      "parsed": "this.C40_value('C40_value',x,y,z,v) === undefined || !isNaN(parseFloat(this.C40_value('C40_value',x,y,z,v))) && parseFloat(this.C40_value('C40_value',x,y,z,v)) && true && this.C40_value('C40_value',x,y,z,v) > 1800 && this.C40_value('C40_value',x,y,z,v) <= 9999 && true && true ? '' : 'value ' + this.C40_value('C40_value',x,y,z,v) + ' must be a number and value > 1800 and value <= 9999';"
    },
    {
      "type": "noCacheLocked",
      "body": {
        "type": "Program",
        "body": [
          {
            "type": "ExpressionStatement",
            "expression": {
              "type": "ConditionalExpression",
              "test": {
                "type": "BinaryExpression",
                "operator": "===",
                "left": {
                  "type": "Literal",
                  "value": "en"
                },
                "right": {
                  "type": "Identifier",
                  "name": "SETTINGS.LANGUAGE"
                }
              },
              "consequent": {
                "type": "Literal",
                "value": "Inception year borrower at ABN AMRO"
              },
              "alternate": {
                "type": "Literal",
                "value": "Jaartal sinds kredietklant bij ABN AMRO"
              }
            }
          }
        ],
        "sourceType": "script"
      },
      "original": "'en' === SETTINGS.LANGUAGE ? 'Inception year borrower at ABN AMRO' : 'Jaartal sinds kredietklant bij ABN AMRO';",
      "refs": {
        "C40_title": true
      },
      "deps": {},
      "index": 84,
      "parsed": "'en' === SETTINGS.LANGUAGE ? 'Inception year borrower at ABN AMRO' : 'Jaartal sinds kredietklant bij ABN AMRO';"
    }
  ]
}