import FinanMath.*;
import BaseModel.*;

model TUPLETEST uses BaseModel
{
 root
 {
  variable Q_ROOT
  {
   displaytype: scorecard;
   variable TupleTestStap
   {
    title: "TestTuples";
    hint: "Test Tuples";
    frequency: none;
    datatype: number;
    variable Uitleg
    {
     frequency: none;
     displaytype: string;
     datatype: string;
     locked: 1;
     title: "In dit model worden visueel alle tuple aspected getest.";
     formula: "In dit model worden visueel alle tuple aspected getest.";
    }
    variable Summary
    {
     title: "Summary";
     displaytype: paragraph;
     frequency: none;
     datatype: string;
     variable TCOUNTTEST
     {
      locked: 1;
      frequency: document;
      title: "TCOUNT(NullTuple)";
      formula: TCOUNT(NullTuple)+1;
     }
     variable TSUMTEST
     {
      locked: 1;
      title: "TSUM(SecondSibling)" ;
      formula: TSUM(SecondSibling);
     }
     variable TSUMTEST2
     {
      locked: 1;
      title: "TSUM(ZeroTupleInstanceSibling)";
      formula: TSUM(ZeroTupleInstanceSibling);
     }
     variable TMINEST
     {
      locked: 1;
      title: "TMIN(ZeroTupleInstance)";
      formula: TMIN(ZeroTupleInstance);
     }
     variable TMAXTEST
     {
      locked: 1;
      title: "TMAX(ZeroTupleInstance)";
      formula: TMAX(ZeroTupleInstance);
     }
    }
    tuple Tuple
    {
     title: String("Tuple") & String("(" & TupleIndex & ")");
     hint: "Deze tuple heeft een geneste Tuple-Definitie";
     frequency: none;
     datatype: string;
     displaytype: paragraph;
     tuple FirstSiblingNestedTuple
     {
      title: String("FirstSiblingNestedTuple") & String("(" & TupleIndex & ")");
      formula: 123;
      frequency: none;
      displaytype: paragraph;
      variable FirstSiblingNestedTupleFirstSibling
      {
       title: "FirstSiblingNestedTupleFirstSibling";
       formula: 1234;
       datatype: number;
      }
     }
     variable SecondSibling
     {
      locked: 1;
      title: "TSUM(FirstSiblingNestedTupleFirstSibling)";
      formula: TSUM(FirstSiblingNestedTupleFirstSibling);
      datatype: number;
     }
    }
    tuple NullTuple
    {
     title: String("NullTuple") & String("(" & TupleIndex & ")");
     hint: "Dit is een 0-tuple met een T-1 formule";
     displaytype: paragraph;
     frequency: none;
     datatype: string;
     variable ZeroTupleInstance
     {
      title: "ZeroTupleInstance[prev]+100";
      fixed_decimals: 2;
      formula: ZeroTupleInstance[prev]+100;
      datatype: number;
     }
     variable ZeroTupleInstanceSibling
     {
      title: "ZeroTupleInstanceSibling";
      formula: 12349;
      datatype: number;
     }
    }
   }
   variable Q_STAP02
   {
    frequency: none;
    datatype: number;
    title: "Q_STAP02";
    hint: "Q_STAP02";
    variable Opvulling
    {
     title: "TupleTestStap2";
     hint: "TupleTestStap2";
    }
   }
  }
 }
}