model PRICING uses BaseModel
{
 variable PRICING
 {
 version: "1.34.5";
 variable RootSub1
 {
  datatype: none;
  title: "General variables for webclient";
  locked: 1;
  visible: 0;
  variable FES_LAYOUTNR
  {
   frequency: document;
   formula: If( Pos("IFRS-EU" , FES_LAYOUT[1])>0,1,If(Pos("IFRS-PL" , FES_LAYOUT[1])>0,48,If(Pos("IFRS-Intl" , FES_LAYOUT[1])>0,2,0)));
   title: "Layout";
   locked: 1;
   choices: "0: NA|1: IFRS-EU|2: IFRS|48: Polish";
  }
  variable FES_EXCHANGE_RATES
  {
   datatype: string;
   title: "Exchange Rates";
  }
  variable FES_LAYOUT
  {
   datatype: string;
   frequency: document;
   title: "Layout name";
  }
  variable FES_FLATINPUT
  {
   frequency: document;
   fixed_decimals: 0;
   title: "Is flat input used? (1=yes)";
  }
  variable FES_PROJECTION_PROFILE
  {
   frequency: document;
   fixed_decimals: 0;
   title: "Projection Profile";
  }
  variable FES_COLUMN_ORDER
  {
   frequency: document;
   fixed_decimals: 0;
   title: "Column order";
  }
  variable FES_COLUMN_VISIBLE
  {
   formula: 1;
   fixed_decimals: 0;
   title: "Column visible";
  }
  variable FES_StartDatePERIOD
  {
   fixed_decimals: 0;
   title: "Start Date Period";
  }
  variable FES_ENDDATEPERIOD
  {
   fixed_decimals: 0;
   title: "End Date Period";
  }
  variable FES_BASECURRENCYPERIOD
  {
   fixed_decimals: 0;
   title: "Base Currency Period";
  }
  variable FES_VIEWCURRENCYPERIOD
  {
   fixed_decimals: 0;
   title: "View Currency Period";
  }
  variable FES_COLUMNTYPE
  {
   fixed_decimals: 0;
   title: "Column Type";
   choices: "0:History|1:Projection";
  }
 }
 variable RootSub2
 {
  datatype: none;
  title: "General variables for FPS database";
  locked: 1;
  visible: 0;
  variable FPS_VAR_Naam
  {
   datatype: string;
   frequency: document;
   title: "NAME";
  }
  variable FPS_VAR_Relatienummer
  {
   datatype: string;
   frequency: document;
   title: "CUSTOMERNUMBER";
  }
  variable FPS_VAR_KVKnr
  {
   datatype: string;
   frequency: document;
   title: "CHAMBEROFCOMMERCENUMBER";
  }
  variable FPS_VAR_Rechtsvorm_nr
  {
   datatype: string;
   frequency: document;
   title: "LEGALSTATUSCODE";
  }
  variable FPS_VAR_Rechtsvorm_omschr
  {
   datatype: string;
   frequency: document;
   title: "LEGALSTATUSDESCRIPTION";
  }
  variable FPS_VAR_BIK_CODE
  {
   datatype: string;
   frequency: document;
   title: "SECTOROFINDUSTRYCODE";
  }
  variable FPS_VAR_SECTOR_OF_INDUSTRY_CODE_TYPE
  {
   datatype: string;
   frequency: document;
   title: "SECTOROFINDUSTRYCODETYPE";
  }
  variable FPS_VAR_BIK_Omschr
  {
   datatype: string;
   frequency: document;
   title: "SECTOROFINDUSTRYDESCRIPTION";
  }
  variable FPS_VAR_GridId
  {
   datatype: string;
   frequency: document;
   title: "GRIDID";
  }
  variable FPS_VAR_Accountmanager
  {
   datatype: string;
   frequency: document;
   title: "ACCOUNTMANAGER";
  }
  variable FPS_VAR_Kantoor
  {
   datatype: string;
   frequency: document;
   title: "OFFICENUMBER";
  }
  variable FPS_VAR_Straat
  {
   datatype: string;
   frequency: document;
   title: "STREET";
  }
  variable FPS_VAR_Housenumber
  {
   datatype: string;
   frequency: document;
   title: "HOUSENUMBER";
  }
  variable FPS_VAR_Postcode
  {
   datatype: string;
   frequency: document;
   title: "ZIPCODE";
  }
  variable FPS_VAR_Woonplaats
  {
   datatype: string;
   frequency: document;
   title: "CITY";
  }
  variable FPS_VAR_Provincie
  {
   datatype: string;
   frequency: document;
   title: "STATEORPROVINCE";
  }
  variable FPS_VAR_Land
  {
   datatype: string;
   frequency: document;
   title: "COUNTRY";
  }
  variable FPS_VAR_BvDID
  {
   datatype: string;
   frequency: document;
   title: "Bureau van Dijk ID";
  }
  variable FPS_VAR_Telefoon
  {
   datatype: string;
   frequency: document;
   title: "Telefoonnummer";
  }
  variable FPS_VAR_Emailadres
  {
   datatype: string;
   frequency: document;
   title: "Emailadres";
   variable FPS_FINAN_USER_ROLES
   {
    datatype: string;
    frequency: document;
    title: "FPS_FINAN_USER_ROLES";
   }
   variable FPS_FINAN_USER
   {
    datatype: string;
    frequency: document;
    title: "FPS_FINAN_USER";
   }
  }
 }
 variable Q_ROOT
 {
  frequency: document;
  formula: If( (Q_MAP01[1]=1) or (Length ( scKnockoutsCombi[1])>0),1,0);
  display_options: scorecard;
  title: "FiNiS Pricing";
  locked: 1;
  choices: "0:Complete.|1:Not complete.";
  variable Q_MAP01
  {
   valid:[AMMOUNT(Borrower_tpClientGroupChoice.required and DataAvailable(Borrower_tpClientGroupChoice),Borrower_tpAssetSize2.required and DataAvailable(Borrower_tpAssetSize2),Facility_tpBaseCurrencyChoice.required and DataAvailable(Facility_tpBaseCurrencyChoice),Facility_tpFixedInterestPeriodChoice.required and DataAvailable(Facility_tpFixedInterestPeriodChoice),Facility_tpPrepaymentPrec.required and DataAvailable(Facility_tpPrepaymentPrec),Facility_tpOfferPeriodChoice.required and DataAvailable(Facility_tpOfferPeriodChoice),Facility_tpType.required and DataAvailable(Facility_tpType),Facility_tpPrincipalLimit.required and DataAvailable(Facility_tpPrincipalLimit),Facility_tpOriginalTenor.required and DataAvailable(Facility_tpOriginalTenor),Facility_tpRemainingTenor.required and DataAvailable(Facility_tpRemainingTenor),Facility_tpOriginalAverageTenor.required and DataAvailable(Facility_tpOriginalAverageTenor),Facility_tpWithdrawalChoice.required and DataAvailable(Facility_tpWithdrawalChoice),Facility_tpRepaymentChoice.required and DataAvailable(Facility_tpRepaymentChoice),Facility_tpRepaymentFrequency.required and DataAvailable(Facility_tpRepaymentFrequency),Facility_tpStartDate.required and DataAvailable(Facility_tpStartDate),Facility_tpCurrentDate.required and DataAvailable(Facility_tpCurrentDate),Facility_tpEndDate.required and DataAvailable(Facility_tpEndDate),Facility_tpAnnuityLinearSub2 .required and DataAvailable(Facility_tpAnnuityLinearSub2 ),Facility_tpAnnuityLinearSub3 .required and DataAvailable(Facility_tpAnnuityLinearSub3 ),Facility_tpAnnuityLinearSub4 .required and DataAvailable(Facility_tpAnnuityLinearSub4 ),Facility_tpAnnuityLinearSub15 .required and DataAvailable(Facility_tpAnnuityLinearSub15 ),FacilitySub7Sub14Sub1 .required and DataAvailable(FacilitySub7Sub14Sub1 )),AMMOUNT(Borrower_tpClientGroupChoice.required,Borrower_tpAssetSize2.required,Facility_tpBaseCurrencyChoice.required,Facility_tpFixedInterestPeriodChoice.required,Facility_tpPrepaymentPrec.required,Facility_tpOfferPeriodChoice.required,Facility_tpType.required,Facility_tpPrincipalLimit.required,Facility_tpOriginalTenor.required,Facility_tpRemainingTenor.required,Facility_tpOriginalAverageTenor.required,Facility_tpWithdrawalChoice.required,Facility_tpRepaymentChoice.required,Facility_tpRepaymentFrequency.required,Facility_tpStartDate.required,Facility_tpCurrentDate.required,Facility_tpEndDate.required,Facility_tpAnnuityLinearSub2 .required,Facility_tpAnnuityLinearSub3 .required,Facility_tpAnnuityLinearSub4 .required,Facility_tpAnnuityLinearSub15 .required,FacilitySub7Sub14Sub1 .required)];
   frequency: document;
   formula: (Q_MAP01_ENTEREDREQUIREDVARS=Q_MAP01_REQUIREDVARS);
   title: "AAB Pricing";
   locked: 1;
   choices: "0:Complete.|1:Not complete.";
   variable Q_MAP01_WARNING
   {
    datatype: string;
    frequency: document;
    formula: String(Q_WARNING_GLOBAL[1]);
    title: "Warning voor map";
    locked: 1;
   }
   variable Q_MAP01_INFO
   {
    datatype: string;
    frequency: document;
    title: "Info bij stap";
    locked: 1;
   }
   variable Q_MAP01_VALIDATION
   {
    datatype: string;
    frequency: document;
    formula: String(If(Q_MAP01[1]=0 , "Not all required questions in this step are completed. [BR][/BR]Mandatory questions are marked with a *." , ""));
    title: "Validatie stap";
    locked: 1;
   }
   variable Agreement
   {
    frequency: document;
    displaytype: currency;
    title: "Agreement";
    locked: 1;
    variable AgreementSub1 refers to AgreementNumber
    {
     datatype: string;
     frequency: document;
     title: "Agreement";
     locked: 1;
    }
    variable AgreementIdentifier
    {
     datatype: string;
     frequency: document;
     title: "Agreement identifier";
    }
    variable ShowTestVariables
    {
     frequency: document;
     formula: 0;
     title: "Show Test Variables";
     choices: "1:Yes|0:No";
    }
    variable TargetRaRoRaCDriven
    {
     frequency: document;
     formula: If(TupleSum(Facility_tpCustomerSpread2)=NA, 1, 0);
     title: "Target RaRoRaC Driven Calculation";
     choices: "1:Yes|0:No";
    }
    variable AgreementHiddenfields
    {
     datatype: none;
     title: "Hidden fields for calculations";
     visible: ShowTestVariables;
     variable AgreementNumber
     {
      datatype: string;
      frequency: document;
      title: "Agreement";
     }
     variable AgreementDiversificationOR
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","OPERATIONALRISK",2);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Diversifivation Factor for Operational Risk";
     }
     variable AgreementDiversificationBR
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","BUSINESSRISK",2);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Diversifivation Factor for Business Risk";
     }
     variable AgreementDiversificationCR
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","CREDITRISK",2);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Diversifivation Factor for Credit Risk";
     }
     variable AgreementMaxRemainingTenor
     {
      frequency: document;
      formula: TupleMax(Facility_tpRemainingTenor);
      title: "Maximum Remaining Tenor Agreement (months)";
     }
     variable AgreementNumberOfBorrowers
     {
      frequency: document;
      formula: 1;
      title: "Number of Borrowers";
     }
     variable AgreementFixedCostOperatingConcept
     {
      frequency: document;
      formula: Borrower_tpAmountFixedCostOperatingConceptClientGroup;
      displaytype: currency;
      fixed_decimals: 2;
      title: "Cost per Service Concept - Fixed Cost Operating Concept";
     }
     variable AgreementPercentageOperatingConcept
     {
      frequency: document;
      formula: Borrower_tpPercentageOperatingConcept;
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Percentage Service Concept";
     }
     variable AgreementSubDebtRatio
     {
      frequency: document;
      formula: (MatrixLookup("AAB_Parameters.xls","CalculationParameters","SUBORDDEBTRATIOPERC",2));
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Subordinated Debt Capital Charge - Sub Debt Ratio (%)";
     }
     variable AgreementCostOfSubordination
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","COSTOFSUBORDBP",2);
      fixed_decimals: 0;
      title: "Subordinated Debt Capital Charge - Cost of Subordination (bp)";
     }
     variable AgreementAvailableAmountOfEquity
     {
      frequency: document;
      formula: 0;
      displaytype: currency;
      title: "Available Amount of Equity";
     }
    }
    variable AgreementSub6
    {
     datatype: none;
     title: "Profit and Losses";
     locked: 1;
     variable AgreementProfitAndLoss
     {
      frequency: document;
      title: "Profit and Losses - Clients";
      locked: 1;
      variable AgreementIncome
      {
       frequency: document;
       formula: (Borrower_tpIncome);
       displaytype: currency;
       fixed_decimals: 0;
       title: "Revenues";
       locked: 1;
       variable AgreementInterestIncome
       {
        frequency: document;
        formula: (Borrower_tpInterestIncome);
        displaytype: currency;
        title: "Interest income";
        locked: 1;
       }
       variable AgreementCreditRelatedFee
       {
        frequency: document;
        formula: (Borrower_tpCreditRelatedFee);
        displaytype: currency;
        title: "Credit related fees";
        locked: 1;
       }
      }
      variable -AgreementIndirectLiquidityCosts
      {
       frequency: document;
       formula: (Borrower_tpIndirectLiquidityCosts);
       displaytype: currency;
       title: "Indirect Liquidity Costs";
       locked: 1;
      }
      variable -AgreementDirectLiquidityPremium
      {
       frequency: document;
       formula: (Borrower_tpDirectLiquidityPremium);
       displaytype: currency;
       title: "Direct Liquidity Premium";
       locked: 1;
      }
      variable -AgreementSubordinatedDebtCapitalCharge
      {
       frequency: document;
       formula: (Borrower_tpSubordinatedDebtCapitalCharge);
       displaytype: currency;
       title: "Subordinated Debt Capital Charge";
       locked: 1;
      }
      variable AgreementEquityFundingAdjustment
      {
       frequency: document;
       formula: (Borrower_tpEquityFundingAdjustment);
       displaytype: currency;
       title: "Equity Funding Adjustment";
       locked: 1;
      }
      variable -AgreementOperationalCosts
      {
       frequency: document;
       formula: (Borrower_tpOperationalCosts);
       displaytype: currency;
       title: "Operational Costs";
       locked: 1;
      }
      variable -AgreementInternalExpectedLoss
      {
       frequency: document;
       formula: (Borrower_tpInternalExpectedLoss);
       displaytype: currency;
       title: "Internal Expected Loss";
       locked: 1;
      }
      variable -AgreementTax
      {
       frequency: document;
       formula: (Borrower_tpTax);
       displaytype: currency;
       title: "Tax";
       locked: 1;
      }
      variable =AgreementRiskAdjustedReturn
      {
       frequency: document;
       formula: (Borrower_tpRiskAdjustedReturn);
       fixed_decimals: 0;
       title: "Risk adjusted return";
       locked: 1;
      }
      variable AgreementReturnOnEquity
      {
       frequency: document;
       formula: OnER(AgreementRiskAdjustedReturn/AgreementRiskAdjustedCapital,NA);
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Return On Equity";
       locked: 1;
       variable AgreementRiskAdjustedCapital
       {
        frequency: document;
        displaytype: currency;
        title: "Risk Adjusted Capital";
        locked: 1;
       }
      }
      variable AgreementRaRoRaC
      {
       frequency: document;
       formula: OnER(AgreementRiskAdjustedReturn/AgreementEconomicCapital,NA);
       displaytype: percentage;
       fixed_decimals: 2;
       title: "RaRoRaC";
       locked: 1;
       variable AgreementEconomicCapital
       {
        frequency: document;
        formula: AgreementOperationalRisk+AgreementBusinessRisk+AgreementCreditRisk;
        displaytype: currency;
        title: "Economic Capital";
        locked: 1;
        variable AgreementOperationalRisk
        {
         frequency: document;
         formula: (Borrower_tpOperationalRisk);
         displaytype: currency;
         title: "Economic Capital - Operational Risk";
        }
        variable AgreementBusinessRisk
        {
         frequency: document;
         formula: (Borrower_tpBusinessRisk);
         displaytype: currency;
         title: "Economic Capital - Business Risk";
        }
        variable AgreementCreditRisk
        {
         frequency: document;
         formula: (Borrower_tpCreditRisk);
         displaytype: currency;
         title: "Economic Capital - Credit Risk";
        }
       }
      }
      variable AgreementRegulatoryProfit
      {
       frequency: document;
       formula: OnER(AgreementRiskAdjustedReturn-AgreementEquityCapitalCharge,NA);
       fixed_decimals: 0;
       title: "Regulatory Profit";
       locked: 1;
       variable AgreementEquityCapitalCharge
       {
        frequency: document;
        formula: (Borrower_tpEquityCapitalCharge);
        displaytype: currency;
        title: "Equity Capital Charge";
        locked: 1;
       }
      }
      variable AgreementEconomicProfit
      {
       frequency: document;
       formula: OnER(Borrower_tpRiskAdjustedReturn-(AgreementEconomicCapital*Borrower_tpEffectiveCostOfCapital),NA);
       fixed_decimals: 0;
       title: "Economic Profit";
       locked: 1;
       variable AgreementEffectiveCostOfCapital
       {
        frequency: document;
        displaytype: currency;
        title: "Effective Cost Of Capital";
        locked: 1;
       }
      }
      variable AgreementOtherMetrics
      {
       frequency: document;
       displaytype: currency;
       title: "Other Metrics";
       locked: 1;
       variable AgreementPrincipalLimit
       {
        frequency: document;
        formula: (Borrower_tpPrincipalLimit);
        displaytype: currency;
        title: "Principal Limit";
        locked: 1;
       }
       variable AgreementExpectedAverageOutstanding
       {
        frequency: document;
        formula: (Borrower_tpExpectedAverageOutstanding);
        displaytype: currency;
        title: "Expected Average Outstanding";
        locked: 1;
       }
       variable AgreementRWA
       {
        frequency: document;
        formula: (Borrower_tpRWA);
        displaytype: currency;
        title: "RWA";
        locked: 1;
        variable AgreementRWACreditRisk
        {
         frequency: document;
         formula: (Borrower_tpRWACreditRisk);
         displaytype: currency;
         title: "RWA Credit Risk";
         locked: 1;
        }
        variable AgreementRWAOperationalRisk
        {
         frequency: document;
         formula: (Borrower_tpRWAOperationalRisk);
         displaytype: currency;
         title: "RWA Operational Risk";
         locked: 1;
        }
       }
       variable AgreementEAD
       {
        frequency: document;
        formula: (Borrower_tpEAD);
        displaytype: currency;
        title: "EAD";
        locked: 1;
       }
      }
     }
    }
   }
   variable Borrower
   {
    frequency: document;
    displaytype: currency;
    title: "Borrower";
    variable Borrower_tpInput
    {
     datatype: none;
     title: "Client details";
     locked: 1;
     variable Borrower_tpReferenceNumber
     {
      datatype: string;
      frequency: document;
      formula: String(FPS_VAR_Relatienummer);
      title: "Borrower Reference";
     }
     variable Borrower_tpBaseCurrencyChoice
     {
      frequency: document;
      formula: 01;
      title: "Base Currency of Borrower";
      choices: "01:EUR|02:BRL|03:CAD|04:CHF|05:GBP|06:HKD|07:INR|08:MXN|09:NOK|10:SGD|11:USD";
     }
     variable Borrower_tpBaseCurrency
     {
      datatype: string;
      frequency: document;
      formula: String(Case(Borrower_tpBaseCurrencyChoice,[01:"EUR"|=02:"BRL"|=03:"CAD"|=04:"CHF"|=05:"GBP"|=06:"HKD"|=07:"INR"|=08:"MXN"|=09:"NOK"|=10:"SGD"|=11:"USD"]));
      title: "Currency";
      visible: 0;
     }
     variable Borrower_tpClientGroup
     {
      datatype: string;
      frequency: document;
      formula: String(SubStr ( Case(Borrower_tpClientGroupChoice,[01:"PAR - Particulieren/Medici"|=02:"PBN - PBNL"|=03:"PBI - PBI"|=04:"PBF - PBI - France"|=05:"PBD - PBI - Germany"|=06:"PBG - PBI - Guernsey"|=07:"PBH - PBI - Hong Kong"|=08:"PBJ - PBI - Jersey"|=09:"PBL - PBI - Luxembourg"|=10:"PBS - PBI - Singapore"|=11:"PBU - PBI - UAE"|=12:"PBB - PBI - Belgium"|=13:"IDJ - IC-D&J Clients"|=14:"YBB - Retail Banking-YBB"|=15:"BRM - Commercial Clients-REC"|=16:"CR1 - Commercial Clients-RM_A1"|=17:"CR2 - Commercial Clients-RM_A2"|=18:"CR3 - Commercial Clients-RM_A3"|=19:"CCL - Commercial Clients-CC"|=20:"PUB - Commercial Clients-PublicSector"|=21:"DDP - Commercial Clients-Deal Desk Public"|=22:"LMF - IC-FinancialInstitutions"|=23:"LMR - IC-RealEstate"|=24:"LML - IC-LargeCorporates"|=25:"LME - IC-ECT Clients"|=26:"LMD - IC-DebtSolutions"|=27:"LMC - IC-exCC Clients"]),0,3));
      title: "Client Group Code";
      visible: ShowTestVariables;
     }
     variable Borrower_tpClientGroupChoice
     {
      frequency: document;
      formula: 18;
      required: 1;
      title: "Client Group";
     }
     variable Borrower_tpAGICOrSBI
     {
      frequency: document;
      formula: If ( Borrower_tpSectorType="AGIC",0,If ( Borrower_tpSectorType="SBI",1,NA));
      title: "Do you want to use an AGIC or SBI identification code?";
      choices: "0:AGIC|1:SBI";
     }
     variable Borrower_tpAGICChoice
     {
      frequency: document;
      title: "AGIC Sector";
      visible: Borrower_tpAGICOrSBI=0;
     }
     variable Borrower_tpAGIC
     {
      datatype: string;
      frequency: document;
      title: "AGIC Code";
      locked: 1;
      visible: Borrower_tpAGICOrSBI=0;
     }
     variable Borrower_tpFinancialInstitutionChoice
     {
      frequency: document;
      formula: If(Borrower_tpAGICOrSBI=0,If(MatrixLookup("AAB_Parameters.xls","AGICMapping","@"&Borrower_tpAGIC,3)=1,1,0),If(MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Borrower_tpSBI,3)=1,1,0));
      title: "Financial Institution Choice";
      locked: 1;
      choices: "1:Yes|0:No";
     }
     variable Borrower_tpUnderSupervision
     {
      frequency: document;
      formula: 0;
      title: "Under Supervision";
      choices: "1:Yes|0:No";
     }
     variable Borrower_tpBookingLocationChoice
     {
      frequency: document;
      formula: 20;
      title: "Booking location";
      choices: "01:Australia|02:Austria|03:Belgium|04:Brazil|05:Canada|06:China|07:Czech Republic|08:Denmark|09:France|10:Germany|11:Greece|12:Hong Kong|13:Hungary|14:Indonesia|15:India|16:Ireland|17:Italy|18:Japan|19:Luxembourg|20:Netherlands|21:Norway|22:Poland|23:Portugal|24:Romania|25:Singapore|26:South Africa|27:Spain|28:Sweden|29:Switzerland|30:Turkey|31:United Arab Emirates|32:United Kingdom|33:United States";
     }
     variable Borrower_tpAssetSize2
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","DEFAULT_ASSET_SIZE",2);
      required: 1;
      displaytype: currency;
      title: "Asset Size (mio)";
     }
    }
    variable Borrower_tpDataImportedFromForce
    {
     datatype: none;
     title: String("Imported Data");
     locked: 1;
     visible: ShowTestVariables;
     variable Borrower_tpMainBorrowerLabeledRating
     {
      datatype: string;
      frequency: document;
      title: "UCR";
     }
     variable Borrower_tpName
     {
      datatype: string;
      frequency: document;
      formula: String(FPS_VAR_Naam);
      title: "Borrower Name";
     }
     variable Borrower_tpSBI
     {
      datatype: string;
      frequency: document;
      formula: String(If ( Borrower_tpSectorType="SBI" , Borrower_tpSectorCode,NA));
      title: "SBI branche code (Geen lijst)";
      visible: Borrower_tpAGICOrSBI=1;
     }
     variable Borrower_tpPDModel
     {
      datatype: string;
      frequency: document;
      title: "PD Model";
     }
    }
    variable Borrower_tpAutomaticInput
    {
     datatype: none;
     title: "Automatic Input";
     locked: 1;
     visible: ShowTestVariables;
     variable Borrower_tpClientGroupFullName
     {
      datatype: string;
      frequency: document;
      formula: String(SubStr ( Case(Borrower_tpClientGroupChoice,[01:"PAR - Particulieren/Medici"|=02:"PBN - PBNL"|=03:"PBI - PBI"|=04:"PBF - PBI - France"|=05:"PBD - PBI - Germany"|=06:"PBG - PBI - Guernsey"|=07:"PBH - PBI - Hong Kong"|=08:"PBJ - PBI - Jersey"|=09:"PBL - PBI - Luxembourg"|=10:"PBS - PBI - Singapore"|=11:"PBU - PBI - UAE"|=12:"PBB - PBI - Belgium"|=13:"IDJ - IC-D&J Clients"|=14:"YBB - Retail Banking-YBB"|=15:"BRM - Commercial Clients-REC"|=16:"CR1 - Commercial Clients-RM_A1"|=17:"CR2 - Commercial Clients-RM_A2"|=18:"CR3 - Commercial Clients-RM_A3"|=19:"CCL - Commercial Clients-CC"|=20:"PUB - Commercial Clients-PublicSector"|=21:"DDP - Commercial Clients-Deal Desk Public"|=22:"LMF - IC-FinancialInstitutions"|=23:"LMR - IC-RealEstate"|=24:"LML - IC-LargeCorporates"|=25:"LME - IC-ECT Clients"|=26:"LMD - IC-DebtSolutions"|=27:"LMC - IC-exCC Clients"]),7,99));
      title: "Client Group";
      locked: 1;
     }
     variable Borrower_tpSectorType
     {
      datatype: string;
      frequency: document;
      formula: String(FPS_VAR_SECTOR_OF_INDUSTRY_CODE_TYPE);
      title: "Sector type (SBI or AGIC)";
     }
     variable Borrower_tpSectorCode
     {
      datatype: string;
      frequency: document;
      formula: String(FPS_VAR_BIK_CODE);
      title: "Sector code";
     }
     variable Borrower_tpBookingLocation
     {
      datatype: string;
      frequency: document;
      formula: String(Case(Borrower_tpBookingLocationChoice,[01:"Australia"|=02:"Austria"|=03:"Belgium"|=04:"Brazil"|=05:"Canada"|=06:"China"|=07:"Czech Republic"|=08:"Denmark"|=09:"France"|=10:"Germany"|=11:"Greece"|=12:"Hong Kong"|=13:"Hungary"|=14:"Indonesia"|=15:"India"|=16:"Ireland"|=17:"Italy"|=18:"Japan"|=19:"Luxembourg"|=20:"Netherlands"|=21:"Norway"|=22:"Poland"|=23:"Portugal"|=24:"Romania"|=25:"Singapore"|=26:"South Africa"|=27:"Spain"|=28:"Sweden"|=29:"Switzerland"|=30:"Turkey"|=31:"United Arab Emirates"|=32:"United Kingdom"|=33:"United States"]));
      title: "Booking location Tekst";
     }
     variable Borrower_tpTaxRate
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","TaxRate" , Borrower_tpBookingLocation,1);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Tax Rate";
     }
     variable Borrower_tpRating
     {
      datatype: string;
      frequency: document;
      formula: String(Borrower_tpMainBorrowerLabeledRating);
      title: "UCR Rating";
     }
     variable Borrower_tpPD
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","PD" , Borrower_tpRating,1);
      displaytype: percentage;
      fixed_decimals: 4;
      title: "Probability of Default (%)";
     }
     variable Borrower_tpPDMoC
     {
      frequency: document;
      formula: Borrower_tpPD*Borrower_tpMoCFactor;
      displaytype: percentage;
      fixed_decimals: 4;
      title: "Probability of Default  MoC (%)";
     }
     variable Borrower_tpAssetSize
     {
      frequency: document;
      formula: Borrower_tpAssetSize2;
      displaytype: currency;
      title: "Asset Size (mio)";
     }
     variable Borrower_tpPDModelFullName
     {
      datatype: string;
      frequency: document;
      formula: String(MatrixLookup("AAB_Parameters.xls","VertaaltabelPDModel",Borrower_tpPDModel,1));
      title: "PD Model";
     }
     variable Borrower_tpMoCFactor
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","MOCFactorPD" , Borrower_tpPDModel,1);
      fixed_decimals: 4;
      title: "MoC Factor";
     }
     variable Borrower_tpARCAddOn
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,2);
      fixed_decimals: 3;
      title: "ARC Add-on";
     }
     variable Borrower_tpRiskWeight
     {
      frequency: document;
      formula: CumNormal((InvNormal(Borrower_tpPDMoC)-((Borrower_tpRho^0.5)*(InvNormal(1-Borrower_tpConfidenceLevel))))/((1-Borrower_tpRho)^0.5));
      fixed_decimals: 6;
      title: "Risk Weight";
     }
     variable Borrower_tpRho
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","EquityIndex",Borrower_tpEquityIndex,4);
      fixed_decimals: 5;
      title: "Rho";
     }
     variable Borrower_tpEquityIndex
     {
      frequency: document;
      formula: If(Borrower_tpAGICOrSBI=0,MatrixLookup("AAB_Parameters.xls","AGICMapping","@"&Borrower_tpAGIC,2),MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Borrower_tpSBI,2));
      fixed_decimals: 0;
      title: "Equity Index";
     }
     variable Borrower_tpFinancialInstitution
     {
      datatype: string;
      frequency: document;
      formula: String(If(Borrower_tpAGICOrSBI=0 , MatrixLookup("AAB_Parameters.xls","AGICMapping","@"&Borrower_tpAGIC,4) , MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Borrower_tpSBI,4)));
      title: "Financial Institution Description";
     }
     variable Borrower_tpCalibrationFactor
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalibrationFactor" , Borrower_tpCalibrationFactorID,3);
      fixed_decimals: 6;
      title: "Calibration Factor";
     }
     variable Borrower_tpCalibrationFactorID
     {
      datatype: string;
      frequency: document;
      formula: String(Borrower_tpRating&"_"&Borrower_tpClientGroup);
      title: "Calibration Factor ID";
     }
     variable Borrower_tpEAD
     {
      frequency: document;
      formula: TupleSum(Facility_tpEAD);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Exposure At Default";
     }
     variable Borrower_tpAverageEAD
     {
      frequency: document;
      displaytype: currency;
      title: "Average EAD";
     }
     variable Borrower_tpSumExpectedAverageOutstanding
     {
      frequency: document;
      formula: TupleSum(Facility_tpExpectedAverageOutstanding);
      displaytype: currency;
      title: "Total Expected Average Outstanding Borrower";
     }
     variable Borrower_tpNrOfFacilities
     {
      frequency: document;
      formula: TupleCount(Facility_tpID);
      title: "Number of Facilities";
     }
     variable Borrower_tpEquityRatio
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","AllocatedEquityRatio",2);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Equity Ratio";
     }
     variable Borrower_tpCostofEquity
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,6);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Cost of Equity";
     }
     variable Borrower_tpConfidenceLevel
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","ConfidenceLevel",2);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Confidence Level";
     }
     variable Borrower_tpEffectiveCostOfCapital
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,8);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Effective Cost of Capital (%)";
     }
     variable Borrower_tpFixedCostOperatingConcept
     {
      frequency: document;
      formula: AgreementFixedCostOperatingConcept/AgreementNumberOfBorrowers;
      fixed_decimals: 2;
      title: "Fixed Cost Operating Concept";
     }
     variable Borrower_tpAmountFixedCostOperatingConceptClientGroup
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,4);
      fixed_decimals: 2;
      title: "Amount Fixed Cost Operating Concept for Client Group";
     }
     variable Borrower_tpPLorNPL
     {
      frequency: document;
      formula: 1;
      title: "PL / NPL account";
      choices: "1:PL|0:NPL";
     }
     variable Borrower_tpNonCreditIncome_Total
     {
      frequency: document;
      formula: TupleSum(Borrower_tpNonCredit_tpIncome_Amount);
      displaytype: currency;
      title: "Cross Sell Total Income";
     }
     variable Borrower_tpNonCreditCosts_Total
     {
      frequency: document;
      formula: TupleSum(Borrower_tpNonCredit_tpCosts)+Borrower_tpNonCreditCostsCostPerServiceConcept;
      displaytype: currency;
      title: "Cross Sell Total Costs";
     }
     variable Borrower_tpNonCreditCostsCostPerServiceConcept
     {
      frequency: document;
      formula: (1-AgreementPercentageOperatingConcept)*Borrower_tpFixedCostOperatingConcept;
      displaytype: currency;
      title: "Non Credit Costs - Cost Per Service Concept";
     }
     variable Borrower_tpPercentageOperatingConcept
     {
      frequency: document;
      formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,5);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Credit Cost per Service Concept - Percentage Operating Concept";
     }
     variable Borrower_tpSBIName
     {
      datatype: string;
      frequency: document;
      formula: String(MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Borrower_tpSBI,1));
      title: "SBI branche naam";
      locked: 1;
      visible: Borrower_tpAGICOrSBI=1;
     }
     variable Borrower_tpHiddenVariablesBorrowerInformation
     {
      frequency: document;
      displaytype: currency;
      title: "Hidden variables for Borrower section Compact Report";
      locked: 1;
      visible: 0;
      variable Borrower_tpBrancheDescriptionCompactReport
      {
       datatype: string;
       frequency: document;
       formula: String(If(Borrower_tpAGICOrSBI=0 , Borrower_tpAGICChoiceName , Borrower_tpSBIName));
       title: "AGIC/SBI Code";
      }
      variable Borrower_tpAGICChoiceName
      {
       datatype: string;
       frequency: document;
       title: "AGIC Sector Description";
      }
     }
    }
    variable Borrower_tpProfitAndLossClient
    {
     datatype: none;
     title: "Profit and Losses - Credit";
     variable Borrower_tpIncome
     {
      frequency: document;
      formula: Borrower_tpInterestIncome+Borrower_tpCreditRelatedFee;
      displaytype: currency;
      fixed_decimals: 0;
      title: "Revenues";
      variable Borrower_tpInterestIncome
      {
       frequency: document;
       formula: TupleSum(Facility_tpInterestIncome);
       displaytype: currency;
       title: "Interest income";
      }
      variable Borrower_tpCreditRelatedFee
      {
       frequency: document;
       formula: TupleSum(Facility_tpCreditRelatedFee);
       displaytype: currency;
       title: "Credit related fees";
      }
     }
     variable -Borrower_tpOptionCostsIndLiqPremium
     {
      frequency: document;
      formula: TupleSum(Facility_tpOptionCostsIndLiqPrem);
      displaytype: currency;
      title: "Option Costs/Ind. Liq. Premium";
      variable -Borrower_tpIndirectLiquidityCosts
      {
       frequency: document;
       formula: TupleSum(Facility_tpIndirectLiquidityCosts);
       displaytype: currency;
       title: "Indirect Liquidity Costs";
      }
      variable -Borrower_tpPrepaymentCosts
      {
       frequency: document;
       formula: TupleSum(Facility_tpPrepaymentCosts);
       displaytype: currency;
       title: "Prepayment Costs";
      }
      variable -Borrower_tpPipelineRisk
      {
       frequency: document;
       formula: TupleSum(Facility_tpPipelineRisk);
       displaytype: currency;
       title: "Pipeline Risk";
      }
     }
     variable -Borrower_tpDirectLiquidityPremium
     {
      frequency: document;
      formula: TupleSum(Facility_tpDirectLiquidityPremium);
      displaytype: currency;
      title: "Direct Liquidity Premium";
     }
     variable -Borrower_tpSubordinatedDebtCapitalCharge
     {
      frequency: document;
      formula: TupleSum(Facility_tpSubordinatedDebtCapitalCharge);
      displaytype: currency;
      title: "Subordinated Debt Capital Charge";
     }
     variable Borrower_tpEquityFundingAdjustment
     {
      frequency: document;
      formula: TupleSum(Facility_tpEquityFundingAdjustment);
      displaytype: currency;
      title: "Equity Funding Adjustment";
     }
     variable -Borrower_tpOperationalCosts
     {
      frequency: document;
      formula: Borrower_tpCostPerContract+Borrower_tpCostOverVolume+Borrower_tpCostPerServiceConcept;
      displaytype: currency;
      title: "Operational Costs";
      variable -Borrower_tpCostPerContract
      {
       frequency: document;
       formula: TupleSum(Facility_tpCostPerContract);
       displaytype: currency;
       title: "Cost per Contract";
      }
      variable -Borrower_tpCostPerServiceConcept
      {
       frequency: document;
       formula: Borrower_tpFixedCostOperatingConcept*AgreementPercentageOperatingConcept;
       displaytype: currency;
       title: "Cost per Service Concept";
      }
      variable -Borrower_tpCostOverVolume
      {
       frequency: document;
       formula: TupleSum(Facility_tpCostOverVolume);
       displaytype: currency;
       title: "Cost over Volume";
      }
     }
     variable -Borrower_tpInternalExpectedLoss
     {
      frequency: document;
      formula: TupleSum(Facility_tpInternalExpectedLoss);
      displaytype: currency;
      title: "Internal Expected Loss";
     }
     variable -Borrower_tpTax
     {
      frequency: document;
      formula: (Borrower_tpIncome-Borrower_tpPrepaymentCosts-Borrower_tpPipelineRisk-Borrower_tpIndirectLiquidityCosts-Borrower_tpDirectLiquidityPremium-Borrower_tpOperationalCosts-Borrower_tpSubordinatedDebtCapitalCharge+Borrower_tpEquityFundingAdjustment-Borrower_tpInternalExpectedLoss)*Borrower_tpTaxRate;
      displaytype: currency;
      title: "Tax";
     }
     variable =Borrower_tpRiskAdjustedReturn
     {
      frequency: document;
      formula: Borrower_tpIncome-Borrower_tpPrepaymentCosts-Borrower_tpPipelineRisk-Borrower_tpIndirectLiquidityCosts-Borrower_tpDirectLiquidityPremium-Borrower_tpOperationalCosts-Borrower_tpSubordinatedDebtCapitalCharge+Borrower_tpEquityFundingAdjustment-Borrower_tpInternalExpectedLoss-Borrower_tpTax;
      displaytype: currency;
      fixed_decimals: 0;
      title: "Risk Adjusted Return";
     }
     variable Borrower_tpReturnOnEquity
     {
      frequency: document;
      formula: OnER(Borrower_tpRiskAdjustedReturn/Borrower_tpRequiredAmountOfEquity,NA);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Return On Equity";
      variable Borrower_tpRequiredAmountOfEquity
      {
       frequency: document;
       formula: TupleSum(Facility_tpRequiredAmountofEquity);
       displaytype: currency;
       title: "Required Amount of Equity";
      }
     }
     variable Borrower_tpRaRoRaC
     {
      frequency: document;
      formula: OnER(Borrower_tpRiskAdjustedReturn/Borrower_tpEconomicCapital,NA);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "RaRoRaC";
      variable Borrower_tpEconomicCapital
      {
       frequency: document;
       formula: Borrower_tpOperationalRisk+Borrower_tpBusinessRisk+Borrower_tpCreditRisk;
       displaytype: currency;
       title: "Economic Capital";
       variable Borrower_tpOperationalRisk
       {
        frequency: document;
        formula: TupleSum(Facility_tpORCreditRisk);
        displaytype: currency;
        title: "Economic Capital - Operational Risk";
       }
       variable Borrower_tpBusinessRisk
       {
        frequency: document;
        formula: TupleSum(Facility_tpBRCreditRisk);
        displaytype: currency;
        title: "Economic Capital - Business Risk";
       }
       variable Borrower_tpCreditRisk
       {
        frequency: document;
        formula: TupleSum(Facility_tpCreditRisk);
        displaytype: currency;
        title: "Economic Capital - Credit Risk";
       }
      }
     }
     variable Borrower_tpRegulatoryProfit
     {
      frequency: document;
      formula: OnER(Borrower_tpRiskAdjustedReturn-Borrower_tpEquityCapitalCharge,NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Regulatory Profit";
      variable Borrower_tpEquityCapitalCharge
      {
       frequency: document;
       formula: TupleSum(Facility_tpEquityCapitalCharge);
       displaytype: currency;
       title: "Equity Capital Charge";
      }
     }
     variable Borrower_tpEconomicProfit
     {
      frequency: document;
      formula: OnER(Borrower_tpRiskAdjustedReturn-(Borrower_tpEconomicCapital*Borrower_tpEffectiveCostOfCapital),NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Economic Profit";
      variable Borrower_tpEconomicProfitSub1 refers to Borrower_tpRiskAdjustedReturn
      {
       frequency: document;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return";
      }
      variable -Borrower_tpCostOfEconomicCapital
      {
       frequency: document;
       formula: Borrower_tpEconomicCapital*Borrower_tpEffectiveCostOfCapital;
       displaytype: currency;
       title: "Cost of Economic Capital";
       variable Borrower_tpCostOfEconomicCapitalSub1 refers to Borrower_tpEconomicCapital
       {
        frequency: document;
        displaytype: currency;
        title: "Economic Capital";
       }
       variable Borrower_tpCostOfEconomicCapitalSub2 refers to Borrower_tpEffectiveCostOfCapital
       {
        frequency: document;
        displaytype: percentage;
        fixed_decimals: 1;
        title: "Effective Cost of Capital";
       }
      }
     }
     variable Borrower_tpOtherMetrics
     {
      datatype: none;
      title: "Other Metrics";
      variable Borrower_tpPrincipalLimit
      {
       frequency: document;
       formula: TupleSum(Facility_tpPrincipalLimit);
       displaytype: currency;
       fixed_decimals: 0;
       title: "Principal Limit";
      }
      variable Borrower_tpExpectedAverageOutstanding
      {
       frequency: document;
       formula: TupleSum(Facility_tpExpectedAverageOutstanding);
       displaytype: currency;
       title: "ExpectedAverageOutstanding";
      }
      variable Borrower_tpRWA
      {
       frequency: document;
       formula: Borrower_tpRWACreditRisk+Borrower_tpRWAOperationalRisk;
       displaytype: currency;
       title: "RWA";
       variable Borrower_tpRWACreditRisk
       {
        frequency: document;
        formula: TupleSum(Facility_tpRWACreditRisk);
        displaytype: currency;
        title: "RWA Credit Risk";
       }
       variable Borrower_tpRWAOperationalRisk
       {
        frequency: document;
        formula: TupleSum(Facility_tpRWAOperationalRisk);
        displaytype: currency;
        title: "RWA Operational Risk";
       }
      }
      variable Borrower_tpOtherMetricsSub4 refers to Borrower_tpEAD
      {
       frequency: document;
       displaytype: currency;
       title: "EAD";
      }
     }
     variable Borrower_tpHiddenVariables
     {
      frequency: document;
      displaytype: currency;
      title: "Hidden variables voor P/L Compact Report";
      locked: 1;
      visible: 0;
      variable Borrower_tpFacilityEquityFundingAdjustmentTotal
      {
       frequency: document;
       displaytype: currency;
       title: "Total Facility Equity Funding Adjustment";
      }
      variable Borrower_tpFacilityRWATotal
      {
       frequency: document;
       formula: TupleSum(Facility_tpRWA);
       displaytype: currency;
       title: "Total Facility RWA excl. X-sell";
      }
      variable -Borrower_tpTaxAndOther
      {
       frequency: document;
       formula: Borrower_tpSubordinatedDebtCapitalCharge+Borrower_tpEquityFundingAdjustment+Borrower_tpTax;
       displaytype: currency;
       title: "Tax and Other";
      }
     }
    }
    variable Borrower_tpCrossSellProfitAndLossClient
    {
     datatype: none;
     title: "Profit and Losses - Cross Sell";
     variable Borrower_tpCrossSellIncome
     {
      frequency: document;
      formula: OnNA(Borrower_tpNonCreditIncome_Total,0);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Revenues";
     }
     variable -Borrower_tpCrossSellIndirectLiquidityCosts
     {
      frequency: document;
      formula: 0;
      displaytype: currency;
      title: "Indirect Liquidity Costs";
     }
     variable -Borrower_tpCrossSellDirectLiquidityPremium
     {
      frequency: document;
      formula: 0;
      displaytype: currency;
      title: "Direct Liquidity Premium";
     }
     variable -Borrower_tpCrossSellSubordinatedDebtCapitalCharge
     {
      frequency: document;
      formula: OnNA(If(AgreementMaxRemainingTenor<12,(Borrower_tpCrossSellRWAOperationalRisk*AgreementSubDebtRatio*(AgreementCostOfSubordination/10000))*(AgreementMaxRemainingTenor/12),Borrower_tpCrossSellRWAOperationalRisk*AgreementSubDebtRatio*(AgreementCostOfSubordination/10000)),0);
      displaytype: currency;
      title: "Subordinated Debt Capital Charge";
     }
     variable Borrower_tpCrossSellEquityFundingAdjustment
     {
      frequency: document;
      formula: OnER(If(AgreementMaxRemainingTenor<12,((Borrower_tpCrossSellRWAOperationalRisk*Borrower_tpEquityRatio-AgreementAvailableAmountOfEquity)*(MatrixLookup("AAB_Parameters.xls","CalculationParameters","3MAANDSEURIBORBP",2)/10000))*(AgreementMaxRemainingTenor/12),((Borrower_tpCrossSellRWAOperationalRisk*Borrower_tpEquityRatio-AgreementAvailableAmountOfEquity)*(MatrixLookup("AAB_Parameters.xls","CalculationParameters","3MAANDSEURIBORBP",2)/10000))),NA);
      displaytype: currency;
      title: "Equity Funding Adjustment";
     }
     variable -Borrower_tpCrossSellOperationalCosts
     {
      frequency: document;
      formula: OnNA(Borrower_tpNonCreditCosts_Total,0);
      displaytype: currency;
      title: "Operational Costs";
     }
     variable -Borrower_tpCrossSellInternalExpectedLoss
     {
      frequency: document;
      formula: 0;
      displaytype: currency;
      title: "Internal Expected Loss";
     }
     variable -Borrower_tpCrossSellTax
     {
      frequency: document;
      formula: (Borrower_tpNonCreditIncome_Total-Borrower_tpNonCreditCosts_Total)*Borrower_tpTaxRate;
      displaytype: currency;
      title: "Tax";
     }
     variable =Borrower_tpCrossSellRiskAdjustedReturn
     {
      frequency: document;
      formula: Borrower_tpCrossSellIncome-Borrower_tpCrossSellIndirectLiquidityCosts-Borrower_tpCrossSellDirectLiquidityPremium-Borrower_tpCrossSellOperationalCosts-Borrower_tpCrossSellSubordinatedDebtCapitalCharge+Borrower_tpCrossSellEquityFundingAdjustment-Borrower_tpCrossSellInternalExpectedLoss-Borrower_tpCrossSellTax;
      displaytype: currency;
      fixed_decimals: 0;
      title: "Risk Adjusted Return";
     }
     variable Borrower_tpCrossSellReturnOnEquity
     {
      frequency: document;
      formula: OnER(Borrower_tpCrossSellRiskAdjustedReturn/Borrower_tpCrossSellRequiredAmountOfEquity,NA);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Return On Equity";
      variable Borrower_tpCrossSellRequiredAmountOfEquity
      {
       frequency: document;
       formula: OnNA(Borrower_tpCrossSellRWA*Borrower_tpEquityRatio,0);
       displaytype: currency;
       title: "Required Amount of Equity";
      }
     }
     variable Borrower_tpCrossSellRaRoRaC
     {
      frequency: document;
      formula: OnER(Borrower_tpCrossSellRiskAdjustedReturn/Borrower_tpCrossSellEconomicCapital,NA);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "RaRoRaC";
      variable Borrower_tpCrossSellEconomicCapital
      {
       frequency: document;
       formula: OnNA(Borrower_tpCrossSellOperationalRisk+Borrower_tpCrossSellBusinessRisk,0);
       displaytype: currency;
       title: "Economic Capital";
       variable Borrower_tpCrossSellOperationalRisk
       {
        frequency: document;
        formula: OnNA(TupleSum(Borrower_tpNonCredit_tpORNonCreditRisk),0);
        displaytype: currency;
        title: "Economic Capital - Operational Risk";
       }
       variable Borrower_tpCrossSellBusinessRisk
       {
        frequency: document;
        formula: OnNA(TupleSum(Borrower_tpNonCredit_tpBRNonCreditRisk),0);
        displaytype: currency;
        title: "Economic Capital - Business Risk";
       }
      }
     }
     variable Borrower_tpCrossSellRegulatoryProfit
     {
      frequency: document;
      formula: OnER(Borrower_tpCrossSellRiskAdjustedReturn-Borrower_tpCrossSellEquityCapitalCharge,NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Regulatory Profit";
      variable Borrower_tpCrossSellEquityCapitalCharge
      {
       frequency: document;
       formula: OnNA(TupleSum(Borrower_tpNonCredit_tpEquityCapitalCharge),0);
       displaytype: currency;
       title: "Equity Capital Charge";
      }
     }
     variable Borrower_tpCrossSellEconomicProfit
     {
      frequency: document;
      formula: OnER(Borrower_tpCrossSellRiskAdjustedReturn-(Borrower_tpCrossSellEconomicCapital*Borrower_tpEffectiveCostOfCapital),NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Economic Profit";
      variable Borrower_tpCrossSellEconomicProfitSub1 refers to Borrower_tpCrossSellRiskAdjustedReturn
      {
       frequency: document;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return";
      }
      variable -Borrower_tpCrossSellCostOfEconomicCapital
      {
       frequency: document;
       formula: Borrower_tpCrossSellEconomicCapital*Borrower_tpEffectiveCostOfCapital;
       displaytype: currency;
       title: "Cost of Economic Capital";
       variable Borrower_tpCrossSellCostOfEconomicCapitalSub1 refers to Borrower_tpCrossSellEconomicCapital
       {
        frequency: document;
        displaytype: currency;
        title: "Economic Capital";
       }
       variable Borrower_tpCrossSellCostOfEconomicCapitalSub2 refers to Borrower_tpEffectiveCostOfCapital
       {
        frequency: document;
        displaytype: percentage;
        fixed_decimals: 1;
        title: "Effective Cost of Capital";
       }
      }
     }
     variable Borrower_tpCrossSellOtherMetrics
     {
      datatype: none;
      title: "Other Metrics";
      variable Borrower_tpCrossSellRWA
      {
       frequency: document;
       formula: OnNA(Borrower_tpCrossSellRWAOperationalRisk,0);
       displaytype: currency;
       title: "RWA";
       variable Borrower_tpCrossSellRWAOperationalRisk
       {
        frequency: document;
        formula: OnNA(TupleSum(Borrower_tpNonCredit_tpRWAORNonCredit),0);
        displaytype: currency;
        title: "RWA Operational Risk";
       }
      }
      variable Borrower_tpCrossSellNonCreditNetIncome_Total
      {
       frequency: document;
       formula: Borrower_tpNonCreditIncome_Total-Borrower_tpNonCreditCosts_Total;
       displaytype: currency;
       title: "Total Non Credit Net Income";
       locked: 1;
      }
     }
    }
    variable Borrower_tpClientProfitAndLossClient
    {
     datatype: none;
     title: "Profit and Losses - Client";
     locked: 1;
     variable Borrower_tpClientIncome
     {
      frequency: document;
      formula: Borrower_tpIncome+Borrower_tpCrossSellIncome;
      displaytype: currency;
      fixed_decimals: 0;
      title: "Revenues";
      locked: 1;
      variable Borrower_tpClientInterestIncome
      {
       frequency: document;
       formula: Borrower_tpInterestIncome;
       displaytype: currency;
       title: "Interest income";
       locked: 1;
      }
      variable Borrower_tpClientCreditRelatedFee
      {
       frequency: document;
       formula: Borrower_tpCreditRelatedFee;
       displaytype: currency;
       title: "Credit related fees";
       locked: 1;
      }
      variable Borrower_tpClientNonCreditIncome_Total
      {
       frequency: document;
       formula: OnNA(Borrower_tpNonCreditIncome_Total,0);
       displaytype: currency;
       title: "Total Non Credit Income";
       locked: 1;
      }
     }
     variable -Borrower_tpClientOptionCostsIndLiqPremium
     {
      frequency: document;
      formula: Borrower_tpOptionCostsIndLiqPremium;
      displaytype: currency;
      title: "Option Costs/Indirect Liquidity Costs";
      locked: 1;
      variable -Borrower_tpClientIndirectLiquidityCosts
      {
       frequency: document;
       formula: Borrower_tpIndirectLiquidityCosts+Borrower_tpCrossSellIndirectLiquidityCosts;
       displaytype: currency;
       title: "Indirect Liquidity Costs";
       locked: 1;
      }
      variable -Borrower_tpClientPrepaymentCosts
      {
       frequency: document;
       formula: Borrower_tpPrepaymentCosts;
       displaytype: currency;
       title: "Prepayment Costs";
       locked: 1;
      }
      variable -Borrower_tpClientPipelineRisk
      {
       frequency: document;
       formula: Borrower_tpPipelineRisk;
       displaytype: currency;
       title: "Pipeline Risk";
       locked: 1;
      }
     }
     variable -Borrower_tpClientDirectLiquidityPremium
     {
      frequency: document;
      formula: Borrower_tpDirectLiquidityPremium+Borrower_tpCrossSellDirectLiquidityPremium;
      displaytype: currency;
      title: "Direct Liquidity Premium";
      locked: 1;
     }
     variable -Borrower_tpClientSubordinatedDebtCapitalCharge
     {
      frequency: document;
      formula: Borrower_tpSubordinatedDebtCapitalCharge+Borrower_tpCrossSellSubordinatedDebtCapitalCharge;
      displaytype: currency;
      title: "Subordinated Debt Capital Charge";
      locked: 1;
     }
     variable Borrower_tpClientEquityFundingAdjustment
     {
      frequency: document;
      formula: Borrower_tpEquityFundingAdjustment+Borrower_tpCrossSellEquityFundingAdjustment;
      displaytype: currency;
      title: "Equity Funding Adjustment";
      locked: 1;
     }
     variable -Borrower_tpClientOperationalCosts
     {
      frequency: document;
      formula: Borrower_tpOperationalCosts+Borrower_tpCrossSellOperationalCosts;
      displaytype: currency;
      title: "Operational Costs";
      locked: 1;
      variable Borrower_tpClientCostPerServiceConcept
      {
       frequency: document;
       formula: Borrower_tpCostPerServiceConcept;
       displaytype: currency;
       title: "Cost per Service Concept";
       locked: 1;
      }
      variable Borrower_tpClientCostPerContract
      {
       frequency: document;
       formula: Borrower_tpCostPerContract;
       displaytype: currency;
       title: "Cost per Contract";
       locked: 1;
      }
      variable Borrower_tpClientCostOverVolume
      {
       frequency: document;
       formula: Borrower_tpCostOverVolume;
       displaytype: currency;
       title: "Cost Over Volume";
       locked: 1;
      }
      variable Borrower_tpClientNonCreditCosts_Total
      {
       frequency: document;
       formula: OnNA(Borrower_tpNonCreditCosts_Total,0);
       displaytype: currency;
       title: "Total Non Credit Costs";
       locked: 1;
      }
     }
     variable -Borrower_tpClientInternalExpectedLoss
     {
      frequency: document;
      formula: Borrower_tpInternalExpectedLoss+Borrower_tpCrossSellInternalExpectedLoss;
      displaytype: currency;
      title: "Internal Expected Loss";
      locked: 1;
     }
     variable -Borrower_tpClientTax
     {
      frequency: document;
      formula: Borrower_tpTax+Borrower_tpCrossSellTax;
      displaytype: currency;
      title: "Tax";
      locked: 1;
     }
     variable =Borrower_tpClientRiskAdjustedReturn
     {
      frequency: document;
      formula: Borrower_tpRiskAdjustedReturn+Borrower_tpCrossSellRiskAdjustedReturn;
      displaytype: currency;
      fixed_decimals: 0;
      title: "Risk Adjusted Return";
      locked: 1;
     }
     variable Borrower_tpClientReturnOnEquity
     {
      frequency: document;
      formula: OnER(Borrower_tpClientRiskAdjustedReturn/Borrower_tpClientRequiredAmountOfEquity,NA);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Return On Equity";
      locked: 1;
      variable Borrower_tpClientRequiredAmountOfEquity
      {
       frequency: document;
       formula: Borrower_tpRequiredAmountOfEquity+Borrower_tpCrossSellRequiredAmountOfEquity;
       displaytype: currency;
       title: "Required Amount Of Equity";
       locked: 1;
      }
     }
     variable Borrower_tpClientRaRoRaC
     {
      frequency: document;
      formula: OnER(Borrower_tpClientRiskAdjustedReturn/Borrower_tpClientEconomicCapital,NA);
      displaytype: percentage;
      fixed_decimals: 2;
      title: "RaRoRaC";
      locked: 1;
      variable Borrower_tpClientEconomicCapital
      {
       frequency: document;
       formula: Borrower_tpEconomicCapital+Borrower_tpCrossSellEconomicCapital;
       displaytype: currency;
       title: "Economic Capital";
       locked: 1;
       variable Borrower_tpClientOperationalRisk
       {
        frequency: document;
        formula: Borrower_tpOperationalRisk+Borrower_tpCrossSellOperationalRisk;
        displaytype: currency;
        title: "Economic Capital - Operational Risk";
       }
       variable Borrower_tpClientBusinessRisk
       {
        frequency: document;
        formula: Borrower_tpBusinessRisk+Borrower_tpCrossSellBusinessRisk;
        displaytype: currency;
        title: "Economic Capital - Business Risk";
       }
       variable Borrower_tpClientCreditRisk
       {
        frequency: document;
        formula: Borrower_tpCreditRisk;
        displaytype: currency;
        title: "Economic Capital - Credit Risk";
       }
      }
     }
     variable Borrower_tpClientRegulatoryProfit
     {
      frequency: document;
      formula: OnER(Borrower_tpClientRiskAdjustedReturn-Borrower_tpClientEquityCapitalCharge,NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Regulatory Profit";
      locked: 1;
      variable Borrower_tpClientEquityCapitalCharge
      {
       frequency: document;
       formula: Borrower_tpEquityCapitalCharge+Borrower_tpCrossSellEquityCapitalCharge;
       displaytype: currency;
       title: "Equity Capital Charge";
       locked: 1;
      }
     }
     variable Borrower_tpClientEconomicProfit
     {
      frequency: document;
      formula: OnER(Borrower_tpClientRiskAdjustedReturn-(Borrower_tpClientEconomicCapital*Borrower_tpEffectiveCostOfCapital),NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Economic Profit";
      variable Borrower_tpClientEconomicProfitSub1 refers to Borrower_tpClientRiskAdjustedReturn
      {
       frequency: document;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return";
      }
      variable -Borrower_tpClientCostOfEconomicCapital
      {
       frequency: document;
       formula: Borrower_tpClientEconomicCapital*Borrower_tpEffectiveCostOfCapital;
       displaytype: currency;
       title: "Cost of Economic Capital";
       variable Borrower_tpClientCostOfEconomicCapitalSub1 refers to Borrower_tpClientEconomicCapital
       {
        frequency: document;
        displaytype: currency;
        title: "Economic Capital";
       }
       variable Borrower_tpClientCostOfEconomicCapitalSub2 refers to Borrower_tpEffectiveCostOfCapital
       {
        frequency: document;
        displaytype: percentage;
        fixed_decimals: 1;
        title: "Effective Cost of Capital";
       }
      }
     }
     variable Borrower_tpClientOtherMetrics
     {
      datatype: none;
      title: "Other Metrics";
      locked: 1;
      variable Borrower_tpClientPrincipalLimit
      {
       frequency: document;
       formula: Borrower_tpPrincipalLimit;
       displaytype: currency;
       title: "Principal Limit";
       locked: 1;
      }
      variable Borrower_tpClientOutstanding
      {
       frequency: document;
       formula: Borrower_tpExpectedAverageOutstanding;
       displaytype: currency;
       title: "ExpectedAverageOutstanding";
       locked: 1;
      }
      variable Borrower_tpClientRWA
      {
       frequency: document;
       formula: Borrower_tpRWA+Borrower_tpCrossSellRWA;
       displaytype: currency;
       title: "RWA";
       locked: 1;
       variable Borrower_tpClientRWACreditRisk
       {
        frequency: document;
        formula: Borrower_tpRWACreditRisk;
        displaytype: currency;
        title: "RWA Credit Risk";
        locked: 1;
       }
       variable Borrower_tpClientRWAOperationalRisk
       {
        frequency: document;
        formula: Borrower_tpRWAOperationalRisk+Borrower_tpCrossSellRWAOperationalRisk;
        displaytype: currency;
        title: "RWA Operational Risk";
        locked: 1;
       }
      }
      variable Borrower_tpClientEAD
      {
       frequency: document;
       formula: Borrower_tpEAD;
       displaytype: currency;
       title: "EAD";
       locked: 1;
      }
      variable Borrower_tpClientNonCreditNetIncome_Total
      {
       frequency: document;
       formula: Borrower_tpCrossSellNonCreditNetIncome_Total;
       displaytype: currency;
       title: "Total Non Credit Net Income";
       locked: 1;
      }
     }
     variable Borrower_tpClientHiddenVariables
     {
      frequency: document;
      displaytype: currency;
      title: "Hidden variables voor P/L Compact Report";
      locked: 1;
      visible: 0;
      variable Borrower_tpClientTaxAndOther
      {
       frequency: document;
       formula: Borrower_tpClientSubordinatedDebtCapitalCharge+Borrower_tpClientEquityFundingAdjustment+Borrower_tpClientTax;
       displaytype: currency;
       title: "Tax and Other";
      }
     }
    }
    tuple Borrower_tpNonCredit
    {
     title: "A Cross Sell item";
     variable Borrower_tpNonCredit_tpDataImportedFromForce
     {
      datatype: none;
      title: String("Imported Data for Cross Sell Items");
      locked: 1;
      visible: ShowTestVariables;
      variable Borrower_tpNonCredit_tpCategoryCode
      {
       datatype: string;
       frequency: document;
       title: "Cross Sell Item Category Code";
      }
      variable Borrower_tpNonCredit_tpCategoryName
      {
       datatype: string;
       frequency: document;
       title: "Cross Sell Item Name";
      }
      variable Borrower_tpNonCredit_tpPrognosedIncomeNext12MonthsAmount
      {
       frequency: document;
       displaytype: currency;
       title: "Prognosed Income for the next 12 months";
      }
      variable Borrower_tpNonCredit_tpRealizedIncomePast12MonthsAmount
      {
       frequency: document;
       displaytype: currency;
       title: "Realized Income for the next 12 months";
      }
     }
     variable Borrower_tpNonCredit_tpName
     {
      datatype: string;
      frequency: document;
      formula: String(Borrower_tpNonCredit_tpCategoryName);
      title: "Item Description";
      locked: 1;
      visible: ShowTestVariables;
     }
     variable Borrower_tpNonCredit_tpIncome_Amount
     {
      frequency: document;
      formula: Borrower_tpNonCredit_tpPrognosedIncomeNext12MonthsAmount;
      displaytype: currency;
      title: "Expected Income Upcoming 12 months";
     }
     variable Borrower_tpNonCredit_tpCosts
     {
      frequency: document;
      formula: Borrower_tpNonCredit_tpIncome_Amount*Borrower_tpNonCredit_tpCosts_EffRatio;
      displaytype: currency;
      title: "Costs";
      locked: 1;
     }
     variable Borrower_tpNonCredit_tpNetIncome
     {
      frequency: document;
      formula: Borrower_tpNonCredit_tpIncome_Amount-Borrower_tpNonCredit_tpCosts;
      displaytype: currency;
      title: "Net Income";
      locked: 1;
     }
     variable Borrower_tpNonCredit_tpIncome_ClientGroup
     {
      datatype: string;
      frequency: document;
      title: "Borrower Client Group";
      locked: 1;
      visible: ShowTestVariables;
      link: Borrower_tpClientGroup;
     }
     variable Borrower_tpNonCredit_tpIncome_ID
     {
      datatype: string;
      frequency: document;
      formula: String(SubStr ( Borrower_tpNonCredit_tpCategoryCode,0,2));
      title: "ID";
      visible: ShowTestVariables;
     }
     variable Borrower_tpNonCredit_tpIncome_IDtotal
     {
      datatype: string;
      frequency: document;
      formula: String(Borrower_tpNonCredit_tpCategoryCode);
      title: "ID Total";
      visible: ShowTestVariables;
     }
     variable Borrower_tpNonCredit_tpCosts_EffRatio
     {
      frequency: document;
      formula: (MatrixLookup("AAB_Parameters.xls","NonCreditIncomeEffRatio" , Borrower_tpNonCredit_tpIncome_IDtotal,3));
      displaytype: percentage;
      fixed_decimals: 2;
      title: "Risk Adjusted Return - Other Expenses - Operational Costs - Non Credit Costs - Eff. ratio";
      visible: ShowTestVariables;
     }
     variable Borrower_tpNonCredit_tpEC
     {
      frequency: document;
      formula: Borrower_tpNonCredit_tpORNonCreditRisk+Borrower_tpNonCredit_tpBRNonCreditRisk;
      displaytype: currency;
      title: "Non Credit Economic Capital";
      visible: ShowTestVariables;
      variable Borrower_tpNonCredit_tpBRNonCreditRisk
      {
       frequency: document;
       formula: Borrower_tpARCAddOn*AgreementDiversificationBR*(Borrower_tpNonCredit_tpCosts*(Borrower_tpNonCredit_tpECbusr/10000));
       displaytype: currency;
       title: "Risk Adjusted Return - Non Credit EC Business Risk";
      }
      variable Borrower_tpNonCredit_tpECbusr
      {
       frequency: document;
       formula: MatrixLookup("AAB_Parameters.xls","NonCreditECoprECBusr" , Borrower_tpNonCredit_tpIncome_ID,3);
       displaytype: currency;
       title: "Risk Adjusted Return - EC Business Risk factor";
      }
      variable Borrower_tpNonCredit_tpORNonCreditRisk
      {
       frequency: document;
       formula: Borrower_tpARCAddOn*AgreementDiversificationOR*(Borrower_tpNonCredit_tpIncome_Amount*(Borrower_tpNonCredit_tpECopr/10000));
       displaytype: currency;
       title: "Risk Adjusted Return - Non Credit EC Operational Risk";
      }
      variable Borrower_tpNonCredit_tpECopr
      {
       frequency: document;
       formula: MatrixLookup("AAB_Parameters.xls","NonCreditECoprECBusr" , Borrower_tpNonCredit_tpIncome_ID,2);
       displaytype: currency;
       title: "Risk Adjusted Return - EC Operational Risk factor";
      }
     }
     variable Borrower_tpNonCredit_tpRWAORNonCredit
     {
      frequency: document;
      formula: Borrower_tpNonCredit_tpIncome_Amount*MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,7);
      displaytype: currency;
      title: "Risk Weighted Assets - RWA OR Non Credit";
      visible: ShowTestVariables;
     }
     variable Borrower_tpNonCredit_tpEquityCapitalCharge
     {
      frequency: document;
      formula: Borrower_tpNonCredit_tpRWAORNonCredit*Borrower_tpEquityRatio*Borrower_tpCostofEquity;
      displaytype: currency;
      title: "Equity Capital Charge";
      visible: ShowTestVariables;
     }
    }
    tuple Facility
    {
     title: "Facility";
     variable Facility_tpDataForUserView
     {
      datatype: none;
      title: String("Data for UserView");
      locked: 1;
      visible: ShowTestVariables;
      variable Facility_tpSummary
      {
       datatype: string;
       frequency: document;
       formula: String("Margin "&Str((Facility_tpCustomerSpread+Facility_tpCustomerSpreadAddMargin),0,3)&"% (RaRoRaC "&Str(Facility_tpRaRoRaC,0,2)&"%)");
       title: String(Facility_tpProductname[1]);
       locked: 1;
      }
      variable Facility_tpInputRequired
      {
       datatype: string;
       frequency: document;
       formula: String(If(Facility_tpPrincipalLimit<>NA,"Complete","Incomplete"));
       title: "Required fields";
       locked: 1;
      }
      variable Facility_tpProfitAndLoss
      {
       frequency: document;
       displaytype: currency;
       title: "Profit and losses";
       locked: 1;
      }
      variable Facility_tpRaRoRaC
      {
       frequency: document;
       formula: OnER(Facility_tpRiskAdjustedReturn/Facility_tpEconomicCapital,NA);
       displaytype: percentage;
       fixed_decimals: 2;
       title: "RaRoRaC (%)";
       locked: 1;
      }
      variable Facility_tpEconomicProfit
      {
       frequency: document;
       formula: OnER(Facility_tpRiskAdjustedReturn-Facility_tpCostOfEconomicCapital,NA);
       fixed_decimals: 0;
       title: "Economic Profit";
       locked: 1;
       variable Facility_tpCostOfEconomicCapital
       {
        frequency: document;
        formula: OnER(Facility_tpEconomicCapital*Borrower_tpEffectiveCostOfCapital*Facility_tpDeannualize,NA);
        fixed_decimals: 0;
        title: "Cost of Economic Capital";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        locked: 1;
       }
       variable Facility_tpEffectiveCostOfCapital
       {
        frequency: document;
        formula: OnER(Borrower_tpEffectiveCostOfCapital,NA);
        displaytype: percentage;
        fixed_decimals: 1;
        title: "Effective Cost of Economic Capital";
        locked: 1;
       }
      }
      variable Facility_tpReturnOnEquity
      {
       frequency: document;
       formula: OnER(Facility_tpRiskAdjustedReturn/(Facility_tpRWA*Borrower_tpEquityRatio*Facility_tpDeannualize),NA);
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Return on Equity (%)";
       locked: 1;
      }
      variable Facility_tpRegulatoryProfit
      {
       frequency: document;
       formula: OnER(Facility_tpRiskAdjustedReturn-Facility_tpEquityCapitalCharge,NA);
       fixed_decimals: 0;
       title: "Regulatory Profit";
       locked: 1;
      }
      variable Facility_tpOtherMetrics
      {
       frequency: document;
       displaytype: currency;
       title: "Other Metrics";
       locked: 1;
      }
     }
     variable Facility_tpRequiredInput
     {
      datatype: none;
      title: String("Required Input");
      locked: 1;
      variable Facility_tpProductname
      {
       datatype: string;
       frequency: document;
       formula: String(MatrixLookup("AAB_Parameters.xls","VertaaltabelProductType" , Facility_tpType,1));
       title: "Product Name";
      }
      variable Facility_tpBaseCurrencyChoice
      {
       frequency: document;
       formula: 01;
       required: 1;
       title: "Base Currency of Facility";
       choices: "01:EUR|02:BRL|03:CAD|04:CHF|05:GBP|06:HKD|07:INR|08:MXN|09:NOK|10:SGD|11:USD";
      }
      variable Facility_tpBaseCurrency
      {
       datatype: string;
       frequency: document;
       formula: String(Case(Facility_tpBaseCurrencyChoice,[01:"EUR"|=02:"BRL"|=03:"CAD"|=04:"CHF"|=05:"GBP"|=06:"HKD"|=07:"INR"|=08:"MXN"|=09:"NOK"|=10:"SGD"|=11:"USD"]));
       title: "Base Currency";
       visible: ShowTestVariables;
      }
      variable Facility_tpProductinterestDetailsInterestProductName
      {
       datatype: string;
       frequency: document;
       formula: String(MatrixLookup("AAB_Parameters.xls","VertaaltabelInterestProductType" , Facility_tpInterestProductCode,1));
       title: "Interest Product";
      }
      variable Facility_tpFixedInterestPeriodChoice
      {
       frequency: document;
       formula: Case(Val ( Facility_tpProductinterestDetailsFixedInterestPeriod),[1:2|3:3|6:4|99:1]);
       required: 1;
       title: "Fixed Interest Period";
       choices: "1:Base rate|2:1 months|3:3 months|4:6 months";
      }
      variable Facility_tpFixedInterestPeriod
      {
       frequency: document;
       formula: Facility_tpFixedInterestPeriodChoice;
       title: "Fixed Interest Period";
       locked: 1;
       visible: ShowTestVariables;
      }
      variable Facility_tpDateLastInterestReview
      {
       frequency: document;
       displaytype: date;
       title: "Date Last Review";
      }
      variable Facility_tpPrepaymentPrec
      {
       frequency: document;
       formula: 0;
       required: 1;
       displaytype: percentage;
       fixed_decimals: 0;
       title: "Prepayment of limit amount (%)";
      }
      variable Facility_tpOfferPeriodChoice
      {
       frequency: document;
       formula: 04;
       required: 1;
       title: "Offer period";
       hint: "Default is set to two weeks";
       choices: "01:0|02:1D|03:1W|04:2W|05:4W|06:2M|07:3M|08:6M";
      }
      variable Facility_tpOfferPeriod
      {
       datatype: string;
       frequency: document;
       formula: String(Case(Facility_tpOfferPeriodChoice,[01:"0"|=02:"1D"|=03:"1W"|=04:"2W"|=05:"4W"|=06:"2M"|=07:"3M"|=08:"6M"]));
       title: "Offer period text";
       visible: ShowTestVariables;
      }
      variable Facility_tpBaseRate2
      {
       frequency: document;
       formula: 100;
       fixed_decimals: 0;
       title: "Base Rate (Bps)";
      }
      variable Facility_tpCustomerSpreadAddMargin2
      {
       frequency: document;
       formula: Facility_tpCustomerSpreadAddMargin;
       fixed_decimals: 0;
       title: "Customer Spread Additional Margin";
      }
      variable Facility_tpRemainingAverageTenor
      {
       frequency: document;
       formula: If(Facility_tpRevolvingCredit=0,If(Facility_tpRepaymentChoice=0,Facility_tpRemainingAverageTenorBullet,Facility_tpRemainingAverageTenorNoBullet),1);
       fixed_decimals: 3;
       title: "Remaining Average Tenor (Years)";
      }
      variable Facility_tpExpectedAverageOutstanding
      {
       frequency: document;
       formula: If((Facility_tpRepaymentChoice=4) or (Facility_tpWithdrawalChoice=2),Facility_tpEAORevolving,If((Facility_tpWithdrawalChoice=0) and (Facility_tpRepaymentChoice=0), Facility_tpPrincipalLimit, If((Facility_tpWithdrawalChoice=0) and (Facility_tpRepaymentChoice=1), Facility_tpEAOOnceLinear, If((Facility_tpWithdrawalChoice=0) and (Facility_tpRepaymentChoice=2), Facility_tpEAOOnceAnnuity, If((Facility_tpWithdrawalChoice=0) and (Facility_tpRepaymentChoice=3), Facility_tpExpectedAverageOutstandingScheme, If((Facility_tpWithdrawalChoice=3) and (Facility_tpRepaymentChoice=0),Facility_tpExpectedAverageOutstandingScheme, If((Facility_tpWithdrawalChoice=3) and (Facility_tpRepaymentChoice=1),Facility_tpEAOSchemeLinear,If((Facility_tpWithdrawalChoice=3) and (Facility_tpRepaymentChoice=2),Facility_tpEAOSchemeAnnuity,If((Facility_tpWithdrawalChoice=3) and (Facility_tpRepaymentChoice=3),Facility_tpExpectedAverageOutstandingScheme,Facility_tpEAORevolving)))))))));
       displaytype: currency;
       title: "Expected Average Outstanding (For upcoming 12 months after Current Date)";
      }
      variable Facility_tpUncommitted2
      {
       frequency: document;
       formula: 0;
       title: "Facility is uncommitted";
       choices: "1:Yes|0:No";
      }
      variable Facility_tp31DgDebet
      {
       frequency: document;
       formula: 0;
       title: "31 Dg Debet";
       choices: "1:Yes|0:No";
      }
     }
     variable Facility_tpDataImportedFromForce
     {
      datatype: none;
      title: String("Imported Data");
      locked: 1;
      visible: ShowTestVariables;
      variable Facility_tpType
      {
       datatype: string;
       frequency: document;
       required: 1;
       title: "Abbreviated Facility Type";
      }
      variable Facility_tpID
      {
       datatype: string;
       frequency: document;
       title: "Accountnumber";
      }
      variable Facility_tpStatusName
      {
       datatype: string;
       frequency: document;
       title: "Status";
      }
      variable Facility_tpProductReferenceNumber
      {
       datatype: string;
       frequency: document;
       title: "Product Reference Number";
      }
      variable Facility_tpPrincipalLimit
      {
       frequency: document;
       required: 1;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Facility Limit";
      }
      variable Facility_tpProductStartDate
      {
       frequency: document;
       displaytype: date;
       title: "Start Date";
      }
      variable Facility_tpProductduration
      {
       frequency: document;
       fixed_decimals: 0;
       title: "Product Duration/ Maturity (months)";
      }
      variable Facility_tpProductEndDate
      {
       frequency: document;
       displaytype: date;
       title: "End date";
      }
      variable Facility_tpProductuptakeDetailsUptakeType
      {
       datatype: string;
       frequency: document;
       title: "Withdrawal - WithdrawalType";
       hint: "ONE_TIME,FIXED_TERMS,REVOLVING,IRREGULAR_SCHEDULE";
      }
      variable Facility_tpProductuptakeDetailsUptakeFrequency
      {
       datatype: string;
       frequency: document;
       title: "Withdrawal - WithdrawalFrequency";
       hint: "Daily, WEEKLy,MONTHLY,Quarterly,YEARLY";
      }
      variable Facility_tpProductWithdrawalDetailsLastPossibleWithdrawalDate
      {
       datatype: string;
       frequency: document;
       title: "Withdrawal - Last Possible Withdrawal Date";
       hint: "Can only be specified with choosing to withdraw at once";
      }
      variable Facility_tpProductWithdrawalDetailsPercentageUsedOfLimit
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 0;
       title: "Withdrawal - Percentage used of Limits";
      }
      variable Facility_tpProductredemptionDetailsRedemptionType
      {
       datatype: string;
       frequency: document;
       title: "Repayment - RepaymentType";
      }
      variable Facility_tpProductredemptionDetailsPeriodicity
      {
       datatype: string;
       frequency: document;
       title: "Repayment - Periodicity";
      }
      variable Facility_tpProductredemptionDetailsFirstRedemptionAfterXMonths
      {
       frequency: document;
       fixed_decimals: 0;
       title: "Repayment - FirstRepaymentAfterXMonths";
      }
      variable Facility_tpInterestProductCode
      {
       datatype: string;
       frequency: document;
       title: "Interest - Interest Product Code";
       hint: "This code is used to retrieve the right liquidity spread";
      }
      variable Facility_tpProductinterestDetailsFixedInterestPeriod
      {
       datatype: string;
       frequency: document;
       title: "Interest - Fixed Interest Period";
       hint: "Period in months";
      }
      variable Facility_tpLGD
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Loss Given Default (LGD) (%)";
      }
      variable Facility_tpLGDMoC
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Loss Given Default (LGD) MoC (%)";
      }
      variable Facility_tpDLGDMoC
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Loss Given Default Downturn (LGD) MoC (%)";
      }
      variable Facility_tpIsRevolving
      {
       datatype: string;
       frequency: document;
       title: "Facility is revolving";
      }
      variable Facility_tpCustomerSpread2
      {
       frequency: document;
       fixed_decimals: 2;
       title: "Customer Spread (Bps)";
      }
      variable Facility_tpMarketSpread
      {
       frequency: document;
       fixed_decimals: 2;
       title: "Market Spread";
      }
      variable Facility_tpOneOffFeeAmount2
      {
       frequency: document;
       formula: 0;
       displaytype: currency;
       title: "One Off Fee Amount";
      }
      variable Facility_tpCreditFeeBp
      {
       frequency: document;
       formula: 0;
       displaytype: currency;
       title: "Credit fee (Bp)";
      }
      variable Facility_tpCommitmentFeeBp
      {
       frequency: document;
       formula: 0;
       fixed_decimals: 0;
       title: "Commitment Fee (Bp)";
      }
      variable Facility_tpTargetRaRoRac
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 1;
       title: "Target RaRoRaC";
      }
     }
     variable Facility_tpAutomaticInput
     {
      datatype: none;
      title: String("Automatic Input Facility");
      locked: 1;
      visible: ShowTestVariables;
      variable Facility_tpNonRevolvingProduct
      {
       frequency: document;
       formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,9)=0,1,0);
       title: "Non Revolving Product (Y/N)";
       choices: "1:Yes|0:No";
      }
      variable Facility_tpRevolvingProduct
      {
       frequency: document;
       formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,9)<>0,1,0);
       title: "Revolving Product (Y/N)";
       choices: "1:Yes|0:No";
      }
      variable Facility_tpRevolvingCredit
      {
       frequency: document;
       formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,9)<>0,1,0);
       title: "Revolving Credit (Y/N)";
       choices: "1:Yes|0:No";
      }
      variable Facility_tpPDMultiplierUnder1Year
      {
       frequency: document;
       formula: If(Facility_tpRemainingTenor=NA,1,If(Facility_tpRemainingTenor<12,Facility_tpRemainingTenor/12,1));
       displaytype: currency;
       title: "Remaning Tenor Under 1 Year";
      }
      variable Facility_tpBorrower_tpPD
      {
       frequency: document;
       formula: Borrower_tpPD*Facility_tpPDMultiplierUnder1Year;
       displaytype: percentage;
       fixed_decimals: 4;
       title: "Probability of Default of the Borrower Specific for Facility";
      }
      variable Facility_tpBorrower_tpPDMoC
      {
       frequency: document;
       formula: Borrower_tpPD*Borrower_tpMoCFactor*Facility_tpPDMultiplierUnder1Year;
       displaytype: percentage;
       fixed_decimals: 4;
       title: "Probability of Default  MoC of the Borrower Specific for Facility";
      }
      variable Facility_tpBorrower_tpRiskWeight
      {
       frequency: document;
       formula: CumNormal((InvNormal(Facility_tpBorrower_tpPDMoC)-((Borrower_tpRho^0.5)*(InvNormal(1-Borrower_tpConfidenceLevel))))/((1-Borrower_tpRho)^0.5));
       fixed_decimals: 6;
       title: "Risk Weight of the Borrower Specific for Facility";
      }
      variable Facility_tpDeannualize
      {
       frequency: document;
       formula: If(Facility_tpRemainingAverageTenor<1,Facility_tpRemainingAverageTenor,1);
       fixed_decimals: 3;
       title: "De-annualization fraction (years)";
      }
      variable Facility_tpBorrower_tpPLorNPL
      {
       frequency: document;
       formula: Borrower_tpPLorNPL;
       title: "PL / NPL account";
       choices: "1:PL|0:NPL";
      }
     }
     variable Facility_RepaymentScheme
     {
      datatype: none;
      title: "Repayment Scheme";
      locked: 1;
      variable Facility_tpOriginalTenor
      {
       frequency: document;
       formula: OnNeg(OnER((DateToYear(Facility_tpEndDate-1)*12+DateToMonth(Facility_tpEndDate-1)+If((DateToDay(Facility_tpEndDate)>DateToDay(Facility_tpStartDate)) or (DateToDay(Facility_tpEndDate)=1),1,0))-(DateToYear(Facility_tpStartDate)*12+DateToMonth(Facility_tpStartDate)),NA),NA);
       required: 1;
       fixed_decimals: 0;
       title: "Original Tenor (using the start date) (Months)";
      }
      variable Facility_tpOriginalTenorYears
      {
       frequency: document;
       formula: OnNeg(OnER(Facility_tpOriginalTenor/12,NA),NA);
       fixed_decimals: 3;
       title: "Original Tenor (using the start date) (Years)";
      }
      variable Facility_tpRemainingTenor
      {
       frequency: document;
       formula: OnNeg(OnER((DateToYear(Facility_tpEndDate-1)*12+DateToMonth(Facility_tpEndDate-1)+If((DateToDay(Facility_tpEndDate)>DateToDay(Facility_tpStartDate)) or (DateToDay(Facility_tpEndDate)=1),1,0))-(DateToYear(If(Facility_tpCurrentDate<=Facility_tpStartDate,Facility_tpStartDate,Facility_tpCurrentDate))*12+DateToMonth(If(Facility_tpCurrentDate<=Facility_tpStartDate,Facility_tpStartDate,Facility_tpCurrentDate))),NA),NA);
       required: 1;
       fixed_decimals: 0;
       title: "Remaining Tenor (using the current date) (Months)";
      }
      variable Facility_tpRemainingTenorYears
      {
       frequency: document;
       formula: OnNeg(OnER(Facility_tpRemainingTenor/12,NA),NA);
       fixed_decimals: 3;
       title: "Remaining Tenor (using the current date) (Years)";
      }
      variable Facility_tpOriginalAverageTenor
      {
       frequency: document;
       formula: If(Facility_tpRevolvingCredit=0,If(Facility_tpRepaymentChoice=0,Facility_tpOriginalAverageTenorBullet,Facility_tpOriginalAverageTenorNoBullet),1);
       required: 1;
       fixed_decimals: 3;
       title: "Original Average Tenor (Years)";
       variable Facility_tpOriginalAverageTenorBullet
       {
        frequency: document;
        formula: OnER(Facility_tpOriginalTenorYears,NA);
        fixed_decimals: 3;
        title: "Original Average Tenor - Bullet";
       }
       variable Facility_tpOriginalAverageTenorNoBullet
       {
        frequency: document;
        formula: If((Facility_tpRepaymentChoice=3) ,Facility_tpOriginalAverageTenorScheme, If( (Facility_tpRepaymentChoice=2), Facility_tpAnnuityOAT , If( (Facility_tpRepaymentChoice=1), Facility_tpLinearOAT ,OnER(HSum(Facility_tpWeightedAmountRepayment,DateToT(Facility_tpStartDate,1),DateToT(Facility_tpEndDateMax10,1))/(12*HSum(Facility_tpRepayment,DateToT(Facility_tpStartDate,1),DateToT(Facility_tpEndDateMax10,1))),NA)) ) );
        fixed_decimals: 3;
        title: "Original Average Tenor - No Bullet";
       }
      }
      variable Facility_tpOriginalAverageTenorTHsum
      {
       frequency: document;
       formula: OnER(HSum(Facility_tpWeightedAmountRepayment,DateToT(Facility_tpStartDate,1),DateToT(Facility_tpEndDateMax10,1)),NA);
       fixed_decimals: 2;
       title: "Original Average Tenor Teller";
       visible: ShowTestVariables;
      }
      variable Facility_tpOriginalAverageTenorNHsum
      {
       frequency: document;
       formula: OnER((12*HSum(Facility_tpRepayment,DateToT(Facility_tpStartDate,1),DateToT(Facility_tpEndDateMax10,1))),NA);
       fixed_decimals: 2;
       title: "Original Average Tenor Noemer";
       visible: ShowTestVariables;
      }
      variable Facility_tpRemainingAverageTenor2
      {
       frequency: document;
       formula: Facility_tpRemainingAverageTenor;
       fixed_decimals: 3;
       title: "Remaining Average Tenor (Years)";
       locked: 1;
       link: Facility_tpRemainingAverageTenor;
       variable Facility_tpRemainingAverageTenorBullet
       {
        frequency: document;
        formula: OnER(Facility_tpRemainingTenorYears,NA);
        fixed_decimals: 3;
        title: "Remaining Average Tenor - Bullet";
        locked: 1;
       }
       variable Facility_tpRemainingAverageTenorNoBullet
       {
        frequency: document;
        formula: If(Facility_tpRepaymentChoice=3,Facility_tpRemainingAverageTenorScheme,If((Facility_tpRepaymentChoice=2),Facility_tpAnnuityRAT,If((Facility_tpRepaymentChoice=1),Facility_tpLinearRAT ,OnER(HSum(Facility_tpWeightedAmountRepaymentRem,(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1))),DateToT(Facility_tpEndDateMax10,1))/(12*HSum(Facility_tpRepayment,(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1))),DateToT(Facility_tpEndDateMax10,1))),NA)) ) );
        fixed_decimals: 3;
        title: "Remaining Average Tenor - No Bullet";
        locked: 1;
       }
      }
      variable Facility_tpRemainingAverageTenorTHsum
      {
       frequency: document;
       formula: OnER(HSum(Facility_tpWeightedAmountRepaymentRem,(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1))),DateToT(Facility_tpEndDateMax10,1)),NA);
       fixed_decimals: 2;
       title: "Remaining Average Tenor Teller";
       visible: ShowTestVariables;
      }
      variable Facility_tpRemainingAverageTenorNHsum
      {
       frequency: document;
       formula: OnER(12*HSum(Facility_tpRepayment,(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1))),DateToT(Facility_tpEndDateMax10,1)),NA);
       fixed_decimals: 2;
       title: "Remaining Average Tenor Noemer";
       visible: ShowTestVariables;
      }
      variable Facility_tpLimit
      {
       frequency: document;
       formula: If((Facility_tpRepaymentChoice=4) or (Facility_tpWithdrawalChoice=2),Facility_tpPrincipalLimit,If(Facility_tpRepaymentChoice=0,Facility_tpPrincipalLimit,If(Facility_tpRepaymentChoice=1,Facility_tpLimitLinear,If(Facility_tpRepaymentChoice=2,Facility_tpLimitAnnuity,If(Facility_tpRepaymentChoice=3,Facility_tpLimitScheme,Facility_tpPrincipalLimit)))));
       fixed_decimals: 0;
       title: "Limit (For upcoming 12 months after Current Date)";
       variable Facility_tpLimitAnnuity
       {
        frequency: document;
        formula: (Facility_tpPrincipalLimit * Facility_tpRepaymentFrequency - Facility_tpLimitAnnuityRepayment) / MinMax(Facility_tpAnnuityPPMTRATTotalPeriods,1,Facility_tpRepaymentFrequency,NA);
        title: "Limit annuity";
       }
       variable Facility_tpLimitLinear
       {
        frequency: document;
        formula: (Facility_tpPrincipalLimit * Facility_tpRepaymentFrequency - Facility_tpLimitLinearRepayment) / MinMax(Facility_tpAnnuityPPMTRATTotalPeriods,1,Facility_tpRepaymentFrequency,NA);
        title: "Limit Linear";
       }
       variable Facility_tpLimitScheme
       {
        frequency: document;
        formula: (Facility_tpPrincipalLimit * Facility_tpRepaymentFrequency - Facility_tpLimitAnnuityRepayment) / MinMax(Facility_tpAnnuityPPMTRATTotalPeriods,1,Facility_tpRepaymentFrequency,NA);
        title: "Limit Scheme";
       }
       variable Facility_tpLimitLinearRepayment
       {
        frequency: document;
        formula: SumFor(X,(Facility_tpPeriodDifferenceGrace + 1),Facility_tpNumberOfPeriodsNoGrace,1, Facility_tpLinear * Round(MinMax( (( Facility_tpAnnuityMonthsSinceStartDate + Facility_tpRepaymentFrequency ) - X),0,Facility_tpRepaymentFrequency) ,0) ) ;
        title: "Limit Linear Repayment Amount";
       }
       variable Facility_tpLimitAnnuityRepayment
       {
        frequency: document;
        formula: SumFor(X,1,Facility_tpNumberOfPeriods,1,(PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,X,Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon)) * MinMax( Facility_tpAnnuityMonthsSinceStartDate + Facility_tpRepaymentFrequency - Facility_tpPeriodDifferenceGrace - X ,0,Facility_tpRepaymentFrequency,0) ) ;
        title: "Limit Annuity Repayment Amount";
       }
       variable Facility_tpLimitSchemeRepayment
       {
        frequency: document;
        formula: TupleSum(Facility_tpManual_LimitWeightedRepayment);
        title: "Limit Scheme Repayment Amount";
       }
      }
      variable Facility_tpNumberOfPeriods
      {
       frequency: document;
       formula: If(Facility_tpRepaymentChoice=0,1,OnER(RoundUp(((DateToYear(Facility_tpEndDate-1)*12+DateToMonth(Facility_tpEndDate-1)+If((DateToDay(Facility_tpEndDate)>DateToDay(Facility_tpStartDate)) or (DateToDay(Facility_tpEndDate)=1),1,0))-(DateToYear(Facility_tpStartDate)*12+DateToMonth(Facility_tpStartDate))-Facility_tpGracePeriod)*(Facility_tpRepaymentFrequency/12),0),NA));
       fixed_decimals: 0;
       title: "Number Of Periods";
      }
      variable Facility_tpNumberOfPeriodsNoGrace
      {
       frequency: document;
       formula: If(Facility_tpRepaymentChoice=0,1,OnER(RoundUp(((DateToYear(Facility_tpEndDate-1)*12+DateToMonth(Facility_tpEndDate-1)+If((DateToDay(Facility_tpEndDate)>DateToDay(Facility_tpStartDate)) or (DateToDay(Facility_tpEndDate)=1),1,0))-(DateToYear(Facility_tpStartDate)*12+DateToMonth(Facility_tpStartDate)))*(Facility_tpRepaymentFrequency/12),0),NA));
       fixed_decimals: 0;
       title: "Number Of Periods Without Grace";
      }
      variable Facility_tpWithdrawalChoice
      {
       frequency: document;
       formula: If ( Facility_tpProductuptakeDetailsUptakeType="OneTime",0,If ( Facility_tpProductuptakeDetailsUptakeType="FixedTerms",1,If ( Facility_tpProductuptakeDetailsUptakeType="WithdrawalRevolving",2,If ( Facility_tpProductuptakeDetailsUptakeType="IrregularWithdrawalSchedule",3,If ( Facility_tpProductuptakeDetailsUptakeType="ConditionalWithdrawalSchedule",3,NA)))));
       required: 1;
       title: "Withdrawal Type";
       choices: "0:ONCE|1:PERIODICAL|2:REVOLVING|3:SCHEME";
      }
      variable Facility_tpRepaymentChoice
      {
       frequency: document;
       formula: If ( Facility_tpProductredemptionDetailsRedemptionType="InterestOnly",0,If ( Facility_tpProductredemptionDetailsRedemptionType="Linear",1,If ( Facility_tpProductredemptionDetailsRedemptionType="Annuity",2,If ( Facility_tpProductredemptionDetailsRedemptionType="IrregularRepaymentSchedule",3,If ( Facility_tpProductredemptionDetailsRedemptionType="RepaymentRevolving",4,NA)))));
       required: 1;
       title: "Repayment Type";
       choices: "0:BULLET|1:LINEAR|2:ANNUITY|3:SCHEME|4:REVOLVING";
      }
      variable Facility_tpRepaymentFrequency
      {
       frequency: document;
       formula: OnER(Val(Facility_tpProductredemptionDetailsPeriodicity),NA);
       required: 1;
       title: "Repayment frequency";
       choices: "1:YEARLY|2:HALF YEARLY|4:QUARTERLY|12:MONTHLY|";
      }
      variable Facility_tpAnnuityInterestRateDefault
      {
       frequency: document;
       formula: 1;
       title: "Annuity Interest Rate (Default/Funding+Marge)";
       choices: "1:YES|0:NO";
      }
      variable Facility_tpAnnuityInterestRate
      {
       frequency: document;
       formula: If(Facility_tpAnnuityInterestRateDefault,0.05,(Facility_tpBaseRate2+Facility_tpCustomerSpread2+Facility_tpCustomerSpreadAddMargin2)*0.0001);
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Annuity Interest Rate";
      }
      variable Facility_tpBalloon
      {
       frequency: document;
       formula: 0;
       displaytype: currency;
       title: "Balloon (?)";
      }
      variable Facility_tpGracePeriod
      {
       frequency: document;
       formula: Facility_tpProductredemptionDetailsFirstRedemptionAfterXMonths;
       fixed_decimals: 0;
       title: "Grace Period (mnd)";
      }
      variable Facility_tpStartDate
      {
       frequency: document;
       formula: Facility_tpProductStartDate;
       required: 1;
       displaytype: date;
       title: "Start date";
       link: Facility_tpProductStartDate;
      }
      variable Facility_tpCurrentDate
      {
       frequency: document;
       formula: If(DataEntered(Facility_tpCurrentDate),Facility_tpCurrentDate,CurrentDate);
       required: 1;
       displaytype: date;
       title: "Current date";
      }
      variable Facility_tpEndDate
      {
       frequency: document;
       formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,9)=1,NA,Facility_tpProductEndDate);
       required: 1;
       displaytype: date;
       title: "End date";
      }
      variable Facility_tpEndDateMax10
      {
       frequency: document;
       formula: If(Facility_tpEndDate > AddMonth(DMYtoDate(DateToDay(Facility_tpStartDate),DateToMonth(Facility_tpStartDate),DateToYear(Facility_tpStartDate)),84), AddMonth(DMYtoDate(DateToDay(Facility_tpStartDate),DateToMonth(Facility_tpStartDate),DateToYear(Facility_tpStartDate)),120), Facility_tpEndDate);
       displaytype: date;
       title: "End date Maximum 10 years";
      }
      variable Facility_tpExpectedAverageOutstanding2
      {
       frequency: document;
       formula: Facility_tpExpectedAverageOutstanding;
       displaytype: currency;
       title: "Expected Average Outstanding (For upcoming 12 months after Current Date)";
       locked: 1;
       link: Facility_tpExpectedAverageOutstanding;
      }
      variable Facility_RepaymentSchemeSub26 refers to Facility_tpExpectedAverageOutstandingScheme
      {
       frequency: document;
       title: "Expected Average Outstanding Scheme";
       locked: 1;
      }
      variable Facility_tpPercentageUsedOfExpectedAverageOutstanding
      {
       frequency: document;
       formula: Facility_tpProductWithdrawalDetailsPercentageUsedOfLimit;
       displaytype: percentage;
       fixed_decimals: 0;
       title: "Percentage used of the Expected Average Outstanding (Revolving Items)";
      }
      variable Facility_RepaymentSchemeSub28
      {
       datatype: none;
       title: "Tuples Manual Scheme";
       locked: 1;
       tuple Facility_tpManual
       {
        title: "Manual Scheme";
        variable Facility_tpManual_tpMonthIdentifier
        {
         datatype: string;
         frequency: document;
         title: "Month Identifier";
        }
        variable Facility_tpManual_tpFirstDayMonth
        {
         frequency: document;
         displaytype: date;
         title: "Date of Repayment / Withdrawel";
        }
        variable Facility_tpManual_tpMonthsSinceStartDate
        {
         frequency: document;
         formula: If(Facility_tpManual_tpFirstDayMonth = NA ,NA, ( DateToYear(Facility_tpManual_tpFirstDayMonth) - DateToYear(Facility_tpStartDate)) * 12 + DateToMonth(Facility_tpManual_tpFirstDayMonth) - DateToMonth(Facility_tpStartDate)) + If(NA = NA, NA,1);
         title: "Months Since StartDate";
         hint: "This variabele is based on months - depending time frequency";
        }
        variable Facility_tpManual_tpMonthsSinceCurrentDate
        {
         frequency: document;
         formula: If(Facility_tpManual_tpFirstDayMonth = NA, NA,(If(DMYtoDate(01,DateToMonth(Facility_tpManual_tpFirstDayMonth),DateToYear(Facility_tpManual_tpFirstDayMonth)) < DMYtoDate(01,(DateToMonth(Facility_tpCurrentDate)),DateToYear(Facility_tpCurrentDate)) ,NA, ( ( DateToYear(Facility_tpManual_tpFirstDayMonth) - DateToYear(Facility_tpCurrentDate)) * 12 + (DateToMonth(Facility_tpManual_tpFirstDayMonth)) - DateToMonth(Facility_tpCurrentDate)+1))));
         title: "Months Since CurrentDate";
        }
        variable Facility_tpManual_tpMonthsSinceCurrentDateHelpVarAvgOutstanding
        {
         frequency: document;
         formula: If(Facility_tpManual_tpMonthsSinceCurrentDate > 12, 0, If(Facility_tpManual_tpMonthsSinceCurrentDate = NA,0,1));
         title: "Months Since CurrentDate - Help var exp. avg outstanding";
         hint: "This variabele is based on months - depending time frequency";
        }
        variable Facility_tpManual_tpRepaymentAmount
        {
         frequency: document;
         displaytype: currency;
         title: "Repayment Amount";
        }
        variable Facility_tpManual_tpRepaymentAmountRem
        {
         frequency: document;
         formula: Facility_tpManual_tpRepaymentAmount * Facility_tpManual_tpMonthsSinceCurrentDate;
         displaytype: currency;
         title: "Repayment Amount Rem";
         hint: "This variabele is based on months - depending time frequency";
        }
        variable Facility_tpManual_tpRepaymentWeighted
        {
         frequency: document;
         formula: Facility_tpManual_tpMonthsSinceStartDate * Facility_tpManual_tpRepaymentAmount;
         displaytype: currency;
         title: "Repayment Weighted";
        }
        variable Facility_tpManual_tpRepaymentWeightedRem
        {
         frequency: document;
         formula: Facility_tpManual_tpMonthsSinceCurrentDate * Facility_tpManual_tpRepaymentAmount;
         displaytype: currency;
         title: "Repayment Weighted Rem";
        }
        variable Facility_tpManual_tpWithdrawalAmount
        {
         frequency: document;
         formula: If((Facility_tpManual_tpMonthsSinceStartDate = 1), Facility_tpPrincipalLimit, Facility_tpManual_tpWithdrawalAmount);
         displaytype: currency;
         title: "Withdrawal Amount";
        }
        variable Facility_tpManual_tpRepaymentAmountRemHelpVar
        {
         frequency: document;
         formula: If(Facility_tpManual_tpMonthsSinceCurrentDate > 0,1,0);
         displaytype: currency;
         title: "Repayment Check for RAT";
        }
        variable Facility_tpManual_tpRepaymentAmountRemHelpVar1
        {
         frequency: document;
         formula: Facility_tpManual_tpRepaymentAmount * Facility_tpManual_tpRepaymentAmountRemHelpVar;
         displaytype: currency;
         title: "Repayment Check for Within RAT";
        }
        variable Facility_tpManual_ExpectedAverageOutstandingWithdrawal
        {
         frequency: document;
         formula: Facility_tpManual_tpWithdrawalAmount * Facility_tpManual_tpOutstandingBalanceWeightWithdrawal;
         displaytype: currency;
         title: "Expected Average Outstanding Withdrawal";
        }
        variable Facility_tpManual_ExpectedAverageOutstandingWithdrawalAnnuity
        {
         frequency: document;
         formula: If(Facility_tpManual_tpMonthsSinceStartDate < 1,Facility_tpManual_tpWithdrawalAmount * Facility_tpManual_tpOutstandingBalanceWeightWithdrawal, Facility_tpManual_tpWithdrawalAmount * Facility_tpManual_tpOutstandingBalanceWeightWithdrawal * If(Facility_tpOriginalTenor - Facility_tpRemainingTenor >= Facility_tpManual_tpMonthsSinceStartDate,1,0));
         displaytype: currency;
         title: "Expected Average Outstanding Withdrawal Annuity";
        }
        variable Facility_tpManual_ExpectedAverageOutstandingRepayment
        {
         frequency: document;
         formula: Facility_tpManual_tpRepaymentAmount * Facility_tpManual_tpOutstandingBalanceWeightRepayment;
         displaytype: currency;
         title: "Expected Average Outstanding Weighted Repayment";
        }
        variable Facility_tpManual_tpOutstandingBalanceWeightRepayment
        {
         frequency: document;
         formula: MinMax(12 - If(Facility_tpStartDate > Facility_tpCurrentDate, Facility_tpManual_tpMonthsSinceStartDate, Facility_tpManual_tpMonthsSinceCurrentDate) ,0,12,NA);
         displaytype: currency;
         title: "Outstanding Balance - Weight Repayment";
        }
        variable Facility_tpManual_tpOutstandingBalanceWeightWithdrawal
        {
         frequency: document;
         formula: MinMax(If(Facility_tpCurrentDate > Facility_tpManual_tpFirstDayMonth ,12, 13 - If(Facility_tpStartDate > Facility_tpCurrentDate, Facility_tpManual_tpMonthsSinceStartDate, Facility_tpManual_tpMonthsSinceCurrentDate)),0,12);
         displaytype: currency;
         title: "Outstanding Balance - Weight Withdrawal";
        }
        variable Facility_tpManual_tpOutstandingBalanceExpAvgOut
        {
         frequency: document;
         formula: (Facility_tpEAOWithdrawalScheme - Facility_tpExpectedAverageOutstandingRemHelp);
         displaytype: currency;
         title: "Outstanding Balance - Exp Avg Out";
        }
        variable Facility_tpManual_tpLiquiditySpreadBpsTRepayment
        {
         frequency: document;
         formula: (MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpManual_tpMonthsSinceStartDate,1),Facility_tpFixedInterestPeriod)+(MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",Facility_tpManual_tpMonthsSinceStartDate,1),Facility_tpFixedInterestPeriod)-MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpManual_tpMonthsSinceStartDate,1),Facility_tpFixedInterestPeriod))*OnER(((Facility_tpManual_tpMonthsSinceStartDate-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpManual_tpMonthsSinceStartDate,1))/(MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",Facility_tpManual_tpMonthsSinceStartDate,1)-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpManual_tpMonthsSinceStartDate,1))),0));
         displaytype: currency;
         title: "Liquidity Spread - Liquidity Spread Interpolated Bps";
        }
        variable Facility_tpManual_tpLiquiditySpreadRepayment
        {
         frequency: document;
         formula: Facility_tpManual_tpWeightedFundingRepayment * Facility_tpManual_tpLiquiditySpreadBpsTRepayment;
         displaytype: currency;
         title: "Liquidity Spread - Liquidity Spread - Repayment";
        }
        variable Facility_tpManual_tpWeightedFundingRepayment
        {
         frequency: document;
         formula: Facility_tpManual_tpRepaymentamount * Facility_tpManual_tpMonthsSinceStartDate / 12;
         displaytype: currency;
         title: "Liquidity Spread - Weighted Funding - Repayment";
        }
        variable Facility_tpManual_tpLiquiditySpreadBpsTWithdrawal
        {
         frequency: document;
         formula: (MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",(Facility_tpManual_tpMonthsSinceStartDate-1),1),Facility_tpFixedInterestPeriod)+(MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",(Facility_tpManual_tpMonthsSinceStartDate-1),1),Facility_tpFixedInterestPeriod)-MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",(Facility_tpManual_tpMonthsSinceStartDate-1),1),Facility_tpFixedInterestPeriod))*OnER((((Facility_tpManual_tpMonthsSinceStartDate-1)-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",(Facility_tpManual_tpMonthsSinceStartDate-1),1))/(MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",(Facility_tpManual_tpMonthsSinceStartDate-1),1)-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",(Facility_tpManual_tpMonthsSinceStartDate-1),1))),0));
         displaytype: currency;
         title: "Liquidity Spread - Liquidity Spread Interpolated Bps - Withdrawal";
        }
        variable Facility_tpManual_tpLiquiditySpreadWithdrawal
        {
         frequency: document;
         formula: Facility_tpManual_tpWeightedFundingWithdrawal * Facility_tpManual_tpLiquiditySpreadBpsTWithdrawal;
         displaytype: currency;
         title: "Liquidity Spread - Liquidity Spread - Withdrawal";
        }
        variable Facility_tpManual_tpWeightedFundingWithdrawal
        {
         frequency: document;
         formula: Facility_tpManual_tpWithdrawalAmount * (Facility_tpManual_tpMonthsSinceStartDate - 1) / 12;
         displaytype: currency;
         title: "Liquidity Spread - Weighted Funding - Withdrawal";
        }
        variable Facility_tpManual_LimitWeightedRepayment
        {
         frequency: document;
         formula: Facility_tpManual_tpRepaymentAmount * Facility_tpManual_tpLimitWeightRepayment;
         displaytype: currency;
         title: "Limit - Weighted Repayment";
        }
        variable Facility_tpManual_tpLimitWeightRepayment
        {
         frequency: document;
         formula: MinMax(13 - If(Facility_tpStartDate > Facility_tpCurrentDate, Facility_tpManual_tpMonthsSinceStartDate, Facility_tpManual_tpMonthsSinceCurrentDate) ,0,12,NA);
         displaytype: currency;
         title: "Limit - Repayment Weight";
        }
       }
       variable Facility_tpSumOfWeightedRepaymentOATNominator
       {
        frequency: document;
        formula: TupleSum(Facility_tpManual_tpRepaymentWeighted);
        title: "Sum of Weighted Repayment OAT Nominator";
       }
       variable Facility_tpSumOfRepaymentOATDenominator
       {
        frequency: document;
        formula: 12 * (TupleSum(Facility_tpManual_tpRepaymentAmount));
        title: "Sum of Repayment OAT Denominator";
       }
       variable Facility_tpOriginalAverageTenorScheme
       {
        frequency: document;
        formula: Facility_tpSumOfWeightedRepaymentOATNominator / Facility_tpSumOfRepaymentOATDenominator;
        title: "Original Average Tenor";
       }
       variable Facility_tpSumOfRepaymentRAT
       {
        frequency: document;
        formula: (TupleSum(Facility_tpManual_tpRepaymentAmountRemHelpVar1));
        title: "Sum of Weighted Repayment RAT TupleSum";
       }
       variable Facility_tpSumOfRepaymentRATWeight
       {
        frequency: document;
        formula: Facility_tpSumOfWeightedRepaymentRATNominator / ( Facility_tpSumOfRepaymentRAT * Facility_tpExpectedAverageOutstandingCount );
        title: "Sum of Weighted Repayment RAT Weight";
       }
       variable Facility_tpSumOfWeightedRepaymentRATNominator
       {
        frequency: document;
        formula: TupleSum(Facility_tpManual_tpRepaymentWeightedRem);
        title: "Sum of Weighted Repayment RAT Nominator";
       }
       variable Facility_tpRemainingAverageTenorScheme
       {
        frequency: document;
        formula: If( ((Facility_tpSumOfRepaymentRATWeight * Facility_tpExpectedAverageOutstandingCount) / 12) >= Facility_tpOriginalAverageTenorScheme , Facility_tpOriginalAverageTenorScheme , ((Facility_tpSumOfRepaymentRATWeight * Facility_tpExpectedAverageOutstandingCount) / 12) );
        title: "Remaining Average Tenor";
       }
       variable Facility_tpEAOWithdrawalScheme
       {
        frequency: document;
        formula: If(Facility_tpWithdrawalChoice=0,(Facility_tpPrincipalLimit * 12),If(Facility_tpWithdrawalChoice=3,(TupleSum(Facility_tpManual_ExpectedAverageOutstandingWithdrawal)),0 ) );
        title: "Expected Average Outstanding Withdrawal Help";
       }
       variable Facility_tpExpectedAverageOutstandingWithdrawalAnnuityHelp
       {
        frequency: document;
        formula: TupleSum(Facility_tpManual_ExpectedAverageOutstandingWithdrawalAnnuity);
        title: "Expected Average Outstanding Withdrawal Annuity Help";
       }
       variable Facility_tpExpectedAverageOutstandingRemHelp
       {
        frequency: document;
        formula: TupleSum(Facility_tpManual_ExpectedAverageOutstandingRepayment);
        title: "Expected Average Outstanding Rem Help";
       }
       variable Facility_tpExpectedAverageOutstandingCount
       {
        frequency: document;
        formula: If(Facility_tpEndDate < Facility_tpCurrentDate,NA ,( ( DateToYear(Facility_tpEndDate) - DateToYear(Facility_tpCurrentDate)) * 12 + (DateToMonth(Facility_tpEndDate)) - DateToMonth(Facility_tpCurrentDate)));
        title: "Expected Average Outstanding Count";
       }
       variable Facility_tpExpectedAverageOutstandingCountMaxEAO
       {
        frequency: document;
        formula: MinMax(Facility_tpExpectedAverageOutstandingCount,0,12,NA);
        title: "Expected Average Outstanding Count Max EAO";
       }
       variable Facility_tpOutstandingBalanceExpAvgOutDenom
       {
        frequency: document;
        formula: MinMax((Facility_tpProductduration - Facility_tpExpectedAverageOutstandingCount),0,12,0);
        title: "Expected Average Outstanding Denom";
       }
       variable Facility_tpExpectedAverageOutstandingScheme
       {
        frequency: document;
        formula: ((Facility_tpEAOWithdrawalScheme - Facility_tpExpectedAverageOutstandingRemHelp) / Facility_tpExpectedAverageOutstandingCountMaxEAO);
        title: "Expected Average Outstanding";
       }
      }
      variable Facility_tpAnnuityLinear
      {
       datatype: none;
       title: "Annuity & Linear";
       locked: 1;
       variable Facility_tpAnnuityParameters
       {
        datatype: none;
        title: "Annuity Parameters";
        locked: 1;
       }
       variable Facility_tpAnnuityLinearSub2 refers to Facility_tpStartDate
       {
        frequency: document;
        required: 1;
        displaytype: date;
        title: "Annuity Start Date";
       }
       variable Facility_tpAnnuityLinearSub3 refers to Facility_tpCurrentDate
       {
        frequency: document;
        required: 1;
        displaytype: date;
        title: "Annuity Current Date";
       }
       variable Facility_tpAnnuityLinearSub4 refers to Facility_tpEndDate
       {
        frequency: document;
        required: 1;
        displaytype: date;
        title: "Annuity End Date";
       }
       variable Facility_tpAnnuityFirstDayMonth
       {
        frequency: document;
        formula: Facility_tpCurrentDate;
        displaytype: date;
        title: "Annuity Date of Repayment / Withdrawel";
       }
       variable Facility_tpAnnuityMonthsSinceStartDate
       {
        frequency: document;
        formula: OnZero(RoundUp((OnNeg((If(Facility_tpStartDate = NA ,NA, ( DateToYear(Facility_tpCurrentDate) - DateToYear(Facility_tpStartDate)) * 12 + DateToMonth(Facility_tpCurrentDate) - DateToMonth(Facility_tpStartDate)) + If(NA = NA, NA,1)),0)) / Facility_tpAnnuityRepaymentFreqHelpVar , 0), 1);
        title: "Annuity Months Since Start Date";
       }
       variable Facility_tpAnnuityMonthsSinceCurrentDate
       {
        frequency: document;
        formula: OnNeg(Facility_tpAnnuityMonthsSinceStartDate - 1, 0);
        fixed_decimals: 0;
        title: "Annuity Months Since Current Date";
       }
       variable Facility_tpAnnuityMonthsSinceCurrentDateHelpVar
       {
        frequency: document;
        formula: If(Facility_tpAnnuityMonthsSinceCurrentDate > 12, 0, If(Facility_tpAnnuityMonthsSinceCurrentDate = NA,0,1));
        title: "Annuity Months Since Current Date Help Var";
       }
       variable Facility_tpAnnuityRepaymentFreqHelpVar
       {
        frequency: document;
        formula: Case(Facility_tpRepaymentFrequency,[1:12|2:6|4:3|12:1]);
        title: "Annuity Months RepaymentFreq Help Var";
       }
       variable Facility_tpAnnuityLinearSub10 refers to Facility_tpAnnuityInterestRate
       {
        frequency: document;
        displaytype: percentage;
        fixed_decimals: 1;
        title: "Rate";
       }
       variable Facility_tpAnnuityLinearSub11 refers to Facility_tpAnnuityMonthsSinceCurrentDate
       {
        frequency: document;
        title: "Period";
       }
       variable Facility_tpPeriodForRATGrace
       {
        frequency: document;
        formula: Facility_tpAnnuityMonthsSinceStartDate - (Facility_tpNumberOfPeriodsNoGrace - Facility_tpNumberOfPeriods);
        displaytype: currency;
        title: "Period For RAT Grace";
       }
       variable Facility_tpPeriodDifferenceGrace
       {
        frequency: document;
        formula: (Facility_tpNumberOfPeriodsNoGrace - Facility_tpNumberOfPeriods);
        displaytype: currency;
        title: "Period For RAT Grace Difference";
       }
       variable Facility_tpAnnuityLinearSub14 refers to Facility_tpNumberOfPeriods
       {
        frequency: document;
        title: "N Period";
       }
       variable Facility_tpAnnuityLinearSub15 refers to Facility_tpPrincipalLimit
       {
        frequency: document;
        required: 1;
        displaytype: currency;
        title: "Principal Limit";
       }
       variable Facility_tpAnnuityLinearSub16 refers to Facility_tpBalloon
       {
        frequency: document;
        displaytype: currency;
        title: "Balloon";
       }
       variable Facility_tpAnnuityRepaymentAmount
       {
        frequency: document;
        formula: PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,Facility_tpAnnuityMonthsSinceStartDate,Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon);
        title: "Annuity Repayment Amount (PPMT)";
       }
       variable Facility_tpAnnuityWithdrawalAmount
       {
        frequency: document;
        formula: If((Facility_tpAnnuityMonthsSinceStartDate = 1), Facility_tpPrincipalLimit, Facility_tpAnnuityWithdrawalAmount);
        title: "Annuity Withdrawal Amount";
       }
       variable Facility_tpAnnuityPPMTRATTotalPeriods
       {
        frequency: document;
        formula: RoundUp(Facility_tpNumberOfPeriodsNoGrace - Facility_tpAnnuityMonthsSinceCurrentDate);
        title: "Annuity PPMT RAT Total Periods";
       }
       variable Facility_tpAnnuityPPMTRATTotalPeriodsMax
       {
        frequency: document;
        formula: MinMax(Facility_tpAnnuityPPMTRATTotalPeriods,0,(Facility_tpRepaymentFrequency),NA);
        title: "Annuity PPMT RAT Total Periods Max";
       }
       variable Facility_tpAnnuityPPMTRATTotalMonths
       {
        frequency: document;
        formula: (Facility_tpAnnuityPPMTRATTotalPeriods) * Facility_tpAnnuityRepaymentFreqHelpVar;
        title: "Annuity PPMT RAT Total Monthts";
       }
       variable Facility_tpAnnuityPPMTRATMonth
       {
        frequency: document;
        formula: RoundUp(If(DMYtoDate(01,DateToMonth(Facility_tpAnnuityFirstDayMonth),DateToYear(Facility_tpAnnuityFirstDayMonth)) < DMYtoDate(01,(DateToMonth(Facility_tpCurrentDate)),DateToYear(Facility_tpCurrentDate)) ,NA, ( ( DateToYear(Facility_tpAnnuityFirstDayMonth) - DateToYear(Facility_tpCurrentDate)) * 12 + (DateToMonth(Facility_tpAnnuityFirstDayMonth)) - DateToMonth(Facility_tpCurrentDate)+1))/ Facility_tpAnnuityRepaymentFreqHelpVar,0);
        title: "Annuity PPMT RAT Month";
       }
       variable Facility_tpAnnuityOATHelpVarWeightSumWithGrace
       {
        frequency: document;
        formula: SumFor(X, (Facility_tpNumberOfPeriodsNoGrace - Facility_tpNumberOfPeriods + 1) ,Facility_tpNumberOfPeriodsNoGrace,1, (X * PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,( X - (Facility_tpNumberOfPeriodsNoGrace - Facility_tpNumberOfPeriods + 1) + 1 ),Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon) * Facility_tpAnnuityRepaymentFreqHelpVar ) ) ;
        title: "Annuity OAT per period SUM";
       }
       variable Facility_tpAnnuityOATHelpVarWeightSumGrace
       {
        frequency: document;
        title: "Annuity OAT HelpVar Weight Sum No Grace";
       }
       variable Facility_tpAnnuityOATHelpVar
       {
        frequency: document;
        formula: Facility_tpAnnuityOATHelpVarWeightSumWithGrace / (Facility_tpPrincipalLimit * Facility_tpOriginalTenor);
        title: "Annuity OAT HelpVar Weight Sum With Grace";
       }
       variable Facility_tpAnnuityOAT
       {
        frequency: document;
        formula: Facility_tpAnnuityOATHelpVar * Facility_tpOriginalTenor / 12;
        title: "Annuity OAT HelpVar";
       }
       variable Facility_tpAnnuityRATHelpVarWeightSumWithGrace
       {
        frequency: document;
        formula: SumFor(X, 1, (Facility_tpNumberOfPeriods - (Facility_tpAnnuityMonthsSinceCurrentDate - Facility_tpPeriodDifferenceGrace)) ,1, (X * (PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,( (Facility_tpPeriodForRATGrace - 1) + X) ,Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon) ) * Facility_tpAnnuityRepaymentFreqHelpVar ) ) ;
        title: "Annuity RAT HelpVar Weight Sum No Grace";
       }
       variable Facility_tpAnnuityRATHelpVarSumRepayment
       {
        frequency: document;
        formula: SumFor(X, 1, (Facility_tpNumberOfPeriods - (Facility_tpAnnuityMonthsSinceCurrentDate - Facility_tpPeriodDifferenceGrace)) ,1, (PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,( (Facility_tpPeriodForRATGrace - 1) + X ),Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon)) ) ;
        title: "Annuity RAT HelpVar Sum Repayment";
       }
       variable Facility_tpAnnuityRATHelpVar
       {
        frequency: document;
        formula: Facility_tpAnnuityRATHelpVarWeightSumWithGrace / (Facility_tpAnnuityRATHelpVarSumRepayment * Facility_tpAnnuityPPMTRATTotalMonths);
        title: "Annuity RAT HelpVar Weight Sum With Grace";
       }
       variable Facility_tpAnnuityRAT
       {
        frequency: document;
        formula: Facility_tpAnnuityRATHelpVar * Facility_tpAnnuityPPMTRATTotalMonths / 12;
        title: "Annuity RAT HelpVar";
       }
       variable Facility_tpAnnuityOutstandingPointInTime
       {
        frequency: document;
        formula: (Facility_tpPrincipalLimit - (SumFor(X,0,(Facility_tpAnnuityMonthsSinceStartDate - 1),1,PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,X,Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon))));
        title: "Annuity Outstanding Point in Time";
       }
       variable Facility_tpEAORepaymentAnnuity
       {
        frequency: document;
        formula: SumFor(X,1,Facility_tpNumberOfPeriods,1,(PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,X,Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon)) * MinMax( (Facility_tpAnnuityMonthsSinceStartDate - 1) + Facility_tpRepaymentFrequency - Facility_tpPeriodDifferenceGrace - X ,0,Facility_tpRepaymentFrequency,0) ) ;
        title: "Annuity Outstanding Repayment Sum";
       }
       variable Facility_tpAnnuityOutstandingWithdrawalSum
       {
        frequency: document;
        formula: Facility_tpPrincipalLimit * Facility_tpRepaymentFrequency;
        title: "Annuity Outstanding Withdrawal Sum";
       }
       variable Facility_tpLinear
       {
        frequency: document;
        formula: Facility_tpPrincipalLimit / Facility_tpNumberOfPeriods;
        title: "Linear Repayment";
       }
       variable Facility_tpLinearWithdrawal
       {
        frequency: document;
        title: "Linear Withdrawal";
       }
       variable Facility_tpLinearOATHelpVarWeightSumWithGrace
       {
        frequency: document;
        formula: SumFor(X, (Facility_tpNumberOfPeriodsNoGrace - Facility_tpNumberOfPeriods + 1) ,Facility_tpNumberOfPeriodsNoGrace,1, (X * Facility_tpLinear * Facility_tpAnnuityRepaymentFreqHelpVar ) ) ;
        title: "Linear OAT HelpVar Weight Sum No Grace";
       }
       variable Facility_tpLinearOATHelpVarWeightSumGrace
       {
        frequency: document;
        formula: Facility_tpLinearOATHelpVarWeightSumWithGrace - ( Round( (Facility_tpGracePeriod / Facility_tpAnnuityRepaymentFreqHelpVar),0) * Facility_tpLinear * Facility_tpAnnuityRepaymentFreqHelpVar );
        title: "Linear OAT HelpVar Weight Sum With Grace";
       }
       variable Facility_tpLinearOATHelpVar
       {
        frequency: document;
        formula: Facility_tpLinearOATHelpVarWeightSumWithGrace / (Facility_tpPrincipalLimit * Facility_tpOriginalTenor);
        title: "Linear OAT HelpVar";
       }
       variable Facility_tpLinearOAT
       {
        frequency: document;
        formula: Facility_tpLinearOATHelpVar * Facility_tpOriginalTenor / 12;
        title: "Linear OAT";
       }
       variable Facility_tpLinearRATHelpVarWeightSumWithGrace
       {
        frequency: document;
        formula: SumFor(X, 1, Facility_tpAnnuityPPMTRATTotalPeriods,1, (X * Facility_tpLinear * Facility_tpAnnuityRepaymentFreqHelpVar ) ) ;
        title: "Linear RAT HelpVar Weight Sum No Grace";
       }
       variable Facility_tpLinearRATHelpVarSumRepayment
       {
        frequency: document;
        formula: SumFor(X, 1, Facility_tpAnnuityPPMTRATTotalPeriods,1, (Facility_tpLinear * ( (X - X)+1) ) );
        title: "Linear RAT HelpVar Sum Repayment";
       }
       variable Facility_tpLinearRATHelpVar
       {
        frequency: document;
        formula: Facility_tpLinearRATHelpVarWeightSumWithGrace / (Facility_tpLinearRATHelpVarSumRepayment * Facility_tpAnnuityPPMTRATTotalMonths);
        title: "Linear RAT HelpVar Weight Sum With Grace";
       }
       variable Facility_tpLinearRAT
       {
        frequency: document;
        formula: Facility_tpLinearRATHelpVar * Facility_tpAnnuityPPMTRATTotalMonths / 12;
        title: "Linear RAT";
       }
       variable Facility_tpEAORevolving
       {
        frequency: document;
        formula: Facility_tpPrincipalLimit * Facility_tpProductWithdrawalDetailsPercentageUsedOfLimit;
        title: "Expected average outstanding Revolving";
       }
       variable Facility_tpEAOOnceLinear
       {
        frequency: document;
        formula: (Facility_tpLinearOutstandingWithdrawalSum - Facility_tpEAORepaymentLinear) / MinMax(Facility_tpAnnuityPPMTRATTotalPeriods,1,Facility_tpRepaymentFrequency,NA);
        title: "Expected average outstanding for once withdrawal and linear repayment";
       }
       variable Facility_tpEAOSchemeLinear
       {
        frequency: document;
        formula: (Facility_tpEAOWithdrawalScheme - Facility_tpEAORepaymentLinearForSchemeWithdrawal)/MinMax(Facility_tpRemainingTenor,1,12,NA);
        title: "Expected average outstanding for manual withdrawal and linear repayment";
       }
       variable Facility_tpEAOOnceAnnuity
       {
        frequency: document;
        formula: (Facility_tpAnnuityOutstandingWithdrawalSum - Facility_tpEAORepaymentAnnuity) / MinMax((Facility_tpNumberOfPeriods - Facility_tpAnnuityMonthsSinceStartDate),1,Facility_tpRepaymentFrequency,NA);
        title: "Expected average outstanding for once withdrawal and annuity repayment";
       }
       variable Facility_tpEAOSchemeAnnuity
       {
        frequency: document;
        formula: (Facility_tpExpectedAverageOutstandingScheme - Facility_tpEAORepaymentAnnuity) / MinMax(Facility_tpRemainingTenor,1,Facility_tpRepaymentFrequency,NA);
        title: "Expected average outstanding for manual withdrawal and annuity repayment";
       }
       variable Facility_tpLinearOutstandingPointInTime
       {
        frequency: document;
        formula: (Facility_tpPrincipalLimit - (SumFor(X,1,(Facility_tpAnnuityMonthsSinceStartDate - 1),1,Facility_tpLinear * ((X+1) - X))));
        title: "Linear Outstanding Point in Time";
       }
       variable Facility_tpEAORepaymentLinear
       {
        frequency: document;
        formula: SumFor(X,(Facility_tpPeriodDifferenceGrace + 1),Facility_tpNumberOfPeriodsNoGrace,1, Facility_tpLinear * Round(MinMax( (( (Facility_tpAnnuityMonthsSinceStartDate - 1) + Facility_tpRepaymentFrequency ) - X)*If(Facility_tpWithdrawalChoice = 3,Facility_tpAnnuityRepaymentFreqHelpVar,1),0,If(Facility_tpWithdrawalChoice = 3,12,Facility_tpRepaymentFrequency) ,0),0) ) ;
        title: "Linear Outstanding Repayment Sum";
       }
       variable Facility_tpEAORepaymentLinearForSchemeWithdrawal
       {
        frequency: document;
        formula: SumFor(X,(12/Facility_tpRepaymentFrequency)+Facility_tpGracePeriod,Facility_tpOriginalTenor,12/Facility_tpRepaymentFrequency, Facility_tpLinear * MinMax((12-(X-(Facility_tpOriginalTenor-Facility_tpRemainingTenor))),0,12));
        title: "Linear Outstanding Repayment Sum";
       }
       variable Facility_tpLinearOutstandingWithdrawalSum
       {
        frequency: document;
        formula: Facility_tpPrincipalLimit * Facility_tpRepaymentFrequency;
        title: "Linear Outstanding Withdrawal Sum";
       }
      }
      variable Facility_tpHiddenRepaymentScheme
      {
       frequency: document;
       displaytype: currency;
       title: "Hidden variables for repayment scheme";
       locked: 1;
       visible: 0;
       variable -Facility_tpWeightedAmountRepayment
       {
        aggregation: flow;
        formula_trend: Facility_tpRepayment*Facility_tpHulpVarWeightOfRepayment;
        fixed_decimals: 0;
        title: "Weighted Repayment Amount";
       }
       variable -Facility_tpWeightedAmountRepaymentRem
       {
        aggregation: flow;
        formula_trend: Facility_tpRepayment*Facility_tpHulpVarWeightOfRepaymentRemaining;
        fixed_decimals: 0;
        title: "Weighted Repayment Amount Remaining";
       }
       variable +Facility_tpWithdrawal
       {
        aggregation: flow;
        formula_notrend: If(Facility_tpWithdrawalChoice=0,Facility_tpWithdrawalOneTime,If(Facility_tpWithdrawalChoice=1,Facility_tpWithdrawalFixedTerms,If(Facility_tpWithdrawalChoice=2,Facility_tpWithdrawalRevolving,If(Facility_tpWithdrawalChoice=3,Facility_tpWithdrawalsAmount,NA))));
        formula_trend: If(Facility_tpWithdrawalChoice=0,Facility_tpWithdrawalOneTime,If(Facility_tpWithdrawalChoice=1,Facility_tpWithdrawalFixedTerms,If(Facility_tpWithdrawalChoice=2,Facility_tpWithdrawalRevolving,If(Facility_tpWithdrawalChoice=3,Facility_tpWithdrawalsAmount,NA))));
        fixed_decimals: 0;
        title: "Withdrawal";
       }
       variable -Facility_tpRepayment
       {
        aggregation: flow;
        formula_trend: If((Facility_tpRepaymentChoice=0) or (Facility_tpRepaymentChoice=4),Facility_tpRepaymentBalloon,If(Facility_tpRepaymentChoice=1,Facility_tpRepaymentLinear+Facility_tpRepaymentBalloon,If(Facility_tpRepaymentChoice=2,Facility_tpRepaymentAnnuity+Facility_tpRepaymentBalloon,If(Facility_tpRepaymentChoice=3,If(T=DateToT(Facility_tpEndDateMax10,1),Facility_tpOutstandingBalance[GetT(T,-1)],Facility_tpRepaymentsAmount[GetT(T,-1)])))));
        fixed_decimals: 0;
        title: "Repayment";
       }
       variable =Facility_tpOutstandingBalance
       {
        formula_notrend: Facility_tpWithdrawal-Facility_tpRepayment;
        formula_trend: OnNeg(OnZero(HSum(Facility_tpWithdrawal,DateToT(Facility_tpStartDate,1),T)-HSum(Facility_tpRepayment,DateToT(Facility_tpStartDate,1),T),NA),NA);
        fixed_decimals: 0;
        title: "Outstanding Balance";
        options_notrend: locked;
       }
       variable Facility_tpOutstandingBalanceHulpVar
       {
        formula_trend: If(Facility_tpRepaymentChoice=0,Facility_tpOutstandingBalance,If((Facility_tpHulpVarFrequency[T]<Facility_tpHulpVarFrequency[GetT(T,1)]),Facility_tpOutstandingBalance,Facility_tpOutstandingBalance*NA));
        fixed_decimals: 0;
        title: "Outstanding Balance Hulp Average calculation";
       }
       variable Facility_tpHulpVarFrequency
       {
        formula_trend: If(T>DateToT(Facility_tpEndDateMax10,1),NA,If(T=DateToT(Facility_tpEndDateMax10,1),Facility_tpHulpVarFrequency[GetT(T,-1)]+1,Round((T-(DateToT(Facility_tpStartDate,1))-Facility_tpGracePeriod)/(TsY/Facility_tpRepaymentFrequency)+0.5,0)-1));
        fixed_decimals: 0;
        title: "Hulp Var Tenors";
       }
       variable Facility_tpWithdrawalOneTime
       {
        formula_trend: If(DateToT(Facility_tpStartDate,1)=T,Facility_tpPrincipalLimit,NA);
        fixed_decimals: 0;
        title: "Withdrawal One Time";
       }
       variable Facility_tpWithdrawalFixedTerms
       {
        fixed_decimals: 0;
        title: "Withdrawal Fixed Terms";
       }
       variable Facility_tpWithdrawalRevolving
       {
        formula_notrend: NA;
        formula_trend: If(DateToT(Facility_tpStartDate,1)=T,Facility_tpPrincipalLimit,NA);
        fixed_decimals: 0;
        title: "Withdrawal Revolving";
       }
       variable Facility_tpWithdrawalsAmount
       {
        fixed_decimals: 0;
        title: "Withdrawals Scheme";
       }
       variable Facility_tpRepaymentLinear
       {
        aggregation: flow;
        formula_trend: If(Facility_tpAfterGraceperiod,OnZero(Min((Facility_tpHulpVarRepayment[GetT(T,-1)]<>Facility_tpHulpVarRepayment)*((Facility_tpPrincipalLimit-Facility_tpBalloon)/(Facility_tpNumberOfPeriods)),Facility_tpOutstandingBalance[GetT(T,-1)]),NA),NA);
        fixed_decimals: 0;
        title: "Repayment Scheme Linear";
       }
       variable Facility_tpRepaymentAnnuity
       {
        aggregation: flow;
        formula_trend: If(Facility_tpAfterGraceperiod,If((Facility_tpHulpVarRepayment[GetT(T,-1)]<>Facility_tpHulpVarRepayment),(Facility_tpHulpVarRepayment[GetT(T,-1)]<>Facility_tpHulpVarRepayment)*(PPMT((Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency),Facility_tpHulpVarRepayment,Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon)),NA),NA);
        fixed_decimals: 0;
        title: "Repayment Scheme Annuity";
       }
       variable Facility_tpRepaymentBalloon
       {
        aggregation: flow;
        formula_trend: If(T=(DateToT(Facility_tpEndDateMax10,1)),If(Facility_tpRepaymentChoice=0,Facility_tpOutstandingBalance[GetT(T,-1)],If((Facility_tpRepaymentChoice=1) or (Facility_tpRepaymentChoice=2),Facility_tpOutstandingBalance[GetT(T,-1)]-If(Facility_tpRepaymentChoice=1,Facility_tpRepaymentLinear[T],If(Facility_tpRepaymentChoice=2,Facility_tpRepaymentAnnuity[T],NA)),NA)));
        fixed_decimals: 0;
        title: "Repayment Balloon";
       }
       variable Facility_tpRepaymentRevolving
       {
        aggregation: flow;
        fixed_decimals: 0;
        title: "Repayment Revolving";
       }
       variable Facility_tpRepaymentsAmount
       {
        fixed_decimals: 0;
        title: "Repayments Scheme";
       }
       variable Facility_tpAfterGraceperiod
       {
        formula_trend: If((T<DateToT(Facility_tpStartDate,1)) or (T>DateToT(Facility_tpEndDateMax10,1)),NA,If(T>=DateToT(AddMonth(Facility_tpStartDate,Facility_tpGracePeriod),1),1,0));
        fixed_decimals: 0;
        title: "After Grace period (Y/N)";
       }
       variable Facility_tpHulpVarRepayment
       {
        formula_trend: If(T>(DateToT(Facility_tpEndDateMax10,1)+1),NA,OnNeg(OnZero(Min(Round((T-(DateToT(Facility_tpStartDate,1))-Facility_tpGracePeriod)/(TsY/Facility_tpRepaymentFrequency)+0.5,0)-1,Facility_tpOutstandingBalance[GetT(T,-1)]),NA),NA));
        fixed_decimals: 0;
        title: "Repayment At A Certain Time";
       }
       variable Facility_tpHulpVarRemainingWeighted
       {
        formula_trend: If((T>=(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1)))) and (T>(DateToT(Facility_tpStartDate,1)+Facility_tpGracePeriod)),OnNeg(OnZero(Min(Round((T-(If((DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1)))>(DateToT(Facility_tpStartDate,1)+Facility_tpGracePeriod),(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1))),(DateToT(Facility_tpStartDate,1)+Facility_tpGracePeriod+1))))/(TsY/Facility_tpRepaymentFrequency)+0.5,0),Facility_tpOutstandingBalance[GetT(T,-1)]),NA),NA),NA);
        fixed_decimals: 0;
        title: "Repayment Term for weighted remaining tenor";
       }
       variable Facility_tpHulpVarWeightOfRepayment
       {
        formula_trend: If((T>DateToT(Facility_tpEndDateMax10,1)) or (T<DateToT(Facility_tpStartDate,1)),NA,T-DateToT(Facility_tpStartDate,1));
        fixed_decimals: 0;
        title: "Weight of repayment Original Tenor";
       }
       variable Facility_tpHulpVarWeightOfRepaymentRemaining
       {
        formula_trend: If((T>DateToT(Facility_tpEndDateMax10,1)) or (T<DateToT(If(Facility_tpCurrentDate<=Facility_tpStartDate,Facility_tpStartDate,Facility_tpCurrentDate),1)),NA,T-DateToT(If(Facility_tpCurrentDate<=Facility_tpStartDate,Facility_tpStartDate,Facility_tpCurrentDate),1));
        fixed_decimals: 0;
        title: "Weight of repayment Remaining Tenor";
       }
       variable Facility_tpHulpVarRepaymentScheme
       {
        formula_trend: If((Facility_tpRepaymentChoice=3) and (Facility_tpRepayment[T]<>NA),T-DateToT(Facility_tpStartDate,1),NA);
        fixed_decimals: 0;
        title: "Repayment At A Certain Time via Scheme";
       }
       variable Facility_tpHulpVarRepaymentSchemeWeighted
       {
        formula_trend: If((Facility_tpRepaymentChoice=3) and (Facility_tpRepayment[T]<>NA),If((T>=(DateToT(Facility_tpCurrentDate,1)+(If(DateToDay(Facility_tpCurrentDate)=1,0,1)))) and (T>(DateToT(Facility_tpStartDate,1)+Facility_tpGracePeriod)),T-DateToT(Facility_tpCurrentDate,1),NA),NA);
        fixed_decimals: 0;
        title: "Repayment Term for weighted remaining tenor via Scheme";
       }
       variable =Facility_tpDirectLiquidityPremiumPerT
       {
        datatype: none;
        aggregation: flow;
        title: "Direct Liquidity Premium Per T";
       }
       variable Facility_tpFundingAmountPerT
       {
        fixed_decimals: 0;
        title: "Funding Amount Per T";
       }
       variable Facility_tpWeightedFundingAmountPerT
       {
        aggregation: flow;
        fixed_decimals: 0;
        title: "Funding Weighted Amount Per T";
       }
       variable Facility_tpPeriodPerT
       {
        aggregation: flow;
        fixed_decimals: 4;
        title: "Period of T into years";
       }
       variable Facility_tpLiquiditySpreadBpsT
       {
        aggregation: flow;
        fixed_decimals: 4;
        title: "Interpolated Bps for Liq. Sprd";
       }
       variable Facility_tpLiquiditySpread
       {
        aggregation: flow;
        displaytype: currency;
        title: "Liq. Sprd. Amount Per T";
       }
      }
     }
     variable Facility_tpGuarantor
     {
      datatype: none;
      title: String("Third party Guarantees");
      locked: 1;
      variable Facility_tpGuarantorAGICOrSBI
      {
       frequency: document;
       formula: 0;
       title: "Do you want to use an AGIC or SBI identification code?";
       choices: "0:AGIC|1:SBI";
      }
      variable Facility_tpGuarantorSBI
      {
       datatype: string;
       frequency: document;
       title: "SBI branche code (Geen lijst)";
      }
      variable Facility_tpGuarantorSBIName
      {
       datatype: string;
       frequency: document;
       formula: String(MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Facility_tpGuarantorSBI,1));
       title: "SBI branche naam";
       locked: 1;
      }
      variable Facility_tpGuarantorAGICChoice
      {
       frequency: document;
       title: "AGIC Sector";
      }
      variable Facility_tpGuarantorAGIC
      {
       datatype: string;
       frequency: document;
       title: "AGIC Code";
       locked: 1;
       visible: ShowTestVariables;
      }
      variable Facility_tpGuarantorPercentageGuaranteed
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 0;
       title: "Percentage guanranteed";
      }
      variable Facility_tpGuarantorRatingChoice
      {
       frequency: document;
       displaytype: select;
       title: "UCR Rating";
      }
      variable Facility_tpGuarantorRating
      {
       datatype: string;
       frequency: document;
       formula: String(Case(Facility_tpGuarantorRatingChoice,[200:"0"|=210:"1"|=220:"2"|=221:"2-"|=222:"2+"|=230:"3"|=231:"3-"|=232:"3+"|=240:"4"|=241:"4-"|=242:"4+"|=250:"5"|=251:"5-"|=252:"5+"|=260:"6"|=261:"6+"|=270:"7"]));
       title: "UCR Rating Guarantor";
       visible: ShowTestVariables;
      }
      variable Facility_tpGuarantorPDModelChoice
      {
       frequency: document;
       displaytype: select;
       title: "PD Model";
      }
      variable Facility_tpGuarantorPDModel
      {
       datatype: string;
       frequency: document;
       formula: String(SubStr ( Case(Facility_tpGuarantorPDModelChoice,[01:"PAAL - ABN AMRO Lease PD PL"|=02:"PAFI - Acquisition Finance (Leveraged) (S&P) PD"|=03:"PAIR - Airlines (Asset backed) (S&P) PD"|=04:"PBNK - Commercial Banks (S&P) PD"|=05:"PCBS - Consumer CRG model"|=06:"PCLM - Mainbrand Consumer and Business PD"|=07:"PCRE - Commercial Real Estate PD"|=08:"PDCR - DCRM PD"|=09:"PDIA - Diamond Score PD"|=10:"PFSH - Regulated Investment Funds PD (Highly Leveraged)"|=11:"PFSI - Regulated Investment Funds PD"|=12:"PFSL - Regulated Investment Funds PD (leveraged)"|=13:"PFSP - Pension Funds PD"|=14:"PFSU - Regulated Investment Funds PD (Unleveraged)"|=15:"PGCG - Global Commodities Group Int PD"|=16:"PGSM - Global SME PD"|=17:"PHCN - Health Care PD"|=18:"PIBK - Investment Banks (S&P) PD"|=19:"PINC - Insurance combined (2.1)"|=20:"PINL - Insurance Life (2.1)"|=21:"PINN - Insurance Non - Life (2.1)"|=22:"PLCR - Large Corporates Rating PD"|=23:"PMAS - Shipping (Marsoft) PD"|=24:"PMBO - MBO/MBI PD"|=25:"PNMA - No Model Available (Expert process)"|=26:"POGM - Oil & Gas (Gathering & Processing) (S&P) PD"|=27:"POGU - Oil & Gas (Exploration & Production) (S&P) PD"|=28:"POLE - Operational Leasing (Asset backed) (S&P) PD"|=29:"PPBP - Private Score PD Lombard"|=30:"PPRI - Private Score PD"|=31:"PPUB - Public Sector Entities PD"|=32:"PREG - Regulatory Rating"|=33:"PRMG - Ex-F Non-Mainbrand Mortgages PD"|=34:"PSHP - Shipping (Asset backed) (S&P) PD"|=35:"PSOV - Sovereigns PD"|=36:"PSUR - Start ups PD"|=37:"PUTI - Energy utilities PD"|=38:"PBBS - Business CRG model"|=39:"PCFP - Cash Flow PD "]),0,4));
       title: "PD Model Tekst";
       visible: ShowTestVariables;
      }
      variable Facility_tpGuarantorPD
      {
       frequency: document;
       formula: MatrixLookup("AAB_Parameters.xls","PD" , Facility_tpGuarantorRating,1)*Facility_tpPDMultiplierUnder1Year;
       displaytype: percentage;
       fixed_decimals: 4;
       title: "Probability of Default (%)";
      }
      variable Facility_tpGuarantorPDMoC
      {
       frequency: document;
       formula: Facility_tpGuarantorPD*Facility_tpGuarantorMoCFactor;
       displaytype: percentage;
       fixed_decimals: 4;
       title: "Probability of Default  MoC (%)";
      }
      variable Facility_tpGuarantorMoCFactor
      {
       frequency: document;
       formula: MatrixLookup("AAB_Parameters.xls","MOCFactorPD",Facility_tpGuarantorPDModel,1);
       fixed_decimals: 3;
       title: "MoC Factor";
      }
     }
     variable FacilitySub7
     {
      datatype: none;
      title: "Profit and Losses - Facility";
      locked: 1;
      variable FacilitySub7Sub1 refers to Facility_tpCreditIncome
      {
       frequency: document;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return - Income";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       locked: 1;
       variable FacilitySub7Sub1Sub1 refers to Facility_tpInterestIncome
       {
        frequency: document;
        displaytype: currency;
        title: "Risk Adjusted Return - Income - Interest Income";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        locked: 1;
       }
       variable FacilitySub7Sub1Sub2 refers to Facility_tpCreditRelatedFee
       {
        frequency: document;
        displaytype: currency;
        title: "Risk Adjusted Return - Income - Credit Related Fee";
        locked: 1;
       }
       variable =FacilitySub7Sub1Sub3 refers to Facility_tpCreditIncome
       {
        frequency: document;
        displaytype: currency;
        fixed_decimals: 0;
        title: "Risk Adjusted Return - Income";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        locked: 1;
       }
      }
      variable -FacilitySub7Sub2 refers to Facility_tpIndirectLiquidityCosts
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       locked: 1;
      }
      variable -FacilitySub7Sub3 refers to Facility_tpDirectLiquidityPremium
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Direct Liquidity Premium";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       locked: 1;
      }
      variable -FacilitySub7Sub4 refers to Facility_tpSubordinatedDebtCapitalCharge
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Interest Expenses - Subordinated Debt Capital Charge";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       locked: 1;
      }
      variable FacilitySub7Sub5 refers to Facility_tpEquityFundingAdjustment
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Interest Expenses - Equity Funding Adjustment";
       locked: 1;
      }
      variable -FacilitySub7Sub6 refers to Facility_tpOperationalCosts
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Other Expenses - Operational Costs";
       locked: 1;
      }
      variable -FacilitySub7Sub7 refers to Facility_tpInternalExpectedLoss
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Other Expenses - Internal Expected Loss";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       locked: 1;
      }
      variable -FacilitySub7Sub8 refers to Facility_tpTax
      {
       frequency: document;
       displaytype: currency;
       title: "Risk Adjusted Return - Other Expenses - Tax";
       locked: 1;
      }
      variable =FacilitySub7Sub9 refers to Facility_tpRiskAdjustedReturn
      {
       frequency: document;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return";
       locked: 1;
      }
      variable FacilitySub7Sub10 refers to Facility_tpReturnOnEquity
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 2;
       title: "Return on Equity (%)";
       locked: 1;
       variable FacilitySub7Sub10Sub1 refers to Facility_tpRiskAdjustedReturn
       {
        frequency: document;
        displaytype: currency;
        fixed_decimals: 0;
        title: "Risk Adjusted Return";
        locked: 1;
       }
       variable =FacilitySub7Sub10Sub2 refers to Facility_tpReturnOnEquity
       {
        frequency: document;
        displaytype: percentage;
        fixed_decimals: 2;
        title: "Return on Equity (%)";
        locked: 1;
       }
      }
      variable FacilitySub7Sub11 refers to Facility_tpRaRoRaC
      {
       frequency: document;
       displaytype: percentage;
       fixed_decimals: 2;
       title: "RaRoRaC (%)";
       locked: 1;
       variable FacilitySub7Sub11Sub1 refers to Facility_tpRiskAdjustedReturn
       {
        frequency: document;
        displaytype: currency;
        fixed_decimals: 0;
        title: "Risk Adjusted Return";
        locked: 1;
       }
       variable FacilitySub7Sub11Sub2 refers to Facility_tpEconomicCapital
       {
        frequency: document;
        displaytype: currency;
        title: "Economic Capital";
        locked: 1;
       }
       variable =FacilitySub7Sub11Sub3 refers to Facility_tpRaRoRaC
       {
        frequency: document;
        displaytype: percentage;
        fixed_decimals: 2;
        title: "RaRoRaC (%)";
        locked: 1;
       }
      }
      variable FacilitySub7Sub12 refers to Facility_tpRegulatoryProfit
      {
       frequency: document;
       fixed_decimals: 0;
       title: "Regulatory Profit";
       locked: 1;
       variable FacilitySub7Sub12Sub1 refers to Facility_tpRiskAdjustedReturn
       {
        frequency: document;
        displaytype: currency;
        fixed_decimals: 0;
        title: "Risk Adjusted Return";
        locked: 1;
       }
       variable -FacilitySub7Sub12Sub2 refers to Facility_tpEquityCapitalCharge
       {
        frequency: document;
        displaytype: currency;
        title: "Regulatory Profit - Equity Capital Charge";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        locked: 1;
       }
       variable =FacilitySub7Sub12Sub3 refers to Facility_tpRegulatoryProfit
       {
        frequency: document;
        fixed_decimals: 0;
        title: "Regulatory Profit";
        locked: 1;
       }
      }
      variable FacilitySub7Sub13 refers to Facility_tpEconomicProfit
      {
       frequency: document;
       fixed_decimals: 0;
       title: "Economic Profit";
       locked: 1;
       variable FacilitySub7Sub13Sub1 refers to Facility_tpRiskAdjustedReturn
       {
        frequency: document;
        displaytype: currency;
        fixed_decimals: 0;
        title: "Risk Adjusted Return";
        locked: 1;
       }
       variable -FacilitySub7Sub13Sub2 refers to Facility_tpCostOfEconomicCapital
       {
        frequency: document;
        fixed_decimals: 0;
        title: "Cost of Economic Capital";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        locked: 1;
        variable FacilitySub7Sub13Sub2Sub1 refers to Facility_tpEconomicCapital
        {
         frequency: document;
         displaytype: currency;
         title: "Economic Capital";
         locked: 1;
        }
        variable FacilitySub7Sub13Sub2Sub2 refers to Facility_tpEffectiveCostOfCapital
        {
         frequency: document;
         displaytype: percentage;
         fixed_decimals: 1;
         title: "Effective Cost of Economic Capital";
         locked: 1;
        }
       }
      }
      variable FacilitySub7Sub14 refers to Facility_tpOtherMetrics
      {
       frequency: document;
       displaytype: currency;
       title: "Other Metrics";
       locked: 1;
       variable FacilitySub7Sub14Sub1 refers to Facility_tpPrincipalLimit
       {
        frequency: document;
        required: 1;
        displaytype: currency;
        title: "Facility Limit";
        locked: 1;
       }
       variable FacilitySub7Sub14Sub2 refers to Facility_tpExpectedAverageOutstanding
       {
        frequency: document;
        displaytype: currency;
        title: "Expected Average Outstanding (For upcoming 12 months after Current Date)";
        locked: 1;
       }
       variable FacilitySub7Sub14Sub3 refers to Facility_tpInternalExpectedLoss
       {
        frequency: document;
        displaytype: currency;
        title: "Risk Adjusted Return - Other Expenses - Internal Expected Loss";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        locked: 1;
       }
       variable FacilitySub7Sub14Sub4 refers to Facility_tpRWA
       {
        frequency: document;
        displaytype: currency;
        title: "Risk Weighted Assets";
        locked: 1;
       }
       variable FacilitySub7Sub14Sub5 refers to Facility_tpEAD
       {
        frequency: document;
        displaytype: currency;
        title: "Exposure At Default";
        locked: 1;
       }
      }
     }
     variable Facility_tpTargetRaRoRacSection
     {
      frequency: document;
      fixed_decimals: 0;
      title: "Target RaRoRaC";
      locked: 1;
      variable Facility_tpRequiredInterestMarginBps
      {
       frequency: document;
       formula: If(TargetRaRoRaCDriven,GoalSeek(Facility_tpRaRoRaC, Facility_tpTargetRaRoRac , Facility_tpCustomerSpread , Facility_tpStartValue, Facility_tpEndValue, Facility_tpSmallestDelta, Facility_tpMaxRuntimeMs),NA);
       fixed_decimals: 1;
       title: "Goalseek RaRoRaC Outcome";
       locked: 1;
      }
      variable Facility_tpTargetVariable
      {
       frequency: document;
       fixed_decimals: 2;
       title: "TargetVariable - Facility_tpRaRoRaC";
      }
      variable Facility_tpTargetValue
      {
       frequency: document;
       fixed_decimals: 2;
       title: "TargetValue - Facility Target RaRoRaC";
      }
      variable Facility_tpStartValue
      {
       frequency: document;
       formula: 0;
       fixed_decimals: 2;
       title: "RangeStartValue";
      }
      variable Facility_tpEndValue
      {
       frequency: document;
       formula: 5000;
       fixed_decimals: 2;
       title: "RangeEndValue";
      }
      variable Facility_tpSmallestDelta
      {
       frequency: document;
       formula: 1;
       fixed_decimals: 2;
       title: "SmallestDelta";
      }
      variable Facility_tpMaxRuntimeMs
      {
       frequency: document;
       formula: 6000;
       fixed_decimals: 2;
       title: "MaxRuntimeMs";
      }
     }
     variable Facility_tpEconomicCapital
     {
      frequency: document;
      formula: Facility_tpOperationalRisk+Facility_tpCreditRisk+Facility_tpBusinessRisk;
      displaytype: currency;
      title: "Economic Capital";
      variable Facility_tpOperationalRisk
      {
       frequency: document;
       formula: Facility_tpORCreditRisk;
       displaytype: currency;
       title: "Economic Capital - Operational Risk";
       locked: 1;
       variable Facility_tpORCreditRisk
       {
        frequency: document;
        formula: Borrower_tpARCAddOn*AgreementDiversificationOR*(Facility_tpOREC/10000)*(Facility_tpCreditIncome-Facility_tpDirectLiquidityPremium);
        displaytype: currency;
        title: "Economic Capital - Operational Risk - Credit Risk";
        locked: 1;
        variable Facility_tpOREC
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,3);
         fixed_decimals: 0;
         title: "Economic Capital - Operational Risk - OR EC";
        }
       }
      }
      variable Facility_tpBusinessRisk
      {
       frequency: document;
       formula: Facility_tpBRCreditRisk;
       displaytype: currency;
       title: "Economic Capital - Business Risk";
       locked: 1;
       variable Facility_tpBRCreditRisk
       {
        frequency: document;
        formula: Borrower_tpARCAddOn*AgreementDiversificationBR*(Facility_tpBREC/10000)*(Facility_tpCreditIncome-Facility_tpDirectLiquidityPremium);
        displaytype: currency;
        title: "Economic Capital - Business Risk - Credit Risk";
        locked: 1;
        variable Facility_tpBREC
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,9);
         fixed_decimals: 0;
         title: "Economic Capital - Business Risk - BR EC";
        }
       }
      }
      variable Facility_tpCreditRisk
      {
       frequency: document;
       formula: Facility_tpCreditRiskUnguaranteed+Facility_tpCreditRiskGuaranteed;
       displaytype: currency;
       title: "Economic Capital - Credit Risk";
       variable Facility_tpCreditRiskUnguaranteed
       {
        frequency: document;
        formula: OnER(Min(Facility_tpEADUnguaranteed,(Borrower_tpARCAddOn*Facility_tpEADUnguaranteed*Facility_tpLGDMoC*Facility_tpBorrower_tpRiskWeight*Borrower_tpCalibrationFactor*Facility_tpECMultiplier-Facility_tpIELMoCUnguaranteed)*AgreementDiversificationCR),NA);
        displaytype: currency;
        title: "Economic Capital - Credit Risk Unguaranteed";
       }
       variable Facility_tpCreditRiskGuaranteed
       {
        frequency: document;
        formula: OnER(Min(Facility_tpEADGuaranteed,(Borrower_tpARCAddOn*Facility_tpEADGuaranteed*Facility_tpLGDMoC*Facility_tpRiskWeightGuarantor*Facility_tpCalibrationFactorGuarantor*Facility_tpECMultiplierGuarantor-Facility_tpIELMoCGuaranteed)*AgreementDiversificationCR),NA);
        displaytype: currency;
        title: "Economic Capital - Credit Risk Guaranteed";
        variable Facility_tpRiskWeightGuarantor
        {
         frequency: document;
         formula: CumNormal((InvNormal(Facility_tpGuarantorPDMoC)-((Facility_tpRhoGuarantor^0.5)*(InvNormal(1-Borrower_tpConfidenceLevel))))/((1-Facility_tpRhoGuarantor)^0.5));
         fixed_decimals: 6;
         title: "Risk Weight Guarantor";
        }
        variable Facility_tpRhoGuarantor
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","EquityIndex",Facility_tpEquityIndexGuarantor,4);
         fixed_decimals: 5;
         title: "Rho Guarantor";
        }
        variable Facility_tpCalibrationFactorGuarantor
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CalibrationFactor" , Facility_tpCalibrationFactorIDGuarantor,3);
         fixed_decimals: 6;
         title: "Calibration Factor Guarantor";
        }
        variable Facility_tpCalibrationFactorIDGuarantor
        {
         datatype: string;
         frequency: document;
         formula: String(Facility_tpGuarantorRating&"_"&Borrower_tpClientGroup);
         title: "Calibration Factor ID Guarantor";
        }
       }
       variable Facility_tpEAD
       {
        frequency: document;
        formula: If(Facility_tpHeadroom=1,Facility_tpEADUnguaranteedHR+Facility_tpEADGuaranteedHR,Facility_tpEADUnguaranteedHRZero+Facility_tpEADGuaranteedHRZero);
        displaytype: currency;
        title: "Exposure At Default";
        variable Facility_tpEADGeneral
        {
         datatype: none;
         title: "Economic Capital - Credit Risk - General";
         variable Facility_tpHeadroom
         {
          frequency: document;
          formula: If((Facility_tpLimit-Facility_tpExpectedAverageOutstanding)>0,1,0);
          title: "Economic Capital - Credit Risk - Headroom";
          choices: "1:Yes|0:No";
         }
         variable Facility_tpOutstandingUnguaranteed
         {
          frequency: document;
          formula: Facility_tpExpectedAverageOutstanding*(1-Facility_tpGuarantorPercentageGuaranteed);
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Outstanding Unguaranteed";
         }
         variable Facility_tpOutstandingGuaranteed
         {
          frequency: document;
          formula: Facility_tpExpectedAverageOutstanding*Facility_tpGuarantorPercentageGuaranteed;
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Outstanding Guaranteed";
         }
         variable Facility_tpPrincipalLimitUnguaranteed
         {
          frequency: document;
          formula: Facility_tpPrincipalLimit*(1-Facility_tpGuarantorPercentageGuaranteed);
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Principal Limit Unguaranteed";
         }
         variable Facility_tpPrincipalLimitGuaranteed
         {
          frequency: document;
          formula: Facility_tpPrincipalLimit*Facility_tpGuarantorPercentageGuaranteed;
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Principal Limit Guaranteed";
         }
        }
        variable Facility_tpEADUnguaranteed
        {
         frequency: document;
         formula: If(Facility_tpHeadroom=1,Facility_tpEADUnguaranteedHR,Facility_tpEADUnguaranteedHRZero);
         displaytype: currency;
         title: "Economic Capital - Credit Risk - Exposure At Default Standard";
         variable Facility_tpEADUnguaranteedHR
         {
          frequency: document;
          formula: Facility_tpLEF*(Facility_tpOutstandingUnguaranteed+(Facility_tpUGD*(1+(Facility_tpMOCEAD*Facility_tpAF))*(Max((Facility_tpPrincipalLimitUnguaranteed-Facility_tpOutstandingUnguaranteed),0))));
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Exposure At Default";
          hint: "When the headroom is greater than 0 Euro. NB: Negative values for UGD and PGO are not used in this pricing tool";
         }
         variable Facility_tpEADUnguaranteedHRZero
         {
          frequency: document;
          formula: Facility_tpLEF*(Facility_tpOutstandingUnguaranteed+(Facility_tpPGO*(1+(Facility_tpMOCEAD*Facility_tpAF))*Facility_tpOutstandingUnguaranteed));
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Exposure At Default Zero Headroom";
          hint: "When the headroom is less than or equal to 0 Euro. NB: Negative values for UGD and PGO are not used in this pricing tool";
         }
        }
        variable Facility_tpEADGuaranteed
        {
         frequency: document;
         formula: If(Facility_tpHeadroom=1,Facility_tpEADGuaranteedHR,Facility_tpEADGuaranteedHRZero);
         displaytype: currency;
         title: "Economic Capital - Credit Risk - Exposure At Default Guaranteed";
         variable Facility_tpEADGuaranteedHR
         {
          frequency: document;
          formula: Facility_tpLEF*(Facility_tpOutstandingGuaranteed+(Facility_tpUGD*(1+(Facility_tpMOCEAD*Facility_tpAF))*(Max((Facility_tpPrincipalLimitGuaranteed-Facility_tpOutstandingGuaranteed),0))));
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Exposure At Default";
          hint: "When the headroom is greater than 0 Euro. NB: Negative values for UGD and PGO are not used in this pricing tool";
         }
         variable Facility_tpEADGuaranteedHRZero
         {
          frequency: document;
          formula: Facility_tpLEF*(Facility_tpOutstandingGuaranteed+(Facility_tpPGO*(1+(Facility_tpMOCEAD*Facility_tpAF))*Facility_tpOutstandingGuaranteed));
          displaytype: currency;
          title: "Economic Capital - Credit Risk - Exposure At Default Zero Headroom";
          hint: "When the headroom is less than or equal to 0 Euro. NB: Negative values for UGD and PGO are not used in this pricing tool";
         }
        }
        variable Facility_tpLEF
        {
         frequency: document;
         formula: If(Facility_tpBorrower_tpPLorNPL=1,MatrixLookup("AAB_Parameters.xls","LEFfactors" , Facility_tpIDLEFfactors,10),MatrixLookup("AAB_Parameters.xls","LEFfactors" , Facility_tpIDLEFfactors,8));
         displaytype: percentage;
         fixed_decimals: 2;
         title: "Economic Capital - Credit Risk - LEF";
        }
        variable Facility_tpUGD
        {
         frequency: document;
         formula: If(Facility_tpHeadroom,If(Facility_tpBorrower_tpPLorNPL=1,MatrixLookup("AAB_Parameters.xls","LEFfactors" , Facility_tpIDLEFfactors,9),MatrixLookup("AAB_Parameters.xls","LEFfactors" , Facility_tpIDLEFfactors,7)),NA);
         displaytype: percentage;
         fixed_decimals: 2;
         title: "Economic Capital - Credit Risk - UGD (%)";
        }
        variable Facility_tpPGO
        {
         frequency: document;
         formula: If(Facility_tpHeadroom=0,If(Facility_tpBorrower_tpPLorNPL=1,MatrixLookup("AAB_Parameters.xls","LEFfactors" , Facility_tpIDLEFfactors,9),MatrixLookup("AAB_Parameters.xls","LEFfactors" , Facility_tpIDLEFfactors,7)),NA);
         displaytype: percentage;
         fixed_decimals: 2;
         title: "Economic Capital - Credit Risk - PGO (%)";
        }
        variable Facility_tpMOCEAD
        {
         frequency: document;
         formula: If(Facility_tpPrincipalLimit>75000,MatrixLookup("AAB_Parameters.xls","CalculationParameters","MOC_EAD_NPL",2),MatrixLookup("AAB_Parameters.xls","CalculationParameters","MOC_EAD_PL",2));
         fixed_decimals: 2;
         title: "Economic Capital - Credit Risk - MOCEAD";
        }
        variable Facility_tpAF
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","AggregationFactor",2);
         fixed_decimals: 2;
         title: "Economic Capital - Credit Risk - AF";
         variable Facility_tpIDLEFfactors
         {
          datatype: string;
          frequency: document;
          formula: String(Facility_tpType&"_"&Facility_tpLowerlimit&"_"&Facility_tpUsageLimit&"_"&Facility_tpUGDPGO);
          title: "Economic Capital - Credit Risk - Search ID LEFfactors";
         }
         variable Facility_tpLowerlimit
         {
          frequency: document;
          formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,8)=1,If(Facility_tpHeadroom,Case(Facility_tpLimit,[<=100000:0|<=350000:100000|<=1000000:350000|<=3000000:1000000|>3000000:3000000]),Case(Facility_tpPrincipalLimit,[<=70000:0|<=300000:70000|<=1000000:300000|>1000000:1000000])),0);
          fixed_decimals: 0;
          title: "Economic Capital - Credit Risk - Search ID Lower limit";
         }
         variable Facility_tpUsageLimit
         {
          frequency: document;
          formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,10)=1,0,If(Facility_tpHeadroom,Case((Facility_tpExpectedAverageOutstanding/Facility_tpLimit)*100,[<=80:0|>80:81]),0));
          fixed_decimals: 0;
          title: "Economic Capital - Credit Risk - Search ID Usage limit";
         }
         variable Facility_tpUGDPGO
         {
          datatype: string;
          frequency: document;
          formula: String(If(Facility_tpHeadroom,"UGD","PGO"));
          title: "Economic Capital - Credit Risk - Search ID UGD/PGO";
         }
        }
       }
       variable Facility_tpECMultiplier
       {
        frequency: document;
        formula: Facility_tpECMultiplierLowerBound+((Facility_tpECMultiplierUpperBound-Facility_tpECMultiplierLowerBound)*(OnER((Facility_tpRemainingAverageTenor+1-Facility_tpECMultiplierTenorLowerBound)/(Facility_tpECMultiplierTenorUpperBound-Facility_tpECMultiplierTenorLowerBound),0)));
        fixed_decimals: 2;
        title: "Economic Capital Multiplier";
       }
       variable Facility_tpECMultiplierGuarantor
       {
        frequency: document;
        formula: Facility_tpECMultiplierLowerBoundGuarantor+((Facility_tpECMultiplierUpperBoundGuarantor-Facility_tpECMultiplierLowerBoundGuarantor)*(OnER((Facility_tpRemainingAverageTenor+1-Facility_tpECMultiplierTenorLowerBound)/(Facility_tpECMultiplierTenorUpperBound-Facility_tpECMultiplierTenorLowerBound),0)));
        fixed_decimals: 2;
        title: "Economic Capital Multiplier Guarantor";
        variable Facility_tpECMultiplierTenorLowerBound
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ECMultiplierTenorLowerBound" , If(Facility_tpRemainingAverageTenor<=1,1,If(Facility_tpRemainingAverageTenor+1>16,16,Facility_tpRemainingAverageTenor+1)),1);
         fixed_decimals: 2;
         title: "Economic Capital Multiplier Lower Tenor";
        }
        variable Facility_tpECMultiplierTenorUpperBound
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ECMultiplierTenorUpperBound" , If(Facility_tpRemainingAverageTenor<=1,1,If(Facility_tpRemainingAverageTenor+1>16,16,Facility_tpRemainingAverageTenor+1)),1);
         fixed_decimals: 2;
         title: "Economic Capital Multiplier Upper Tenor";
        }
        variable Facility_tpECMultiplierLowerBound
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ECMultiplier","@"&Borrower_tpRating,Facility_tpECMultiplierTenorLowerBound);
         fixed_decimals: 2;
         title: "Economic Capital Multiplier Lower Bound";
        }
        variable Facility_tpECMultiplierUpperBound
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ECMultiplier","@"&Borrower_tpRating,Facility_tpECMultiplierTenorUpperBound);
         fixed_decimals: 2;
         title: "Economic Capital Multiplier Upper Bound";
        }
        variable Facility_tpECMultiplierLowerBoundGuarantor
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ECMultiplier","@"&Facility_tpGuarantorRating,Facility_tpECMultiplierTenorLowerBound);
         fixed_decimals: 2;
         title: "Economic Capital Multiplier Lower Bound Guarantor";
        }
        variable Facility_tpECMultiplierUpperBoundGuarantor
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ECMultiplier","@"&Facility_tpGuarantorRating,Facility_tpECMultiplierTenorUpperBound);
         fixed_decimals: 2;
         title: "Economic Capital Multiplier Upper Bound Guarantor";
        }
       }
       variable Facility_tpIELMoC
       {
        frequency: document;
        formula: Facility_tpIELMoCUnguaranteed+Facility_tpIELMoCGuaranteed;
        displaytype: currency;
        title: "Economic Capital - Credit Risk - Internal Expected Loss";
        variable Facility_tpIELMoCUnguaranteed
        {
         frequency: document;
         formula: Facility_tpEADUnguaranteed*Facility_tpBorrower_tpPDMoC*Facility_tpLGDMoC*Facility_tpELMultiplierECUnguaranteed*Facility_tpDeannualize;
         displaytype: currency;
         title: "Economic Capital - Credit Risk - Internal Expected Loss - Unguaranteed";
         variable Facility_tpELMultiplierECUnguaranteed
         {
          frequency: document;
          formula: If(Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM>0,MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMECUnguaranteed,1)+((Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM)*(MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDUpperMECUnguaranteed,1)-MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMECUnguaranteed,1))),MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDECUnguaranteed,1));
          fixed_decimals: 4;
          title: "Expected Loss Multiplier";
         }
         variable Facility_tpELMultiplierLowerM
         {
          frequency: document;
          formula: Case(Facility_tpRemainingAverageTenor,[<1:0|<2:1|<3:2|<4:3|<5:4|<6:5|<7:6|<8:7|<9:8|<10:9|<11:10|<12:11|<13:12|<14:13|<15:14|15]);
          displaytype: currency;
          title: "Expected Loss - Lower M";
         }
         variable Facility_tpELMultiplierUpperM
         {
          frequency: document;
          formula: Case(Facility_tpRemainingAverageTenor,[<1:1|<2:2|<3:3|<4:4|<5:5|<6:6|<7:7|<8:8|<9:9|<10:10|<11:11|<12:12|<13:13|<14:14|<15:15|15]);
          displaytype: currency;
          title: "Expected Loss - Upper M";
         }
         variable Facility_tpELMultiplierIDECUnguaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Borrower_tpRating&"_"&Str((If(Facility_tpRemainingAverageTenor+1>16,16,Facility_tpRemainingAverageTenor+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGDMoC,2)*100,0,0));
          title: "Expected Loss Multiplier ID Economic Capital - Unguaranteed";
         }
         variable Facility_tpELMultiplierIDLowerMECUnguaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Borrower_tpRating&"_"&Str((If(Facility_tpELMultiplierLowerM+1>16,16,Facility_tpELMultiplierLowerM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGDMoC,2)*100,0,0));
          title: "Expected Loss Multiplier ID Economic Capital - Unguaranteed - Lower M";
         }
         variable Facility_tpELMultiplierIDUpperMECUnguaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Borrower_tpRating&"_"&Str((If(Facility_tpELMultiplierUpperM+1>16,16,Facility_tpELMultiplierUpperM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGDMoC,2)*100,0,0));
          title: "Expected Loss Multiplier ID Economic Capital - Unguaranteed - Upper M";
         }
        }
        variable Facility_tpIELMoCGuaranteed
        {
         frequency: document;
         formula: OnEr(Facility_tpEADGuaranteed*Facility_tpJointPDMoC*Facility_tpLGDMoC*Facility_tpELMultiplierECGuaranteed*Facility_tpDeannualize,NA);
         displaytype: currency;
         title: "Economic Capital - Credit Risk - Internal Expected Loss - Guaranteed";
         variable Facility_tpELMultiplierECGuaranteed
         {
          frequency: document;
          formula: If(Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM>0,MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMECGuaranteed,1)+((Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM)*(MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDUpperMECGuaranteed,1)-MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMECGuaranteed,1))),MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDECGuaranteed,1));
          fixed_decimals: 8;
          title: "Expected Loss Multiplier Guaranteed";
         }
         variable Facility_tpELMultiplierIDECGuaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Facility_tpGuarantorRating&"_"&Str((If(Facility_tpRemainingAverageTenor+1>16,16,Facility_tpRemainingAverageTenor+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGDMoC,2)*100,0,0));
          title: "Expected Loss Multiplier ID Economic Capital - Guaranteed";
         }
         variable Facility_tpELMultiplierIDLowerMECGuaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Facility_tpGuarantorRating&"_"&Str((If(Facility_tpELMultiplierLowerM+1>16,16,Facility_tpELMultiplierLowerM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGDMoC,2)*100,0,0));
          title: "Expected Loss Multiplier ID Economic Capital - Guaranteed - Lower M";
         }
         variable Facility_tpELMultiplierIDUpperMECGuaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Facility_tpGuarantorRating&"_"&Str((If(Facility_tpELMultiplierUpperM+1>16,16,Facility_tpELMultiplierUpperM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGDMoC,2)*100,0,0));
          title: "Expected Loss Multiplier ID Economic Capital - Guaranteed - Upper M";
         }
         variable Facility_tpJointPDMoC
         {
          frequency: document;
          formula: BivarNormal(InvNormal(Facility_tpBorrower_tpPDMoC),InvNormal(Facility_tpGuarantorPDMoC),(Facility_tpIntraSectorCorrelationBorrower*Facility_tpIntraSectorCorrelationGuarantor*Facility_tpEquityCorrelation));
          displaytype: percentage;
          fixed_decimals: 4;
          title: "Joint PD MoC";
         }
         variable Facility_tpEquityIndexBorrower
         {
          frequency: document;
          formula: If(Borrower_tpAGICOrSBI=0,MatrixLookup("AAB_Parameters.xls","AGICMapping","@"&Borrower_tpAGIC,2),MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Borrower_tpSBI,2));
          displaytype: currency;
          title: "Equity Index Borrower";
         }
         variable Facility_tpEquityIndexGuarantor
         {
          frequency: document;
          formula: If(Facility_tpGuarantorAGICOrSBI=0,MatrixLookup("AAB_Parameters.xls","AGICMapping","@"&Facility_tpGuarantorAGIC,2),MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Facility_tpGuarantorSBI,2));
          displaytype: currency;
          title: "Equity Index Guarantor";
         }
         variable Facility_tpIntraSectorCorrelationBorrower
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","EquityIndex",Facility_tpEquityIndexBorrower,3);
          fixed_decimals: 8;
          title: "Intrasector Correlation Borrower";
         }
         variable Facility_tpIntraSectorCorrelationGuarantor
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","EquityIndex",Facility_tpEquityIndexGuarantor,3);
          fixed_decimals: 8;
          title: "Intrasector Correlation Guarantor";
         }
         variable Facility_tpEquityCorrelationID
         {
          datatype: string;
          frequency: document;
          formula: String(Str(Facility_tpEquityIndexBorrower)&"_"&Str(Facility_tpEquityIndexGuarantor));
          title: "Inter-sector Correlation Factor ID";
         }
         variable Facility_tpEquityCorrelation
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","EquityCorrelation" , Facility_tpEquityCorrelationID,1);
          fixed_decimals: 8;
          title: "Inter-sector Correlation Factor";
         }
         variable Facility_tpInvNormalBorrower
         {
          frequency: document;
          formula: InvNormal(Facility_tpBorrower_tpPDMoC);
          fixed_decimals: 8;
          title: "Inverse Normal Borrower";
         }
         variable Facility_tpInvNormalGuarantor
         {
          frequency: document;
          formula: InvNormal(Facility_tpGuarantorPDMoC);
          fixed_decimals: 8;
          title: "Inverse Normal Guarantor";
         }
        }
       }
      }
     }
     variable Facility_tpRiskAdjustedReturn
     {
      frequency: document;
      formula: OnEr(Facility_tpCreditIncome-Facility_tpOtherExpenses-Facility_tpInterestExpenses-Facility_tpTax,NA);
      displaytype: currency;
      fixed_decimals: 0;
      title: "Risk Adjusted Return";
      variable Facility_tpCreditIncome
      {
       frequency: document;
       formula: Facility_tpInterestIncome+Facility_tpCreditRelatedFee;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return - Income";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       variable Facility_tpCreditRelatedFee
       {
        frequency: document;
        formula: OnER(Facility_tpCommitmentFee+Facility_tpUtilisationFee+Facility_tpAnnualFee+Facility_tpOneOffFee,NA);
        displaytype: currency;
        title: "Risk Adjusted Return - Income - Credit Related Fee";
        variable Facility_tpCommitmentFee
        {
         frequency: document;
         formula: Facility_tpCommitmentFeeBp*(Facility_tpLimit-Facility_tpExpectedAverageOutstanding)*0.0001*Facility_tpDeannualize;
         displaytype: currency;
         title: "Risk Adjusted Return - Income - Credit Related Fee - Commitment Fee";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        }
        variable Facility_tpAnnualFee
        {
         frequency: document;
         formula: OnER(If ( Facility_tpType="F1",Facility_tpCreditFeeBp/10000*Facility_tpExpectedAverageOutstanding,NA),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Income - Credit Related Fee - Annual Fee";
        }
        variable Facility_tpAnnualFeeBp
        {
         frequency: document;
         formula: Facility_tpAnnualFee/Facility_tpExpectedAverageOutstanding;
         displaytype: currency;
         title: "Annual Fee (Bp)";
         locked: 1;
        }
        variable Facility_tpOneOffFee
        {
         frequency: document;
         formula: If(Facility_tpOriginalTenorYears<=1,Facility_tpOneOffFeeAmount,If(Facility_tpOriginalTenorYears<=5,Facility_tpOneOffFeeAmount/Facility_tpOriginalTenorYears,Facility_tpOneOffFeeAmount/5));
         displaytype: currency;
         title: "Risk Adjusted Return - Income - Credit Related Fee - One Off Fee (?)";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         variable Facility_tpOneOffFeeAmount
         {
          frequency: document;
          formula: Facility_tpOneOffFeeAmount2;
          displaytype: currency;
          title: "Risk Adjusted Return - Income - Credit Related Fee - One Off Fee Amount (?)";
         }
        }
        variable Facility_tpOneOffFeeBp
        {
         frequency: document;
         formula: (Facility_tpOneOffFee/Facility_tpEAD)*10000;
         displaytype: currency;
         title: "One Off Fee (Bp)";
        }
        variable Facility_tpUtilisationFee
        {
         frequency: document;
         formula: If(Facility_tpRevolvingProduct,Facility_tpUtilisationFeeBp*Facility_tpExpectedAverageOutstanding*0.0001,0)*Facility_tpDeannualize;
         displaytype: currency;
         title: "Utilisation Fee";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         locked: 1;
         variable Facility_tpUtilisationFeeBp
         {
          frequency: document;
          formula: If((Facility_tpExpectedAverageOutstanding)/Facility_tpLimit<=0,0,If((Facility_tpExpectedAverageOutstanding)/Facility_tpLimit<=Facility_tpUtilisationFeeBpLimit1,0,If((Facility_tpExpectedAverageOutstanding)/Facility_tpLimit<=Facility_tpUtilisationFeeBpLimit2,Facility_tpUtilisationFeeBpLimit1Bp,If((Facility_tpExpectedAverageOutstanding)/Facility_tpLimit<=Facility_tpUtilisationFeeBpLimit3,Facility_tpUtilisationFeeBpLimit1Bp+Facility_tpUtilisationFeeBpLimit2Bp,If((Facility_tpExpectedAverageOutstanding)/Facility_tpLimit<=Facility_tpUtilisationFeeBpLimit4,Facility_tpUtilisationFeeBpLimit1Bp+Facility_tpUtilisationFeeBpLimit2Bp+Facility_tpUtilisationFeeBpLimit3Bp,Facility_tpUtilisationFeeBpLimit1Bp+Facility_tpUtilisationFeeBpLimit2Bp+Facility_tpUtilisationFeeBpLimit3Bp+Facility_tpUtilisationFeeBpLimit4Bp)))));
          fixed_decimals: 0;
          title: "Utilisation Fee (Bps)";
         }
         variable Facility_tpUtilisationFeeBpLimit1
         {
          frequency: document;
          formula: 0;
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Utilisation Fee - utilization limit 1";
         }
         variable Facility_tpUtilisationFeeBpLimit2
         {
          frequency: document;
          formula: 0.3333;
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Utilisation Fee - utilization limit 2";
         }
         variable Facility_tpUtilisationFeeBpLimit3
         {
          frequency: document;
          formula: 0.50;
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Utilisation Fee - utilization limit 3";
         }
         variable Facility_tpUtilisationFeeBpLimit4
         {
          frequency: document;
          formula: 0.6667;
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Utilisation Fee - utilization limit 4";
         }
         variable Facility_tpUtilisationFeeBpLimit1Bp
         {
          frequency: document;
          formula: 0;
          fixed_decimals: 0;
          title: "Utilisation Fee - utilization limit 1 - Bps";
         }
         variable Facility_tpUtilisationFeeBpLimit2Bp
         {
          frequency: document;
          formula: 0;
          fixed_decimals: 0;
          title: "Utilisation Fee - utilization limit 2 - Bps";
         }
         variable Facility_tpUtilisationFeeBpLimit3Bp
         {
          frequency: document;
          formula: 0;
          fixed_decimals: 0;
          title: "Utilisation Fee - utilization limit 3 - Bps";
         }
         variable Facility_tpUtilisationFeeBpLimit4Bp
         {
          frequency: document;
          formula: 0;
          fixed_decimals: 0;
          title: "Utilisation Fee - utilization limit 4 - Bps";
         }
        }
       }
       variable Facility_tpInterestIncome
       {
        frequency: document;
        formula: (((Facility_tpCustomerSpread+Facility_tpCustomerSpreadAddMargin)*Facility_tpExpectedAverageOutstanding)/10000)*Facility_tpDeannualize;
        displaytype: currency;
        title: "Risk Adjusted Return - Income - Interest Income";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        variable Facility_tpCustomerSpread
        {
         frequency: document;
         formula: If(TargetRaRoRaCDriven, Round(Facility_tpRequiredInterestMarginBps,1), Facility_tpCustomerSpread2);
         fixed_decimals: 0;
         title: "Customer Spread (Bp)";
        }
        variable Facility_tpCustomerSpreadAddMargin
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CustomerSpreadAddMargin" , Facility_tpProductinterestDetailsInterestProductName,1);
         fixed_decimals: 0;
         title: "Risk Adjusted Return - Income - Interest Income - Customer Spread Additional Margin (Bps)";
        }
       }
       variable Facility_tpCommercialMargin
       {
        frequency: document;
        formula: Facility_tpCustomerSpread-Facility_tpLiquiditySpreadBps;
        fixed_decimals: 0;
        title: "Commercial Margin (Bp)";
       }
       variable Facility_tpOptionCostsIndLiqPrem
       {
        frequency: document;
        formula: Facility_tpIndirectLiquidityCosts+Facility_tpPipelineRisk+Facility_tpPrepaymentCosts;
        displaytype: currency;
        fixed_decimals: 0;
        title: "Option Costs/Ind. Liq. Costs";
       }
      }
      variable Facility_tpOtherExpenses
      {
       frequency: document;
       formula: Facility_tpInternalExpectedLoss+Facility_tpOperationalCosts;
       displaytype: currency;
       fixed_decimals: 0;
       title: "Risk Adjusted Return - Other Expenses";
       variable Facility_tpInternalExpectedLoss
       {
        frequency: document;
        formula: (Facility_tpInternalExpectedLossUnguaranteed+Facility_tpInternalExpectedLossGuaranteed)*Facility_tpDeannualize;
        displaytype: currency;
        title: "Risk Adjusted Return - Other Expenses - Internal Expected Loss";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        variable Facility_tpInternalExpectedLossUnguaranteed
        {
         frequency: document;
         formula: Facility_tpEADUnguaranteed*Facility_tpBorrower_tpPD*Facility_tpLGD*Facility_tpELMultiplierRARUnguaranteed;
         displaytype: currency;
         title: "Risk Adjusted Return - Other Expenses - Internal Expected Loss - Unguaranteed";
         variable Facility_tpELMultiplierRARUnguaranteed
         {
          frequency: document;
          formula: If(Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM>0,MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMRARUnguaranteed,1)+((Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM)*(MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDUpperMRARUnguaranteed,1)-MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMRARUnguaranteed,1))),MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDRARUnguaranteed,1));
          displaytype: currency;
          title: "Expected Loss Multiplier - Risk Adjusted Return - Unguaranteed";
         }
         variable Facility_tpELMultiplierIDRARUnguaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Borrower_tpRating&"_"&Str((If(Facility_tpRemainingAverageTenor+1>16,16,Facility_tpRemainingAverageTenor+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGD,2)*100,0,0));
          title: "Expected Loss Multiplier ID - Risk Adjusted Return - Unguaranteed";
         }
         variable Facility_tpELMultiplierIDLowerMRARUnguaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Borrower_tpRating&"_"&Str((If(Facility_tpELMultiplierLowerM+1>16,16,Facility_tpELMultiplierLowerM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGD,2)*100,0,0));
          title: "Expected Loss Multiplier ID - Risk Adjusted Return - Unguaranteed - Lower M";
         }
         variable Facility_tpELMultiplierIDUpperMRARUnguaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Borrower_tpRating&"_"&Str((If(Facility_tpELMultiplierUpperM+1>16,16,Facility_tpELMultiplierUpperM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGD,2)*100,0,0));
          title: "Expected Loss Multiplier ID - Risk Adjusted Return - Unguaranteed - Upper M";
         }
        }
        variable Facility_tpInternalExpectedLossGuaranteed
        {
         frequency: document;
         formula: Facility_tpEADGuaranteed*Facility_tpJointPD*Facility_tpLGD*Facility_tpELMultiplierRARGuaranteed;
         displaytype: currency;
         title: "Risk Adjusted Return - Other Expenses - Internal Expected Loss - Guaranteed";
         variable Facility_tpELMultiplierRARGuaranteed
         {
          frequency: document;
          formula: If(Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM>0,MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMRARGuaranteed,1)+((Facility_tpRemainingAverageTenor-Facility_tpELMultiplierLowerM)*(MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDUpperMRARGuaranteed,1)-MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDLowerMRARGuaranteed,1))),MatrixLookup("AAB_Parameters_ELMultiplier.xls","ELMultiplier" , Facility_tpELMultiplierIDRARGuaranteed,1));
          displaytype: currency;
          title: "Expected Loss Multiplier - Risk Adjusted Return - Guaranteed";
         }
         variable Facility_tpELMultiplierIDRARGuaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Facility_tpGuarantorRating&"_"&Str((If(Facility_tpRemainingAverageTenor+1>16,16,Facility_tpRemainingAverageTenor+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGD,2)*100,0,0));
          title: "Expected Loss Multiplier ID - Risk Adjusted Return - Guaranteed";
         }
         variable Facility_tpELMultiplierIDLowerMRARGuaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Facility_tpGuarantorRating&"_"&Str((If(Facility_tpELMultiplierLowerM+1>16,16,Facility_tpELMultiplierLowerM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGD,2)*100,0,0));
          title: "Expected Loss Multiplier ID - Risk Adjusted Return - Guaranteed - Lower M";
         }
         variable Facility_tpELMultiplierIDUpperMRARGuaranteed
         {
          datatype: string;
          frequency: document;
          formula: String("@"&Facility_tpGuarantorRating&"_"&Str((If(Facility_tpELMultiplierUpperM+1>16,16,Facility_tpELMultiplierUpperM+1)),0,0)&"_"&Str(RoundUp(Facility_tpLGD,2)*100,0,0));
          title: "Expected Loss Multiplier ID - Risk Adjusted Return - Guaranteed - Upper M";
         }
         variable Facility_tpJointPD
         {
          frequency: document;
          formula: BivarNormal(InvNormal(Facility_tpBorrower_tpPD),InvNormal(Facility_tpGuarantorPD),(Facility_tpIntraSectorCorrelationBorrower*Facility_tpIntraSectorCorrelationGuarantor*Facility_tpEquityCorrelation));
          displaytype: currency;
          title: "Joint PD";
         }
        }
       }
       variable Facility_tpOperationalCosts
       {
        frequency: document;
        formula: Facility_tpCostOverVolume+Facility_tpCostPerServiceConcept+Facility_tpCostPerContract;
        displaytype: currency;
        title: "Risk Adjusted Return - Other Expenses - Operational Costs";
        variable Facility_tpCostPerContract
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CostPerContract" , Facility_tpCostPerContractID,5)*Facility_tpDeannualize;
         displaytype: currency;
         title: "Risk Adjusted Return - Other Expenses - Operational Costs - Cost per Contract";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         variable Facility_tpCostPerContractID
         {
          datatype: string;
          frequency: document;
          formula: String(Facility_tpType&"_"&Borrower_tpRating&"_"&Borrower_tpClientGroup);
          title: "Risk Adjusted Return - Other Expenses - Operational Costs - Cost per Contract ID";
         }
        }
        variable Facility_tpCostOverVolume
        {
         frequency: document;
         formula: Facility_tpExpectedAverageOutstanding*(Facility_tpCostOverVolumeBp/10000)*Facility_tpDeannualize;
         displaytype: currency;
         title: "Risk Adjusted Return - Other Expenses - Operational Costs - Cost over Volume";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         variable Facility_tpCostOverVolumeBp
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","CostOverVolume" , Facility_tpType&"_"&Borrower_tpClientGroup,3);
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Other Expenses - Operational Costs - Cost over Volume (Bps)";
         }
        }
        variable Facility_tpCostPerServiceConcept
        {
         frequency: document;
         formula: If(Borrower_tpSumExpectedAverageOutstanding=0,(Borrower_tpFixedCostOperatingConcept*Facility_tpPercentageOperatingConcept)/Borrower_tpNrOfFacilities,((Borrower_tpFixedCostOperatingConcept*Facility_tpPercentageOperatingConcept)/Borrower_tpSumExpectedAverageOutstanding)*Facility_tpExpectedAverageOutstanding);
         displaytype: currency;
         title: "Risk Adjusted Return - Other Expenses - Operational Costs - Cost per Service Concept";
         variable Facility_tpPercentageOperatingConcept
         {
          frequency: document;
          formula: AgreementPercentageOperatingConcept;
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Other Expenses - Operational Costs - Cost per Service Concept - Percentage Operating Concept";
         }
        }
       }
       variable Facility_tpTax
       {
        frequency: document;
        formula: OnER((Facility_tpCreditIncome-Facility_tpInternalExpectedLoss-Facility_tpOperationalCosts-Facility_tpInterestExpenses)*Borrower_tpTaxRate,NA);
        displaytype: currency;
        title: "Risk Adjusted Return - Other Expenses - Tax";
       }
      }
      variable Facility_tpInterestExpenses
      {
       frequency: document;
       formula: Facility_tpFundsTransferPricing+Facility_tpIndirectLiquidityCosts+Facility_tpSubordinatedDebtCapitalCharge-Facility_tpEquityFundingAdjustment;
       displaytype: currency;
       title: "Risk Adjusted Return - Interest Expenses";
       variable Facility_tpFundsTransferPricing
       {
        frequency: document;
        formula: Facility_tpDirectLiquidityPremium+Facility_tpPrepaymentCosts+Facility_tpPipelineRisk;
        displaytype: currency;
        title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing";
        variable Facility_tpBaseRate
        {
         frequency: document;
         formula: Facility_tpBaseRate2;
         title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Base Rate (Bps)";
        }
        variable Facility_tpDirectLiquidityPremium
        {
         frequency: document;
         formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,4)=0,0,(Facility_tpExpectedAverageOutstanding*Facility_tpLiquiditySpreadBps)/10000);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Direct Liquidity Premium";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         variable Facility_tpLiquiditySpreadBps
         {
          frequency: document;
          formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,4)=0,0,If(Facility_tpOriginalTenor<12,Facility_tpLiquiditySpreadBpsUnder1year,Facility_tpLiquiditySpreadBpsGeneral));
          fixed_decimals: 2;
          title: "Liquidity Spread (Bp)";
         }
         variable Facility_tpLiquiditySpreadBpsUnder1year
         {
          frequency: document;
          formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,9)=1,Facility_tpLiquiditySpreadRevolvingCredit,If((Facility_tpRepaymentChoice=0) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentBullet/Facility_tpExpectedAverageOutstanding),If((Facility_tpRepaymentChoice=1) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentLinear/Facility_tpExpectedAverageOutstanding),If((Facility_tpRepaymentChoice=2) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentAnnuity/Facility_tpExpectedAverageOutstanding),If((Facility_tpRepaymentChoice=3) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentScheme/Facility_tpExpectedAverageOutstanding),If((Facility_tpRepaymentChoice=0) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentBullet-Facility_tpLiquiditySpreadWithdrawalScheme)/Facility_tpExpectedAverageOutstanding,If((Facility_tpRepaymentChoice=1) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentLinear-Facility_tpLiquiditySpreadWithdrawalScheme)/Facility_tpExpectedAverageOutstanding,If((Facility_tpRepaymentChoice=2) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentAnnuity-Facility_tpLiquiditySpreadWithdrawalScheme)/Facility_tpExpectedAverageOutstanding,If((Facility_tpRepaymentChoice=3) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentScheme-Facility_tpLiquiditySpreadWithdrawalScheme)/Facility_tpExpectedAverageOutstanding,NA)))))))));
          fixed_decimals: 2;
          title: "Liquidity Spread (Bp) Under 1 Year";
         }
         variable Facility_tpLiquiditySpreadBpsGeneral
         {
          frequency: document;
          formula: If(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,9)=1,Facility_tpLiquiditySpreadRevolvingCredit,If((Facility_tpRepaymentChoice=0) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentBullet/Facility_tpWeightedFundingRepaymentBullet),If((Facility_tpRepaymentChoice=1) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentLinear/Facility_tpWeightedFundingRepaymentLinear),If((Facility_tpRepaymentChoice=2) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentAnnuity/Facility_tpWeightedFundingRepaymentAnnuity),If((Facility_tpRepaymentChoice=3) and (Facility_tpWithdrawalChoice=0),(Facility_tpLiquiditySpreadRepaymentScheme/Facility_tpWeightedFundingRepaymentScheme),If((Facility_tpRepaymentChoice=0) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentBullet-Facility_tpLiquiditySpreadWithdrawalScheme)/(Facility_tpWeightedFundingRepaymentBullet-Facility_tpWeightedFundingWithdrawalScheme),If((Facility_tpRepaymentChoice=1) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentLinear-Facility_tpLiquiditySpreadWithdrawalScheme)/(Facility_tpWeightedFundingRepaymentLinear-Facility_tpWeightedFundingWithdrawalScheme),If((Facility_tpRepaymentChoice=2) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentAnnuity-Facility_tpLiquiditySpreadWithdrawalScheme)/(Facility_tpWeightedFundingRepaymentAnnuity-Facility_tpWeightedFundingWithdrawalScheme),If((Facility_tpRepaymentChoice=3) and (Facility_tpWithdrawalChoice=3),(Facility_tpLiquiditySpreadRepaymentScheme-Facility_tpLiquiditySpreadWithdrawalScheme)/(Facility_tpWeightedFundingRepaymentScheme-Facility_tpWeightedFundingWithdrawalScheme),NA)))))))));
          fixed_decimals: 2;
          title: "Liquidity Spread (Bp) On Weighted Funding Amount";
         }
         variable Facility_tpRepaymentFrequencyLiqSpread
         {
          frequency: document;
          formula: If((Facility_tpWithdrawalChoice = 3),12,Facility_tpRepaymentFrequency);
          fixed_decimals: 2;
          title: "Repayment Frequency for liquidity spread calc";
         }
         variable Facility_tpConvertToMonths
         {
          frequency: document;
          formula: If((Facility_tpWithdrawalChoice = 3),12/Facility_tpRepaymentFrequency,1);
          fixed_decimals: 2;
          title: "Convert X to months for scheme withdrawal and repayment";
         }
         variable Facility_tpGracePeriodInPeriods
         {
          frequency: document;
          formula: RoundUp(Facility_tpGracePeriod/(12/Facility_tpRepaymentFrequency),0);
          fixed_decimals: 2;
          title: "Grace period expressed in periods (rounded up)";
         }
         variable Facility_tpWeightedFundingRepaymentBullet
         {
          frequency: document;
          formula: Facility_tpPrincipalLimit * Facility_tpOriginalTenor/12;
          fixed_decimals: 2;
          title: "Weighted Funding Repayment Bullet";
         }
         variable Facility_tpLiquiditySpreadRepaymentBullet
         {
          frequency: document;
          formula: Facility_tpPrincipalLimit * Facility_tpOriginalTenor/12*(MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpOriginalTenor,1),Facility_tpFixedInterestPeriod)+(MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",Facility_tpOriginalTenor,1),Facility_tpFixedInterestPeriod)-MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpOriginalTenor,1),Facility_tpFixedInterestPeriod))*OnER(((Facility_tpOriginalTenor-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpOriginalTenor,1))/(MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",Facility_tpOriginalTenor,1)-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",Facility_tpOriginalTenor,1))),0));
          fixed_decimals: 2;
          title: "Liquidity Spread Repayment Bullet";
         }
         variable Facility_tpWeightedFundingRepaymentLinear
         {
          frequency: document;
          formula: SumFor(X,1+Facility_tpGracePeriodInPeriods,Facility_tpNumberOfPeriodsNoGrace,1,Facility_tpLinear*(X*Facility_tpConvertToMonths/Facility_tpRepaymentFrequencyLiqSpread));
          fixed_decimals: 2;
          title: "Weighted Funding Repayment Linear";
         }
         variable Facility_tpLiquiditySpreadRepaymentLinear
         {
          frequency: document;
          formula: SumFor(X,1+Facility_tpGracePeriodInPeriods,Facility_tpNumberOfPeriodsNoGrace,1,Facility_tpLinear*(X*Facility_tpConvertToMonths/Facility_tpRepaymentFrequencyLiqSpread)*(MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",X*12/Facility_tpRepaymentFrequency,1),Facility_tpFixedInterestPeriod)+(MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",X*12/Facility_tpRepaymentFrequency,1),Facility_tpFixedInterestPeriod)-MatrixLookup("AAB_Parameters.xls" , If ( Facility_tpBaseCurrency="EUR","LiquidityPremiumEUR" , If ( Facility_tpBaseCurrency="GBP","LiquidityPremiumGBP" , If ( Facility_tpBaseCurrency="USD","LiquidityPremiumUSD","LiquidityPremiumOther"))) , MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",X*12/Facility_tpRepaymentFrequency,1),Facility_tpFixedInterestPeriod))*OnER(((X*12/Facility_tpRepaymentFrequency-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",X*12/Facility_tpRepaymentFrequency,1))/(MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorUpperBound",X*12/Facility_tpRepaymentFrequency,1)-MatrixLookup("AAB_Parameters.xls","LiquidityPremiumTenorLowerBound",X*12/Facility_tpRepaymentFrequency,1))),0)));
          fixed_decimals: 2;
          title: "Liquidity Spread Repayment Linear";
         }
         variable Facility_tpWeightedFundingRepaymentAnnuity
         {
          frequency: document;
          formula: SumFor(X,1+Facility_tpGracePeriodInPeriods,Facility_tpNumberOfPeriodsNoGrace,1,PPMT(Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency,(X-Facility_tpGracePeriodInPeriods),Facility_tpNumberOfPeriods,-Facility_tpPrincipalLimit,Facility_tpBalloon)*(X*Facility_tpConvertToMonths/Facility_tpRepaymentFrequencyLiqSpread));
          fixed_decimals: 2;
          title: "Weighted Funding Repayment Annuity";
         }
         variable Facility_tpLiquiditySpreadRepaymentAnnuity
         {
          frequency: document;
          formula: SumFor( X, 1+Facility_tpGracePeriodInPeriods ,Facility_tpNumberOfPeriodsNoGrace ,1 ,PPMT( Facility_tpAnnuityInterestRate/Facility_tpRepaymentFrequency, (X-Facility_tpGracePeriodInPeriods) ,Facility_tpNumberOfPeriods ,-Facility_tpPrincipalLimit,Facility_tpBalloon ) *(X*Facility_tpConvertToMonths/Facility_tpRepaymentFrequencyLiqSpread) *(MatrixLookup( "AAB_Parameters.xls" ,If(Facility_tpBaseCurrency="EUR" ,"LiquidityPremiumEUR" ,If( Facility_tpBaseCurrency="GBP" ,"LiquidityPremiumGBP", If( Facility_tpBaseCurrency="USD" ,"LiquidityPremiumUSD" ,"LiquidityPremiumOther") ) ) ,MatrixLookup( "AAB_Parameters.xls" ,"LiquidityPremiumTenorLowerBound" ,X*12/Facility_tpRepaymentFrequency ,1 ) ,Facility_tpFixedInterestPeriod )+ (MatrixLookup("AAB_Parameters.xls" ,If( Facility_tpBaseCurrency="EUR" ,"LiquidityPremiumEUR" ,If( Facility_tpBaseCurrency="GBP" ,"LiquidityPremiumGBP" ,If( Facility_tpBaseCurrency="USD" ,"LiquidityPremiumUSD" ,"LiquidityPremiumOther" ) ) ) ,MatrixLookup( "AAB_Parameters.xls" ,"LiquidityPremiumTenorUpperBound" ,X*12/Facility_tpRepaymentFrequency ,1 ),Facility_tpFixedInterestPeriod )-MatrixLookup( "AAB_Parameters.xls", If( Facility_tpBaseCurrency="EUR" ,"LiquidityPremiumEUR" ,If( Facility_tpBaseCurrency="GBP" ,"LiquidityPremiumGBP" ,If(Facility_tpBaseCurrency="USD" ,"LiquidityPremiumUSD" ,"LiquidityPremiumOther" ) ) ),MatrixLookup( "AAB_Parameters.xls" ,"LiquidityPremiumTenorLowerBound" ,X*12/Facility_tpRepaymentFrequency,1) ,Facility_tpFixedInterestPeriod ) )*OnER( ( (X*12/Facility_tpRepaymentFrequency-MatrixLookup( "AAB_Parameters.xls" ,"LiquidityPremiumTenorLowerBound" ,X*12/Facility_tpRepaymentFrequency ,1 ) )/(MatrixLookup( "AAB_Parameters.xls" ,"LiquidityPremiumTenorUpperBound" ,X*12/Facility_tpRepaymentFrequency ,1 )-MatrixLookup( "AAB_Parameters.xls" ,"LiquidityPremiumTenorLowerBound" ,X*12/Facility_tpRepaymentFrequency ,1 ) ) ) ,0 ) ) );
          fixed_decimals: 2;
          title: "Liquidity Spread Repayment Annuity";
         }
         variable Facility_tpWeightedFundingRepaymentScheme
         {
          frequency: document;
          formula: TupleSum(Facility_tpManual_tpWeightedFundingRepayment);
          fixed_decimals: 2;
          title: "Weighted Funding Repayment Scheme";
         }
         variable Facility_tpLiquiditySpreadRepaymentScheme
         {
          frequency: document;
          formula: TupleSum(Facility_tpManual_tpLiquiditySpreadRepayment);
          fixed_decimals: 2;
          title: "Liquidity Spread Repayment Scheme";
         }
         variable Facility_tpWeightedFundingWithdrawalScheme
         {
          frequency: document;
          formula: TupleSum(Facility_tpManual_tpWeightedFundingWithdrawal);
          fixed_decimals: 2;
          title: "Weighted Funding Withdrawal Scheme";
         }
         variable Facility_tpLiquiditySpreadWithdrawalScheme
         {
          frequency: document;
          formula: TupleSum(Facility_tpManual_tpLiquiditySpreadWithdrawal);
          fixed_decimals: 2;
          title: "Liquidity Spread Withdrawal Scheme";
         }
         variable Facility_tpLiquiditySpreadRevolvingCredit
         {
          frequency: document;
          formula: If(Facility_tpInterestRateIndexBasis=1,0,MatrixLookup("AAB_Parameters.xls","LiquidityPremiumRevolvingCredit" , Facility_tpProductinterestDetailsInterestProductName,If ( Facility_tpBaseCurrency="EUR",1,If ( Facility_tpBaseCurrency="GBP",2,If ( Facility_tpBaseCurrency="USD",3,4)))));
          fixed_decimals: 2;
          title: "Liquidity Spread Withdrawal Scheme";
         }
        }
        variable Facility_tpPrepaymentCosts
        {
         frequency: document;
         formula: ((Facility_tpPrepaymentPremium*Facility_tpPrepaymentPrec*Facility_tpPrincipalLimit)/10000)*Facility_tpDeannualize;
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Prepayment Costs";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         variable Facility_tpPrepaymentPremium
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,1);
          fixed_decimals: 3;
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Prepayment Premium (Bps)";
         }
        }
        variable Facility_tpPipelineRisk
        {
         frequency: document;
         formula: ((Facility_tpOfferOptionPremium*Facility_tpPrincipalLimit)/10000)*Facility_tpDeannualize;
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Pipeline Risk";
         hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
         variable Facility_tpOfferOptionPremium
         {
          frequency: document;
          formula: If((Facility_tpPipelineRiskUpperM-Facility_tpPipelineRiskLowerM)=0,Facility_tpPipelineRiskLowerPremium,Facility_tpPipelineRiskLowerPremium +((Facility_tpPipelineRiskUpperPremium-Facility_tpPipelineRiskLowerPremium)*((Facility_tpRemainingAverageTenor-Facility_tpPipelineRiskLowerM)/(Facility_tpPipelineRiskUpperM-Facility_tpPipelineRiskLowerM))));
          fixed_decimals: 6;
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Offer Option Premium (Bps)";
         }
         variable Facility_tpPipelineRiskLowerM
         {
          frequency: document;
          formula: Case(Facility_tpRemainingAverageTenor,[1:0|2:1|3:2|5:3|10:5|50:10|50]);
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Lower M";
         }
         variable Facility_tpPipelineRiskUpperM
         {
          frequency: document;
          formula: Case(Facility_tpRemainingAverageTenor,[1:1|2:2|3:3|5:5|10:10|50:50|50]);
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Upper M";
         }
         variable Facility_tpPipelineRiskLowerPremium
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OfferOptionPremium" , Facility_tpOfferPeriod&"_"&Str(Facility_tpPipelineRiskLowerM,0,0),5);
          fixed_decimals: 6;
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Lower Premium (Bps)";
         }
         variable Facility_tpPipelineRiskUpperPremium
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OfferOptionPremium" , Facility_tpOfferPeriod&"_"&Str(Facility_tpPipelineRiskUpperM,0,0),5);
          fixed_decimals: 6;
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Upper Premium (Bps)";
         }
         variable Facility_tpPipelineRiskUpperPremiumID
         {
          datatype: string;
          frequency: document;
          formula: String(Facility_tpOfferPeriod&"_"&Str(Facility_tpPipelineRiskUpperM,0,0));
          title: "Risk Adjusted Return - Interest Expenses - Funds Transfer Pricing - Upper Premium ID";
         }
        }
       }
       variable Facility_tpIndirectLiquidityCosts
       {
        frequency: document;
        formula: (Facility_tpIndirectLiquidityCostsFI+Facility_tpIndirectLiquidityCostsComRe+Facility_tpIndirectLiquidityCostsUncomRe+Facility_tpIndirectLiquidityCostsComCom+Facility_tpIndirectLiquidityCostsUncomCom+Facility_tpIndirectLiquidityCostsNotRe+Facility_tpIndirectLiquidityCostsCom31dt+Facility_tpIndirectLiquidityCostsUncom31dt)*Facility_tpDeannualize;
        displaytype: currency;
        title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        variable Facility_tpIndirectLiquidityCostsGeneral
        {
         datatype: none;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs - General";
         locked: 1;
         variable Facility_tpBufferCostPerYearBP
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","BUFFERCOSTPERJAARBP",2);
          fixed_decimals: 0;
          title: "Risk Adjusted Return - Interest Expenses - Buffer Cost Per Year BP";
         }
         variable Facility_tpFI
         {
          frequency: document;
          formula: If(Borrower_tpAGICOrSBI=0,MatrixLookup("AAB_Parameters.xls","AGICMapping","@"&Borrower_tpAGIC,3),MatrixLookup("AAB_Parameters.xls","SBIMapping","@"&Borrower_tpSBI,3));
          title: "Risk Adjusted Return - Interest Expenses - Financial Institution";
          choices: "1:Yes|0:No";
         }
         variable Facility_tpRedrawable
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,5);
          title: "Risk Adjusted Return - Interest Expenses - Can be redrawn";
          choices: "1:Yes|0:No";
         }
         variable Facility_tp31DgDebet2
         {
          frequency: document;
          formula: Facility_tp31DgDebet;
          title: "Risk Adjusted Return - Interest Expenses - 31dg Debet";
          choices: "1:Yes|0:No";
         }
         variable Facility_tpCombined
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,2);
          title: "Risk Adjusted Return - Interest Expenses - Combined";
          choices: "1:Yes|0:No";
         }
         variable Facility_tpUncommitted
         {
          frequency: document;
          formula: Facility_tpUncommitted2;
          title: "Risk Adjusted Return - Interest Expenses - Uncommitted";
          choices: "1:Yes|0:No";
         }
         variable Facility_tpCreditOrLiquidity
         {
          datatype: string;
          frequency: document;
          formula: String(MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,3));
          title: "Risk Adjusted Return - Interest Expenses - Credit or liquidity facility";
         }
        }
        variable Facility_tpIndirectLiquidityCostsFI
        {
         frequency: document;
         formula: If(Facility_tpFI,(Facility_tpOriginalLimit-Facility_tpExpectedAverageOutstanding)*Facility_tpOutflowFI*(Facility_tpBufferCostPerYearBP/10000),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Financial Institution";
         locked: 1;
         variable Facility_tpOutflowFI
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercFinancialInstitutions" , Borrower_tpFinancialInstitution&"_"&Facility_tpCreditOrLiquidity,3);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow FI";
         }
        }
        variable Facility_tpIndirectLiquidityCostsComRe
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=1) and (Facility_tp31DgDebet=0) and (Facility_tpCombined=0) and (Facility_tpUncommitted=0),(Facility_tpOriginalLimit-Facility_tpExpectedAverageOutstanding)*Facility_tpOutflowCommittedRedraw*(Facility_tpBufferCostPerYearBP/10000),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Committed + re-drawn";
         locked: 1;
         variable Facility_tpOutflowCommittedRedraw
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercCommitted" , Borrower_tpClientGroup,2);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Committed and Redrawable";
         }
        }
        variable Facility_tpIndirectLiquidityCostsUncomRe
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=1) and (Facility_tp31DgDebet=0) and (Facility_tpCombined=0) and (Facility_tpUncommitted=1),(Facility_tpOriginalLimit-Facility_tpExpectedAverageOutstanding)*Facility_tpOutflowUncommittedRedraw*(Facility_tpBufferCostPerYearBP/10000),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Uncomitted + re-drawn";
         locked: 1;
         variable Facility_tpOutflowUncommittedRedraw
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercUncommitted" , Borrower_tpClientGroup,1);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Uncommitted and Redrawable";
         }
        }
        variable Facility_tpIndirectLiquidityCostsCom31dt
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=0) and (Facility_tp31DgDebet=1) and (Facility_tpCombined=0) and (Facility_tpUncommitted=0),(Facility_tpOriginalLimit-Facility_tpExpectedAverageOutstanding)*Facility_tpOutflowCommitted31Dgn*(Facility_tpBufferCostPerYearBP/10000),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Committed +31dt";
         locked: 1;
         variable Facility_tpOutflowCommitted31Dgn
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercCommitted" , Borrower_tpClientGroup,4);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Committed and 31 Dgn";
         }
        }
        variable Facility_tpIndirectLiquidityCostsUncom31dt
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=0) and (Facility_tp31DgDebet=1) and (Facility_tpCombined=0) and (Facility_tpUncommitted=1),(Facility_tpOriginalLimit-Facility_tpExpectedAverageOutstanding)*Facility_tpOutflowUncommitted31Dgn*(Facility_tpBufferCostPerYearBP/10000),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Uncomitted + 31 dt";
         locked: 1;
         variable Facility_tpOutflowUncommitted31Dgn
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercUncommitted" , Borrower_tpClientGroup,3);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Uncommitted and 31 Dgn";
         }
        }
        variable Facility_tpIndirectLiquidityCostsComCom
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=0) and (Facility_tp31DgDebet=0) and (Facility_tpCombined=1) and (Facility_tpUncommitted=0),(Facility_tpOriginalLimit-Facility_tpExpectedAverageOutstanding)*Facility_tpOutflowCommittedCombined*(Facility_tpBufferCostPerYearBP/10000),NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Committed + combined";
         locked: 1;
         variable Facility_tpOutflowCommittedCombined
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercCommitted" , Borrower_tpClientGroup,3);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Committed and Combined Product";
         }
        }
        variable Facility_tpIndirectLiquidityCostsUncomCom
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=0) and (Facility_tp31DgDebet=0) and (Facility_tpCombined=1) and (Facility_tpUncommitted=1),Facility_tpTermLoanYearlyIndirectLiqCosts,NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Uncomitted + combined";
         locked: 1;
         variable Facility_tpOutflowUncommittedCombined
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercUncommitted" , Borrower_tpClientGroup,2);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Uncommitted and Combined";
         }
        }
        variable Facility_tpIndirectLiquidityCostsNotRe
        {
         frequency: document;
         formula: If((Facility_tpFI=0) and (Facility_tpRedrawable=0) and (Facility_tp31DgDebet=0) and (Facility_tpCombined=0),Facility_tpTermLoanYearlyIndirectLiqCosts,NA);
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs- Not redrawable";
         locked: 1;
         variable Facility_tpOutflowCommittedNotRedraw
         {
          frequency: document;
          formula: MatrixLookup("AAB_Parameters.xls","OutflowPercCommitted" , Borrower_tpClientGroup,1);
          displaytype: percentage;
          fixed_decimals: 2;
          title: "Risk Adjusted Return - Interest Expenses - Outflow Percentage Committed and Nonredrawable";
         }
        }
        variable Facility_tpIndirectLiquidityCostsExtended
        {
         frequency: document;
         displaytype: currency;
         title: "Risk Adjusted Return - Interest Expenses - Indirect Liquidity Costs - Uitgebreide calc";
         locked: 1;
         variable Facility_tpAbsoluteBufferCosts
         {
          frequency: document;
          formula: (Facility_tpOriginalLimit*(If((Facility_tpFI=0) and (Facility_tpRedrawable=0) and (Facility_tp31DgDebet=0) and (Facility_tpCombined=1) and (Facility_tpUncommitted=1),Facility_tpOutflowUncommittedCombined,Facility_tpOutflowCommittedNotRedraw))*(Facility_tpBufferCostPerYearBP/10000))/12;
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Absolute Buffer Cost (?)";
         }
         variable Facility_tpYearlyIndirectLiqCosts
         {
          frequency: document;
          formula: Round(If ( Facility_tpProductredemptionDetailsRedemptionType="InterestOnly",Facility_tpYearlyIndirectLiqCostsBullet,If( ( Facility_tpProductredemptionDetailsRedemptionType="Linear") or ( Facility_tpProductredemptionDetailsRedemptionType="Annuity"),Facility_tpYearlyIndirectLiqCostsLinearAnnuity,If ( Facility_tpProductredemptionDetailsRedemptionType="IrregularRepaymentSchedule",Facility_tpYearlyIndirectLiqCostsScheme,NA))),0);
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Yearly Indirect Liq. Costs (Bps)";
         }
         variable Facility_tpYearlyIndirectLiqCostsBullet
         {
          frequency: document;
          formula: If ( Facility_tpProductredemptionDetailsRedemptionType="InterestOnly",((Facility_tpAbsoluteBufferCosts/Facility_tpOriginalTenorYears)/Facility_tpOriginalLimit)*10000,NA);
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Yearly Indirect Liq. Costs (Bps) Bullet";
         }
         variable Facility_tpYearlyIndirectLiqCostsLinearAnnuity
         {
          frequency: document;
          formula: If( ( Facility_tpProductredemptionDetailsRedemptionType="Linear") or ( Facility_tpProductredemptionDetailsRedemptionType="Annuity"),(Facility_tpAbsoluteBufferCosts*10000)/((((Facility_tpOriginalTenor)*Facility_tpOriginalLimit)/12)-((0.5*((Facility_tpOriginalTenor-Facility_tpGracePeriod)/12)*(Facility_tpOriginalLimit-Facility_tpBalloon)))),NA);
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Yearly Indirect Liq. Costs (Bps) Lin/Annuity";
         }
         variable Facility_tpYearlyIndirectLiqCostsScheme
         {
          frequency: document;
          formula: If ( Facility_tpProductredemptionDetailsRedemptionType="IrregularRepaymentSchedule",(Facility_tpAbsoluteBufferCosts/Facility_tpWeightedLimitOutstanding)*10000,NA);
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Yearly Indirect Liq. Costs (Bps) Scheme";
         }
         variable Facility_tpTermLoanYearlyIndirectLiqCosts
         {
          frequency: document;
          formula: If(Facility_tpOriginalTenor>12,Facility_tpYearlyIndirectLiqCosts*0.0001*Facility_tpExpectedAverageOutstanding,Facility_tpYearlyIndirectLiqCosts*0.0001*Facility_tpExpectedAverageOutstanding*(Facility_tpOriginalTenor/12));
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Term Loan Yearly Indirect Liq. Costs (?)";
         }
         variable Facility_tpOriginalLimit
         {
          frequency: document;
          formula: Facility_tpPrincipalLimit;
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Original Limit (?)";
         }
         variable Facility_tpWeightedLimitOutstanding
         {
          frequency: document;
          formula: Facility_tpPrincipalLimit;
          displaytype: currency;
          title: "Risk Adjusted Return - Interest Expenses - Weighted Limited Outstanding";
         }
        }
       }
       variable Facility_tpSubordinatedDebtCapitalCharge
       {
        frequency: document;
        formula: OnER(Facility_tpRWA*Facility_tpSubDebtRatio*(Facility_tpCostOfSubordination/10000)*Facility_tpDeannualize,NA);
        displaytype: currency;
        title: "Risk Adjusted Return - Interest Expenses - Subordinated Debt Capital Charge";
        hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
        variable Facility_tpSubDebtRatio
        {
         frequency: document;
         formula: AgreementSubDebtRatio;
         displaytype: percentage;
         fixed_decimals: 1;
         title: "Risk Adjusted Return - Interest Expenses - Subordinated Debt Capital Charge - Subordinated Debt Ratio (%)";
        }
        variable Facility_tpCostOfSubordination
        {
         frequency: document;
         formula: AgreementCostOfSubordination;
         title: "Risk Adjusted Return - Interest Expenses - Subordinated Debt Capital Charge - Cost of Subordination (Bps)";
        }
       }
       variable Facility_tpEquityFundingAdjustment
       {
        frequency: document;
        formula: OnER((Facility_tpRWA*Borrower_tpEquityRatio-AgreementAvailableAmountOfEquity)*(Facility_tpEquityFundingAdjustmentRate/10000),NA);
        displaytype: currency;
        title: "Risk Adjusted Return - Interest Expenses - Equity Funding Adjustment";
        variable Facility_tpEquityFundingAdjustmentRate
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","3MAANDSEURIBORBP",2)+Facility_tpLiquiditySpreadBps;
         title: "Risk Adjusted Return - Interest Expenses - Equity Funding Adjustment - Adjustment Rate";
         variable Facility_tpInterestRateIndexBasis
         {
          frequency: document;
          formula: OnEr(MatrixLookup("AAB_Parameters.xls","CustomerSpreadAddMargin" , Facility_tpProductinterestDetailsInterestProductName,2),NA);
          title: "Risk Adjusted Return - Interest Expenses - Equity Funding Adjustment - Interest Rate Index Basis";
          choices: "1:Yes|0:No";
         }
        }
       }
      }
      variable Facility_tpEquityCapitalCharge
      {
       frequency: document;
       formula: OnER(Facility_tpRequiredAmountofEquity*Borrower_tpCostofEquity*Facility_tpDeannualize,NA);
       displaytype: currency;
       title: "Regulatory Profit - Equity Capital Charge";
       hint: "The outcome will be multiplied by the fraction of the remaining average tenor when < 1 year";
       variable Facility_tpRequiredAmountofEquity
       {
        frequency: document;
        formula: OnER(Facility_tpRWA*Borrower_tpEquityRatio,NA);
        displaytype: currency;
        title: "Regulatory Profit - Equity Capital Charge - Required Amount of Equity";
       }
      }
     }
     variable Facility_tpRWA
     {
      frequency: document;
      formula: OnER(Facility_tpRWACreditRisk+Facility_tpRWAOperationalRisk,NA);
      displaytype: currency;
      title: "Risk Weighted Assets";
      variable Facility_tpRWACreditRisk
      {
       frequency: document;
       formula: OnER(Facility_tpRWACreditRiskGuaranteed+Facility_tpRWACreditRiskUnguaranteed,NA);
       displaytype: currency;
       title: "Risk Weighted Assets - Credit Risk";
       variable Facility_tpRWACreditRiskUnguaranteed
       {
        frequency: document;
        formula: Facility_tpRW*Facility_tpEADUnguaranteed;
        displaytype: currency;
        title: "Risk Weighted Assets - Credit Risk - Standard/Ungaranteed";
        variable Facility_tpMaxMaturityRWA
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","MAX_MATURITY_RWA",2);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Max Maturity RWA";
        }
        variable Facility_tpMinMaturityRWA
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","CalculationParameters","MIN_MATURITY_RWA",2);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Min Maturity RWA";
        }
        variable Facility_tpShortTermException
        {
         frequency: document;
         formula: MatrixLookup("AAB_Parameters.xls","ProductType" , Facility_tpType,7);
         title: "Risk Weighted Assets - Short Term Exception";
         choices: "1:Yes|0:No";
        }
        variable Facility_tpR
        {
         frequency: document;
         formula: If((Facility_tpFI=0),Facility_tpR2,If((Facility_tpFI=1) and (Borrower_tpAssetSize<=70000) and (Borrower_tpUnderSupervision=1),Facility_tpR2,Facility_tpR1));
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Correlation Factor (R)";
         variable Facility_tpR1
         {
          frequency: document;
          formula: (((0.12*(1-Exp(-50*Facility_tpBorrower_tpPDMoC)))/(1-Exp(-50)))+(0.24*((1-(1-Exp(-50*Facility_tpBorrower_tpPDMoC)))/(1-Exp(-50)))))*1.25;
          fixed_decimals: 2;
          title: "Risk Weighted Assets - Correlation Factor (R1)";
         }
         variable Facility_tpR2
         {
          frequency: document;
          formula: ((0.12*(1-Exp(-50*Facility_tpBorrower_tpPDMoC)))/(1-Exp(-50)))+(0.24*(((1-(1-Exp(-50*Facility_tpBorrower_tpPDMoC))))/(1-Exp(-50))))-0.04*(1-(((MAX(5,(MIN(50,Borrower_tpAssetSize)))-5)/45)));
          fixed_decimals: 2;
          title: "Risk Weighted Assets - Correlation Factor (R2)";
         }
        }
        variable Facility_tpb
        {
         frequency: document;
         formula: OnER((0.11852-0.05478*LN(Facility_tpBorrower_tpPDMoC))^2,NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Maturity Adjustment Factor (b)";
        }
        variable Facility_tpMWRA
        {
         frequency: document;
         formula: OnER(IF(Facility_tpShortTermException,Max(Min(Facility_tpMaxMaturityRWA,Facility_tpRemainingAverageTenor),1/365),Max(Min(Facility_tpMaxMaturityRWA,Facility_tpRemainingAverageTenor),Facility_tpMinMaturityRWA)),NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - MWRA Factor";
        }
        variable Facility_tpK
        {
         frequency: document;
         formula: OnER((Facility_tpDLGDMoC*CumNormal(((1-Facility_tpR)^(-0.5))*InvNormal(Facility_tpBorrower_tpPDMoC)+(((Facility_tpR/(1-Facility_tpR))^(0.5))*InvNormal(0.999)))-Facility_tpBorrower_tpPDMoC*Facility_tpDLGDMoC)*((1-1.5*Facility_tpb)^(-1))*(1+(Facility_tpMWRA-2.5)*Facility_tpb),NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Capital Requirement (K)";
        }
        variable Facility_tpRW
        {
         frequency: document;
         formula: OnER(Facility_tpK*12.5*1.06,NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Risk Weight Factor (RW)";
        }
       }
       variable Facility_tpRWACreditRiskGuaranteed
       {
        frequency: document;
        formula: Facility_tpRWGuaranteed*Facility_tpEADGuaranteed;
        displaytype: currency;
        title: "Risk Weighted Assets - Credit Risk - Guarantees";
        variable Facility_tpPDMoCGuaranteed
        {
         frequency: document;
         formula: If((Facility_tpGuarantorPercentageGuaranteed>0) and (Facility_tpGuarantorPDMoC < Facility_tpBorrower_tpPDMoC),Facility_tpGuarantorPDMoC,Facility_tpBorrower_tpPDMoC);
         displaytype: percentage;
         fixed_decimals: 4;
         title: "Risk Weighted Assets - PD Moc Min";
        }
        variable Facility_tpDLGDMoCGuaranteed
        {
         frequency: document;
         formula: Facility_tpDLGDMoC;
         displaytype: percentage;
         fixed_decimals: 2;
         title: "Risk Weighted Assets - D LGD MoC Min";
        }
        variable Facility_tpRGuaranteed
        {
         frequency: document;
         formula: If((Borrower_tpFinancialInstitutionChoice=0),Facility_tpR2Guaranteed,If((Facility_tpFI=1) and (Borrower_tpAssetSize<=70000) and (Borrower_tpUnderSupervision=1),Facility_tpR2Guaranteed,Facility_tpR1Guaranteed));
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Correlation Factor (R)";
         variable Facility_tpR1Guaranteed
         {
          frequency: document;
          formula: (((0.12*(1-Exp(-50*Facility_tpPDMoCGuaranteed)))/(1-Exp(-50)))+(0.24*((1-(1-Exp(-50*Facility_tpPDMoCGuaranteed)))/(1-Exp(-50)))))*1.25;
          fixed_decimals: 2;
          title: "Risk Weighted Assets - Correlation Factor (R1)";
         }
         variable Facility_tpR2Guaranteed
         {
          frequency: document;
          formula: ((0.12*(1-Exp(-50*Facility_tpPDMoCGuaranteed)))/(1-Exp(-50)))+(0.24*(((1-(1-Exp(-50*Facility_tpPDMoCGuaranteed))))/(1-Exp(-50))))-0.04*(1-(((MAX(5,(MIN(50,Borrower_tpAssetSize)))-5)/45)));
          fixed_decimals: 2;
          title: "Risk Weighted Assets - Correlation Factor (R2)";
         }
        }
        variable Facility_tpbGuaranteed
        {
         frequency: document;
         formula: OnER((0.11852-0.05478*LN(Facility_tpPDMoCGuaranteed))^2,NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Maturity Adjustment Factor (b)";
        }
        variable Facility_tpMWRAGuaranteed
        {
         frequency: document;
         formula: OnER(IF(Facility_tpShortTermException,Max(Min(Facility_tpMaxMaturityRWA,Facility_tpRemainingAverageTenor),1/365),Max(Min(Facility_tpMaxMaturityRWA,Facility_tpRemainingAverageTenor),Facility_tpMinMaturityRWA)),NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - MWRA Factor";
        }
        variable Facility_tpKGuaranteed
        {
         frequency: document;
         formula: OnER((Facility_tpDLGDMoCGuaranteed*CumNormal(((1-Facility_tpRGuaranteed)^(-0.5))*InvNormal(Facility_tpPDMoCGuaranteed)+(((Facility_tpRGuaranteed/(1-Facility_tpRGuaranteed))^(0.5))*InvNormal(0.999)))-Facility_tpPDMoCGuaranteed*Facility_tpDLGDMoCGuaranteed)*((1-1.5*Facility_tpbGuaranteed)^(-1))*(1+(Facility_tpMWRAGuaranteed-2.5)*Facility_tpbGuaranteed),NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Capital Requirement (K)";
        }
        variable Facility_tpRWGuaranteed
        {
         frequency: document;
         formula: OnER(Facility_tpKGuaranteed*12.5*1.06,NA);
         fixed_decimals: 2;
         title: "Risk Weighted Assets - Risk Weight Factor (RW)";
        }
       }
      }
      variable Facility_tpRWAOperationalRisk
      {
       frequency: document;
       formula: (Facility_tpRWAOpR*(Facility_tpCreditIncome-Facility_tpDirectLiquidityPremium));
       displaytype: currency;
       title: "Risk Weighted Assets - Operational Risk";
       variable Facility_tpRWAOpR
       {
        frequency: document;
        formula: MatrixLookup("AAB_Parameters.xls","ClientGroup" , Borrower_tpClientGroup,7);
        displaytype: percentage;
        fixed_decimals: 3;
        title: "Risk Weighted Assets - RWA OpR (%)";
       }
      }
     }
     variable Facility_tpDataExportedToForce
     {
      frequency: document;
      displaytype: currency;
      title: "Exported Data";
      locked: 1;
      variable Facility_tpDataExportedToForceSub1 refers to Facility_tpRaRoRaC
      {
       frequency: document;
       title: "RaRoRaC";
       locked: 1;
      }
      variable Facility_tpDataExportedToForceSub2 refers to Facility_tpReturnOnEquity
      {
       frequency: document;
       title: "Return on Equity";
       locked: 1;
      }
      variable Facility_tpDataExportedToForceSub3 refers to Facility_tpEconomicProfit
      {
       frequency: document;
       title: "Economic Profit";
       locked: 1;
      }
      variable Facility_tpDataExportedToForceSub4 refers to Facility_tpRegulatoryProfit
      {
       frequency: document;
       title: "Regulatory Profit";
       locked: 1;
      }
      variable Facility_tpRequiredCustomerSpread
      {
       frequency: document;
       formula: Facility_tpCustomerSpread / 10000;
       displaytype: currency;
       title: "Required Customer Spread";
       locked: 1;
      }
      variable Facility_tpRequiredMarketSpread
      {
       frequency: document;
       formula: MatrixLookup("AAB_Parameters.xls","MarketSpread" , Facility_tpProductinterestDetailsInterestProductName,Facility_tpTypeIndex);
       fixed_decimals: 4;
       title: "Required Market Spread";
       locked: 1;
       variable Facility_tpTypeIndex
       {
        frequency: document;
        formula: MatrixLookup("AAB_Parameters.xls","VertaaltabelProductType" , Facility_tpType,2);
        displaytype: currency;
        title: "Facility Type Index";
        locked: 1;
       }
      }
      variable Facility_tpRequiredLiquiditySpread
      {
       frequency: document;
       formula: Facility_tpLiquiditySpreadBps / 10000;
       displaytype: currency;
       title: "Required Liquidity Spread";
       locked: 1;
      }
     }
    }
    variable =FacilityTotal
    {
     frequency: document;
     formula: TupleSum(Facility_tpPrincipalLimit);
     fixed_decimals: 0;
     title: "Total";
     locked: 1;
    }
   }
   variable Other
   {
    frequency: document;
    displaytype: currency;
    title: "Other";
    locked: 1;
    variable VersionInfoText
    {
     datatype: string;
     frequency: document;
     formula: String(Q_MODELTYPE&" "&Q_MODELVERSION&" (Matrix "&Q_MATRIXVERSION&")");
     title: "Versions";
     locked: 1;
     variable WindowsUserName
     {
      datatype: string;
      frequency: document;
      formula: "Ronald van Aalderen";
      title: "Gemaakt door";
      locked: 1;
     }
     variable CurrentDate
     {
      frequency: document;
      formula: 42768.572977187;
      displaytype: date;
      title: "Generated at";
      locked: 1;
     }
     variable FinanFullVersion
     {
      datatype: string;
      frequency: document;
      formula: "03.02.056.023";
      title: "Gemaakt XML-applicatie version";
      locked: 1;
     }
    }
   }
   variable Q_MAP01_HULPVARIABELEN
   {
    frequency: document;
    displaytype: currency;
    title: "Hulpvariabelen";
    locked: 1;
    visible: 0;
    variable Q_MAP01_REQUIREDVARS
    {
     frequency: document;
     displaytype: currency;
     title: "Aantal verplichte velden (1)";
     locked: 1;
    }
    variable Q_MAP01_ENTEREDREQUIREDVARS
    {
     frequency: document;
     displaytype: currency;
     title: "Aantal ingevulde verplichte velden (1)";
     locked: 1;
    }
    variable Q_MAP01_SUMFOR
    {
     frequency: document;
     formula: SumFor(X,1,12,1,PPMT(1.0,X,24.0,-100000.0,0.0));
     displaytype: currency;
     title: "test variable for SumFor";
     locked: 1;
    }
   }
  }
  variable Q_RESULT
  {
   datatype: string;
   frequency: document;
   title: "Results";
   locked: 1;
   variable Q_RESULTSUB1 refers to Q_RESULT
   {
    datatype: string;
    frequency: document;
    title: "Results";
    locked: 1;
   }
  }
  variable Q_ROLE
  {
   frequency: document;
   formula: 0;
   title: "Role";
   choices: "0:Tester|2:RM|3:FB";
  }
  variable Q_STATUS
  {
   frequency: document;
   formula: 0;
   title: "Status";
   choices: "0:Open|1:Final";
  }
  variable Q_STATUS_FINAL_ON
  {
   frequency: document;
   displaytype: date;
   title: "Made final on:";
  }
  variable Q_STATUS_FINAL_BY
  {
   datatype: string;
   frequency: document;
   title: "Made final by (username):";
  }
  variable Q_STATUS_FINAL_BY_NAME
  {
   datatype: string;
   frequency: document;
   title: "Made final by (fullname):";
  }
  variable Q_STATUS_STARTED_ON
  {
   frequency: document;
   displaytype: date;
   title: "Created on:";
  }
  variable Q_STATUS_STARTED_BY
  {
   datatype: string;
   frequency: document;
   title: "Created by (username):";
  }
  variable Q_STATUS_STARTED_BY_NAME
  {
   datatype: string;
   frequency: document;
   title: "Created by (fullname):";
  }
  variable Q_STATUS_MODIFIED_ON
  {
   frequency: document;
   formula: Now;
   displaytype: date;
   title: "Last modification:";
  }
  variable Q_MODELVERSION
  {
   datatype: string;
   frequency: document;
   formula: "01.34.002.000";
   title: "Model version";
   locked: 1;
  }
  variable Q_MODELTYPE
  {
   datatype: string;
   frequency: document;
   formula: "AABPRICING";
   title: "Model type";
   locked: 1;
  }
  variable Q_MATRIXVERSION
  {
   datatype: string;
   frequency: document;
   formula: String(MatrixLookup("AAB_Parameters.xls","Version",1,3));
   title: "Matrix version";
   locked: 1;
  }
  variable Q_PREVIOUS_BUTTON_VISIBLE
  {
   frequency: document;
   formula: 2;
   title: "Previous";
   choices: "0:Nooit|2:Altijd";
  }
  variable Q_NEXT_BUTTON_VISIBLE
  {
   frequency: document;
   formula: 2;
   title: "Next";
   choices: "0:Nooit|1:Alleen wanneer stap volledig is|2:Altijd";
  }
  variable Q_CONCEPT_REPORT_VISIBLE
  {
   frequency: document;
   formula: 1;
   title: "Draft report";
   choices: "0:Nee|1:Ja";
  }
  variable Q_FINAL_REPORT_VISIBLE
  {
   frequency: document;
   formula: 0;
   title: "Final report";
   choices: "0:Nee|1:Ja";
  }
  variable Q_MAKE_FINAL_VISIBLE
  {
   frequency: document;
   formula: 0;
   title: "Make it final";
   choices: "0:Nee|1:Ja";
  }
 }
 variable Hulpvariabelen
 {
  datatype: none;
  title: "Overige berekeningen";
  locked: 1;
  visible: 0;
  variable Q_WARNING_GLOBAL
  {
   datatype: string;
   frequency: document;
   formula: String(If(Length ( scKnockoutsCombi[1])>0 , "\r\nEr zijn knockouts van toepassing:"&scKnockoutsCombi,""));
   title: "Knockout(s)?";
   locked: 1;
   variable scKnockoutsCombi
   {
    datatype: string;
    frequency: document;
    title: "Knockouts tekst";
    locked: 1;
   }
  }
  variable scRestricties
  {
   datatype: string;
   frequency: document;
   formula: String(If(Length ( scRestrictiesCombi[1])>0 , "\r\n\r\nDe volgende variabelen zijn niet correct gevuld:"&scRestrictiesCombi,""));
   title: "Restricties";
   locked: 1;
   variable scRestrictiesCombi
   {
    datatype: string;
    frequency: document;
    title: "Restricties tekst";
    locked: 1;
   }
  }
 }
 }
}