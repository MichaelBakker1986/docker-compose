(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Default AST templates
 * alternative ast-types
 * Should be excluded from front-end
 */
function STRING(text)
{
    return {
        "type": "Literal",
        "value": text
    }
}
function IDENTIFIER(text)
{
    return {
        "type": "Identifier",
        "name": text
    }
}
function fallBackToString(value)
{
    return (typeof value === 'object') ? value : STRING(value);
}
function fallBackToIdentifier(value)
{
    return (typeof value === 'object') ? value : IDENTIFIER(value);
}
function FUNCTION(name, args)
{
    return {
        "type": "CallExpression",
        "callee": fallBackToIdentifier(name),
        "arguments": args
    }
}
function EQUALS(left, right)
{
    return {
        "type": "BinaryExpression",
        "operator": "===",
        "left": fallBackToIdentifier(left),
        "right": fallBackToIdentifier(right)
    }
}
function IF(condition, consequent, alternative)
{
    return {
        "type": "ConditionalExpression",
        "test": condition,
        "consequent": fallBackToString(consequent),
        "alternate": fallBackToString(alternative)
    }
}
function PROPERTY(key, value)
{
    return {
        "type": "Property",
        "key": STRING(key),
        "computed": false,
        "value": fallBackToString(value),
        "kind": "init",
        "method": false,
        "shorthand": false
    }
}
//Helper, to clone AST tree's and replacing X for lamba expressions
function cloneAST(obj, replace, to)
{

    if (obj === null || typeof obj !== 'object')
    {
        return obj;
    }
    //i
    var temp = Array.isArray(obj) ? [] : {};//obj.constructor();// {}; // give temp the original obj's constructor
    for (var key in obj)
    {
        if (obj[key] === replace)
        {
            temp[key] = to;
        }
        else
        {
            var childClone = cloneAST(obj[key], replace, to);
            if ((typeof childClone !== 'function'))
            {
                temp[key] = childClone;
            }
        }
    }
    return temp;
}
var AST = {
    fallBackToIdentifier: fallBackToIdentifier,
    FUNCTION: FUNCTION,
    GTE: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": ">=",
            "left": left,
            "right": right
        };
    },
    GT: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": ">",
            "left": left,
            "right": right
        };
    },
    LT: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": "<",
            "left": left,
            "right": right
        };
    },
    TRUE: function ()
    {
        return IDENTIFIER(true);
    },
    FALSE: function ()
    {
        return IDENTIFIER(false);
    },
    LTE: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": "<=",
            "left": left,
            "right": right
        };
    },
    NONAN: function (identifier)
    {
        return {
            "type": "ConditionalExpression",
            "test": FUNCTION("isNaN", [IDENTIFIER(identifier)]),
            "consequent": STRING(0),
            "alternate": IDENTIFIER(identifier)
        };
    },
    ZEROONNAN: function (identifier)
    {
        return FUNCTION("ZeroOnNaN", [IDENTIFIER(identifier)]);
    },
    IDENTIFIER: IDENTIFIER,
    EQUALS: EQUALS,
    NOTEQUAL: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": "!==",
            "left": fallBackToIdentifier(left),
            "right": fallBackToIdentifier(right)
        }
    },
    ISNAN: function (ast)
    {
        return FUNCTION("isNaN", [ast]);
    },
    NOT: function (ast)
    {
        return {
            "type": "UnaryExpression",
            "operator": "!",
            "argument": ast,
            "prefix": true
        };
    },
    AND: function (left, right)
    {
        return {
            "type": "LogicalExpression",
            "operator": "&&",
            "left": left,
            "right": right
        };
    },
    PARSEFLOAT: function (value)
    {
        return FUNCTION("parseFloat", [fallBackToString(value)]);
    },
    OR: function (left, right)
    {
        return {
            "type": "LogicalExpression",
            "operator": "||",
            "left": left,
            "right": right
        }
    },
    EXPRESSION: function (ast)
    {
        return {
            "type": "ExpressionStatement",
            "expression": fallBackToIdentifier(ast)
        }
    },
    ADD: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": "+",
            "left": fallBackToString(left),
            "right": fallBackToString(right)
        };
    },
    MIN: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": "-",
            "left": fallBackToString(left),
            "right": fallBackToString(right)
        };
    },
    MULTIPLY: function (left, right)
    {
        return {
            "type": "BinaryExpression",
            "operator": "*",
            "left": fallBackToString(left),
            "right": fallBackToString(right)
        };
    },
    IF: IF,
    MEMBER: function (obj, property)
    {
        return {
            "type": "MemberExpression",
            "computed": false,
            "object": obj,
            "property": IDENTIFIER(property)
        };
    },
    STRING: function (test)
    {
        return STRING(test);
    },
    UNDEFINED: function ()
    {
        return IDENTIFIER("undefined");
    },
    PROPERTY: PROPERTY,
    CHOICE: function (key, value)
    {
        return {
            "type": "ObjectExpression",
            "properties": [
                PROPERTY("name", key),
                PROPERTY("value", value)
            ]
        };
    },
    ARRAY: function ()
    {
        return {
            "type": "ArrayExpression",
            "elements": []
        }
    },
    PROGRAM: function (body)
    {
        return {
            "type": "Program",
            "body": [body],
            "sourceType": "script"
        };
    },
    cloneAST: cloneAST
}
module.exports = AST;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/ast-node-utils\\AST.js","/ast-node-utils",undefined)
},{"_process":38,"buffer":36}],2:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
exports.ast = require('./AST')
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/ast-node-utils\\index.js","/ast-node-utils",undefined)
},{"./AST":1,"_process":38,"buffer":36}],3:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * bridge between formulajs and fesjs
 */
const logger = require('log6')
const formulaJs = require('formulajs')
const entries = {};
for (functionName in formulaJs) {
    //FFL parser uses this function to be a VARIABLE 1e-10
    if (functionName == 'NA') {
        continue;
    }
    if (global[functionName] !== undefined) {
        if (logger.DEBUG) logger.debug('global function already used : [' + functionName + ']')
        continue;
    }
    entries[functionName] = formulaJs[functionName]
}
exports.formulajs = {
    name: 'formulaJs',
    entries: entries
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/formulajs-connect\\formulajs.js","/formulajs-connect",undefined)
},{"_process":38,"buffer":36,"formulajs":4,"log6":35}],4:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory(require("numeric"), require("numeral"), require("jStat"));
	else if(typeof define === 'function' && define.amd)
		define(["numeric", "numeral", "jStat"], factory);
	else if(typeof exports === 'object')
		exports["formulajs"] = factory(require("numeric"), require("numeral"), require("jStat"));
	else
		root["formulajs"] = factory(root["numeric"], root["numeral"], root["jStat"]);
})(this, function(__WEBPACK_EXTERNAL_MODULE_3__, __WEBPACK_EXTERNAL_MODULE_8__, __WEBPACK_EXTERNAL_MODULE_9__) {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};

/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {

/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;

/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};

/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);

/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;

/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}


/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;

/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;

/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";

/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	var categories = [
	  __webpack_require__(1),
	  __webpack_require__(15),
	  __webpack_require__(12),
	  __webpack_require__(16),
	  __webpack_require__(2),
	  __webpack_require__(7),
	  __webpack_require__(14),
	  __webpack_require__(17),
	  __webpack_require__(11),
	  __webpack_require__(18),
	  __webpack_require__(6),
	  __webpack_require__(10)
	];

	for (var c in categories) {
	  var category = categories[c];
	  for (var f in category) {
	    exports[f] = exports[f] || category[f];
	  }
	}


/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	var mathTrig = __webpack_require__(2);
	var statistical = __webpack_require__(6);
	var engineering = __webpack_require__(12);
	var dateTime = __webpack_require__(14);

	function set(fn, root) {
	  if (root) {
	    for (var i in root) {
	      fn[i] = root[i];
	    }
	  }
	  return fn;
	}

	exports.BETADIST = statistical.BETA.DIST;
	exports.BETAINV = statistical.BETA.INV;
	exports.BINOMDIST = statistical.BINOM.DIST;
	exports.CEILING = exports.ISOCEILING = set(mathTrig.CEILING.MATH, mathTrig.CEILING);
	exports.CEILINGMATH = mathTrig.CEILING.MATH;
	exports.CEILINGPRECISE = mathTrig.CEILING.PRECISE;
	exports.CHIDIST = statistical.CHISQ.DIST;
	exports.CHIDISTRT = statistical.CHISQ.DIST.RT;
	exports.CHIINV = statistical.CHISQ.INV;
	exports.CHIINVRT = statistical.CHISQ.INV.RT;
	exports.CHITEST = statistical.CHISQ.TEST;
	exports.CONFIDENCE = set(statistical.CONFIDENCE.NORM, statistical.CONFIDENCE);
	exports.COVAR = statistical.COVARIANCE.P;
	exports.COVARIANCEP = statistical.COVARIANCE.P;
	exports.COVARIANCES = statistical.COVARIANCE.S;
	exports.CRITBINOM = statistical.BINOM.INV;
	exports.EXPONDIST = statistical.EXPON.DIST;
	exports.ERFCPRECISE = engineering.ERFC.PRECISE;
	exports.ERFPRECISE = engineering.ERF.PRECISE;
	exports.FDIST = statistical.F.DIST;
	exports.FDISTRT = statistical.F.DIST.RT;
	exports.FINVRT = statistical.F.INV.RT;
	exports.FINV = statistical.F.INV;
	exports.FLOOR = set(mathTrig.FLOOR.MATH, mathTrig.FLOOR);
	exports.FLOORMATH = mathTrig.FLOOR.MATH;
	exports.FLOORPRECISE = mathTrig.FLOOR.PRECISE;
	exports.FTEST = statistical.F.TEST;
	exports.GAMMADIST = statistical.GAMMA.DIST;
	exports.GAMMAINV = statistical.GAMMA.INV;
	exports.GAMMALNPRECISE = statistical.GAMMALN.PRECISE;
	exports.HYPGEOMDIST = statistical.HYPGEOM.DIST;
	exports.LOGINV = statistical.LOGNORM.INV;
	exports.LOGNORMINV = statistical.LOGNORM.INV;
	exports.LOGNORMDIST = statistical.LOGNORM.DIST;
	exports.MODE = set(statistical.MODE.SNGL, statistical.MODE);
	exports.MODEMULT = statistical.MODE.MULT;
	exports.MODESNGL = statistical.MODE.SNGL;
	exports.NEGBINOMDIST = statistical.NEGBINOM.DIST;
	exports.NETWORKDAYSINTL = dateTime.NETWORKDAYS.INTL;
	exports.NORMDIST = statistical.NORM.DIST;
	exports.NORMINV = statistical.NORM.INV;
	exports.NORMSDIST = statistical.NORM.S.DIST;
	exports.NORMSINV = statistical.NORM.S.INV;
	exports.PERCENTILE = set(statistical.PERCENTILE.EXC, statistical.PERCENTILE);
	exports.PERCENTILEEXC = statistical.PERCENTILE.EXC;
	exports.PERCENTILEINC = statistical.PERCENTILE.INC;
	exports.PERCENTRANK = set(statistical.PERCENTRANK.INC, statistical.PERCENTRANK);
	exports.PERCENTRANKEXC = statistical.PERCENTRANK.EXC;
	exports.PERCENTRANKINC = statistical.PERCENTRANK.INC;
	exports.POISSON = set(statistical.POISSON.DIST, statistical.POISSON);
	exports.POISSONDIST = statistical.POISSON.DIST;
	exports.QUARTILE = set(statistical.QUARTILE.INC, statistical.QUARTILE);
	exports.QUARTILEEXC = statistical.QUARTILE.EXC;
	exports.QUARTILEINC = statistical.QUARTILE.INC;
	exports.RANK = set(statistical.RANK.EQ, statistical.RANK);
	exports.RANKAVG = statistical.RANK.AVG;
	exports.RANKEQ = statistical.RANK.EQ;
	exports.SKEWP = statistical.SKEW.P;
	exports.STDEV = set(statistical.STDEV.S, statistical.STDEV);
	exports.STDEVP = statistical.STDEV.P;
	exports.STDEVS = statistical.STDEV.S;
	exports.TDIST = statistical.T.DIST;
	exports.TDISTRT = statistical.T.DIST.RT;
	exports.TINV = statistical.T.INV;
	exports.TTEST = statistical.T.TEST;
	exports.VAR = set(statistical.VAR.S, statistical.VAR);
	exports.VARP = statistical.VAR.P;
	exports.VARS = statistical.VAR.S;
	exports.WEIBULL = set(statistical.WEIBULL.DIST, statistical.WEIBULL);
	exports.WEIBULLDIST = statistical.WEIBULL.DIST;
	exports.WORKDAYINTL = dateTime.WORKDAY.INTL;
	exports.ZTEST = statistical.Z.TEST;


/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var numeric = __webpack_require__(3);
	var utils = __webpack_require__(4);
	var error = __webpack_require__(5);
	var statistical = __webpack_require__(6);
	var information = __webpack_require__(11);

	exports.ABS = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.abs(utils.parseNumber(number));
	};

	exports.ACOS = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.acos(number);
	};

	exports.ACOSH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.log(number + Math.sqrt(number * number - 1));
	};

	exports.ACOT = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.atan(1 / number);
	};

	exports.ACOTH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return 0.5 * Math.log((number + 1) / (number - 1));
	};

	//TODO: use options
	exports.AGGREGATE = function(function_num, options, ref1, ref2) {
	  function_num = utils.parseNumber(function_num);
	  options = utils.parseNumber(function_num);
	  if (utils.anyIsError(function_num, options)) {
	    return error.value;
	  }
	  switch (function_num) {
	    case 1:
	      return statistical.AVERAGE(ref1);
	    case 2:
	      return statistical.COUNT(ref1);
	    case 3:
	      return statistical.COUNTA(ref1);
	    case 4:
	      return statistical.MAX(ref1);
	    case 5:
	      return statistical.MIN(ref1);
	    case 6:
	      return exports.PRODUCT(ref1);
	    case 7:
	      return statistical.STDEV.S(ref1);
	    case 8:
	      return statistical.STDEV.P(ref1);
	    case 9:
	      return exports.SUM(ref1);
	    case 10:
	      return statistical.VAR.S(ref1);
	    case 11:
	      return statistical.VAR.P(ref1);
	    case 12:
	      return statistical.MEDIAN(ref1);
	    case 13:
	      return statistical.MODE.SNGL(ref1);
	    case 14:
	      return statistical.LARGE(ref1, ref2);
	    case 15:
	      return statistical.SMALL(ref1, ref2);
	    case 16:
	      return statistical.PERCENTILE.INC(ref1, ref2);
	    case 17:
	      return statistical.QUARTILE.INC(ref1, ref2);
	    case 18:
	      return statistical.PERCENTILE.EXC(ref1, ref2);
	    case 19:
	      return statistical.QUARTILE.EXC(ref1, ref2);
	  }
	};

	exports.ARABIC = function(text) {
	  // Credits: Rafa? Kukawski
	  if (!/^M*(?:D?C{0,3}|C[MD])(?:L?X{0,3}|X[CL])(?:V?I{0,3}|I[XV])$/.test(text)) {
	    return error.value;
	  }
	  var r = 0;
	  text.replace(/[MDLV]|C[MD]?|X[CL]?|I[XV]?/g, function(i) {
	    r += {
	      M: 1000,
	      CM: 900,
	      D: 500,
	      CD: 400,
	      C: 100,
	      XC: 90,
	      L: 50,
	      XL: 40,
	      X: 10,
	      IX: 9,
	      V: 5,
	      IV: 4,
	      I: 1
	    }[i];
	  });
	  return r;
	};

	exports.ASIN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.asin(number);
	};

	exports.ASINH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.log(number + Math.sqrt(number * number + 1));
	};

	exports.ATAN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.atan(number);
	};

	exports.ATAN2 = function(number_x, number_y) {
	  number_x = utils.parseNumber(number_x);
	  number_y = utils.parseNumber(number_y);
	  if (utils.anyIsError(number_x, number_y)) {
	    return error.value;
	  }
	  return Math.atan2(number_x, number_y);
	};

	exports.ATANH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.log((1 + number) / (1 - number)) / 2;
	};

	exports.BASE = function(number, radix, min_length) {
	  min_length = min_length || 0;

	  number = utils.parseNumber(number);
	  radix = utils.parseNumber(radix);
	  min_length = utils.parseNumber(min_length);
	  if (utils.anyIsError(number, radix, min_length)) {
	    return error.value;
	  }
	  min_length = (min_length === undefined) ? 0 : min_length;
	  var result = number.toString(radix);
	  return new Array(Math.max(min_length + 1 - result.length, 0)).join('0') + result;
	};

	exports.CEILING = function(number, significance, mode) {
	  significance = (significance === undefined) ? 1 : Math.abs(significance);
	  mode = mode || 0;

	  number = utils.parseNumber(number);
	  significance = utils.parseNumber(significance);
	  mode = utils.parseNumber(mode);
	  if (utils.anyIsError(number, significance, mode)) {
	    return error.value;
	  }
	  if (significance === 0) {
	    return 0;
	  }
	  var precision = -Math.floor(Math.log(significance) / Math.log(10));
	  if (number >= 0) {
	    return exports.ROUND(Math.ceil(number / significance) * significance, precision);
	  } else {
	    if (mode === 0) {
	      return -exports.ROUND(Math.floor(Math.abs(number) / significance) * significance, precision);
	    } else {
	      return -exports.ROUND(Math.ceil(Math.abs(number) / significance) * significance, precision);
	    }
	  }
	};

	exports.CEILING.MATH = exports.CEILING;

	exports.CEILING.PRECISE = exports.CEILING;

	exports.COMBIN = function(number, number_chosen) {
	  number = utils.parseNumber(number);
	  number_chosen = utils.parseNumber(number_chosen);
	  if (utils.anyIsError(number, number_chosen)) {
	    return error.value;
	  }
	  return exports.FACT(number) / (exports.FACT(number_chosen) * exports.FACT(number - number_chosen));
	};

	exports.COMBINA = function(number, number_chosen) {
	  number = utils.parseNumber(number);
	  number_chosen = utils.parseNumber(number_chosen);
	  if (utils.anyIsError(number, number_chosen)) {
	    return error.value;
	  }
	  return (number === 0 && number_chosen === 0) ? 1 : exports.COMBIN(number + number_chosen - 1, number - 1);
	};

	exports.COS = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.cos(number);
	};

	exports.COSH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return (Math.exp(number) + Math.exp(-number)) / 2;
	};

	exports.COT = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return 1 / Math.tan(number);
	};

	exports.COTH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  var e2 = Math.exp(2 * number);
	  return (e2 + 1) / (e2 - 1);
	};

	exports.CSC = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return 1 / Math.sin(number);
	};

	exports.CSCH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return 2 / (Math.exp(number) - Math.exp(-number));
	};

	exports.DECIMAL = function(number, radix) {
	  if (arguments.length < 1) {
	    return error.value;
	  }


	  return parseInt(number, radix);
	};

	exports.DEGREES = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return number * 180 / Math.PI;
	};

	exports.EVEN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return exports.CEILING(number, -2, -1);
	};

	exports.EXP = Math.exp;

	var MEMOIZED_FACT = [];
	exports.FACT = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  var n = Math.floor(number);
	  if (n === 0 || n === 1) {
	    return 1;
	  } else if (MEMOIZED_FACT[n] > 0) {
	    return MEMOIZED_FACT[n];
	  } else {
	    MEMOIZED_FACT[n] = exports.FACT(n - 1) * n;
	    return MEMOIZED_FACT[n];
	  }
	};

	exports.FACTDOUBLE = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  var n = Math.floor(number);
	  if (n <= 0) {
	    return 1;
	  } else {
	    return n * exports.FACTDOUBLE(n - 2);
	  }
	};

	exports.FLOOR = function(number, significance) {
	  number = utils.parseNumber(number);
	  significance = utils.parseNumber(significance);
	  if (utils.anyIsError(number, significance)) {
	    return error.value;
	  }
	  if (significance === 0) {
	    return 0;
	  }

	  if (!(number > 0 && significance > 0) && !(number < 0 && significance < 0)) {
	    return error.num;
	  }

	  significance = Math.abs(significance);
	  var precision = -Math.floor(Math.log(significance) / Math.log(10));
	  if (number >= 0) {
	    return exports.ROUND(Math.floor(number / significance) * significance, precision);
	  } else {
	    return -exports.ROUND(Math.ceil(Math.abs(number) / significance), precision);
	  }
	};

	//TODO: Verify
	exports.FLOOR.MATH = function(number, significance, mode) {
	  significance = (significance === undefined) ? 1 : significance;
	  mode = (mode === undefined) ? 0 : mode;

	  number = utils.parseNumber(number);
	  significance = utils.parseNumber(significance);
	  mode = utils.parseNumber(mode);
	  if (utils.anyIsError(number, significance, mode)) {
	    return error.value;
	  }
	  if (significance === 0) {
	    return 0;
	  }

	  significance = significance ? Math.abs(significance) : 1;
	  var precision = -Math.floor(Math.log(significance) / Math.log(10));
	  if (number >= 0) {
	    return exports.ROUND(Math.floor(number / significance) * significance, precision);
	  } else if (mode === 0 || mode === undefined) {
	    return -exports.ROUND(Math.ceil(Math.abs(number) / significance) * significance, precision);
	  }
	  return -exports.ROUND(Math.floor(Math.abs(number) / significance) * significance, precision);
	};

	// Deprecated
	exports.FLOOR.PRECISE = exports.FLOOR.MATH;

	// adapted http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
	exports.GCD = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var n = range.length;
	  var r0 = range[0];
	  var x = r0 < 0 ? -r0 : r0;
	  for (var i = 1; i < n; i++) {
	    var ri = range[i];
	    var y = ri < 0 ? -ri : ri;
	    while (x && y) {
	      if (x > y) {
	        x %= y;
	      } else {
	        y %= x;
	      }
	    }
	    x += y;
	  }
	  return x;
	};


	exports.INT = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.floor(number);
	};

	//TODO: verify
	exports.ISO = {
	  CEILING: exports.CEILING
	};

	exports.LCM = function() {
	  // Credits: Jonas Raoni Soares Silva
	  var o = utils.parseNumberArray(utils.flatten(arguments));
	  if (o instanceof Error) {
	    return o;
	  }
	  for (var i, j, n, d, r = 1;
	    (n = o.pop()) !== undefined;) {
	    while (n > 1) {
	      if (n % 2) {
	        for (i = 3, j = Math.floor(Math.sqrt(n)); i <= j && n % i; i += 2) {
	          //empty
	        }
	        d = (i <= j) ? i : n;
	      } else {
	        d = 2;
	      }
	      for (n /= d, r *= d, i = o.length; i;
	        (o[--i] % d) === 0 && (o[i] /= d) === 1 && o.splice(i, 1)) {
	        //empty
	      }
	    }
	  }
	  return r;
	};

	exports.LN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.log(number);
	};

	exports.LOG = function(number, base) {
	  number = utils.parseNumber(number);
	  base = utils.parseNumber(base);
	  if (utils.anyIsError(number, base)) {
	    return error.value;
	  }
	  base = (base === undefined) ? 10 : base;
	  return Math.log(number) / Math.log(base);
	};

	exports.LOG10 = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.log(number) / Math.log(10);
	};

	exports.MDETERM = function(matrix) {
	  matrix = utils.parseMatrix(matrix);
	  if (matrix instanceof Error) {
	    return matrix;
	  }
	  return numeric.det(matrix);
	};

	exports.MINVERSE = function(matrix) {
	  matrix = utils.parseMatrix(matrix);
	  if (matrix instanceof Error) {
	    return matrix;
	  }
	  return numeric.inv(matrix);
	};

	exports.MMULT = function(matrix1, matrix2) {
	  matrix1 = utils.parseMatrix(matrix1);
	  matrix2 = utils.parseMatrix(matrix2);
	  if (utils.anyIsError(matrix1, matrix2)) {
	    return error.value;
	  }
	  return numeric.dot(matrix1, matrix2);
	};

	exports.MOD = function(dividend, divisor) {
	  dividend = utils.parseNumber(dividend);
	  divisor = utils.parseNumber(divisor);
	  if (utils.anyIsError(dividend, divisor)) {
	    return error.value;
	  }
	  if (divisor === 0) {
	    return error.div0;
	  }
	  var modulus = Math.abs(dividend % divisor);
	  return (divisor > 0) ? modulus : -modulus;
	};

	  exports.MROUND = function(number, multiple) {
	  number = utils.parseNumber(number);
	  multiple = utils.parseNumber(multiple);
	  if (utils.anyIsError(number, multiple)) {
	    return error.value;
	  }
	  if (number * multiple < 0) {
	    return error.num;
	  }

	  return Math.round(number / multiple) * multiple;
	};

	exports.MULTINOMIAL = function() {
	  var args = utils.parseNumberArray(utils.flatten(arguments));
	  if (args instanceof Error) {
	    return args;
	  }
	  var sum = 0;
	  var divisor = 1;
	  for (var i = 0; i < args.length; i++) {
	    sum += args[i];
	    divisor *= exports.FACT(args[i]);
	  }
	  return exports.FACT(sum) / divisor;
	};

	exports.MUNIT = function(dimension) {
	  dimension = utils.parseNumber(dimension);
	  if (dimension instanceof Error) {
	    return dimension;
	  }
	  return numeric.identity(dimension);
	};

	exports.ODD = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  var temp = Math.ceil(Math.abs(number));
	  temp = (temp & 1) ? temp : temp + 1;
	  return (number > 0) ? temp : -temp;
	};

	exports.PI = function() {
	  return Math.PI;
	};

	exports.POWER = function(number, power) {
	  number = utils.parseNumber(number);
	  power = utils.parseNumber(power);
	  if (utils.anyIsError(number, power)) {
	    return error.value;
	  }
	  var result = Math.pow(number, power);
	  if (isNaN(result)) {
	    return error.num;
	  }

	  return result;
	};

	exports.PRODUCT = function() {
	  var args = utils.parseNumberArray(utils.flatten(arguments));
	  if (args instanceof Error) {
	    return args;
	  }
	  var result = 1;
	  for (var i = 0; i < args.length; i++) {
	    result *= args[i];
	  }
	  return result;
	};

	exports.QUOTIENT = function(numerator, denominator) {
	  numerator = utils.parseNumber(numerator);
	  denominator = utils.parseNumber(denominator);
	  if (utils.anyIsError(numerator, denominator)) {
	    return error.value;
	  }
	  return parseInt(numerator / denominator, 10);
	};

	exports.RADIANS = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return number * Math.PI / 180;
	};

	exports.RAND = function() {
	  return Math.random();
	};

	exports.RANDBETWEEN = function(bottom, top) {
	  bottom = utils.parseNumber(bottom);
	  top = utils.parseNumber(top);
	  if (utils.anyIsError(bottom, top)) {
	    return error.value;
	  }
	  // Creative Commons Attribution 3.0 License
	  // Copyright (c) 2012 eqcode
	  return bottom + Math.ceil((top - bottom + 1) * Math.random()) - 1;
	};

	// TODO
	exports.ROMAN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  // The MIT License
	  // Copyright (c) 2008 Steven Levithan
	  var digits = String(number).split('');
	  var key = ['', 'C', 'CC', 'CCC', 'CD', 'D', 'DC', 'DCC', 'DCCC', 'CM', '', 'X', 'XX', 'XXX', 'XL', 'L', 'LX', 'LXX', 'LXXX', 'XC', '', 'I', 'II', 'III', 'IV', 'V', 'VI', 'VII', 'VIII', 'IX'];
	  var roman = '';
	  var i = 3;
	  while (i--) {
	    roman = (key[+digits.pop() + (i * 10)] || '') + roman;
	  }
	  return new Array(+digits.join('') + 1).join('M') + roman;
	};

	exports.ROUND = function(number, digits) {
	  number = utils.parseNumber(number);
	  digits = utils.parseNumber(digits);
	  if (utils.anyIsError(number, digits)) {
	    return error.value;
	  }
	  return Math.round(number * Math.pow(10, digits)) / Math.pow(10, digits);
	};

	exports.ROUNDDOWN = function(number, digits) {
	  number = utils.parseNumber(number);
	  digits = utils.parseNumber(digits);
	  if (utils.anyIsError(number, digits)) {
	    return error.value;
	  }
	  var sign = (number > 0) ? 1 : -1;
	  return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
	};

	exports.ROUNDUP = function(number, digits) {
	  number = utils.parseNumber(number);
	  digits = utils.parseNumber(digits);
	  if (utils.anyIsError(number, digits)) {
	    return error.value;
	  }
	  var sign = (number > 0) ? 1 : -1;
	  return sign * (Math.ceil(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
	};

	exports.SEC = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return 1 / Math.cos(number);
	};

	exports.SECH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return 2 / (Math.exp(number) + Math.exp(-number));
	};

	exports.SERIESSUM = function(x, n, m, coefficients) {
	  x = utils.parseNumber(x);
	  n = utils.parseNumber(n);
	  m = utils.parseNumber(m);
	  coefficients = utils.parseNumberArray(coefficients);
	  if (utils.anyIsError(x, n, m, coefficients)) {
	    return error.value;
	  }
	  var result = coefficients[0] * Math.pow(x, n);
	  for (var i = 1; i < coefficients.length; i++) {
	    result += coefficients[i] * Math.pow(x, n + i * m);
	  }
	  return result;
	};

	exports.SIGN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  if (number < 0) {
	    return -1;
	  } else if (number === 0) {
	    return 0;
	  } else {
	    return 1;
	  }
	};

	exports.SIN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.sin(number);
	};

	  exports.SINH = function(number) {
	    number = utils.parseNumber(number);
	    if (number instanceof Error) {
	      return number;
	    }
	    return (Math.exp(number) - Math.exp(-number)) / 2;
	  };

	  exports.SQRT = function(number) {
	    number = utils.parseNumber(number);
	    if (number instanceof Error) {
	      return number;
	    }
	    if (number < 0) {
	      return error.num;
	    }
	    return Math.sqrt(number);
	  };

	  exports.SQRTPI = function(number) {
	    number = utils.parseNumber(number);
	    if (number instanceof Error) {
	      return number;
	    }
	    return Math.sqrt(number * Math.PI);
	  };

	exports.SUBTOTAL = function(function_code, ref1) {
	  function_code = utils.parseNumber(function_code);
	  if (function_code instanceof Error) {
	    return function_code;
	  }
	  switch (function_code) {
	    case 1:
	      return statistical.AVERAGE(ref1);
	    case 2:
	      return statistical.COUNT(ref1);
	    case 3:
	      return statistical.COUNTA(ref1);
	    case 4:
	      return statistical.MAX(ref1);
	    case 5:
	      return statistical.MIN(ref1);
	    case 6:
	      return exports.PRODUCT(ref1);
	    case 7:
	      return statistical.STDEV.S(ref1);
	    case 8:
	      return statistical.STDEV.P(ref1);
	    case 9:
	      return exports.SUM(ref1);
	    case 10:
	      return statistical.VAR.S(ref1);
	    case 11:
	      return statistical.VAR.P(ref1);
	      // no hidden values for us
	    case 101:
	      return statistical.AVERAGE(ref1);
	    case 102:
	      return statistical.COUNT(ref1);
	    case 103:
	      return statistical.COUNTA(ref1);
	    case 104:
	      return statistical.MAX(ref1);
	    case 105:
	      return statistical.MIN(ref1);
	    case 106:
	      return exports.PRODUCT(ref1);
	    case 107:
	      return statistical.STDEV.S(ref1);
	    case 108:
	      return statistical.STDEV.P(ref1);
	    case 109:
	      return exports.SUM(ref1);
	    case 110:
	      return statistical.VAR.S(ref1);
	    case 111:
	      return statistical.VAR.P(ref1);

	  }
	};

	exports.ADD = function (num1, num2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  num1 = utils.parseNumber(num1);
	  num2 = utils.parseNumber(num2);
	  if (utils.anyIsError(num1, num2)) {
	    return error.value;
	  }

	  return num1 + num2;
	};

	exports.MINUS = function (num1, num2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  num1 = utils.parseNumber(num1);
	  num2 = utils.parseNumber(num2);
	  if (utils.anyIsError(num1, num2)) {
	    return error.value;
	  }

	  return num1 - num2;
	};

	exports.DIVIDE = function (dividend, divisor) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  dividend = utils.parseNumber(dividend);
	  divisor = utils.parseNumber(divisor);
	  if (utils.anyIsError(dividend, divisor)) {
	    return error.value;
	  }

	  if (divisor === 0) {
	    return error.div0;
	  }

	  return dividend / divisor;
	};

	exports.MULTIPLY = function (factor1, factor2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  factor1 = utils.parseNumber(factor1);
	  factor2 = utils.parseNumber(factor2);
	  if (utils.anyIsError(factor1, factor2)) {
	    return error.value;
	  }

	  return factor1 * factor2;
	};

	exports.GTE = function (num1, num2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  num1 = utils.parseNumber(num1);
	  num2 = utils.parseNumber(num2);
	  if (utils.anyIsError(num1, num2)) {
	    return error.error;
	  }

	  return num1 >= num2;
	};

	exports.LT = function (num1, num2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  num1 = utils.parseNumber(num1);
	  num2 = utils.parseNumber(num2);
	  if (utils.anyIsError(num1, num2)) {
	    return error.error;
	  }

	  return num1 < num2;
	};


	exports.LTE = function (num1, num2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  num1 = utils.parseNumber(num1);
	  num2 = utils.parseNumber(num2);
	  if (utils.anyIsError(num1, num2)) {
	    return error.error;
	  }

	  return num1 <= num2;
	};

	exports.EQ = function (value1, value2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  return value1 === value2;
	};

	exports.NE = function (value1, value2) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  return value1 !== value2;
	};

	exports.POW = function (base, exponent) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  base = utils.parseNumber(base);
	  exponent = utils.parseNumber(exponent);
	  if (utils.anyIsError(base, exponent)) {
	    return error.error;
	  }

	  return exports.POWER(base, exponent);
	};

	exports.SUM = function() {
	  var result = 0;
	  var argsKeys = Object.keys(arguments);
	  for (var i = 0; i < argsKeys.length; ++i) {
	    var elt = arguments[argsKeys[i]];
	    if (typeof elt === 'number') {
	      result += elt;
	    } else if (typeof elt === 'string') {
	      var parsed = parseFloat(elt);
	      !isNaN(parsed) && (result += parsed);
	    } else if (Array.isArray(elt)) {
	      result += exports.SUM.apply(null, elt);
	    }
	  }
	  return result;
	};

	exports.SUMIF = function(range, criteria) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  if (range instanceof Error) {
	    return range;
	  }
	  var result = 0;
	  for (var i = 0; i < range.length; i++) {
	    result += (eval(range[i] + criteria)) ? range[i] : 0; // jshint ignore:line
	  }
	  return result;
	};

	exports.SUMIFS = function() {
	  var args = utils.argsToArray(arguments);
	  var range = utils.parseNumberArray(utils.flatten(args.shift()));
	  if (range instanceof Error) {
	    return range;
	  }
	  var criteria = args;

	  var n_range_elements = range.length;
	  var n_criterias = criteria.length;

	  var result = 0;
	  for (var i = 0; i < n_range_elements; i++) {
	    var el = range[i];
	    var condition = '';
	    for (var c = 0; c < n_criterias; c++) {
	      condition += el + criteria[c];
	      if (c !== n_criterias - 1) {
	        condition += '&&';
	      }
	    }
	    if (eval(condition)) { // jshint ignore:line
	      result += el;
	    }
	  }
	  return result;
	};

	exports.SUMPRODUCT = function() {
	  if (!arguments || arguments.length === 0) {
	    return error.value;
	  }
	  var arrays = arguments.length + 1;
	  var result = 0;
	  var product;
	  var k;
	  var _i;
	  var _ij;
	  for (var i = 0; i < arguments[0].length; i++) {
	    if (!(arguments[0][i] instanceof Array)) {
	      product = 1;
	      for (k = 1; k < arrays; k++) {
	        _i = utils.parseNumber(arguments[k - 1][i]);
	        if (_i instanceof Error) {
	          return _i;
	        }
	        product *= _i;
	      }
	      result += product;
	    } else {
	      for (var j = 0; j < arguments[0][i].length; j++) {
	        product = 1;
	        for (k = 1; k < arrays; k++) {
	          _ij = utils.parseNumber(arguments[k - 1][i][j]);
	          if (_ij instanceof Error) {
	            return _ij;
	          }
	          product *= _ij;
	        }
	        result += product;
	      }
	    }
	  }
	  return result;
	};

	exports.SUMSQ = function() {
	  var numbers = utils.parseNumberArray(utils.flatten(arguments));
	  if (numbers instanceof Error) {
	    return numbers;
	  }
	  var result = 0;
	  var length = numbers.length;
	  for (var i = 0; i < length; i++) {
	    result += (information.ISNUMBER(numbers[i])) ? numbers[i] * numbers[i] : 0;
	  }
	  return result;
	};

	exports.SUMX2MY2 = function(array_x, array_y) {
	  array_x = utils.parseNumberArray(utils.flatten(array_x));
	  array_y = utils.parseNumberArray(utils.flatten(array_y));
	  if (utils.anyIsError(array_x, array_y)) {
	    return error.value;
	  }
	  var result = 0;
	  for (var i = 0; i < array_x.length; i++) {
	    result += array_x[i] * array_x[i] - array_y[i] * array_y[i];
	  }
	  return result;
	};

	exports.SUMX2PY2 = function(array_x, array_y) {
	  array_x = utils.parseNumberArray(utils.flatten(array_x));
	  array_y = utils.parseNumberArray(utils.flatten(array_y));
	  if (utils.anyIsError(array_x, array_y)) {
	    return error.value;
	  }
	  var result = 0;
	  array_x = utils.parseNumberArray(utils.flatten(array_x));
	  array_y = utils.parseNumberArray(utils.flatten(array_y));
	  for (var i = 0; i < array_x.length; i++) {
	    result += array_x[i] * array_x[i] + array_y[i] * array_y[i];
	  }
	  return result;
	};

	exports.SUMXMY2 = function(array_x, array_y) {
	  array_x = utils.parseNumberArray(utils.flatten(array_x));
	  array_y = utils.parseNumberArray(utils.flatten(array_y));
	  if (utils.anyIsError(array_x, array_y)) {
	    return error.value;
	  }
	  var result = 0;
	  array_x = utils.flatten(array_x);
	  array_y = utils.flatten(array_y);
	  for (var i = 0; i < array_x.length; i++) {
	    result += Math.pow(array_x[i] - array_y[i], 2);
	  }
	  return result;
	};

	exports.TAN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return Math.tan(number);
	};

	exports.TANH = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  var e2 = Math.exp(2 * number);
	  return (e2 - 1) / (e2 + 1);
	};

	exports.TRUNC = function(number, digits) {
	  digits = (digits === undefined) ? 0 : digits;
	  number = utils.parseNumber(number);
	  digits = utils.parseNumber(digits);
	  if (utils.anyIsError(number, digits)) {
	    return error.value;
	  }
	  var sign = (number > 0) ? 1 : -1;
	  return sign * (Math.floor(Math.abs(number) * Math.pow(10, digits))) / Math.pow(10, digits);
	};

/***/ },
/* 3 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_3__;

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);

	function flattenShallow(array) {
	  if (!array || !array.reduce) { return array; }
	  return array.reduce(function(a, b) {
	    var aIsArray = Array.isArray(a);
	    var bIsArray = Array.isArray(b);
	    if (aIsArray && bIsArray ) {
	      return a.concat(b);
	    }
	    if (aIsArray) {
	      a.push(b);
	      return a;
	    }
	    if (bIsArray) {
	      return [a].concat(b);
	    }
	    return [a, b];
	  });
	}

	function isFlat(array) {
	  if (!array) { return false; }
	  for (var i = 0; i < array.length; ++i) {
	    if (Array.isArray(array[i])) {
	      return false;
	    }
	  }
	  return true;
	}

	exports.flatten = function() {
	  var result = exports.argsToArray.apply(null, arguments);
	  while (!isFlat(result)) {
	    result = flattenShallow(result);
	  }
	  return result;
	};

	exports.argsToArray = function(args) {
	  return Array.prototype.slice.call(args, 0);
	};

	exports.numbers = function() {
	  var possibleNumbers = this.flatten.apply(null, arguments);
	  return possibleNumbers.filter(function(el) {
	    return typeof el === 'number';
	  });
	};

	exports.cleanFloat = function(number) {
	  var power = 1e14;
	  return Math.round(number * power) / power;
	};

	exports.parseBool = function(bool) {
	  if (typeof bool === 'boolean') {
	    return bool;
	  }

	  if (bool instanceof Error) {
	    return bool;
	  }

	  if (typeof bool === 'number') {
	    return bool !== 0;
	  }

	  if (typeof bool === 'string') {
	    var up = bool.toUpperCase();
	    if (up === 'TRUE') {
	      return true;
	    }

	    if (up === 'FALSE') {
	      return false;
	    }
	  }

	  if (bool instanceof Date && !isNaN(bool)) {
	    return true;
	  }

	  return error.value;
	};

	exports.parseNumber = function(string) {
	  if (string === undefined || string === '') {
	    return error.value;
	  }
	  if (!isNaN(string)) {
	    return parseFloat(string);
	  }
	  return error.value;
	};

	exports.parseNumberArray = function(arr) {
	  var len;
	  if (!arr || (len = arr.length) === 0) {
	    return error.value;
	  }
	  var parsed;
	  while (len--) {
	    parsed = exports.parseNumber(arr[len]);
	    if (parsed === error.value) {
	      return parsed;
	    }
	    arr[len] = parsed;
	  }
	  return arr;
	};

	exports.parseMatrix = function(matrix) {
	  var n;
	  if (!matrix || (n = matrix.length) === 0) {
	    return error.value;
	  }
	  var pnarr;
	  for (var i = 0; i < matrix.length; i++) {
	    pnarr = exports.parseNumberArray(matrix[i]);
	    matrix[i] = pnarr;
	    if (pnarr instanceof Error) {
	      return pnarr;
	    }
	  }
	  return matrix;
	};

	var d1900 = new Date(1900, 0, 1);
	exports.parseDate = function(date) {
	  if (!isNaN(date)) {
	    if (date instanceof Date) {
	      return new Date(date);
	    }
	    var d = parseInt(date, 10);
	    if (d < 0) {
	      return error.num;
	    }
	    if (d <= 60) {
	      return new Date(d1900.getTime() + (d - 1) * 86400000);
	    }
	    return new Date(d1900.getTime() + (d - 2) * 86400000);
	  }
	  if (typeof date === 'string') {
	    date = new Date(date);
	    if (!isNaN(date)) {
	      return date;
	    }
	  }
	  return error.value;
	};

	exports.parseDateArray = function(arr) {
	  var len = arr.length;
	  var parsed;
	  while (len--) {
	    parsed = this.parseDate(arr[len]);
	    if (parsed === error.value) {
	      return parsed;
	    }
	    arr[len] = parsed;
	  }
	  return arr;
	};

	exports.anyIsError = function() {
	  var n = arguments.length;
	  while (n--) {
	    if (arguments[n] instanceof Error) {
	      return true;
	    }
	  }
	  return false;
	};

	exports.arrayValuesToNumbers = function(arr) {
	  var n = arr.length;
	  var el;
	  while (n--) {
	    el = arr[n];
	    if (typeof el === 'number') {
	      continue;
	    }
	    if (el === true) {
	      arr[n] = 1;
	      continue;
	    }
	    if (el === false) {
	      arr[n] = 0;
	      continue;
	    }
	    if (typeof el === 'string') {
	      var number = this.parseNumber(el);
	      if (number instanceof Error) {
	        arr[n] = 0;
	      } else {
	        arr[n] = number;
	      }
	    }
	  }
	  return arr;
	};

	exports.rest = function(array, idx) {
	  idx = idx || 1;
	  if (!array || typeof array.slice !== 'function') {
	    return array;
	  }
	  return array.slice(idx);
	};

	exports.initial = function(array, idx) {
	  idx = idx || 1;
	  if (!array || typeof array.slice !== 'function') {
	    return array;
	  }
	  return array.slice(0, array.length - idx);
	};

/***/ },
/* 5 */
/***/ function(module, exports) {

	exports.nil = new Error('#NULL!');
	exports.div0 = new Error('#DIV/0!');
	exports.value = new Error('#VALUE?');
	exports.ref = new Error('#REF!');
	exports.name = new Error('#NAME?');
	exports.num = new Error('#NUM!');
	exports.na = new Error('#N/A');
	exports.error = new Error('#ERROR!');
	exports.data = new Error('#GETTING_DATA');


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	var mathTrig = __webpack_require__(2);
	var text = __webpack_require__(7);
	var jStat = __webpack_require__(9).jStat;
	var utils = __webpack_require__(4);
	var error = __webpack_require__(5);
	var misc = __webpack_require__(10);

	var SQRT2PI = 2.5066282746310002;

	exports.AVEDEV = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  return jStat.sum(jStat(range).subtract(jStat.mean(range)).abs()[0]) / range.length;
	};

	exports.AVERAGE = function() {
	  var range = utils.numbers(utils.flatten(arguments));
	  var n = range.length;
	  var sum = 0;
	  var count = 0;
	  for (var i = 0; i < n; i++) {
	    sum += range[i];
	    count += 1;
	  }
	  return sum / count;
	};

	exports.AVERAGEA = function() {
	  var range = utils.flatten(arguments);
	  var n = range.length;
	  var sum = 0;
	  var count = 0;
	  for (var i = 0; i < n; i++) {
	    var el = range[i];
	    if (typeof el === 'number') {
	      sum += el;
	    }
	    if (el === true) {
	      sum++;
	    }
	    if (el !== null) {
	      count++;
	    }
	  }
	  return sum / count;
	};

	exports.AVERAGEIF = function(range, criteria, average_range) {
	  average_range = average_range || range;
	  range = utils.flatten(range);
	  average_range = utils.parseNumberArray(utils.flatten(average_range));
	  if (average_range instanceof Error) {
	    return average_range;
	  }
	  var average_count = 0;
	  var result = 0;
	  for (var i = 0; i < range.length; i++) {
	    if (eval(range[i] + criteria)) { // jshint ignore:line
	      result += average_range[i];
	      average_count++;
	    }
	  }
	  return result / average_count;
	};

	exports.AVERAGEIFS = function() {
	  // Does not work with multi dimensional ranges yet!
	  //http://office.microsoft.com/en-001/excel-help/averageifs-function-HA010047493.aspx
	  var args = utils.argsToArray(arguments);
	  var criteria = (args.length - 1) / 2;
	  var range = utils.flatten(args[0]);
	  var count = 0;
	  var result = 0;
	  for (var i = 0; i < range.length; i++) {
	    var condition = '';
	    for (var j = 0; j < criteria; j++) {
	      condition += args[2 * j + 1][i] + args[2 * j + 2];
	      if (j !== criteria - 1) {
	        condition += '&&';
	      }
	    }
	    if (eval(condition)) { // jshint ignore:line
	      result += range[i];
	      count++;
	    }
	  }

	  var average = result / count;
	  if (isNaN(average)) {
	    return 0;
	  } else {
	    return average;
	  }
	};

	exports.BETA = {};

	exports.BETA.DIST = function(x, alpha, beta, cumulative, A, B) {
	  if (arguments.length < 4) {
	    return error.value;
	  }

	  A = (A === undefined) ? 0 : A;
	  B = (B === undefined) ? 1 : B;

	  x = utils.parseNumber(x);
	  alpha = utils.parseNumber(alpha);
	  beta = utils.parseNumber(beta);
	  A = utils.parseNumber(A);
	  B = utils.parseNumber(B);
	  if (utils.anyIsError(x, alpha, beta, A, B)) {
	    return error.value;
	  }

	  x = (x - A) / (B - A);
	  return (cumulative) ? jStat.beta.cdf(x, alpha, beta) : jStat.beta.pdf(x, alpha, beta);
	};

	exports.BETA.INV = function(probability, alpha, beta, A, B) {
	  A = (A === undefined) ? 0 : A;
	  B = (B === undefined) ? 1 : B;

	  probability = utils.parseNumber(probability);
	  alpha = utils.parseNumber(alpha);
	  beta = utils.parseNumber(beta);
	  A = utils.parseNumber(A);
	  B = utils.parseNumber(B);
	  if (utils.anyIsError(probability, alpha, beta, A, B)) {
	    return error.value;
	  }

	  return jStat.beta.inv(probability, alpha, beta) * (B - A) + A;
	};

	exports.BINOM = {};

	exports.BINOM.DIST = function(successes, trials, probability, cumulative) {
	  successes = utils.parseNumber(successes);
	  trials = utils.parseNumber(trials);
	  probability = utils.parseNumber(probability);
	  cumulative = utils.parseNumber(cumulative);
	  if (utils.anyIsError(successes, trials, probability, cumulative)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.binomial.cdf(successes, trials, probability) : jStat.binomial.pdf(successes, trials, probability);
	};

	exports.BINOM.DIST.RANGE = function(trials, probability, successes, successes2) {
	  successes2 = (successes2 === undefined) ? successes : successes2;

	  trials = utils.parseNumber(trials);
	  probability = utils.parseNumber(probability);
	  successes = utils.parseNumber(successes);
	  successes2 = utils.parseNumber(successes2);
	  if (utils.anyIsError(trials, probability, successes, successes2)) {
	    return error.value;
	  }

	  var result = 0;
	  for (var i = successes; i <= successes2; i++) {
	    result += mathTrig.COMBIN(trials, i) * Math.pow(probability, i) * Math.pow(1 - probability, trials - i);
	  }
	  return result;
	};

	exports.BINOM.INV = function(trials, probability, alpha) {
	  trials = utils.parseNumber(trials);
	  probability = utils.parseNumber(probability);
	  alpha = utils.parseNumber(alpha);
	  if (utils.anyIsError(trials, probability, alpha)) {
	    return error.value;
	  }

	  var x = 0;
	  while (x <= trials) {
	    if (jStat.binomial.cdf(x, trials, probability) >= alpha) {
	      return x;
	    }
	    x++;
	  }
	};

	exports.CHISQ = {};

	exports.CHISQ.DIST = function(x, k, cumulative) {
	  x = utils.parseNumber(x);
	  k = utils.parseNumber(k);
	  if (utils.anyIsError(x, k)) {
	    return error.value;
	  }

	  return (cumulative) ? jStat.chisquare.cdf(x, k) : jStat.chisquare.pdf(x, k);
	};

	exports.CHISQ.DIST.RT = function(x, k) {
	  if (!x | !k) {
	    return error.na;
	  }

	  if (x < 1 || k > Math.pow(10, 10)) {
	    return error.num;
	  }

	  if ((typeof x !== 'number') || (typeof k !== 'number')) {
	    return error.value;
	  }

	  return 1 -  jStat.chisquare.cdf(x, k);
	};

	exports.CHISQ.INV = function(probability, k) {
	  probability = utils.parseNumber(probability);
	  k = utils.parseNumber(k);
	  if (utils.anyIsError(probability, k)) {
	    return error.value;
	  }
	  return jStat.chisquare.inv(probability, k);
	};

	exports.CHISQ.INV.RT = function(p, k) {
	  if (!p | !k) {
	    return error.na;
	  }

	  if (p < 0 || p > 1 || k < 1 || k > Math.pow(10, 10)) {
	    return error.num;
	  }

	  if ((typeof p !== 'number') || (typeof k !== 'number')) {
	    return error.value;
	  }

	  return jStat.chisquare.inv(1.0 - p, k);
	};

	exports.CHISQ.TEST = function(observed, expected) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  if ((!(observed instanceof Array)) || (!(expected instanceof Array))) {
	    return error.value;
	  }

	  if (observed.length !== expected.length) {
	    return error.value;
	  }

	  if (observed[0] && expected[0] &&
	      observed[0].length !== expected[0].length) {
	    return error.value;
	  }

	  var row = observed.length;
	  var tmp, i, j;

	  // Convert single-dimension array into two-dimension array
	  for (i = 0; i < row; i ++) {
	    if (!(observed[i] instanceof Array)) {
	      tmp = observed[i];
	      observed[i] = [];
	      observed[i].push(tmp);
	    }
	    if (!(expected[i] instanceof Array)) {
	      tmp = expected[i];
	      expected[i] = [];
	      expected[i].push(tmp);
	    }
	  }

	  var col = observed[0].length;
	  var dof = (col === 1) ? row-1 : (row-1)*(col-1);
	  var xsqr = 0;
	  var Pi =Math.PI;

	  for (i = 0; i < row; i ++) {
	    for (j = 0; j < col; j ++) {
	      xsqr += Math.pow((observed[i][j] - expected[i][j]), 2) / expected[i][j];
	    }
	  }

	  // Get independency by X square and its degree of freedom
	  function ChiSq(xsqr, dof) {
	    var p = Math.exp(-0.5 * xsqr);
	    if((dof%2) === 1) {
	      p = p * Math.sqrt(2 * xsqr/Pi);
	    }
	    var k = dof;
	    while(k >= 2) {
	      p = p * xsqr/k;
	      k = k - 2;
	    }
	    var t = p;
	    var a = dof;
	    while (t > 0.0000000001*p) {
	      a = a + 2;
	      t = t * xsqr/a;
	      p = p + t;
	    }
	    return 1-p;
	  }

	  return Math.round(ChiSq(xsqr, dof) * 1000000) / 1000000;
	};

	exports.COLUMN = function(matrix, index) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  if (index < 0) {
	    return error.num;
	  }

	  if (!(matrix instanceof Array) || (typeof index !== 'number')) {
	    return error.value;
	  }

	  if (matrix.length === 0) {
	    return undefined;
	  }

	  return jStat.col(matrix, index);
	};

	exports.COLUMNS = function(matrix) {
	  if (arguments.length !== 1) {
	    return error.na;
	  }

	  if (!(matrix instanceof Array)) {
	    return error.value;
	  }

	  if (matrix.length === 0) {
	    return 0;
	  }

	  return jStat.cols(matrix);
	};

	exports.CONFIDENCE = {};

	exports.CONFIDENCE.NORM = function(alpha, sd, n) {
	  alpha = utils.parseNumber(alpha);
	  sd = utils.parseNumber(sd);
	  n = utils.parseNumber(n);
	  if (utils.anyIsError(alpha, sd, n)) {
	    return error.value;
	  }
	  return jStat.normalci(1, alpha, sd, n)[1] - 1;
	};

	exports.CONFIDENCE.T = function(alpha, sd, n) {
	  alpha = utils.parseNumber(alpha);
	  sd = utils.parseNumber(sd);
	  n = utils.parseNumber(n);
	  if (utils.anyIsError(alpha, sd, n)) {
	    return error.value;
	  }
	  return jStat.tci(1, alpha, sd, n)[1] - 1;
	};

	exports.CORREL = function(array1, array2) {
	  array1 = utils.parseNumberArray(utils.flatten(array1));
	  array2 = utils.parseNumberArray(utils.flatten(array2));
	  if (utils.anyIsError(array1, array2)) {
	    return error.value;
	  }
	  return jStat.corrcoeff(array1, array2);
	};

	exports.COUNT = function() {
	  return utils.numbers(utils.flatten(arguments)).length;
	};

	exports.COUNTA = function() {
	  var range = utils.flatten(arguments);
	  return range.length - exports.COUNTBLANK(range);
	};

	exports.COUNTIN = function (range, value) {
	  var result = 0;
	  for (var i = 0; i < range.length; i++) {
	    if (range[i] === value) {
	      result++;
	    }
	  }
	  return result;
	};


	exports.COUNTBLANK = function() {
	  var range = utils.flatten(arguments);
	  var blanks = 0;
	  var element;
	  for (var i = 0; i < range.length; i++) {
	    element = range[i];
	    if (element === null || element === '') {
	      blanks++;
	    }
	  }
	  return blanks;
	};

	exports.COUNTIF = function(range, criteria) {
	  range = utils.flatten(range);
	  if (!/[<>=!]/.test(criteria)) {
	    criteria = '=="' + criteria + '"';
	  }
	  var matches = 0;
	  for (var i = 0; i < range.length; i++) {
	    if (typeof range[i] !== 'string') {
	      if (eval(range[i] + criteria)) { // jshint ignore:line
	        matches++;
	      }
	    } else {
	      if (eval('"' + range[i] + '"' + criteria)) { // jshint ignore:line
	        matches++;
	      }
	    }
	  }
	  return matches;
	};

	exports.COUNTIFS = function() {
	  var args = utils.argsToArray(arguments);
	  var results = new Array(utils.flatten(args[0]).length);
	  for (var i = 0; i < results.length; i++) {
	    results[i] = true;
	  }
	  for (i = 0; i < args.length; i += 2) {
	    var range = utils.flatten(args[i]);
	    var criteria = args[i + 1];
	    if (!/[<>=!]/.test(criteria)) {
	      criteria = '=="' + criteria + '"';
	    }
	    for (var j = 0; j < range.length; j++) {
	      if (typeof range[j] !== 'string') {
	        results[j] = results[j] && eval(range[j] + criteria); // jshint ignore:line
	      } else {
	        results[j] = results[j] && eval('"' + range[j] + '"' + criteria); // jshint ignore:line
	      }
	    }
	  }
	  var result = 0;
	  for (i = 0; i < results.length; i++) {
	    if (results[i]) {
	      result++;
	    }
	  }
	  return result;
	};

	exports.COUNTUNIQUE = function () {
	  return misc.UNIQUE.apply(null, utils.flatten(arguments)).length;
	};

	exports.COVARIANCE = {};

	exports.COVARIANCE.P = function(array1, array2) {
	  array1 = utils.parseNumberArray(utils.flatten(array1));
	  array2 = utils.parseNumberArray(utils.flatten(array2));
	  if (utils.anyIsError(array1, array2)) {
	    return error.value;
	  }
	  var mean1 = jStat.mean(array1);
	  var mean2 = jStat.mean(array2);
	  var result = 0;
	  var n = array1.length;
	  for (var i = 0; i < n; i++) {
	    result += (array1[i] - mean1) * (array2[i] - mean2);
	  }
	  return result / n;
	};

	exports.COVARIANCE.S = function(array1, array2) {
	  array1 = utils.parseNumberArray(utils.flatten(array1));
	  array2 = utils.parseNumberArray(utils.flatten(array2));
	  if (utils.anyIsError(array1, array2)) {
	    return error.value;
	  }
	  return jStat.covariance(array1, array2);
	};

	exports.DEVSQ = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var mean = jStat.mean(range);
	  var result = 0;
	  for (var i = 0; i < range.length; i++) {
	    result += Math.pow((range[i] - mean), 2);
	  }
	  return result;
	};

	exports.EXPON = {};

	exports.EXPON.DIST = function(x, lambda, cumulative) {
	  x = utils.parseNumber(x);
	  lambda = utils.parseNumber(lambda);
	  if (utils.anyIsError(x, lambda)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.exponential.cdf(x, lambda) : jStat.exponential.pdf(x, lambda);
	};

	exports.F = {};

	exports.F.DIST = function(x, d1, d2, cumulative) {
	  x = utils.parseNumber(x);
	  d1 = utils.parseNumber(d1);
	  d2 = utils.parseNumber(d2);
	  if (utils.anyIsError(x, d1, d2)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.centralF.cdf(x, d1, d2) : jStat.centralF.pdf(x, d1, d2);
	};

	exports.F.DIST.RT = function(x, d1, d2) {
	  if (arguments.length !== 3) {
	    return error.na;
	  }

	  if (x < 0 || d1 < 1 || d2 < 1) {
	    return error.num;
	  }

	  if ((typeof x !== 'number') || (typeof d1 !== 'number') || (typeof d2 !== 'number')) {
	    return error.value;
	  }

	  return 1 - jStat.centralF.cdf(x, d1, d2);
	};

	exports.F.INV = function(probability, d1, d2) {
	  probability = utils.parseNumber(probability);
	  d1 = utils.parseNumber(d1);
	  d2 = utils.parseNumber(d2);
	  if (utils.anyIsError(probability, d1, d2)) {
	    return error.value;
	  }
	  if (probability <= 0.0 || probability > 1.0) {
	    return error.num;
	  }

	  return jStat.centralF.inv(probability, d1, d2);
	};

	exports.F.INV.RT = function(p, d1, d2) {
	  if (arguments.length !== 3) {
	    return error.na;
	  }

	  if (p < 0 || p > 1 || d1 < 1 || d1 > Math.pow(10, 10) || d2 < 1 || d2 > Math.pow(10, 10)) {
	    return error.num;
	  }

	  if ((typeof p !== 'number') || (typeof d1 !== 'number') || (typeof d2 !== 'number')) {
	    return error.value;
	  }

	  return jStat.centralF.inv(1.0 - p, d1, d2);
	};

	exports.F.TEST = function(array1, array2) {
	  if (!array1 || !array2) {
	    return error.na;
	  }

	  if (!(array1 instanceof Array) || !(array2 instanceof Array)) {
	    return error.na;
	  }

	  if (array1.length < 2 || array2.length < 2) {
	    return error.div0;
	  }

	  var sumOfSquares = function(values, x1) {
	    var sum = 0;
	    for (var i = 0; i < values.length; i++) {
	      sum +=Math.pow((values[i] - x1), 2);
	    }
	    return sum;
	  };

	  var x1 = mathTrig.SUM(array1) / array1.length;
	  var x2 = mathTrig.SUM(array2) / array2.length;
	  var sum1 = sumOfSquares(array1, x1) / (array1.length - 1);
	  var sum2 = sumOfSquares(array2, x2) / (array2.length - 1);

	  return sum1 / sum2;
	};

	exports.FISHER = function(x) {
	  x = utils.parseNumber(x);
	  if (x instanceof Error) {
	    return x;
	  }
	  return Math.log((1 + x) / (1 - x)) / 2;
	};

	exports.FISHERINV = function(y) {
	  y = utils.parseNumber(y);
	  if (y instanceof Error) {
	    return y;
	  }
	  var e2y = Math.exp(2 * y);
	  return (e2y - 1) / (e2y + 1);
	};

	exports.FORECAST = function(x, data_y, data_x) {
	  x = utils.parseNumber(x);
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  if (utils.anyIsError(x, data_y, data_x)) {
	    return error.value;
	  }
	  var xmean = jStat.mean(data_x);
	  var ymean = jStat.mean(data_y);
	  var n = data_x.length;
	  var num = 0;
	  var den = 0;
	  for (var i = 0; i < n; i++) {
	    num += (data_x[i] - xmean) * (data_y[i] - ymean);
	    den += Math.pow(data_x[i] - xmean, 2);
	  }
	  var b = num / den;
	  var a = ymean - b * xmean;
	  return a + b * x;
	};

	exports.FREQUENCY = function(data, bins) {
	  data = utils.parseNumberArray(utils.flatten(data));
	  bins = utils.parseNumberArray(utils.flatten(bins));
	  if (utils.anyIsError(data, bins)) {
	    return error.value;
	  }
	  var n = data.length;
	  var b = bins.length;
	  var r = [];
	  for (var i = 0; i <= b; i++) {
	    r[i] = 0;
	    for (var j = 0; j < n; j++) {
	      if (i === 0) {
	        if (data[j] <= bins[0]) {
	          r[0] += 1;
	        }
	      } else if (i < b) {
	        if (data[j] > bins[i - 1] && data[j] <= bins[i]) {
	          r[i] += 1;
	        }
	      } else if (i === b) {
	        if (data[j] > bins[b - 1]) {
	          r[b] += 1;
	        }
	      }
	    }
	  }
	  return r;
	};


	exports.GAMMA = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }

	  if (number === 0) {
	    return error.num;
	  }

	  if (parseInt(number, 10) === number && number < 0) {
	    return error.num;
	  }

	  return jStat.gammafn(number);
	};

	exports.GAMMA.DIST = function(value, alpha, beta, cumulative) {
	  if (arguments.length !== 4) {
	    return error.na;
	  }

	  if (value < 0 || alpha <= 0 || beta <= 0) {
	    return error.value;
	  }

	  if ((typeof value !== 'number') || (typeof alpha !== 'number') || (typeof beta !== 'number')) {
	    return error.value;
	  }

	  return cumulative ? jStat.gamma.cdf(value, alpha, beta, true) : jStat.gamma.pdf(value, alpha, beta, false);
	};

	exports.GAMMA.INV = function(probability, alpha, beta) {
	  if (arguments.length !== 3) {
	    return error.na;
	  }

	  if (probability < 0 || probability > 1 || alpha <= 0 || beta <= 0) {
	    return error.num;
	  }

	  if ((typeof probability !== 'number') || (typeof alpha !== 'number') || (typeof beta !== 'number')) {
	    return error.value;
	  }

	  return jStat.gamma.inv(probability, alpha, beta);
	};

	exports.GAMMALN = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return jStat.gammaln(number);
	};

	exports.GAMMALN.PRECISE = function(x) {
	  if (arguments.length !== 1) {
	    return error.na;
	  }

	  if (x <= 0) {
	    return error.num;
	  }

	  if (typeof x !== 'number') {
	    return error.value;
	  }

	  return jStat.gammaln(x);
	};

	exports.GAUSS = function(z) {
	  z = utils.parseNumber(z);
	  if (z instanceof Error) {
	    return z;
	  }
	  return jStat.normal.cdf(z, 0, 1) - 0.5;
	};

	exports.GEOMEAN = function() {
	  var args = utils.parseNumberArray(utils.flatten(arguments));
	  if (args instanceof Error) {
	    return args;
	  }
	  return jStat.geomean(args);
	};

	exports.GROWTH = function(known_y, known_x, new_x, use_const) {
	  // Credits: Ilmari Karonen (http://stackoverflow.com/questions/14161990/how-to-implement-growth-function-in-javascript)

	  known_y = utils.parseNumberArray(known_y);
	  if (known_y instanceof Error) {
	    return known_y;
	  }

	  // Default values for optional parameters:
	  var i;
	  if (known_x === undefined) {
	    known_x = [];
	    for (i = 1; i <= known_y.length; i++) {
	      known_x.push(i);
	    }
	  }
	  if (new_x === undefined) {
	    new_x = [];
	    for (i = 1; i <= known_y.length; i++) {
	      new_x.push(i);
	    }
	  }

	  known_x = utils.parseNumberArray(known_x);
	  new_x = utils.parseNumberArray(new_x);
	  if (utils.anyIsError(known_x, new_x)) {
	    return error.value;
	  }


	  if (use_const === undefined) {
	    use_const = true;
	  }

	  // Calculate sums over the data:
	  var n = known_y.length;
	  var avg_x = 0;
	  var avg_y = 0;
	  var avg_xy = 0;
	  var avg_xx = 0;
	  for (i = 0; i < n; i++) {
	    var x = known_x[i];
	    var y = Math.log(known_y[i]);
	    avg_x += x;
	    avg_y += y;
	    avg_xy += x * y;
	    avg_xx += x * x;
	  }
	  avg_x /= n;
	  avg_y /= n;
	  avg_xy /= n;
	  avg_xx /= n;

	  // Compute linear regression coefficients:
	  var beta;
	  var alpha;
	  if (use_const) {
	    beta = (avg_xy - avg_x * avg_y) / (avg_xx - avg_x * avg_x);
	    alpha = avg_y - beta * avg_x;
	  } else {
	    beta = avg_xy / avg_xx;
	    alpha = 0;
	  }

	  // Compute and return result array:
	  var new_y = [];
	  for (i = 0; i < new_x.length; i++) {
	    new_y.push(Math.exp(alpha + beta * new_x[i]));
	  }
	  return new_y;
	};

	exports.HARMEAN = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var n = range.length;
	  var den = 0;
	  for (var i = 0; i < n; i++) {
	    den += 1 / range[i];
	  }
	  return n / den;
	};

	exports.HYPGEOM = {};

	exports.HYPGEOM.DIST = function(x, n, M, N, cumulative) {
	  x = utils.parseNumber(x);
	  n = utils.parseNumber(n);
	  M = utils.parseNumber(M);
	  N = utils.parseNumber(N);
	  if (utils.anyIsError(x, n, M, N)) {
	    return error.value;
	  }

	  function pdf(x, n, M, N) {
	    return mathTrig.COMBIN(M, x) * mathTrig.COMBIN(N - M, n - x) / mathTrig.COMBIN(N, n);
	  }

	  function cdf(x, n, M, N) {
	    var result = 0;
	    for (var i = 0; i <= x; i++) {
	      result += pdf(i, n, M, N);
	    }
	    return result;
	  }

	  return (cumulative) ? cdf(x, n, M, N) : pdf(x, n, M, N);
	};

	exports.INTERCEPT = function(known_y, known_x) {
	  known_y = utils.parseNumberArray(known_y);
	  known_x = utils.parseNumberArray(known_x);
	  if (utils.anyIsError(known_y, known_x)) {
	    return error.value;
	  }
	  if (known_y.length !== known_x.length) {
	    return error.na;
	  }
	  return exports.FORECAST(0, known_y, known_x);
	};

	exports.KURT = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var mean = jStat.mean(range);
	  var n = range.length;
	  var sigma = 0;
	  for (var i = 0; i < n; i++) {
	    sigma += Math.pow(range[i] - mean, 4);
	  }
	  sigma = sigma / Math.pow(jStat.stdev(range, true), 4);
	  return ((n * (n + 1)) / ((n - 1) * (n - 2) * (n - 3))) * sigma - 3 * (n - 1) * (n - 1) / ((n - 2) * (n - 3));
	};

	exports.LARGE = function(range, k) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  k = utils.parseNumber(k);
	  if (utils.anyIsError(range, k)) {
	    return range;
	  }
	  return range.sort(function(a, b) {
	    return b - a;
	  })[k - 1];
	};

	exports.LINEST = function(data_y, data_x) {
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  if (utils.anyIsError(data_y, data_x)) {
	    return error.value;
	  }
	  var ymean = jStat.mean(data_y);
	  var xmean = jStat.mean(data_x);
	  var n = data_x.length;
	  var num = 0;
	  var den = 0;
	  for (var i = 0; i < n; i++) {
	    num += (data_x[i] - xmean) * (data_y[i] - ymean);
	    den += Math.pow(data_x[i] - xmean, 2);
	  }
	  var m = num / den;
	  var b = ymean - m * xmean;
	  return [m, b];
	};

	// According to Microsoft:
	// http://office.microsoft.com/en-us/starter-help/logest-function-HP010342665.aspx
	// LOGEST returns are based on the following linear model:
	// ln y = x1 ln m1 + ... + xn ln mn + ln b
	exports.LOGEST = function(data_y, data_x) {
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  if (utils.anyIsError(data_y, data_x)) {
	    return error.value;
	  }
	  for (var i = 0; i < data_y.length; i ++) {
	    data_y[i] = Math.log(data_y[i]);
	  }

	  var result = exports.LINEST(data_y, data_x);
	  result[0] = Math.round(Math.exp(result[0])*1000000)/1000000;
	  result[1] = Math.round(Math.exp(result[1])*1000000)/1000000;
	  return result;
	};

	exports.LOGNORM = {};

	exports.LOGNORM.DIST = function(x, mean, sd, cumulative) {
	  x = utils.parseNumber(x);
	  mean = utils.parseNumber(mean);
	  sd = utils.parseNumber(sd);
	  if (utils.anyIsError(x, mean, sd)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.lognormal.cdf(x, mean, sd) : jStat.lognormal.pdf(x, mean, sd);
	};

	exports.LOGNORM.INV = function(probability, mean, sd) {
	  probability = utils.parseNumber(probability);
	  mean = utils.parseNumber(mean);
	  sd = utils.parseNumber(sd);
	  if (utils.anyIsError(probability, mean, sd)) {
	    return error.value;
	  }
	  return jStat.lognormal.inv(probability, mean, sd);
	};

	exports.MAX = function() {
	  var range = utils.numbers(utils.flatten(arguments));
	  return (range.length === 0) ? 0 : Math.max.apply(Math, range);
	};

	exports.MAXA = function() {
	  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));
	  return (range.length === 0) ? 0 : Math.max.apply(Math, range);
	};

	exports.MEDIAN = function() {
	  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));
	  return jStat.median(range);
	};

	exports.MIN = function() {
	  var range = utils.numbers(utils.flatten(arguments));
	  return (range.length === 0) ? 0 : Math.min.apply(Math, range);
	};

	exports.MINA = function() {
	  var range = utils.arrayValuesToNumbers(utils.flatten(arguments));
	  return (range.length === 0) ? 0 : Math.min.apply(Math, range);
	};

	exports.MODE = {};

	exports.MODE.MULT = function() {
	  // Credits: Roönaän
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var n = range.length;
	  var count = {};
	  var maxItems = [];
	  var max = 0;
	  var currentItem;

	  for (var i = 0; i < n; i++) {
	    currentItem = range[i];
	    count[currentItem] = count[currentItem] ? count[currentItem] + 1 : 1;
	    if (count[currentItem] > max) {
	      max = count[currentItem];
	      maxItems = [];
	    }
	    if (count[currentItem] === max) {
	      maxItems[maxItems.length] = currentItem;
	    }
	  }
	  return maxItems;
	};

	exports.MODE.SNGL = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  return exports.MODE.MULT(range).sort(function(a, b) {
	    return a - b;
	  })[0];
	};

	exports.NEGBINOM = {};

	exports.NEGBINOM.DIST = function(k, r, p, cumulative) {
	  k = utils.parseNumber(k);
	  r = utils.parseNumber(r);
	  p = utils.parseNumber(p);
	  if (utils.anyIsError(k, r, p)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.negbin.cdf(k, r, p) : jStat.negbin.pdf(k, r, p);
	};

	exports.NORM = {};

	exports.NORM.DIST = function(x, mean, sd, cumulative) {
	  x = utils.parseNumber(x);
	  mean = utils.parseNumber(mean);
	  sd = utils.parseNumber(sd);
	  if (utils.anyIsError(x, mean, sd)) {
	    return error.value;
	  }
	  if (sd <= 0) {
	    return error.num;
	  }

	  // Return normal distribution computed by jStat [http://jstat.org]
	  return (cumulative) ? jStat.normal.cdf(x, mean, sd) : jStat.normal.pdf(x, mean, sd);
	};

	exports.NORM.INV = function(probability, mean, sd) {
	  probability = utils.parseNumber(probability);
	  mean = utils.parseNumber(mean);
	  sd = utils.parseNumber(sd);
	  if (utils.anyIsError(probability, mean, sd)) {
	    return error.value;
	  }
	  return jStat.normal.inv(probability, mean, sd);
	};

	exports.NORM.S = {};

	exports.NORM.S.DIST = function(z, cumulative) {
	  z = utils.parseNumber(z);
	  if (z instanceof Error) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.normal.cdf(z, 0, 1) : jStat.normal.pdf(z, 0, 1);
	};

	exports.NORM.S.INV = function(probability) {
	  probability = utils.parseNumber(probability);
	  if (probability instanceof Error) {
	    return error.value;
	  }
	  return jStat.normal.inv(probability, 0, 1);
	};

	exports.PEARSON = function(data_x, data_y) {
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  if (utils.anyIsError(data_y, data_x)) {
	    return error.value;
	  }
	  var xmean = jStat.mean(data_x);
	  var ymean = jStat.mean(data_y);
	  var n = data_x.length;
	  var num = 0;
	  var den1 = 0;
	  var den2 = 0;
	  for (var i = 0; i < n; i++) {
	    num += (data_x[i] - xmean) * (data_y[i] - ymean);
	    den1 += Math.pow(data_x[i] - xmean, 2);
	    den2 += Math.pow(data_y[i] - ymean, 2);
	  }
	  return num / Math.sqrt(den1 * den2);
	};

	exports.PERCENTILE = {};

	exports.PERCENTILE.EXC = function(array, k) {
	  array = utils.parseNumberArray(utils.flatten(array));
	  k = utils.parseNumber(k);
	  if (utils.anyIsError(array, k)) {
	    return error.value;
	  }
	  array = array.sort(function(a, b) {
	    {
	      return a - b;
	    }
	  });
	  var n = array.length;
	  if (k < 1 / (n + 1) || k > 1 - 1 / (n + 1)) {
	    return error.num;
	  }
	  var l = k * (n + 1) - 1;
	  var fl = Math.floor(l);
	  return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));
	};

	exports.PERCENTILE.INC = function(array, k) {
	  array = utils.parseNumberArray(utils.flatten(array));
	  k = utils.parseNumber(k);
	  if (utils.anyIsError(array, k)) {
	    return error.value;
	  }
	  array = array.sort(function(a, b) {
	    return a - b;
	  });
	  var n = array.length;
	  var l = k * (n - 1);
	  var fl = Math.floor(l);
	  return utils.cleanFloat((l === fl) ? array[l] : array[fl] + (l - fl) * (array[fl + 1] - array[fl]));
	};

	exports.PERCENTRANK = {};

	exports.PERCENTRANK.EXC = function(array, x, significance) {
	  significance = (significance === undefined) ? 3 : significance;
	  array = utils.parseNumberArray(utils.flatten(array));
	  x = utils.parseNumber(x);
	  significance = utils.parseNumber(significance);
	  if (utils.anyIsError(array, x, significance)) {
	    return error.value;
	  }
	  array = array.sort(function(a, b) {
	    return a - b;
	  });
	  var uniques = misc.UNIQUE.apply(null, array);
	  var n = array.length;
	  var m = uniques.length;
	  var power = Math.pow(10, significance);
	  var result = 0;
	  var match = false;
	  var i = 0;
	  while (!match && i < m) {
	    if (x === uniques[i]) {
	      result = (array.indexOf(uniques[i]) + 1) / (n + 1);
	      match = true;
	    } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {
	      result = (array.indexOf(uniques[i]) + 1 + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n + 1);
	      match = true;
	    }
	    i++;
	  }
	  return Math.floor(result * power) / power;
	};

	exports.PERCENTRANK.INC = function(array, x, significance) {
	  significance = (significance === undefined) ? 3 : significance;
	  array = utils.parseNumberArray(utils.flatten(array));
	  x = utils.parseNumber(x);
	  significance = utils.parseNumber(significance);
	  if (utils.anyIsError(array, x, significance)) {
	    return error.value;
	  }
	  array = array.sort(function(a, b) {
	    return a - b;
	  });
	  var uniques = misc.UNIQUE.apply(null, array);
	  var n = array.length;
	  var m = uniques.length;
	  var power = Math.pow(10, significance);
	  var result = 0;
	  var match = false;
	  var i = 0;
	  while (!match && i < m) {
	    if (x === uniques[i]) {
	      result = array.indexOf(uniques[i]) / (n - 1);
	      match = true;
	    } else if (x >= uniques[i] && (x < uniques[i + 1] || i === m - 1)) {
	      result = (array.indexOf(uniques[i]) + (x - uniques[i]) / (uniques[i + 1] - uniques[i])) / (n - 1);
	      match = true;
	    }
	    i++;
	  }
	  return Math.floor(result * power) / power;
	};

	exports.PERMUT = function(number, number_chosen) {
	  number = utils.parseNumber(number);
	  number_chosen = utils.parseNumber(number_chosen);
	  if (utils.anyIsError(number, number_chosen)) {
	    return error.value;
	  }
	  return mathTrig.FACT(number) / mathTrig.FACT(number - number_chosen);
	};

	exports.PERMUTATIONA = function(number, number_chosen) {
	  number = utils.parseNumber(number);
	  number_chosen = utils.parseNumber(number_chosen);
	  if (utils.anyIsError(number, number_chosen)) {
	    return error.value;
	  }
	  return Math.pow(number, number_chosen);
	};

	exports.PHI = function(x) {
	  x = utils.parseNumber(x);
	  if (x instanceof Error) {
	    return error.value;
	  }
	  return Math.exp(-0.5 * x * x) / SQRT2PI;
	};

	exports.POISSON = {};

	exports.POISSON.DIST = function(x, mean, cumulative) {
	  x = utils.parseNumber(x);
	  mean = utils.parseNumber(mean);
	  if (utils.anyIsError(x, mean)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.poisson.cdf(x, mean) : jStat.poisson.pdf(x, mean);
	};

	exports.PROB = function(range, probability, lower, upper) {
	  if (lower === undefined) {
	    return 0;
	  }
	  upper = (upper === undefined) ? lower : upper;

	  range = utils.parseNumberArray(utils.flatten(range));
	  probability = utils.parseNumberArray(utils.flatten(probability));
	  lower = utils.parseNumber(lower);
	  upper = utils.parseNumber(upper);
	  if (utils.anyIsError(range, probability, lower, upper)) {
	    return error.value;
	  }

	  if (lower === upper) {
	    return (range.indexOf(lower) >= 0) ? probability[range.indexOf(lower)] : 0;
	  }

	  var sorted = range.sort(function(a, b) {
	    return a - b;
	  });
	  var n = sorted.length;
	  var result = 0;
	  for (var i = 0; i < n; i++) {
	    if (sorted[i] >= lower && sorted[i] <= upper) {
	      result += probability[range.indexOf(sorted[i])];
	    }
	  }
	  return result;
	};

	exports.QUARTILE = {};

	exports.QUARTILE.EXC = function(range, quart) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  quart = utils.parseNumber(quart);
	  if (utils.anyIsError(range, quart)) {
	    return error.value;
	  }
	  switch (quart) {
	    case 1:
	      return exports.PERCENTILE.EXC(range, 0.25);
	    case 2:
	      return exports.PERCENTILE.EXC(range, 0.5);
	    case 3:
	      return exports.PERCENTILE.EXC(range, 0.75);
	    default:
	      return error.num;
	  }
	};

	exports.QUARTILE.INC = function(range, quart) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  quart = utils.parseNumber(quart);
	  if (utils.anyIsError(range, quart)) {
	    return error.value;
	  }
	  switch (quart) {
	    case 1:
	      return exports.PERCENTILE.INC(range, 0.25);
	    case 2:
	      return exports.PERCENTILE.INC(range, 0.5);
	    case 3:
	      return exports.PERCENTILE.INC(range, 0.75);
	    default:
	      return error.num;
	  }
	};

	exports.RANK = {};

	exports.RANK.AVG = function(number, range, order) {
	  number = utils.parseNumber(number);
	  range = utils.parseNumberArray(utils.flatten(range));
	  if (utils.anyIsError(number, range)) {
	    return error.value;
	  }
	  range = utils.flatten(range);
	  order = order || false;
	  var sort = (order) ? function(a, b) {
	    return a - b;
	  } : function(a, b) {
	    return b - a;
	  };
	  range = range.sort(sort);

	  var length = range.length;
	  var count = 0;
	  for (var i = 0; i < length; i++) {
	    if (range[i] === number) {
	      count++;
	    }
	  }

	  return (count > 1) ? (2 * range.indexOf(number) + count + 1) / 2 : range.indexOf(number) + 1;
	};

	exports.RANK.EQ = function(number, range, order) {
	  number = utils.parseNumber(number);
	  range = utils.parseNumberArray(utils.flatten(range));
	  if (utils.anyIsError(number, range)) {
	    return error.value;
	  }
	  order = order || false;
	  var sort = (order) ? function(a, b) {
	    return a - b;
	  } : function(a, b) {
	    return b - a;
	  };
	  range = range.sort(sort);
	  return range.indexOf(number) + 1;
	};

	exports.ROW = function(matrix, index) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  if (index < 0) {
	    return error.num;
	  }

	  if (!(matrix instanceof Array) || (typeof index !== 'number')) {
	    return error.value;
	  }

	  if (matrix.length === 0) {
	    return undefined;
	  }

	  return jStat.row(matrix, index);
	};

	exports.ROWS = function(matrix) {
	  if (arguments.length !== 1) {
	    return error.na;
	  }

	  if (!(matrix instanceof Array)) {
	    return error.value;
	  }

	  if (matrix.length === 0) {
	    return 0;
	  }

	  return jStat.rows(matrix);
	};

	exports.RSQ = function(data_x, data_y) { // no need to flatten here, PEARSON will take care of that
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  if (utils.anyIsError(data_x, data_y)) {
	    return error.value;
	  }
	  return Math.pow(exports.PEARSON(data_x, data_y), 2);
	};

	exports.SKEW = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var mean = jStat.mean(range);
	  var n = range.length;
	  var sigma = 0;
	  for (var i = 0; i < n; i++) {
	    sigma += Math.pow(range[i] - mean, 3);
	  }
	  return n * sigma / ((n - 1) * (n - 2) * Math.pow(jStat.stdev(range, true), 3));
	};

	exports.SKEW.P = function() {
	  var range = utils.parseNumberArray(utils.flatten(arguments));
	  if (range instanceof Error) {
	    return range;
	  }
	  var mean = jStat.mean(range);
	  var n = range.length;
	  var m2 = 0;
	  var m3 = 0;
	  for (var i = 0; i < n; i++) {
	    m3 += Math.pow(range[i] - mean, 3);
	    m2 += Math.pow(range[i] - mean, 2);
	  }
	  m3 = m3 / n;
	  m2 = m2 / n;
	  return m3 / Math.pow(m2, 3 / 2);
	};

	exports.SLOPE = function(data_y, data_x) {
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  if (utils.anyIsError(data_y, data_x)) {
	    return error.value;
	  }
	  var xmean = jStat.mean(data_x);
	  var ymean = jStat.mean(data_y);
	  var n = data_x.length;
	  var num = 0;
	  var den = 0;
	  for (var i = 0; i < n; i++) {
	    num += (data_x[i] - xmean) * (data_y[i] - ymean);
	    den += Math.pow(data_x[i] - xmean, 2);
	  }
	  return num / den;
	};

	exports.SMALL = function(range, k) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  k = utils.parseNumber(k);
	  if (utils.anyIsError(range, k)) {
	    return range;
	  }
	  return range.sort(function(a, b) {
	    return a - b;
	  })[k - 1];
	};

	exports.STANDARDIZE = function(x, mean, sd) {
	  x = utils.parseNumber(x);
	  mean = utils.parseNumber(mean);
	  sd = utils.parseNumber(sd);
	  if (utils.anyIsError(x, mean, sd)) {
	    return error.value;
	  }
	  return (x - mean) / sd;
	};

	exports.STDEV = {};

	exports.STDEV.P = function() {
	  var v = exports.VAR.P.apply(this, arguments);
	  return Math.sqrt(v);
	};

	exports.STDEV.S = function() {
	  var v = exports.VAR.S.apply(this, arguments);
	  return Math.sqrt(v);
	};

	exports.STDEVA = function() {
	  var v = exports.VARA.apply(this, arguments);
	  return Math.sqrt(v);
	};

	exports.STDEVPA = function() {
	  var v = exports.VARPA.apply(this, arguments);
	  return Math.sqrt(v);
	};


	exports.STEYX = function(data_y, data_x) {
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  if (utils.anyIsError(data_y, data_x)) {
	    return error.value;
	  }
	  var xmean = jStat.mean(data_x);
	  var ymean = jStat.mean(data_y);
	  var n = data_x.length;
	  var lft = 0;
	  var num = 0;
	  var den = 0;
	  for (var i = 0; i < n; i++) {
	    lft += Math.pow(data_y[i] - ymean, 2);
	    num += (data_x[i] - xmean) * (data_y[i] - ymean);
	    den += Math.pow(data_x[i] - xmean, 2);
	  }
	  return Math.sqrt((lft - num * num / den) / (n - 2));
	};

	exports.TRANSPOSE = function(matrix) {
	  if (!matrix) {
	    return error.na;
	  }
	  return jStat.transpose(matrix);
	};

	exports.T = text.T;

	exports.T.DIST = function(x, df, cumulative) {
	  x = utils.parseNumber(x);
	  df = utils.parseNumber(df);
	  if (utils.anyIsError(x, df)) {
	    return error.value;
	  }
	  return (cumulative) ? jStat.studentt.cdf(x, df) : jStat.studentt.pdf(x, df);
	};

	exports.T.DIST['2T'] = function(x, df) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  if (x < 0 || df < 1) {
	    return error.num;
	  }

	  if ((typeof x !== 'number') || (typeof df !== 'number')) {
	    return error.value;
	  }

	  return (1 - jStat.studentt.cdf(x , df)) * 2;
	};

	exports.T.DIST.RT = function(x, df) {
	  if (arguments.length !== 2) {
	    return error.na;
	  }

	  if (x < 0 || df < 1) {
	    return error.num;
	  }

	  if ((typeof x !== 'number') || (typeof df !== 'number')) {
	    return error.value;
	  }

	  return 1 - jStat.studentt.cdf(x , df);
	};

	exports.T.INV = function(probability, df) {
	  probability = utils.parseNumber(probability);
	  df = utils.parseNumber(df);
	  if (utils.anyIsError(probability, df)) {
	    return error.value;
	  }
	  return jStat.studentt.inv(probability, df);
	};

	exports.T.INV['2T'] = function(probability, df) {
	  probability = utils.parseNumber(probability);
	  df = utils.parseNumber(df);
	  if (probability <= 0 || probability > 1 || df < 1) {
	    return error.num;
	  }
	  if (utils.anyIsError(probability, df)) {
	    return error.value;
	  }
	  return Math.abs(jStat.studentt.inv(probability/2, df));
	};

	// The algorithm can be found here:
	// http://www.chem.uoa.gr/applets/AppletTtest/Appl_Ttest2.html
	exports.T.TEST = function(data_x, data_y) {
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  if (utils.anyIsError(data_x, data_y)) {
	    return error.value;
	  }

	  var mean_x = jStat.mean(data_x);
	  var mean_y = jStat.mean(data_y);
	  var s_x = 0;
	  var s_y = 0;
	  var i;

	  for (i = 0; i < data_x.length; i++) {
	    s_x += Math.pow(data_x[i] - mean_x, 2);
	  }
	  for (i = 0; i < data_y.length; i++) {
	    s_y += Math.pow(data_y[i] - mean_y, 2);
	  }

	  s_x = s_x / (data_x.length-1);
	  s_y = s_y / (data_y.length-1);

	  var t = Math.abs(mean_x - mean_y) / Math.sqrt(s_x/data_x.length + s_y/data_y.length);

	  return exports.T.DIST['2T'](t, data_x.length+data_y.length-2);
	};

	exports.TREND = function(data_y, data_x, new_data_x) {
	  data_y = utils.parseNumberArray(utils.flatten(data_y));
	  data_x = utils.parseNumberArray(utils.flatten(data_x));
	  new_data_x = utils.parseNumberArray(utils.flatten(new_data_x));
	  if (utils.anyIsError(data_y, data_x, new_data_x)) {
	    return error.value;
	  }
	  var linest = exports.LINEST(data_y, data_x);
	  var m = linest[0];
	  var b = linest[1];
	  var result = [];

	  new_data_x.forEach(function(x) {
	    result.push(m * x + b);
	  });

	  return result;
	};

	exports.TRIMMEAN = function(range, percent) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  percent = utils.parseNumber(percent);
	  if (utils.anyIsError(range, percent)) {
	    return error.value;
	  }
	  var trim = mathTrig.FLOOR(range.length * percent, 2) / 2;
	  return jStat.mean(utils.initial(utils.rest(range.sort(function(a, b) {
	    return a - b;
	  }), trim), trim));
	};

	exports.VAR = {};

	exports.VAR.P = function() {
	  var range = utils.numbers(utils.flatten(arguments));
	  var n = range.length;
	  var sigma = 0;
	  var mean = exports.AVERAGE(range);
	  for (var i = 0; i < n; i++) {
	    sigma += Math.pow(range[i] - mean, 2);
	  }
	  return sigma / n;
	};

	exports.VAR.S = function() {
	  var range = utils.numbers(utils.flatten(arguments));
	  var n = range.length;
	  var sigma = 0;
	  var mean = exports.AVERAGE(range);
	  for (var i = 0; i < n; i++) {
	    sigma += Math.pow(range[i] - mean, 2);
	  }
	  return sigma / (n - 1);
	};

	exports.VARA = function() {
	  var range = utils.flatten(arguments);
	  var n = range.length;
	  var sigma = 0;
	  var count = 0;
	  var mean = exports.AVERAGEA(range);
	  for (var i = 0; i < n; i++) {
	    var el = range[i];
	    if (typeof el === 'number') {
	      sigma += Math.pow(el - mean, 2);
	    } else if (el === true) {
	      sigma += Math.pow(1 - mean, 2);
	    } else {
	      sigma += Math.pow(0 - mean, 2);
	    }

	    if (el !== null) {
	      count++;
	    }
	  }
	  return sigma / (count - 1);
	};

	exports.VARPA = function() {
	  var range = utils.flatten(arguments);
	  var n = range.length;
	  var sigma = 0;
	  var count = 0;
	  var mean = exports.AVERAGEA(range);
	  for (var i = 0; i < n; i++) {
	    var el = range[i];
	    if (typeof el === 'number') {
	      sigma += Math.pow(el - mean, 2);
	    } else if (el === true) {
	      sigma += Math.pow(1 - mean, 2);
	    } else {
	      sigma += Math.pow(0 - mean, 2);
	    }

	    if (el !== null) {
	      count++;
	    }
	  }
	  return sigma / count;
	};

	exports.WEIBULL = {};

	exports.WEIBULL.DIST = function(x, alpha, beta, cumulative) {
	  x = utils.parseNumber(x);
	  alpha = utils.parseNumber(alpha);
	  beta = utils.parseNumber(beta);
	  if (utils.anyIsError(x, alpha, beta)) {
	    return error.value;
	  }
	  return (cumulative) ? 1 - Math.exp(-Math.pow(x / beta, alpha)) : Math.pow(x, alpha - 1) * Math.exp(-Math.pow(x / beta, alpha)) * alpha / Math.pow(beta, alpha);
	};

	exports.Z = {};

	exports.Z.TEST = function(range, x, sd) {
	  range = utils.parseNumberArray(utils.flatten(range));
	  x = utils.parseNumber(x);
	  if (utils.anyIsError(range, x)) {
	    return error.value;
	  }

	  sd = sd || exports.STDEV.S(range);
	  var n = range.length;
	  return 1 - exports.NORM.S.DIST((exports.AVERAGE(range) - x) / (sd / Math.sqrt(n)), true);
	};


/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var utils = __webpack_require__(4);
	var error = __webpack_require__(5);
	var numeral = __webpack_require__(8);

	//TODO
	exports.ASC = function() {
	 throw new Error('ASC is not implemented');
	};

	//TODO
	exports.BAHTTEXT = function() {
	 throw new Error('BAHTTEXT is not implemented');
	};

	exports.CHAR = function(number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return String.fromCharCode(number);
	};

	exports.CLEAN = function(text) {
	  text = text || '';
	  var re = /[\0-\x1F]/g;
	  return text.replace(re, "");
	};

	exports.CODE = function(text) {
	  text = text || '';
	  return text.charCodeAt(0);
	};

	exports.CONCATENATE = function() {
	  var args = utils.flatten(arguments);

	  var trueFound = 0;
	  while ((trueFound = args.indexOf(true)) > -1) {
	    args[trueFound] = 'TRUE';
	  }

	  var falseFound = 0;
	  while ((falseFound = args.indexOf(false)) > -1) {
	    args[falseFound] = 'FALSE';
	  }

	  return args.join('');
	};

	//TODO
	exports.DBCS = function() {
	 throw new Error('DBCS is not implemented');
	};

	exports.DOLLAR = function(number, decimals) {
	  decimals = (decimals === undefined) ? 2 : decimals;

	  number = utils.parseNumber(number);
	  decimals = utils.parseNumber(decimals);
	  if (utils.anyIsError(number, decimals)) {
	    return error.value;
	  }
	  var format = '';
	  if (decimals <= 0) {
	    number = Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
	    format = '($0,0)';
	  } else if (decimals > 0) {
	    format = '($0,0.' + new Array(decimals + 1).join('0') + ')';
	  }
	  return numeral(number).format(format);
	};

	exports.EXACT = function(text1, text2) {
	  return text1 === text2;
	};

	exports.FIND = function(find_text, within_text, position) {
	  position = (position === undefined) ? 0 : position;
	  return within_text ? within_text.indexOf(find_text, position - 1) + 1 : null;
	};

	exports.FIXED = function(number, decimals, no_commas) {
	  decimals = (decimals === undefined) ? 2 : decimals;
	  no_commas = (no_commas === undefined) ? false : no_commas;

	  number = utils.parseNumber(number);
	  decimals = utils.parseNumber(decimals);
	  if (utils.anyIsError(number, decimals)) {
	    return error.value;
	  }

	  var format = no_commas ? '0' : '0,0';
	  if (decimals <= 0) {
	    number = Math.round(number * Math.pow(10, decimals)) / Math.pow(10, decimals);
	  } else if (decimals > 0) {
	    format += '.' + new Array(decimals + 1).join('0');
	  }
	  return numeral(number).format(format);
	};

	exports.HTML2TEXT = function (value) {
	  var result = '';

	  if (value) {
	    if (value instanceof Array) {
	      value.forEach(function (line) {
	        if (result !== '') {
	          result += '\n';
	        }
	        result += (line.replace(/<(?:.|\n)*?>/gm, ''));
	      });
	    } else {
	      result = value.replace(/<(?:.|\n)*?>/gm, '');
	    }
	  }

	  return result;
	};

	exports.LEFT = function(text, number) {
	  number = (number === undefined) ? 1 : number;
	  number = utils.parseNumber(number);
	  if (number instanceof Error || typeof text !== 'string') {
	    return error.value;
	  }
	  return text ? text.substring(0, number) : null;
	};

	exports.LEN = function(text) {
	  if (arguments.length === 0) {
	    return error.error;
	  }

	  if (typeof text === 'string') {
	    return text ? text.length : 0;
	  }

	  if (text.length) {
	    return text.length;
	  }

	  return error.value;
	};

	exports.LOWER = function(text) {
	  if (typeof text !== 'string') {
	    return error.value;
	  }
	  return text ? text.toLowerCase() : text;
	};

	exports.MID = function(text, start, number) {
	  start = utils.parseNumber(start);
	  number = utils.parseNumber(number);
	  if (utils.anyIsError(start, number) || typeof text !== 'string') {
	    return number;
	  }

	  var begin = start - 1;
	  var end = begin + number;

	  return text.substring(begin, end);
	};

	// TODO
	exports.NUMBERVALUE = function (text, decimal_separator, group_separator)  {
	  decimal_separator = (typeof decimal_separator === 'undefined') ? '.' : decimal_separator;
	  group_separator = (typeof group_separator === 'undefined') ? ',' : group_separator;
	  return Number(text.replace(decimal_separator, '.').replace(group_separator, ''));
	};

	// TODO
	exports.PRONETIC = function() {
	 throw new Error('PRONETIC is not implemented');
	};

	exports.PROPER = function(text) {
	  if (text === undefined || text.length === 0) {
	    return error.value;
	  }
	  if (text === true) {
	    text = 'TRUE';
	  }
	  if (text === false) {
	    text = 'FALSE';
	  }
	  if (isNaN(text) && typeof text === 'number') {
	    return error.value;
	  }
	  if (typeof text === 'number') {
	    text = '' + text;
	  }

	  return text.replace(/\w\S*/g, function(txt) {
	    return txt.charAt(0).toUpperCase() + txt.substr(1).toLowerCase();
	  });
	};

	exports.REGEXEXTRACT = function (text, regular_expression) {
	  var match = text.match(new RegExp(regular_expression));
	  return match ? (match[match.length > 1 ? match.length - 1 : 0]) : null;
	};

	exports.REGEXMATCH = function (text, regular_expression, full) {
	  var match = text.match(new RegExp(regular_expression));
	  return full ? match : !!match;
	};

	exports.REGEXREPLACE = function (text, regular_expression, replacement) {
	  return text.replace(new RegExp(regular_expression), replacement);
	};

	exports.REPLACE = function(text, position, length, new_text) {
	  position = utils.parseNumber(position);
	  length = utils.parseNumber(length);
	  if (utils.anyIsError(position, length) ||
	    typeof text !== 'string' ||
	    typeof new_text !== 'string') {
	    return error.value;
	  }
	  return text.substr(0, position - 1) + new_text + text.substr(position - 1 + length);
	};

	exports.REPT = function(text, number) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return new Array(number + 1).join(text);
	};

	exports.RIGHT = function(text, number) {
	  number = (number === undefined) ? 1 : number;
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }
	  return text ? text.substring(text.length - number) : null;
	};

	exports.SEARCH = function(find_text, within_text, position) {
	  var foundAt;
	  if (typeof find_text !== 'string' || typeof within_text !== 'string') {
	    return error.value;
	  }
	  position = (position === undefined) ? 0 : position;
	  foundAt = within_text.toLowerCase().indexOf(find_text.toLowerCase(), position - 1)+1;
	  return (foundAt === 0)?error.value:foundAt;
	};

	exports.SPLIT = function (text, separator) {
	  return text.split(separator);
	};

	exports.SUBSTITUTE = function(text, old_text, new_text, occurrence) {
	  if (!text || !old_text || !new_text) {
	    return text;
	  } else if (occurrence === undefined) {
	    return text.replace(new RegExp(old_text, 'g'), new_text);
	  } else {
	    var index = 0;
	    var i = 0;
	    while (text.indexOf(old_text, index) > 0) {
	      index = text.indexOf(old_text, index + 1);
	      i++;
	      if (i === occurrence) {
	        return text.substring(0, index) + new_text + text.substring(index + old_text.length);
	      }
	    }
	  }
	};

	exports.T = function(value) {
	  return (typeof value === "string") ? value : '';
	};

	// TODO incomplete implementation
	exports.TEXT = function(value, format) {
	  value = utils.parseNumber(value);
	  if (utils.anyIsError(value)) {
	    return error.na;
	  }

	  return numeral(value).format(format);
	};

	exports.TRIM = function(text) {
	  if (typeof text !== 'string') {
	    return error.value;
	  }
	  return text.replace(/ +/g, ' ').trim();
	};

	exports.UNICHAR = this.CHAR;

	exports.UNICODE = this.CODE;

	exports.UPPER = function(text) {
	  if (typeof text !== 'string') {
	    return error.value;
	  }
	  return text.toUpperCase();
	};

	exports.VALUE = function(text) {
	  if (typeof text !== 'string') {
	    return error.value;
	  }
	  return numeral().unformat(text);
	};


/***/ },
/* 8 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_8__;

/***/ },
/* 9 */
/***/ function(module, exports) {

	module.exports = __WEBPACK_EXTERNAL_MODULE_9__;

/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	var utils   = __webpack_require__(4);
	var numeral = __webpack_require__(8);

	exports.UNIQUE = function () {
	  var result = [];
	  for (var i = 0; i < arguments.length; ++i) {
	    var hasElement = false;
	    var element    = arguments[i];

	    // Check if we've already seen this element.
	    for (var j = 0; j < result.length; ++j) {
	      hasElement = result[j] === element;
	      if (hasElement) { break; }
	    }

	    // If we did not find it, add it to the result.
	    if (!hasElement) {
	      result.push(element);
	    }
	  }
	  return result;
	};

	exports.FLATTEN = utils.flatten;

	exports.ARGS2ARRAY = function () {
	  return Array.prototype.slice.call(arguments, 0);
	};

	exports.REFERENCE = function (context, reference) {
	  try {
	    var path = reference.split('.');
	    var result = context;
	    for (var i = 0; i < path.length; ++i) {
	      var step = path[i];
	      if (step[step.length - 1] === ']') {
	        var opening = step.indexOf('[');
	        var index = step.substring(opening + 1, step.length - 1);
	        result = result[step.substring(0, opening)][index];
	      } else {
	        result = result[step];
	      }
	    }
	    return result;
	  } catch (error) {}
	};

	exports.JOIN = function (array, separator) {
	  return array.join(separator);
	};

	exports.NUMBERS = function () {
	  var possibleNumbers = utils.flatten(arguments);
	  return possibleNumbers.filter(function (el) {
	    return typeof el === 'number';
	  });
	};

	exports.NUMERAL = function (number, format) {
	  return numeral(number).format(format);
	};

/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);

	// TODO
	exports.CELL = function() {
	 throw new Error('CELL is not implemented');
	};

	exports.ERROR = {};
	exports.ERROR.TYPE = function(error_val) {
	  switch (error_val) {
	    case error.nil: return 1;
	    case error.div0: return 2;
	    case error.value: return 3;
	    case error.ref: return 4;
	    case error.name: return 5;
	    case error.num: return 6;
	    case error.na: return 7;
	    case error.data: return 8;
	  }
	  return error.na;
	};

	// TODO
	exports.INFO = function() {
	 throw new Error('INFO is not implemented');
	};

	exports.ISBLANK = function(value) {
	  return value === null;
	};

	exports.ISBINARY = function (number) {
	  return (/^[01]{1,10}$/).test(number);
	};

	exports.ISERR = function(value) {
	  return ([error.value, error.ref, error.div0, error.num, error.name, error.nil]).indexOf(value) >= 0 ||
	    (typeof value === 'number' && (isNaN(value) || !isFinite(value)));
	};

	exports.ISERROR = function(value) {
	  return exports.ISERR(value) || value === error.na;
	};

	exports.ISEVEN = function(number) {
	  return (Math.floor(Math.abs(number)) & 1) ? false : true;
	};

	// TODO
	exports.ISFORMULA = function() {
	  throw new Error('ISFORMULA is not implemented');
	};

	exports.ISLOGICAL = function(value) {
	  return value === true || value === false;
	};

	exports.ISNA = function(value) {
	  return value === error.na;
	};

	exports.ISNONTEXT = function(value) {
	  return typeof(value) !== 'string';
	};

	exports.ISNUMBER = function(value) {
	  return typeof(value) === 'number' && !isNaN(value) && isFinite(value);
	};

	exports.ISODD = function(number) {
	  return (Math.floor(Math.abs(number)) & 1) ? true : false;
	};

	// TODO
	exports.ISREF = function() {
	  throw new Error('ISREF is not implemented');
	};

	exports.ISTEXT = function(value) {
	  return typeof(value) === 'string';
	};

	exports.N = function(value) {
	  if (this.ISNUMBER(value)) {
	    return value;
	  }
	  if (value instanceof Date) {
	    return value.getTime();
	  }
	  if (value === true) {
	    return 1;
	  }
	  if (value === false) {
	    return 0;
	  }
	  if (this.ISERROR(value)) {
	    return value;
	  }
	  return 0;
	};

	exports.NA = function() {
	  return error.na;
	};


	// TODO
	exports.SHEET = function() {
	  throw new Error('SHEET is not implemented');
	};

	// TODO
	exports.SHEETS = function() {
	  throw new Error('SHEETS is not implemented');
	};

	exports.TYPE = function(value) {
	  if (this.ISNUMBER(value)) {
	    return 1;
	  }
	  if (this.ISTEXT(value)) {
	    return 2;
	  }
	  if (this.ISLOGICAL(value)) {
	    return 4;
	  }
	  if (this.ISERROR(value)) {
	    return 16;
	  }
	  if (Array.isArray(value)) {
	    return 64;
	  }
	};


/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);
	var jStat = __webpack_require__(9).jStat;
	var text = __webpack_require__(7);
	var utils = __webpack_require__(4);
	var bessel = __webpack_require__(13);

	function isValidBinaryNumber(number) {
	  return (/^[01]{1,10}$/).test(number);
	}

	exports.BESSELI = function(x, n) {
	  x = utils.parseNumber(x);
	  n = utils.parseNumber(n);
	  if (utils.anyIsError(x, n)) {
	    return error.value;
	  }
	  return bessel.besseli(x, n);
	};

	exports.BESSELJ = function(x, n) {
	  x = utils.parseNumber(x);
	  n = utils.parseNumber(n);
	  if (utils.anyIsError(x, n)) {
	    return error.value;
	  }
	  return bessel.besselj(x, n);
	};

	exports.BESSELK = function(x, n) {
	  x = utils.parseNumber(x);
	  n = utils.parseNumber(n);
	  if (utils.anyIsError(x, n)) {
	    return error.value;
	  }
	  return bessel.besselk(x, n);
	};

	exports.BESSELY = function(x, n) {
	  x = utils.parseNumber(x);
	  n = utils.parseNumber(n);
	  if (utils.anyIsError(x, n)) {
	    return error.value;
	  }
	  return bessel.bessely(x, n);
	};

	exports.BIN2DEC = function(number) {
	  // Return error if number is not binary or contains more than 10 characters (10 digits)
	  if (!isValidBinaryNumber(number)) {
	    return error.num;
	  }

	  // Convert binary number to decimal
	  var result = parseInt(number, 2);

	  // Handle negative numbers
	  var stringified = number.toString();
	  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
	    return parseInt(stringified.substring(1), 2) - 512;
	  } else {
	    return result;
	  }
	};


	exports.BIN2HEX = function(number, places) {
	  // Return error if number is not binary or contains more than 10 characters (10 digits)
	  if (!isValidBinaryNumber(number)) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character hexadecimal number if number is negative
	  var stringified = number.toString();
	  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
	    return (1099511627264 + parseInt(stringified.substring(1), 2)).toString(16);
	  }

	  // Convert binary number to hexadecimal
	  var result = parseInt(number, 2).toString(16);

	  // Return hexadecimal number using the minimum number of characters necessary if places is undefined
	  if (places === undefined) {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.BIN2OCT = function(number, places) {
	  // Return error if number is not binary or contains more than 10 characters (10 digits)
	  if (!isValidBinaryNumber(number)) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character octal number if number is negative
	  var stringified = number.toString();
	  if (stringified.length === 10 && stringified.substring(0, 1) === '1') {
	    return (1073741312 + parseInt(stringified.substring(1), 2)).toString(8);
	  }

	  // Convert binary number to octal
	  var result = parseInt(number, 2).toString(8);

	  // Return octal number using the minimum number of characters necessary if places is undefined
	  if (places === undefined) {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.BITAND = function(number1, number2) {
	  // Return error if either number is a non-numeric value
	  number1 = utils.parseNumber(number1);
	  number2 = utils.parseNumber(number2);
	  if (utils.anyIsError(number1, number2)) {
	    return error.value;
	  }

	  // Return error if either number is less than 0
	  if (number1 < 0 || number2 < 0) {
	    return error.num;
	  }

	  // Return error if either number is a non-integer
	  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {
	    return error.num;
	  }

	  // Return error if either number is greater than (2^48)-1
	  if (number1 > 281474976710655 || number2 > 281474976710655) {
	    return error.num;
	  }

	  // Return bitwise AND of two numbers
	  return number1 & number2;
	};

	exports.BITLSHIFT = function(number, shift) {
	  number = utils.parseNumber(number);
	  shift = utils.parseNumber(shift);
	  if (utils.anyIsError(number, shift)) {
	    return error.value;
	  }

	  // Return error if number is less than 0
	  if (number < 0) {
	    return error.num;
	  }

	  // Return error if number is a non-integer
	  if (Math.floor(number) !== number) {
	    return error.num;
	  }

	  // Return error if number is greater than (2^48)-1
	  if (number > 281474976710655) {
	    return error.num;
	  }

	  // Return error if the absolute value of shift is greater than 53
	  if (Math.abs(shift) > 53) {
	    return error.num;
	  }

	  // Return number shifted by shift bits to the left or to the right if shift is negative
	  return (shift >= 0) ? number << shift : number >> -shift;
	};

	exports.BITOR = function(number1, number2) {
	  number1 = utils.parseNumber(number1);
	  number2 = utils.parseNumber(number2);
	  if (utils.anyIsError(number1, number2)) {
	    return error.value;
	  }

	  // Return error if either number is less than 0
	  if (number1 < 0 || number2 < 0) {
	    return error.num;
	  }

	  // Return error if either number is a non-integer
	  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {
	    return error.num;
	  }

	  // Return error if either number is greater than (2^48)-1
	  if (number1 > 281474976710655 || number2 > 281474976710655) {
	    return error.num;
	  }

	  // Return bitwise OR of two numbers
	  return number1 | number2;
	};

	exports.BITRSHIFT = function(number, shift) {
	  number = utils.parseNumber(number);
	  shift = utils.parseNumber(shift);
	  if (utils.anyIsError(number, shift)) {
	    return error.value;
	  }

	  // Return error if number is less than 0
	  if (number < 0) {
	    return error.num;
	  }

	  // Return error if number is a non-integer
	  if (Math.floor(number) !== number) {
	    return error.num;
	  }

	  // Return error if number is greater than (2^48)-1
	  if (number > 281474976710655) {
	    return error.num;
	  }

	  // Return error if the absolute value of shift is greater than 53
	  if (Math.abs(shift) > 53) {
	    return error.num;
	  }

	  // Return number shifted by shift bits to the right or to the left if shift is negative
	  return (shift >= 0) ? number >> shift : number << -shift;
	};

	exports.BITXOR = function(number1, number2) {
	  number1 = utils.parseNumber(number1);
	  number2 = utils.parseNumber(number2);
	  if (utils.anyIsError(number1, number2)) {
	    return error.value;
	  }

	  // Return error if either number is less than 0
	  if (number1 < 0 || number2 < 0) {
	    return error.num;
	  }

	  // Return error if either number is a non-integer
	  if (Math.floor(number1) !== number1 || Math.floor(number2) !== number2) {
	    return error.num;
	  }

	  // Return error if either number is greater than (2^48)-1
	  if (number1 > 281474976710655 || number2 > 281474976710655) {
	    return error.num;
	  }

	  // Return bitwise XOR of two numbers
	  return number1 ^ number2;
	};

	exports.COMPLEX = function(real, imaginary, suffix) {
	  real = utils.parseNumber(real);
	  imaginary = utils.parseNumber(imaginary);
	  if (utils.anyIsError(real, imaginary)) {
	    return real;
	  }

	  // Set suffix
	  suffix = (suffix === undefined) ? 'i' : suffix;

	  // Return error if suffix is neither "i" nor "j"
	  if (suffix !== 'i' && suffix !== 'j') {
	    return error.value;
	  }

	  // Return complex number
	  if (real === 0 && imaginary === 0) {
	    return 0;
	  } else if (real === 0) {
	    return (imaginary === 1) ? suffix : imaginary.toString() + suffix;
	  } else if (imaginary === 0) {
	    return real.toString();
	  } else {
	    var sign = (imaginary > 0) ? '+' : '';
	    return real.toString() + sign + ((imaginary === 1) ? suffix : imaginary.toString() + suffix);
	  }
	};

	exports.CONVERT = function(number, from_unit, to_unit) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }

	  // List of units supported by CONVERT and units defined by the International System of Units
	  // [Name, Symbol, Alternate symbols, Quantity, ISU, CONVERT, Conversion ratio]
	  var units = [
	    ["a.u. of action", "?", null, "action", false, false, 1.05457168181818e-34],
	    ["a.u. of charge", "e", null, "electric_charge", false, false, 1.60217653141414e-19],
	    ["a.u. of energy", "Eh", null, "energy", false, false, 4.35974417757576e-18],
	    ["a.u. of length", "a?", null, "length", false, false, 5.29177210818182e-11],
	    ["a.u. of mass", "m?", null, "mass", false, false, 9.10938261616162e-31],
	    ["a.u. of time", "?/Eh", null, "time", false, false, 2.41888432650516e-17],
	    ["admiralty knot", "admkn", null, "speed", false, true, 0.514773333],
	    ["ampere", "A", null, "electric_current", true, false, 1],
	    ["ampere per meter", "A/m", null, "magnetic_field_intensity", true, false, 1],
	    ["ångström", "Å", ["ang"], "length", false, true, 1e-10],
	    ["are", "ar", null, "area", false, true, 100],
	    ["astronomical unit", "ua", null, "length", false, false, 1.49597870691667e-11],
	    ["bar", "bar", null, "pressure", false, false, 100000],
	    ["barn", "b", null, "area", false, false, 1e-28],
	    ["becquerel", "Bq", null, "radioactivity", true, false, 1],
	    ["bit", "bit", ["b"], "information", false, true, 1],
	    ["btu", "BTU", ["btu"], "energy", false, true, 1055.05585262],
	    ["byte", "byte", null, "information", false, true, 8],
	    ["candela", "cd", null, "luminous_intensity", true, false, 1],
	    ["candela per square metre", "cd/m?", null, "luminance", true, false, 1],
	    ["coulomb", "C", null, "electric_charge", true, false, 1],
	    ["cubic ångström", "ang3", ["ang^3"], "volume", false, true, 1e-30],
	    ["cubic foot", "ft3", ["ft^3"], "volume", false, true, 0.028316846592],
	    ["cubic inch", "in3", ["in^3"], "volume", false, true, 0.000016387064],
	    ["cubic light-year", "ly3", ["ly^3"], "volume", false, true, 8.46786664623715e-47],
	    ["cubic metre", "m?", null, "volume", true, true, 1],
	    ["cubic mile", "mi3", ["mi^3"], "volume", false, true, 4168181825.44058],
	    ["cubic nautical mile", "Nmi3", ["Nmi^3"], "volume", false, true, 6352182208],
	    ["cubic Pica", "Pica3", ["Picapt3", "Pica^3", "Picapt^3"], "volume", false, true, 7.58660370370369e-8],
	    ["cubic yard", "yd3", ["yd^3"], "volume", false, true, 0.764554857984],
	    ["cup", "cup", null, "volume", false, true, 0.0002365882365],
	    ["dalton", "Da", ["u"], "mass", false, false, 1.66053886282828e-27],
	    ["day", "d", ["day"], "time", false, true, 86400],
	    ["degree", "°", null, "angle", false, false, 0.0174532925199433],
	    ["degrees Rankine", "Rank", null, "temperature", false, true, 0.555555555555556],
	    ["dyne", "dyn", ["dy"], "force", false, true, 0.00001],
	    ["electronvolt", "eV", ["ev"], "energy", false, true, 1.60217656514141],
	    ["ell", "ell", null, "length", false, true, 1.143],
	    ["erg", "erg", ["e"], "energy", false, true, 1e-7],
	    ["farad", "F", null, "electric_capacitance", true, false, 1],
	    ["fluid ounce", "oz", null, "volume", false, true, 0.0000295735295625],
	    ["foot", "ft", null, "length", false, true, 0.3048],
	    ["foot-pound", "flb", null, "energy", false, true, 1.3558179483314],
	    ["gal", "Gal", null, "acceleration", false, false, 0.01],
	    ["gallon", "gal", null, "volume", false, true, 0.003785411784],
	    ["gauss", "G", ["ga"], "magnetic_flux_density", false, true, 1],
	    ["grain", "grain", null, "mass", false, true, 0.0000647989],
	    ["gram", "g", null, "mass", false, true, 0.001],
	    ["gray", "Gy", null, "absorbed_dose", true, false, 1],
	    ["gross registered ton", "GRT", ["regton"], "volume", false, true, 2.8316846592],
	    ["hectare", "ha", null, "area", false, true, 10000],
	    ["henry", "H", null, "inductance", true, false, 1],
	    ["hertz", "Hz", null, "frequency", true, false, 1],
	    ["horsepower", "HP", ["h"], "power", false, true, 745.69987158227],
	    ["horsepower-hour", "HPh", ["hh", "hph"], "energy", false, true, 2684519.538],
	    ["hour", "h", ["hr"], "time", false, true, 3600],
	    ["imperial gallon (U.K.)", "uk_gal", null, "volume", false, true, 0.00454609],
	    ["imperial hundredweight", "lcwt", ["uk_cwt", "hweight"], "mass", false, true, 50.802345],
	    ["imperial quart (U.K)", "uk_qt", null, "volume", false, true, 0.0011365225],
	    ["imperial ton", "brton", ["uk_ton", "LTON"], "mass", false, true, 1016.046909],
	    ["inch", "in", null, "length", false, true, 0.0254],
	    ["international acre", "uk_acre", null, "area", false, true, 4046.8564224],
	    ["IT calorie", "cal", null, "energy", false, true, 4.1868],
	    ["joule", "J", null, "energy", true, true, 1],
	    ["katal", "kat", null, "catalytic_activity", true, false, 1],
	    ["kelvin", "K", ["kel"], "temperature", true, true, 1],
	    ["kilogram", "kg", null, "mass", true, true, 1],
	    ["knot", "kn", null, "speed", false, true, 0.514444444444444],
	    ["light-year", "ly", null, "length", false, true, 9460730472580800],
	    ["litre", "L", ["l", "lt"], "volume", false, true, 0.001],
	    ["lumen", "lm", null, "luminous_flux", true, false, 1],
	    ["lux", "lx", null, "illuminance", true, false, 1],
	    ["maxwell", "Mx", null, "magnetic_flux", false, false, 1e-18],
	    ["measurement ton", "MTON", null, "volume", false, true, 1.13267386368],
	    ["meter per hour", "m/h", ["m/hr"], "speed", false, true, 0.00027777777777778],
	    ["meter per second", "m/s", ["m/sec"], "speed", true, true, 1],
	    ["meter per second squared", "m?s??", null, "acceleration", true, false, 1],
	    ["parsec", "pc", ["parsec"], "length", false, true, 30856775814671900],
	    ["meter squared per second", "m?/s", null, "kinematic_viscosity", true, false, 1],
	    ["metre", "m", null, "length", true, true, 1],
	    ["miles per hour", "mph", null, "speed", false, true, 0.44704],
	    ["millimetre of mercury", "mmHg", null, "pressure", false, false, 133.322],
	    ["minute", "?", null, "angle", false, false, 0.000290888208665722],
	    ["minute", "min", ["mn"], "time", false, true, 60],
	    ["modern teaspoon", "tspm", null, "volume", false, true, 0.000005],
	    ["mole", "mol", null, "amount_of_substance", true, false, 1],
	    ["morgen", "Morgen", null, "area", false, true, 2500],
	    ["n.u. of action", "?", null, "action", false, false, 1.05457168181818e-34],
	    ["n.u. of mass", "m?", null, "mass", false, false, 9.10938261616162e-31],
	    ["n.u. of speed", "c?", null, "speed", false, false, 299792458],
	    ["n.u. of time", "?/(me?c??)", null, "time", false, false, 1.28808866778687e-21],
	    ["nautical mile", "M", ["Nmi"], "length", false, true, 1852],
	    ["newton", "N", null, "force", true, true, 1],
	    ["œrsted", "Oe ", null, "magnetic_field_intensity", false, false, 79.5774715459477],
	    ["ohm", "Ω", null, "electric_resistance", true, false, 1],
	    ["ounce mass", "ozm", null, "mass", false, true, 0.028349523125],
	    ["pascal", "Pa", null, "pressure", true, false, 1],
	    ["pascal second", "Pa?s", null, "dynamic_viscosity", true, false, 1],
	    ["pferdestärke", "PS", null, "power", false, true, 735.49875],
	    ["phot", "ph", null, "illuminance", false, false, 0.0001],
	    ["pica (1/6 inch)", "pica", null, "length", false, true, 0.00035277777777778],
	    ["pica (1/72 inch)", "Pica", ["Picapt"], "length", false, true, 0.00423333333333333],
	    ["poise", "P", null, "dynamic_viscosity", false, false, 0.1],
	    ["pond", "pond", null, "force", false, true, 0.00980665],
	    ["pound force", "lbf", null, "force", false, true, 4.4482216152605],
	    ["pound mass", "lbm", null, "mass", false, true, 0.45359237],
	    ["quart", "qt", null, "volume", false, true, 0.000946352946],
	    ["radian", "rad", null, "angle", true, false, 1],
	    ["second", "?", null, "angle", false, false, 0.00000484813681109536],
	    ["second", "s", ["sec"], "time", true, true, 1],
	    ["short hundredweight", "cwt", ["shweight"], "mass", false, true, 45.359237],
	    ["siemens", "S", null, "electrical_conductance", true, false, 1],
	    ["sievert", "Sv", null, "equivalent_dose", true, false, 1],
	    ["slug", "sg", null, "mass", false, true, 14.59390294],
	    ["square ångström", "ang2", ["ang^2"], "area", false, true, 1e-20],
	    ["square foot", "ft2", ["ft^2"], "area", false, true, 0.09290304],
	    ["square inch", "in2", ["in^2"], "area", false, true, 0.00064516],
	    ["square light-year", "ly2", ["ly^2"], "area", false, true, 8.95054210748189e+31],
	    ["square meter", "m?", null, "area", true, true, 1],
	    ["square mile", "mi2", ["mi^2"], "area", false, true, 2589988.110336],
	    ["square nautical mile", "Nmi2", ["Nmi^2"], "area", false, true, 3429904],
	    ["square Pica", "Pica2", ["Picapt2", "Pica^2", "Picapt^2"], "area", false, true, 0.00001792111111111],
	    ["square yard", "yd2", ["yd^2"], "area", false, true, 0.83612736],
	    ["statute mile", "mi", null, "length", false, true, 1609.344],
	    ["steradian", "sr", null, "solid_angle", true, false, 1],
	    ["stilb", "sb", null, "luminance", false, false, 0.0001],
	    ["stokes", "St", null, "kinematic_viscosity", false, false, 0.0001],
	    ["stone", "stone", null, "mass", false, true, 6.35029318],
	    ["tablespoon", "tbs", null, "volume", false, true, 0.0000147868],
	    ["teaspoon", "tsp", null, "volume", false, true, 0.00000492892],
	    ["tesla", "T", null, "magnetic_flux_density", true, true, 1],
	    ["thermodynamic calorie", "c", null, "energy", false, true, 4.184],
	    ["ton", "ton", null, "mass", false, true, 907.18474],
	    ["tonne", "t", null, "mass", false, false, 1000],
	    ["U.K. pint", "uk_pt", null, "volume", false, true, 0.00056826125],
	    ["U.S. bushel", "bushel", null, "volume", false, true, 0.03523907],
	    ["U.S. oil barrel", "barrel", null, "volume", false, true, 0.158987295],
	    ["U.S. pint", "pt", ["us_pt"], "volume", false, true, 0.000473176473],
	    ["U.S. survey mile", "survey_mi", null, "length", false, true, 1609.347219],
	    ["U.S. survey/statute acre", "us_acre", null, "area", false, true, 4046.87261],
	    ["volt", "V", null, "voltage", true, false, 1],
	    ["watt", "W", null, "power", true, true, 1],
	    ["watt-hour", "Wh", ["wh"], "energy", false, true, 3600],
	    ["weber", "Wb", null, "magnetic_flux", true, false, 1],
	    ["yard", "yd", null, "length", false, true, 0.9144],
	    ["year", "yr", null, "time", false, true, 31557600]
	  ];

	  // Binary prefixes
	  // [Name, Prefix power of 2 value, Previx value, Abbreviation, Derived from]
	  var binary_prefixes = {
	    Yi: ["yobi", 80, 1208925819614629174706176, "Yi", "yotta"],
	    Zi: ["zebi", 70, 1180591620717411303424, "Zi", "zetta"],
	    Ei: ["exbi", 60, 1152921504606846976, "Ei", "exa"],
	    Pi: ["pebi", 50, 1125899906842624, "Pi", "peta"],
	    Ti: ["tebi", 40, 1099511627776, "Ti", "tera"],
	    Gi: ["gibi", 30, 1073741824, "Gi", "giga"],
	    Mi: ["mebi", 20, 1048576, "Mi", "mega"],
	    ki: ["kibi", 10, 1024, "ki", "kilo"]
	  };

	  // Unit prefixes
	  // [Name, Multiplier, Abbreviation]
	  var unit_prefixes = {
	    Y: ["yotta", 1e+24, "Y"],
	    Z: ["zetta", 1e+21, "Z"],
	    E: ["exa", 1e+18, "E"],
	    P: ["peta", 1e+15, "P"],
	    T: ["tera", 1e+12, "T"],
	    G: ["giga", 1e+09, "G"],
	    M: ["mega", 1e+06, "M"],
	    k: ["kilo", 1e+03, "k"],
	    h: ["hecto", 1e+02, "h"],
	    e: ["dekao", 1e+01, "e"],
	    d: ["deci", 1e-01, "d"],
	    c: ["centi", 1e-02, "c"],
	    m: ["milli", 1e-03, "m"],
	    u: ["micro", 1e-06, "u"],
	    n: ["nano", 1e-09, "n"],
	    p: ["pico", 1e-12, "p"],
	    f: ["femto", 1e-15, "f"],
	    a: ["atto", 1e-18, "a"],
	    z: ["zepto", 1e-21, "z"],
	    y: ["yocto", 1e-24, "y"]
	  };

	  // Initialize units and multipliers
	  var from = null;
	  var to = null;
	  var base_from_unit = from_unit;
	  var base_to_unit = to_unit;
	  var from_multiplier = 1;
	  var to_multiplier = 1;
	  var alt;

	  // Lookup from and to units
	  for (var i = 0; i < units.length; i++) {
	    alt = (units[i][2] === null) ? [] : units[i][2];
	    if (units[i][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {
	      from = units[i];
	    }
	    if (units[i][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {
	      to = units[i];
	    }
	  }

	  // Lookup from prefix
	  if (from === null) {
	    var from_binary_prefix = binary_prefixes[from_unit.substring(0, 2)];
	    var from_unit_prefix = unit_prefixes[from_unit.substring(0, 1)];

	    // Handle dekao unit prefix (only unit prefix with two characters)
	    if (from_unit.substring(0, 2) === 'da') {
	      from_unit_prefix = ["dekao", 1e+01, "da"];
	    }

	    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')
	    if (from_binary_prefix) {
	      from_multiplier = from_binary_prefix[2];
	      base_from_unit = from_unit.substring(2);
	    } else if (from_unit_prefix) {
	      from_multiplier = from_unit_prefix[1];
	      base_from_unit = from_unit.substring(from_unit_prefix[2].length);
	    }

	    // Lookup from unit
	    for (var j = 0; j < units.length; j++) {
	      alt = (units[j][2] === null) ? [] : units[j][2];
	      if (units[j][1] === base_from_unit || alt.indexOf(base_from_unit) >= 0) {
	        from = units[j];
	      }
	    }
	  }

	  // Lookup to prefix
	  if (to === null) {
	    var to_binary_prefix = binary_prefixes[to_unit.substring(0, 2)];
	    var to_unit_prefix = unit_prefixes[to_unit.substring(0, 1)];

	    // Handle dekao unit prefix (only unit prefix with two characters)
	    if (to_unit.substring(0, 2) === 'da') {
	      to_unit_prefix = ["dekao", 1e+01, "da"];
	    }

	    // Handle binary prefixes first (so that 'Yi' is processed before 'Y')
	    if (to_binary_prefix) {
	      to_multiplier = to_binary_prefix[2];
	      base_to_unit = to_unit.substring(2);
	    } else if (to_unit_prefix) {
	      to_multiplier = to_unit_prefix[1];
	      base_to_unit = to_unit.substring(to_unit_prefix[2].length);
	    }

	    // Lookup to unit
	    for (var k = 0; k < units.length; k++) {
	      alt = (units[k][2] === null) ? [] : units[k][2];
	      if (units[k][1] === base_to_unit || alt.indexOf(base_to_unit) >= 0) {
	        to = units[k];
	      }
	    }
	  }

	  // Return error if a unit does not exist
	  if (from === null || to === null) {
	    return error.na;
	  }

	  // Return error if units represent different quantities
	  if (from[3] !== to[3]) {
	    return error.na;
	  }

	  // Return converted number
	  return number * from[6] * from_multiplier / (to[6] * to_multiplier);
	};

	exports.DEC2BIN = function(number, places) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }

	  // Return error if number is not decimal, is lower than -512, or is greater than 511
	  if (!/^-?[0-9]{1,3}$/.test(number) || number < -512 || number > 511) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character binary number if number is negative
	  if (number < 0) {
	    return '1' + text.REPT('0', 9 - (512 + number).toString(2).length) + (512 + number).toString(2);
	  }

	  // Convert decimal number to binary
	  var result = parseInt(number, 10).toString(2);

	  // Return binary number using the minimum number of characters necessary if places is undefined
	  if (typeof places === 'undefined') {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.DEC2HEX = function(number, places) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }

	  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887
	  if (!/^-?[0-9]{1,12}$/.test(number) || number < -549755813888 || number > 549755813887) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character hexadecimal number if number is negative
	  if (number < 0) {
	    return (1099511627776 + number).toString(16);
	  }

	  // Convert decimal number to hexadecimal
	  var result = parseInt(number, 10).toString(16);

	  // Return hexadecimal number using the minimum number of characters necessary if places is undefined
	  if (typeof places === 'undefined') {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.DEC2OCT = function(number, places) {
	  number = utils.parseNumber(number);
	  if (number instanceof Error) {
	    return number;
	  }

	  // Return error if number is not decimal, is lower than -549755813888, or is greater than 549755813887
	  if (!/^-?[0-9]{1,9}$/.test(number) || number < -536870912 || number > 536870911) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character octal number if number is negative
	  if (number < 0) {
	    return (1073741824 + number).toString(8);
	  }

	  // Convert decimal number to octal
	  var result = parseInt(number, 10).toString(8);

	  // Return octal number using the minimum number of characters necessary if places is undefined
	  if (typeof places === 'undefined') {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.DELTA = function(number1, number2) {
	  // Set number2 to zero if undefined
	  number2 = (number2 === undefined) ? 0 : number2;
	  number1 = utils.parseNumber(number1);
	  number2 = utils.parseNumber(number2);
	  if (utils.anyIsError(number1, number2)) {
	    return error.value;
	  }

	  // Return delta
	  return (number1 === number2) ? 1 : 0;
	};

	// TODO: why is upper_bound not used ? The excel documentation has no examples with upper_bound
	exports.ERF = function(lower_bound, upper_bound) {
	  // Set number2 to zero if undefined
	  upper_bound = (upper_bound === undefined) ? 0 : upper_bound;

	  lower_bound = utils.parseNumber(lower_bound);
	  upper_bound = utils.parseNumber(upper_bound);
	  if (utils.anyIsError(lower_bound, upper_bound)) {
	    return error.value;
	  }

	  return jStat.erf(lower_bound);
	};

	// TODO
	exports.ERF.PRECISE = function() {
	 throw new Error('ERF.PRECISE is not implemented');
	};

	exports.ERFC = function(x) {
	  // Return error if x is not a number
	  if (isNaN(x)) {
	    return error.value;
	  }

	  return jStat.erfc(x);
	};

	// TODO
	exports.ERFC.PRECISE = function() {
	 throw new Error('ERFC.PRECISE is not implemented');
	};

	exports.GESTEP = function(number, step) {
	  step = step || 0;
	  number = utils.parseNumber(number);
	  if (utils.anyIsError(step, number)) {
	    return number;
	  }

	  // Return delta
	  return (number >= step) ? 1 : 0;
	};

	exports.HEX2BIN = function(number, places) {
	  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)
	  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
	    return error.num;
	  }

	  // Check if number is negative
	  var negative = (number.length === 10 && number.substring(0, 1).toLowerCase() === 'f') ? true : false;

	  // Convert hexadecimal number to decimal
	  var decimal = (negative) ? parseInt(number, 16) - 1099511627776 : parseInt(number, 16);

	  // Return error if number is lower than -512 or greater than 511
	  if (decimal < -512 || decimal > 511) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character binary number if number is negative
	  if (negative) {
	    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);
	  }

	  // Convert decimal number to binary
	  var result = decimal.toString(2);

	  // Return binary number using the minimum number of characters necessary if places is undefined
	  if (places === undefined) {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.HEX2DEC = function(number) {
	  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)
	  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
	    return error.num;
	  }

	  // Convert hexadecimal number to decimal
	  var decimal = parseInt(number, 16);

	  // Return decimal number
	  return (decimal >= 549755813888) ? decimal - 1099511627776 : decimal;
	};

	exports.HEX2OCT = function(number, places) {
	  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)
	  if (!/^[0-9A-Fa-f]{1,10}$/.test(number)) {
	    return error.num;
	  }

	  // Convert hexadecimal number to decimal
	  var decimal = parseInt(number, 16);

	  // Return error if number is positive and greater than 0x1fffffff (536870911)
	  if (decimal > 536870911 && decimal < 1098974756864) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character octal number if number is negative
	  if (decimal >= 1098974756864) {
	    return (decimal - 1098437885952).toString(8);
	  }

	  // Convert decimal number to octal
	  var result = decimal.toString(8);

	  // Return octal number using the minimum number of characters necessary if places is undefined
	  if (places === undefined) {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.IMABS = function(inumber) {
	  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  // Return error if either coefficient is not a number
	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Return absolute value of complex number
	  return Math.sqrt(Math.pow(x, 2) + Math.pow(y, 2));
	};

	exports.IMAGINARY = function(inumber) {
	  if (inumber === undefined || inumber === true || inumber === false) {
	    return error.value;
	  }

	  // Return 0 if inumber is equal to 0
	  if (inumber === 0 || inumber === '0') {
	    return 0;
	  }

	  // Handle special cases
	  if (['i', 'j'].indexOf(inumber) >= 0) {
	    return 1;
	  }

	  // Normalize imaginary coefficient
	  inumber = inumber.replace('+i', '+1i').replace('-i', '-1i').replace('+j', '+1j').replace('-j', '-1j');

	  // Lookup sign
	  var plus = inumber.indexOf('+');
	  var minus = inumber.indexOf('-');
	  if (plus === 0) {
	    plus = inumber.indexOf('+', 1);
	  }

	  if (minus === 0) {
	    minus = inumber.indexOf('-', 1);
	  }

	  // Lookup imaginary unit
	  var last = inumber.substring(inumber.length - 1, inumber.length);
	  var unit = (last === 'i' || last === 'j');

	  if (plus >= 0 || minus >= 0) {
	    // Return error if imaginary unit is neither i nor j
	    if (!unit) {
	      return error.num;
	    }

	    // Return imaginary coefficient of complex number
	    if (plus >= 0) {
	      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?
	        error.num :
	        Number(inumber.substring(plus + 1, inumber.length - 1));
	    } else {
	      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?
	        error.num :
	        -Number(inumber.substring(minus + 1, inumber.length - 1));
	    }
	  } else {
	    if (unit) {
	      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : inumber.substring(0, inumber.length - 1);
	    } else {
	      return (isNaN(inumber)) ? error.num : 0;
	    }
	  }
	};

	exports.IMARGUMENT = function(inumber) {
	  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  // Return error if either coefficient is not a number
	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Return error if inumber is equal to zero
	  if (x === 0 && y === 0) {
	    return error.div0;
	  }

	  // Return PI/2 if x is equal to zero and y is positive
	  if (x === 0 && y > 0) {
	    return Math.PI / 2;
	  }

	  // Return -PI/2 if x is equal to zero and y is negative
	  if (x === 0 && y < 0) {
	    return -Math.PI / 2;
	  }

	  // Return zero if x is negative and y is equal to zero
	  if (y === 0 && x > 0) {
	    return 0;
	  }

	  // Return zero if x is negative and y is equal to zero
	  if (y === 0 && x < 0) {
	    return -Math.PI;
	  }

	  // Return argument of complex number
	  if (x > 0) {
	    return Math.atan(y / x);
	  } else if (x < 0 && y >= 0) {
	    return Math.atan(y / x) + Math.PI;
	  } else {
	    return Math.atan(y / x) - Math.PI;
	  }
	};

	exports.IMCONJUGATE = function(inumber) {
	  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return conjugate of complex number
	  return (y !== 0) ? exports.COMPLEX(x, -y, unit) : inumber;
	};

	exports.IMCOS = function(inumber) {
	  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return cosine of complex number
	  return exports.COMPLEX(Math.cos(x) * (Math.exp(y) + Math.exp(-y)) / 2, -Math.sin(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);
	};

	exports.IMCOSH = function(inumber) {
	  // Lookup real and imaginary coefficients using exports.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return hyperbolic cosine of complex number
	  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) + Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) - Math.exp(-x)) / 2, unit);
	};

	exports.IMCOT = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Return cotangent of complex number
	  return exports.IMDIV(exports.IMCOS(inumber), exports.IMSIN(inumber));
	};

	exports.IMDIV = function(inumber1, inumber2) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var a = exports.IMREAL(inumber1);
	  var b = exports.IMAGINARY(inumber1);
	  var c = exports.IMREAL(inumber2);
	  var d = exports.IMAGINARY(inumber2);

	  if (utils.anyIsError(a, b, c, d)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit1 = inumber1.substring(inumber1.length - 1);
	  var unit2 = inumber2.substring(inumber2.length - 1);
	  var unit = 'i';
	  if (unit1 === 'j') {
	    unit = 'j';
	  } else if (unit2 === 'j') {
	    unit = 'j';
	  }

	  // Return error if inumber2 is null
	  if (c === 0 && d === 0) {
	    return error.num;
	  }

	  // Return exponential of complex number
	  var den = c * c + d * d;
	  return exports.COMPLEX((a * c + b * d) / den, (b * c - a * d) / den, unit);
	};

	exports.IMEXP = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return exponential of complex number
	  var e = Math.exp(x);
	  return exports.COMPLEX(e * Math.cos(y), e * Math.sin(y), unit);
	};

	exports.IMLN = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return exponential of complex number
	  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)), Math.atan(y / x), unit);
	};

	exports.IMLOG10 = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return exponential of complex number
	  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(10), Math.atan(y / x) / Math.log(10), unit);
	};

	exports.IMLOG2 = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return exponential of complex number
	  return exports.COMPLEX(Math.log(Math.sqrt(x * x + y * y)) / Math.log(2), Math.atan(y / x) / Math.log(2), unit);
	};

	exports.IMPOWER = function(inumber, number) {
	  number = utils.parseNumber(number);
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);
	  if (utils.anyIsError(number, x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Calculate power of modulus
	  var p = Math.pow(exports.IMABS(inumber), number);

	  // Calculate argument
	  var t = exports.IMARGUMENT(inumber);

	  // Return exponential of complex number
	  return exports.COMPLEX(p * Math.cos(number * t), p * Math.sin(number * t), unit);
	};

	exports.IMPRODUCT = function() {
	  // Initialize result
	  var result = arguments[0];

	  // Loop on all numbers
	  for (var i = 1; i < arguments.length; i++) {
	    // Lookup coefficients of two complex numbers
	    var a = exports.IMREAL(result);
	    var b = exports.IMAGINARY(result);
	    var c = exports.IMREAL(arguments[i]);
	    var d = exports.IMAGINARY(arguments[i]);

	    if (utils.anyIsError(a, b, c, d)) {
	      return error.value;
	    }

	    // Complute product of two complex numbers
	    result = exports.COMPLEX(a * c - b * d, a * d + b * c);
	  }

	  // Return product of complex numbers
	  return result;
	};

	exports.IMREAL = function(inumber) {
	  if (inumber === undefined || inumber === true || inumber === false) {
	    return error.value;
	  }

	  // Return 0 if inumber is equal to 0
	  if (inumber === 0 || inumber === '0') {
	    return 0;
	  }

	  // Handle special cases
	  if (['i', '+i', '1i', '+1i', '-i', '-1i', 'j', '+j', '1j', '+1j', '-j', '-1j'].indexOf(inumber) >= 0) {
	    return 0;
	  }

	  // Lookup sign
	  var plus = inumber.indexOf('+');
	  var minus = inumber.indexOf('-');
	  if (plus === 0) {
	    plus = inumber.indexOf('+', 1);
	  }
	  if (minus === 0) {
	    minus = inumber.indexOf('-', 1);
	  }

	  // Lookup imaginary unit
	  var last = inumber.substring(inumber.length - 1, inumber.length);
	  var unit = (last === 'i' || last === 'j');

	  if (plus >= 0 || minus >= 0) {
	    // Return error if imaginary unit is neither i nor j
	    if (!unit) {
	      return error.num;
	    }

	    // Return real coefficient of complex number
	    if (plus >= 0) {
	      return (isNaN(inumber.substring(0, plus)) || isNaN(inumber.substring(plus + 1, inumber.length - 1))) ?
	        error.num :
	        Number(inumber.substring(0, plus));
	    } else {
	      return (isNaN(inumber.substring(0, minus)) || isNaN(inumber.substring(minus + 1, inumber.length - 1))) ?
	        error.num :
	        Number(inumber.substring(0, minus));
	    }
	  } else {
	    if (unit) {
	      return (isNaN(inumber.substring(0, inumber.length - 1))) ? error.num : 0;
	    } else {
	      return (isNaN(inumber)) ? error.num : inumber;
	    }
	  }
	};

	exports.IMSEC = function(inumber) {
	  // Return error if inumber is a logical value
	  if (inumber === true || inumber === false) {
	    return error.value;
	  }

	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Return secant of complex number
	  return exports.IMDIV('1', exports.IMCOS(inumber));
	};

	exports.IMSECH = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Return hyperbolic secant of complex number
	  return exports.IMDIV('1', exports.IMCOSH(inumber));
	};

	exports.IMSIN = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return sine of complex number
	  return exports.COMPLEX(Math.sin(x) * (Math.exp(y) + Math.exp(-y)) / 2, Math.cos(x) * (Math.exp(y) - Math.exp(-y)) / 2, unit);
	};

	exports.IMSINH = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Return hyperbolic sine of complex number
	  return exports.COMPLEX(Math.cos(y) * (Math.exp(x) - Math.exp(-x)) / 2, Math.sin(y) * (Math.exp(x) + Math.exp(-x)) / 2, unit);
	};

	exports.IMSQRT = function(inumber) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit = inumber.substring(inumber.length - 1);
	  unit = (unit === 'i' || unit === 'j') ? unit : 'i';

	  // Calculate power of modulus
	  var s = Math.sqrt(exports.IMABS(inumber));

	  // Calculate argument
	  var t = exports.IMARGUMENT(inumber);

	  // Return exponential of complex number
	  return exports.COMPLEX(s * Math.cos(t / 2), s * Math.sin(t / 2), unit);
	};

	exports.IMCSC = function (inumber) {
	  // Return error if inumber is a logical value
	  if (inumber === true || inumber === false) {
	    return error.value;
	  }

	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  // Return error if either coefficient is not a number
	  if (utils.anyIsError(x, y)) {
	    return error.num;
	  }

	  // Return cosecant of complex number
	  return exports.IMDIV('1', exports.IMSIN(inumber));
	};

	exports.IMCSCH = function (inumber) {
	  // Return error if inumber is a logical value
	  if (inumber === true || inumber === false) {
	    return error.value;
	  }

	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  // Return error if either coefficient is not a number
	  if (utils.anyIsError(x, y)) {
	    return error.num;
	  }

	  // Return hyperbolic cosecant of complex number
	  return exports.IMDIV('1', exports.IMSINH(inumber));
	};

	exports.IMSUB = function(inumber1, inumber2) {
	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var a = this.IMREAL(inumber1);
	  var b = this.IMAGINARY(inumber1);
	  var c = this.IMREAL(inumber2);
	  var d = this.IMAGINARY(inumber2);

	  if (utils.anyIsError(a, b, c, d)) {
	    return error.value;
	  }

	  // Lookup imaginary unit
	  var unit1 = inumber1.substring(inumber1.length - 1);
	  var unit2 = inumber2.substring(inumber2.length - 1);
	  var unit = 'i';
	  if (unit1 === 'j') {
	    unit = 'j';
	  } else if (unit2 === 'j') {
	    unit = 'j';
	  }

	  // Return _ of two complex numbers
	  return this.COMPLEX(a - c, b - d, unit);
	};

	exports.IMSUM = function() {
	  var args = utils.flatten(arguments);

	  // Initialize result
	  var result = args[0];

	  // Loop on all numbers
	  for (var i = 1; i < args.length; i++) {
	    // Lookup coefficients of two complex numbers
	    var a = this.IMREAL(result);
	    var b = this.IMAGINARY(result);
	    var c = this.IMREAL(args[i]);
	    var d = this.IMAGINARY(args[i]);

	    if (utils.anyIsError(a, b, c, d)) {
	      return error.value;
	    }

	    // Complute product of two complex numbers
	    result = this.COMPLEX(a + c, b + d);
	  }

	  // Return sum of complex numbers
	  return result;
	};

	exports.IMTAN = function(inumber) {
	  // Return error if inumber is a logical value
	  if (inumber === true || inumber === false) {
	    return error.value;
	  }

	  // Lookup real and imaginary coefficients using Formula.js [http://formulajs.org]
	  var x = exports.IMREAL(inumber);
	  var y = exports.IMAGINARY(inumber);

	  if (utils.anyIsError(x, y)) {
	    return error.value;
	  }

	  // Return tangent of complex number
	  return this.IMDIV(this.IMSIN(inumber), this.IMCOS(inumber));
	};

	exports.OCT2BIN = function(number, places) {
	  // Return error if number is not hexadecimal or contains more than ten characters (10 digits)
	  if (!/^[0-7]{1,10}$/.test(number)) {
	    return error.num;
	  }

	  // Check if number is negative
	  var negative = (number.length === 10 && number.substring(0, 1) === '7') ? true : false;

	  // Convert octal number to decimal
	  var decimal = (negative) ? parseInt(number, 8) - 1073741824 : parseInt(number, 8);

	  // Return error if number is lower than -512 or greater than 511
	  if (decimal < -512 || decimal > 511) {
	    return error.num;
	  }

	  // Ignore places and return a 10-character binary number if number is negative
	  if (negative) {
	    return '1' + text.REPT('0', 9 - (512 + decimal).toString(2).length) + (512 + decimal).toString(2);
	  }

	  // Convert decimal number to binary
	  var result = decimal.toString(2);

	  // Return binary number using the minimum number of characters necessary if places is undefined
	  if (typeof places === 'undefined') {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

	exports.OCT2DEC = function(number) {
	  // Return error if number is not octal or contains more than ten characters (10 digits)
	  if (!/^[0-7]{1,10}$/.test(number)) {
	    return error.num;
	  }

	  // Convert octal number to decimal
	  var decimal = parseInt(number, 8);

	  // Return decimal number
	  return (decimal >= 536870912) ? decimal - 1073741824 : decimal;
	};

	exports.OCT2HEX = function(number, places) {
	  // Return error if number is not octal or contains more than ten characters (10 digits)
	  if (!/^[0-7]{1,10}$/.test(number)) {
	    return error.num;
	  }

	  // Convert octal number to decimal
	  var decimal = parseInt(number, 8);

	  // Ignore places and return a 10-character octal number if number is negative
	  if (decimal >= 536870912) {
	    return 'ff' + (decimal + 3221225472).toString(16);
	  }

	  // Convert decimal number to hexadecimal
	  var result = decimal.toString(16);

	  // Return hexadecimal number using the minimum number of characters necessary if places is undefined
	  if (places === undefined) {
	    return result;
	  } else {
	    // Return error if places is nonnumeric
	    if (isNaN(places)) {
	      return error.value;
	    }

	    // Return error if places is negative
	    if (places < 0) {
	      return error.num;
	    }

	    // Truncate places in case it is not an integer
	    places = Math.floor(places);

	    // Pad return value with leading 0s (zeros) if necessary (using Underscore.string)
	    return (places >= result.length) ? text.REPT('0', places - result.length) + result : error.num;
	  }
	};

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	var M = Math;
	function _horner(arr, v) { return arr.reduce(function(z,w){return v * z + w;},0); };
	function _bessel_iter(x, n, f0, f1, sign) {
	  if(!sign) sign = -1;
	  var tdx = 2 / x, f2;
	  if(n === 0) return f0;
	  if(n === 1) return f1;
	  for(var o = 1; o != n; ++o) {
	    f2 = f1 * o * tdx + sign * f0;
	    f0 = f1; f1 = f2;
	  }
	  return f1;
	}
	function _bessel_wrap(bessel0, bessel1, name, nonzero, sign) {
	  return function bessel(x,n) {
	    if(n === 0) return bessel0(x);
	    if(n === 1) return bessel1(x);
	    if(n < 0) throw name + ': Order (' + n + ') must be nonnegative';
	    if(nonzero == 1 && x === 0) throw name + ': Undefined when x == 0';
	    if(nonzero == 2 && x <= 0) throw name + ': Undefined when x <= 0';
	    var b0 = bessel0(x), b1 = bessel1(x);
	    return _bessel_iter(x, n, b0, b1, sign);
	  };
	}
	var besselj = (function() {
	  var b0_a1a = [57568490574.0,-13362590354.0,651619640.7,-11214424.18,77392.33017,-184.9052456].reverse();
	  var b0_a2a = [57568490411.0,1029532985.0,9494680.718,59272.64853,267.8532712,1.0].reverse();
	  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();
	  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934935152e-7].reverse();
	  var W = 0.636619772; // 2 / Math.PI

	  function bessel0(x) {
	    var a, a1, a2, y = x * x, xx = M.abs(x) - 0.785398164;
	    if(M.abs(x) < 8) {
	      a1 = _horner(b0_a1a, y);
	      a2 = _horner(b0_a2a, y);
	      a = a1/a2;
	    }
	    else {
	      y = 64 / y;
	      a1 = _horner(b0_a1b, y);
	      a2 = _horner(b0_a2b, y);
	      a = M.sqrt(W/M.abs(x))*(M.cos(xx)*a1-M.sin(xx)*a2*8/M.abs(x));
	    }
	    return a;
	  }
	  var b1_a1a = [72362614232.0,-7895059235.0,242396853.1,-2972611.439, 15704.48260, -30.16036606].reverse();
	  var b1_a2a = [144725228442.0, 2300535178.0, 18583304.74, 99447.43394, 376.9991397, 1.0].reverse();
	  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();
	  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse();
	  function bessel1(x) {
	    var a, a1, a2, y = x*x, xx = M.abs(x) - 2.356194491;
	    if(Math.abs(x)< 8) {
	      a1 = x*_horner(b1_a1a, y);
	      a2 = _horner(b1_a2a, y);
	      a = a1 / a2;
	    } else {
	      y = 64 / y;
	      a1=_horner(b1_a1b, y);
	      a2=_horner(b1_a2b, y);
	      a=M.sqrt(W/M.abs(x))*(M.cos(xx)*a1-M.sin(xx)*a2*8/M.abs(x));
	      if(x < 0) a = -a;
	    }
	    return a;
	  }
	  return function besselj(x, n) {
	    n = Math.round(n);
	    if(n === 0) return bessel0(M.abs(x));
	    if(n === 1) return bessel1(M.abs(x));
	    if(n < 0) throw 'BESSELJ: Order (' + n + ') must be nonnegative';
	    if(M.abs(x) === 0) return 0;

	    var ret, j, tox = 2 / M.abs(x), m, jsum, sum, bjp, bj, bjm;
	    if(M.abs(x) > n) {
	      ret = _bessel_iter(x, n, bessel0(M.abs(x)), bessel1(M.abs(x)),-1);
	    } else {
	      m=2*M.floor((n+M.floor(M.sqrt(40*n)))/2);
	      jsum=0;
	      bjp=ret=sum=0.0;
	      bj=1.0;
	      for (j=m;j>0;j--) {
	        bjm=j*tox*bj-bjp;
	        bjp=bj;
	        bj=bjm;
	        if (M.abs(bj) > 1E10) {
	          bj *= 1E-10;
	          bjp *= 1E-10;
	          ret *= 1E-10;
	          sum *= 1E-10;
	        }
	        if (jsum) sum += bj;
	        jsum=!jsum;
	        if (j == n) ret=bjp;
	      }
	      sum=2.0*sum-bj;
	      ret /= sum;
	    }
	    return x < 0 && (n%2) ? -ret : ret;
	  };
	})();
	var bessely = (function() {
	  var b0_a1a = [-2957821389.0, 7062834065.0, -512359803.6, 10879881.29, -86327.92757, 228.4622733].reverse();
	  var b0_a2a = [40076544269.0, 745249964.8, 7189466.438, 47447.26470, 226.1030244, 1.0].reverse();
	  var b0_a1b = [1.0, -0.1098628627e-2, 0.2734510407e-4, -0.2073370639e-5, 0.2093887211e-6].reverse();
	  var b0_a2b = [-0.1562499995e-1, 0.1430488765e-3, -0.6911147651e-5, 0.7621095161e-6, -0.934945152e-7].reverse();

	  var W = 0.636619772;
	  function bessel0(x) {
	    var a, a1, a2, y = x * x, xx = x - 0.785398164;
	    if(x < 8) {
	      a1 = _horner(b0_a1a, y);
	      a2 = _horner(b0_a2a, y);
	      a = a1/a2 + W * besselj(x,0) * M.log(x);
	    } else {
	      y = 64 / y;
	      a1 = _horner(b0_a1b, y);
	      a2 = _horner(b0_a2b, y);
	      a = M.sqrt(W/x)*(M.sin(xx)*a1+M.cos(xx)*a2*8/x);
	    }
	    return a;
	  }

	  var b1_a1a = [-0.4900604943e13, 0.1275274390e13, -0.5153438139e11, 0.7349264551e9, -0.4237922726e7, 0.8511937935e4].reverse();
	  var b1_a2a = [0.2499580570e14, 0.4244419664e12, 0.3733650367e10, 0.2245904002e8, 0.1020426050e6, 0.3549632885e3, 1].reverse();
	  var b1_a1b = [1.0, 0.183105e-2, -0.3516396496e-4, 0.2457520174e-5, -0.240337019e-6].reverse();
	  var b1_a2b = [0.04687499995, -0.2002690873e-3, 0.8449199096e-5, -0.88228987e-6, 0.105787412e-6].reverse();
	  function bessel1(x) {
	    var a, a1, a2, y = x*x, xx = x - 2.356194491;
	    if(x < 8) {
	      a1 = x*_horner(b1_a1a, y);
	      a2 = _horner(b1_a2a, y);
	      a = a1/a2 + W * (besselj(x,1) * M.log(x) - 1 / x);
	    } else {
	      y = 64 / y;
	      a1=_horner(b1_a1b, y);
	      a2=_horner(b1_a2b, y);
	      a=M.sqrt(W/x)*(M.sin(xx)*a1+M.cos(xx)*a2*8/x);
	    }
	    return a;
	  }

	  return _bessel_wrap(bessel0, bessel1, 'BESSELY', 1, -1);
	})();
	var besseli = (function() {
	  var b0_a = [1.0, 3.5156229, 3.0899424, 1.2067492, 0.2659732, 0.360768e-1, 0.45813e-2].reverse();
	  var b0_b = [0.39894228, 0.1328592e-1, 0.225319e-2, -0.157565e-2, 0.916281e-2, -0.2057706e-1, 0.2635537e-1, -0.1647633e-1, 0.392377e-2].reverse();
	  function bessel0(x) {
	    if(x <= 3.75) return _horner(b0_a, x*x/(3.75*3.75));
	    return M.exp(M.abs(x))/M.sqrt(M.abs(x))*_horner(b0_b, 3.75/M.abs(x));
	  }

	  var b1_a = [0.5, 0.87890594, 0.51498869, 0.15084934, 0.2658733e-1, 0.301532e-2, 0.32411e-3].reverse();
	  var b1_b = [0.39894228, -0.3988024e-1, -0.362018e-2, 0.163801e-2, -0.1031555e-1, 0.2282967e-1, -0.2895312e-1, 0.1787654e-1, -0.420059e-2].reverse();
	  function bessel1(x) {
	    if(x < 3.75) return x * _horner(b1_a, x*x/(3.75*3.75));
	    return (x < 0 ? -1 : 1) * M.exp(M.abs(x))/M.sqrt(M.abs(x))*_horner(b1_b, 3.75/M.abs(x));
	  }

	  return function besseli(x, n) {
	    n = Math.round(n);
	    if(n === 0) return bessel0(x);
	    if(n == 1) return bessel1(x);
	    if(n < 0) throw 'BESSELI Order (' + n + ') must be nonnegative';
	    if(M.abs(x) === 0) return 0;

	    var ret, j, tox = 2 / M.abs(x), m, bip, bi, bim;
	    m=2*M.round((n+M.round(M.sqrt(40*n)))/2);
	    bip=ret=0.0;
	    bi=1.0;
	    for (j=m;j>0;j--) {
	      bim=j*tox*bi + bip;
	      bip=bi; bi=bim;
	      if (M.abs(bi) > 1E10) {
	        bi *= 1E-10;
	        bip *= 1E-10;
	        ret *= 1E-10;
	      }
	      if(j == n) ret = bip;
	    }
	    ret *= besseli(x, 0) / bi;
	    return x < 0 && (n%2) ? -ret : ret;
	  };

	})();

	var besselk = (function() {
	  var b0_a = [-0.57721566, 0.42278420, 0.23069756, 0.3488590e-1, 0.262698e-2, 0.10750e-3, 0.74e-5].reverse();
	  var b0_b = [1.25331414, -0.7832358e-1, 0.2189568e-1, -0.1062446e-1, 0.587872e-2, -0.251540e-2, 0.53208e-3].reverse();
	  function bessel0(x) {
	    if(x <= 2) return -M.log(x/2)*besseli(x,0) + _horner(b0_a, x*x/4);
	    return M.exp(-x)/M.sqrt(x)*_horner(b0_b, 2/x);
	  }

	  var b1_a = [1.0, 0.15443144, -0.67278579, -0.18156897, -0.1919402e-1, -0.110404e-2, -0.4686e-4].reverse();
	  var b1_b = [1.25331414, 0.23498619, -0.3655620e-1, 0.1504268e-1, -0.780353e-2, 0.325614e-2, -0.68245e-3].reverse();
	  function bessel1(x) {
	    if(x <= 2) return M.log(x/2)*besseli(x,1) + (1/x)*_horner(b1_a, x*x/4);
	    return M.exp(-x)/M.sqrt(x)*_horner(b1_b, 2/x);
	  }

	  return _bessel_wrap(bessel0, bessel1, 'BESSELK', 2, 1);
	})();
	if(true) {
	  exports.besselj = besselj;
	  exports.bessely = bessely;
	  exports.besseli = besseli;
	  exports.besselk = besselk;
	}



/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);
	var utils = __webpack_require__(4);

	var d1900 = new Date(1900, 0, 1);
	var WEEK_STARTS = [
	  undefined,
	  0,
	  1,
	  undefined,
	  undefined,
	  undefined,
	  undefined,
	  undefined,
	  undefined,
	  undefined,
	  undefined,
	  undefined,
	  1,
	  2,
	  3,
	  4,
	  5,
	  6,
	  0
	];
	var WEEK_TYPES = [
	  [],
	  [1, 2, 3, 4, 5, 6, 7],
	  [7, 1, 2, 3, 4, 5, 6],
	  [6, 0, 1, 2, 3, 4, 5],
	  [],
	  [],
	  [],
	  [],
	  [],
	  [],
	  [],
	  [7, 1, 2, 3, 4, 5, 6],
	  [6, 7, 1, 2, 3, 4, 5],
	  [5, 6, 7, 1, 2, 3, 4],
	  [4, 5, 6, 7, 1, 2, 3],
	  [3, 4, 5, 6, 7, 1, 2],
	  [2, 3, 4, 5, 6, 7, 1],
	  [1, 2, 3, 4, 5, 6, 7]
	];
	var WEEKEND_TYPES = [
	  [],
	  [6, 0],
	  [0, 1],
	  [1, 2],
	  [2, 3],
	  [3, 4],
	  [4, 5],
	  [5, 6],
	  undefined,
	  undefined,
	  undefined, [0, 0],
	  [1, 1],
	  [2, 2],
	  [3, 3],
	  [4, 4],
	  [5, 5],
	  [6, 6]
	];

	exports.DATE = function(year, month, day) {
	  year = utils.parseNumber(year);
	  month = utils.parseNumber(month);
	  day = utils.parseNumber(day);
	  if (utils.anyIsError(year, month, day)) {
	    return error.value;
	  }
	  if (year < 0 || month < 0 || day < 0) {
	    return error.num;
	  }
	  var date = new Date(year, month - 1, day);
	  return date;
	};

	exports.DATEVALUE = function(date_text) {
	  if (typeof date_text !== 'string') {
	    return error.value;
	  }
	  var date = Date.parse(date_text);
	  if (isNaN(date)) {
	    return error.value;
	  }
	  if (date <= -2203891200000) {
	    return (date - d1900) / 86400000 + 1;
	  }
	  return (date - d1900) / 86400000 + 2;
	};

	exports.DAY = function(serial_number) {
	  var date = utils.parseDate(serial_number);
	  if (date instanceof Error) {
	    return date;
	  }
	  return date.getDate();
	};

	exports.DAYS = function(end_date, start_date) {
	  end_date = utils.parseDate(end_date);
	  start_date = utils.parseDate(start_date);
	  if (end_date instanceof Error) {
	    return end_date;
	  }
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  return serial(end_date) - serial(start_date);
	};

	exports.DAYS360 = function(start_date, end_date, method) {
	  method = utils.parseBool(method);
	  start_date = utils.parseDate(start_date);
	  end_date = utils.parseDate(end_date);
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  if (end_date instanceof Error) {
	    return end_date;
	  }
	  if (method instanceof Error) {
	    return method;
	  }
	  var sm = start_date.getMonth();
	  var em = end_date.getMonth();
	  var sd, ed;
	  if (method) {
	    sd = start_date.getDate() === 31 ? 30 : start_date.getDate();
	    ed = end_date.getDate() === 31 ? 30 : end_date.getDate();
	  } else {
	    var smd = new Date(start_date.getFullYear(), sm + 1, 0).getDate();
	    var emd = new Date(end_date.getFullYear(), em + 1, 0).getDate();
	    sd = start_date.getDate() === smd ? 30 : start_date.getDate();
	    if (end_date.getDate() === emd) {
	      if (sd < 30) {
	        em++;
	        ed = 1;
	      } else {
	        ed = 30;
	      }
	    } else {
	      ed = end_date.getDate();
	    }
	  }
	  return 360 * (end_date.getFullYear() - start_date.getFullYear()) +
	    30 * (em - sm) + (ed - sd);
	};

	exports.EDATE = function(start_date, months) {
	  start_date = utils.parseDate(start_date);
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  if (isNaN(months)) {
	    return error.value;
	  }
	  months = parseInt(months, 10);
	  start_date.setMonth(start_date.getMonth() + months);
	  return serial(start_date);
	};

	exports.EOMONTH = function(start_date, months) {
	  start_date = utils.parseDate(start_date);
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  if (isNaN(months)) {
	    return error.value;
	  }
	  months = parseInt(months, 10);
	  return serial(new Date(start_date.getFullYear(), start_date.getMonth() + months + 1, 0));
	};

	exports.HOUR = function(serial_number) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  return serial_number.getHours();
	};

	exports.INTERVAL = function (second) {
	  if (typeof second !== 'number' && typeof second !== 'string') {
	    return error.value;
	  } else {
	    second = parseInt(second, 10);
	  }

	  var year  = Math.floor(second/946080000);
	  second    = second%946080000;
	  var month = Math.floor(second/2592000);
	  second    = second%2592000;
	  var day   = Math.floor(second/86400);
	  second    = second%86400;

	  var hour  = Math.floor(second/3600);
	  second    = second%3600;
	  var min   = Math.floor(second/60);
	  second    = second%60;
	  var sec   = second;

	  year  = (year  > 0) ? year  + 'Y' : '';
	  month = (month > 0) ? month + 'M' : '';
	  day   = (day   > 0) ? day   + 'D' : '';
	  hour  = (hour  > 0) ? hour  + 'H' : '';
	  min   = (min   > 0) ? min   + 'M' : '';
	  sec   = (sec   > 0) ? sec   + 'S' : '';

	  return 'P' + year + month + day +
	  'T' + hour + min + sec;
	};

	exports.ISOWEEKNUM = function(date) {
	  date = utils.parseDate(date);
	  if (date instanceof Error) {
	    return date;
	  }

	  date.setHours(0, 0, 0);
	  date.setDate(date.getDate() + 4 - (date.getDay() || 7));
	  var yearStart = new Date(date.getFullYear(), 0, 1);
	  return Math.ceil((((date - yearStart) / 86400000) + 1) / 7);
	};

	exports.MINUTE = function(serial_number) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  return serial_number.getMinutes();
	};

	exports.MONTH = function(serial_number) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  return serial_number.getMonth() + 1;
	};

	exports.NETWORKDAYS = function(start_date, end_date, holidays) {
	  return this.NETWORKDAYS.INTL(start_date, end_date, 1, holidays);
	};

	exports.NETWORKDAYS.INTL = function(start_date, end_date, weekend, holidays) {
	  start_date = utils.parseDate(start_date);
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  end_date = utils.parseDate(end_date);
	  if (end_date instanceof Error) {
	    return end_date;
	  }
	  if (weekend === undefined) {
	    weekend = WEEKEND_TYPES[1];
	  } else {
	    weekend = WEEKEND_TYPES[weekend];
	  }
	  if (!(weekend instanceof Array)) {
	    return error.value;
	  }
	  if (holidays === undefined) {
	    holidays = [];
	  } else if (!(holidays instanceof Array)) {
	    holidays = [holidays];
	  }
	  for (var i = 0; i < holidays.length; i++) {
	    var h = utils.parseDate(holidays[i]);
	    if (h instanceof Error) {
	      return h;
	    }
	    holidays[i] = h;
	  }
	  var days = (end_date - start_date) / (1000 * 60 * 60 * 24) + 1;
	  var total = days;
	  var day = start_date;
	  for (i = 0; i < days; i++) {
	    var d = (new Date().getTimezoneOffset() > 0) ? day.getUTCDay() : day.getDay();
	    var dec = false;
	    if (d === weekend[0] || d === weekend[1]) {
	      dec = true;
	    }
	    for (var j = 0; j < holidays.length; j++) {
	      var holiday = holidays[j];
	      if (holiday.getDate() === day.getDate() &&
	        holiday.getMonth() === day.getMonth() &&
	        holiday.getFullYear() === day.getFullYear()) {
	        dec = true;
	        break;
	      }
	    }
	    if (dec) {
	      total--;
	    }
	    day.setDate(day.getDate() + 1);
	  }
	  return total;
	};

	exports.NOW = function() {
	  return new Date();
	};

	exports.SECOND = function(serial_number) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  return serial_number.getSeconds();
	};

	exports.TIME = function(hour, minute, second) {
	  hour = utils.parseNumber(hour);
	  minute = utils.parseNumber(minute);
	  second = utils.parseNumber(second);
	  if (utils.anyIsError(hour, minute, second)) {
	    return error.value;
	  }
	  if (hour < 0 || minute < 0 || second < 0) {
	    return error.num;
	  }
	  return (3600 * hour + 60 * minute + second) / 86400;
	};

	exports.TIMEVALUE = function(time_text) {
	  time_text = utils.parseDate(time_text);
	  if (time_text instanceof Error) {
	    return time_text;
	  }
	  return (3600 * time_text.getHours() +
	    60 * time_text.getMinutes() +
	    time_text.getSeconds()) / 86400;
	};

	exports.TODAY = function() {
	  return new Date();
	};

	exports.WEEKDAY = function(serial_number, return_type) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  if (return_type === undefined) {
	    return_type = 1;
	  }
	  var day = serial_number.getDay();
	  return WEEK_TYPES[return_type][day];
	};

	exports.WEEKNUM = function(serial_number, return_type) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  if (return_type === undefined) {
	    return_type = 1;
	  }
	  if (return_type === 21) {
	    return this.ISOWEEKNUM(serial_number);
	  }
	  var week_start = WEEK_STARTS[return_type];
	  var jan = new Date(serial_number.getFullYear(), 0, 1);
	  var inc = jan.getDay() < week_start ? 1 : 0;
	  jan -= Math.abs(jan.getDay() - week_start) * 24 * 60 * 60 * 1000;
	  return Math.floor(((serial_number - jan) / (1000 * 60 * 60 * 24)) / 7 + 1) + inc;
	};

	exports.WORKDAY = function(start_date, days, holidays) {
	  return this.WORKDAY.INTL(start_date, days, 1, holidays);
	};

	exports.WORKDAY.INTL = function(start_date, days, weekend, holidays) {
	  start_date = utils.parseDate(start_date);
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  days = utils.parseNumber(days);
	  if (days instanceof Error) {
	    return days;
	  }
	  if (days < 0) {
	    return error.num;
	  }
	  if (weekend === undefined) {
	    weekend = WEEKEND_TYPES[1];
	  } else {
	    weekend = WEEKEND_TYPES[weekend];
	  }
	  if (!(weekend instanceof Array)) {
	    return error.value;
	  }
	  if (holidays === undefined) {
	    holidays = [];
	  } else if (!(holidays instanceof Array)) {
	    holidays = [holidays];
	  }
	  for (var i = 0; i < holidays.length; i++) {
	    var h = utils.parseDate(holidays[i]);
	    if (h instanceof Error) {
	      return h;
	    }
	    holidays[i] = h;
	  }
	  var d = 0;
	  while (d < days) {
	    start_date.setDate(start_date.getDate() + 1);
	    var day = start_date.getDay();
	    if (day === weekend[0] || day === weekend[1]) {
	      continue;
	    }
	    for (var j = 0; j < holidays.length; j++) {
	      var holiday = holidays[j];
	      if (holiday.getDate() === start_date.getDate() &&
	        holiday.getMonth() === start_date.getMonth() &&
	        holiday.getFullYear() === start_date.getFullYear()) {
	        d--;
	        break;
	      }
	    }
	    d++;
	  }
	  return start_date;
	};

	exports.YEAR = function(serial_number) {
	  serial_number = utils.parseDate(serial_number);
	  if (serial_number instanceof Error) {
	    return serial_number;
	  }
	  return serial_number.getFullYear();
	};

	function isLeapYear(year) {
	  return new Date(year, 1, 29).getMonth() === 1;
	}

	// TODO : Use DAYS ?
	function daysBetween(start_date, end_date) {
	  return Math.ceil((end_date - start_date) / 1000 / 60 / 60 / 24);
	}

	exports.YEARFRAC = function(start_date, end_date, basis) {
	  start_date = utils.parseDate(start_date);
	  if (start_date instanceof Error) {
	    return start_date;
	  }
	  end_date = utils.parseDate(end_date);
	  if (end_date instanceof Error) {
	    return end_date;
	  }

	  basis = basis || 0;
	  var sd = start_date.getDate();
	  var sm = start_date.getMonth() + 1;
	  var sy = start_date.getFullYear();
	  var ed = end_date.getDate();
	  var em = end_date.getMonth() + 1;
	  var ey = end_date.getFullYear();

	  switch (basis) {
	    case 0:
	      // US (NASD) 30/360
	      if (sd === 31 && ed === 31) {
	        sd = 30;
	        ed = 30;
	      } else if (sd === 31) {
	        sd = 30;
	      } else if (sd === 30 && ed === 31) {
	        ed = 30;
	      }
	      return ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;
	    case 1:
	      // Actual/actual
	      var feb29Between = function(date1, date2) {
	        var year1 = date1.getFullYear();
	        var mar1year1 = new Date(year1, 2, 1);
	        if (isLeapYear(year1) && date1 < mar1year1 && date2 >= mar1year1) {
	          return true;
	        }
	        var year2 = date2.getFullYear();
	        var mar1year2 = new Date(year2, 2, 1);
	        return (isLeapYear(year2) && date2 >= mar1year2 && date1 < mar1year2);
	      };
	      var ylength = 365;
	      if (sy === ey || ((sy + 1) === ey) && ((sm > em) || ((sm === em) && (sd >= ed)))) {
	        if ((sy === ey && isLeapYear(sy)) ||
	            feb29Between(start_date, end_date) ||
	            (em === 1 && ed === 29)) {
	          ylength = 366;
	        }
	        return daysBetween(start_date, end_date) / ylength;
	      }
	      var years = (ey - sy) + 1;
	      var days = (new Date(ey + 1, 0, 1) - new Date(sy, 0, 1)) / 1000 / 60 / 60 / 24;
	      var average = days / years;
	      return daysBetween(start_date, end_date) / average;
	    case 2:
	      // Actual/360
	      return daysBetween(start_date, end_date) / 360;
	    case 3:
	      // Actual/365
	      return daysBetween(start_date, end_date) / 365;
	    case 4:
	      // European 30/360
	      return ((ed + em * 30 + ey * 360) - (sd + sm * 30 + sy * 360)) / 360;
	  }
	};

	function serial(date) {
	  var addOn = (date > -2203891200000)?2:1;
	  return (date - d1900) / 86400000 + addOn;
	}

/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);
	var stats = __webpack_require__(6);
	var maths = __webpack_require__(2);
	var utils = __webpack_require__(4);

	function compact(array) {
	  if (!array) { return array; }
	  var result = [];
	  for (var i = 0; i < array.length; ++i) {
	    if (!array[i]) { continue; }
	    result.push(array[i]);
	  }
	  return result;
	}

	exports.FINDFIELD = function(database, title) {
	  var index = null;
	  for (var i = 0; i < database.length; i++) {
	    if (database[i][0] === title) {
	      index = i;
	      break;
	    }
	  }

	  // Return error if the input field title is incorrect
	  if (index == null) {
	    return error.value;
	  }
	  return index;
	};

	function findResultIndex(database, criterias) {
	  var matches = {};
	  for (var i = 1; i < database[0].length; ++i) {
	    matches[i] = true;
	  }
	  var maxCriteriaLength = criterias[0].length;
	  for (i = 1; i < criterias.length; ++i) {
	    if (criterias[i].length > maxCriteriaLength) {
	      maxCriteriaLength = criterias[i].length;
	    }
	  }

	  for (var k = 1; k < database.length; ++k) {
	    for (var l = 1; l < database[k].length; ++l) {
	      var currentCriteriaResult = false;
	      var hasMatchingCriteria   = false;
	      for (var j = 0; j < criterias.length; ++j) {
	        var criteria = criterias[j];
	        if (criteria.length < maxCriteriaLength) {
	          continue;
	        }

	        var criteriaField = criteria[0];
	        if (database[k][0] !== criteriaField) {
	          continue;
	        }
	        hasMatchingCriteria = true;
	        for (var p = 1; p < criteria.length; ++p) {
	          currentCriteriaResult = currentCriteriaResult || eval(database[k][l] + criteria[p]);  // jshint ignore:line
	        }
	      }
	      if (hasMatchingCriteria) {
	        matches[l] = matches[l] && currentCriteriaResult;
	      }
	    }
	  }

	  var result = [];
	  for (var n = 0; n < database[0].length; ++n) {
	    if (matches[n]) {
	      result.push(n - 1);
	    }
	  }
	  return result;
	}

	// Database functions
	exports.DAVERAGE = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var sum = 0;
	  for (var i = 0; i < resultIndexes.length; i++) {
	    sum += targetFields[resultIndexes[i]];
	  }
	  return resultIndexes.length === 0 ? error.div0 : sum / resultIndexes.length;
	};

	exports.DCOUNT = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  return stats.COUNT(targetValues);
	};

	exports.DCOUNTA = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  return stats.COUNTA(targetValues);
	};

	exports.DGET = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  // Return error if no record meets the criteria
	  if (resultIndexes.length === 0) {
	    return error.value;
	  }
	  // Returns the #NUM! error value because more than one record meets the
	  // criteria
	  if (resultIndexes.length > 1) {
	    return error.num;
	  }

	  return targetFields[resultIndexes[0]];
	};

	exports.DMAX = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var maxValue = targetFields[resultIndexes[0]];
	  for (var i = 1; i < resultIndexes.length; i++) {
	    if (maxValue < targetFields[resultIndexes[i]]) {
	      maxValue = targetFields[resultIndexes[i]];
	    }
	  }
	  return maxValue;
	};

	exports.DMIN = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var minValue = targetFields[resultIndexes[0]];
	  for (var i = 1; i < resultIndexes.length; i++) {
	    if (minValue > targetFields[resultIndexes[i]]) {
	      minValue = targetFields[resultIndexes[i]];
	    }
	  }
	  return minValue;
	};

	exports.DPRODUCT = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  targetValues = compact(targetValues);
	  var result = 1;
	  for (i = 0; i < targetValues.length; i++) {
	    result *= targetValues[i];
	  }
	  return result;
	};

	exports.DSTDEV = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  targetValues = compact(targetValues);
	  return stats.STDEV.S(targetValues);
	};

	exports.DSTDEVP = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  targetValues = compact(targetValues);
	  return stats.STDEV.P(targetValues);
	};

	exports.DSUM = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  return maths.SUM(targetValues);
	};

	exports.DVAR = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  return stats.VAR.S(targetValues);
	};

	exports.DVARP = function(database, field, criteria) {
	  // Return error if field is not a number and not a string
	  if (isNaN(field) && (typeof field !== "string")) {
	    return error.value;
	  }
	  var resultIndexes = findResultIndex(database, criteria);
	  var targetFields = [];
	  if (typeof field === "string") {
	    var index = exports.FINDFIELD(database, field);
	    targetFields = utils.rest(database[index]);
	  } else {
	    targetFields = utils.rest(database[field]);
	  }
	  var targetValues = [];
	  for (var i = 0; i < resultIndexes.length; i++) {
	    targetValues[i] = targetFields[resultIndexes[i]];
	  }
	  return stats.VAR.P(targetValues);
	};


/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);
	var utils = __webpack_require__(4);
	var information = __webpack_require__(11);

	exports.AND = function() {
	  var args = utils.flatten(arguments);
	  var result = true;
	  for (var i = 0; i < args.length; i++) {
	    if (!args[i]) {
	      result = false;
	    }
	  }
	  return result;
	};

	exports.CHOOSE = function() {
	  if (arguments.length < 2) {
	    return error.na;
	  }

	  var index = arguments[0];
	  if (index < 1 || index > 254) {
	    return error.value;
	  }

	  if (arguments.length < index + 1) {
	    return error.value;
	  }

	  return arguments[index];
	};

	exports.FALSE = function() {
	  return false;
	};

	exports.IF = function(test, then_value, otherwise_value) {
	  return test ? then_value : otherwise_value;
	};

	exports.IFERROR = function(value, valueIfError) {
	  if (information.ISERROR(value)) {
	    return valueIfError;
	  }
	  return value;
	};

	exports.IFNA = function(value, value_if_na) {
	  return value === error.na ? value_if_na : value;
	};

	exports.NOT = function(logical) {
	  return !logical;
	};

	exports.OR = function() {
	  var args = utils.flatten(arguments);
	  var result = false;
	  for (var i = 0; i < args.length; i++) {
	    if (args[i]) {
	      result = true;
	    }
	  }
	  return result;
	};

	exports.TRUE = function() {
	  return true;
	};

	exports.XOR = function() {
	  var args = utils.flatten(arguments);
	  var result = 0;
	  for (var i = 0; i < args.length; i++) {
	    if (args[i]) {
	      result++;
	    }
	  }
	  return (Math.floor(Math.abs(result)) & 1) ? true : false;
	};

	exports.SWITCH = function () {
	  var result;
	  if (arguments.length > 0)  {
	    var targetValue = arguments[0];
	    var argc = arguments.length - 1;
	    var switchCount = Math.floor(argc / 2);
	    var switchSatisfied = false;
	    var defaultClause = argc % 2 === 0 ? null : arguments[arguments.length - 1];

	    if (switchCount) {
	      for (var index = 0; index < switchCount; index++) {
	        if (targetValue === arguments[index * 2 + 1]) {
	          result = arguments[index * 2 + 2];
	          switchSatisfied = true;
	          break;
	        }
	      }
	    }

	    if (!switchSatisfied && defaultClause) {
	      result = defaultClause;
	    }
	  }

	  return result;
	};


/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);
	var dateTime = __webpack_require__(14);
	var utils = __webpack_require__(4);

	function validDate(d) {
	  return d && d.getTime && !isNaN(d.getTime());
	}

	function ensureDate(d) {
	  return (d instanceof Date)?d:new Date(d);
	}

	exports.ACCRINT = function(issue, first, settlement, rate, par, frequency, basis) {
	  // Return error if either date is invalid
	  issue      = ensureDate(issue);
	  first      = ensureDate(first);
	  settlement = ensureDate(settlement);
	  if (!validDate(issue) || !validDate(first) || !validDate(settlement)) {
	    return '#VALUE!';
	  }

	  // Return error if either rate or par are lower than or equal to zero
	  if (rate <= 0 || par <= 0) {
	    return '#NUM!';
	  }

	  // Return error if frequency is neither 1, 2, or 4
	  if ([1, 2, 4].indexOf(frequency) === -1) {
	    return '#NUM!';
	  }

	  // Return error if basis is neither 0, 1, 2, 3, or 4
	  if ([0, 1, 2, 3, 4].indexOf(basis) === -1) {
	    return '#NUM!';
	  }

	  // Return error if settlement is before or equal to issue
	  if (settlement <= issue) {
	    return '#NUM!';
	  }

	  // Set default values
	  par   = par   || 0;
	  basis = basis || 0;

	  // Compute accrued interest
	  return par * rate * dateTime.YEARFRAC(issue, settlement, basis);
	};

	// TODO
	exports.ACCRINTM = function() {
	 throw new Error('ACCRINTM is not implemented');
	};

	// TODO
	exports.AMORDEGRC = function() {
	 throw new Error('AMORDEGRC is not implemented');
	};

	// TODO
	exports.AMORLINC = function() {
	 throw new Error('AMORLINC is not implemented');
	};

	// TODO
	exports.COUPDAYBS = function() {
	 throw new Error('COUPDAYBS is not implemented');
	};

	// TODO
	exports.COUPDAYS = function() {
	 throw new Error('COUPDAYS is not implemented');
	};

	// TODO
	exports.COUPDAYSNC = function() {
	 throw new Error('COUPDAYSNC is not implemented');
	};

	// TODO
	exports.COUPNCD = function() {
	 throw new Error('COUPNCD is not implemented');
	};

	// TODO
	exports.COUPNUM = function() {
	 throw new Error('COUPNUM is not implemented');
	};

	// TODO
	exports.COUPPCD = function() {
	 throw new Error('COUPPCD is not implemented');
	};

	exports.CUMIPMT = function(rate, periods, value, start, end, type) {
	  // Credits: algorithm inspired by Apache OpenOffice
	  // Credits: Hannes Stiebitzhofer for the translations of function and variable names
	  // Requires exports.FV() and exports.PMT() from exports.js [http://stoic.com/exports/]

	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  value = utils.parseNumber(value);
	  if (utils.anyIsError(rate, periods, value)) {
	    return error.value;
	  }

	  // Return error if either rate, periods, or value are lower than or equal to zero
	  if (rate <= 0 || periods <= 0 || value <= 0) {
	    return error.num;
	  }

	  // Return error if start < 1, end < 1, or start > end
	  if (start < 1 || end < 1 || start > end) {
	    return error.num;
	  }

	  // Return error if type is neither 0 nor 1
	  if (type !== 0 && type !== 1) {
	    return error.num;
	  }

	  // Compute cumulative interest
	  var payment = exports.PMT(rate, periods, value, 0, type);
	  var interest = 0;

	  if (start === 1) {
	    if (type === 0) {
	      interest = -value;
	      start++;
	    }
	  }

	  for (var i = start; i <= end; i++) {
	    if (type === 1) {
	      interest += exports.FV(rate, i - 2, payment, value, 1) - payment;
	    } else {
	      interest += exports.FV(rate, i - 1, payment, value, 0);
	    }
	  }
	  interest *= rate;

	  // Return cumulative interest
	  return interest;
	};

	exports.CUMPRINC = function(rate, periods, value, start, end, type) {
	  // Credits: algorithm inspired by Apache OpenOffice
	  // Credits: Hannes Stiebitzhofer for the translations of function and variable names

	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  value = utils.parseNumber(value);
	  if (utils.anyIsError(rate, periods, value)) {
	    return error.value;
	  }

	  // Return error if either rate, periods, or value are lower than or equal to zero
	  if (rate <= 0 || periods <= 0 || value <= 0) {
	    return error.num;
	  }

	  // Return error if start < 1, end < 1, or start > end
	  if (start < 1 || end < 1 || start > end) {
	    return error.num;
	  }

	  // Return error if type is neither 0 nor 1
	  if (type !== 0 && type !== 1) {
	    return error.num;
	  }

	  // Compute cumulative principal
	  var payment = exports.PMT(rate, periods, value, 0, type);
	  var principal = 0;
	  if (start === 1) {
	    if (type === 0) {
	      principal = payment + value * rate;
	    } else {
	      principal = payment;
	    }
	    start++;
	  }
	  for (var i = start; i <= end; i++) {
	    if (type > 0) {
	      principal += payment - (exports.FV(rate, i - 2, payment, value, 1) - payment) * rate;
	    } else {
	      principal += payment - exports.FV(rate, i - 1, payment, value, 0) * rate;
	    }
	  }

	  // Return cumulative principal
	  return principal;
	};

	exports.DB = function(cost, salvage, life, period, month) {
	  // Initialize month
	  month = (month === undefined) ? 12 : month;

	  cost = utils.parseNumber(cost);
	  salvage = utils.parseNumber(salvage);
	  life = utils.parseNumber(life);
	  period = utils.parseNumber(period);
	  month = utils.parseNumber(month);
	  if (utils.anyIsError(cost, salvage, life, period, month)) {
	    return error.value;
	  }

	  // Return error if any of the parameters is negative
	  if (cost < 0 || salvage < 0 || life < 0 || period < 0) {
	    return error.num;
	  }

	  // Return error if month is not an integer between 1 and 12
	  if ([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12].indexOf(month) === -1) {
	    return error.num;
	  }

	  // Return error if period is greater than life
	  if (period > life) {
	    return error.num;
	  }

	  // Return 0 (zero) if salvage is greater than or equal to cost
	  if (salvage >= cost) {
	    return 0;
	  }

	  // Rate is rounded to three decimals places
	  var rate = (1 - Math.pow(salvage / cost, 1 / life)).toFixed(3);

	  // Compute initial depreciation
	  var initial = cost * rate * month / 12;

	  // Compute total depreciation
	  var total = initial;
	  var current = 0;
	  var ceiling = (period === life) ? life - 1 : period;
	  for (var i = 2; i <= ceiling; i++) {
	    current = (cost - total) * rate;
	    total += current;
	  }

	  // Depreciation for the first and last periods are special cases
	  if (period === 1) {
	    // First period
	    return initial;
	  } else if (period === life) {
	    // Last period
	    return (cost - total) * rate;
	  } else {
	    return current;
	  }
	};

	exports.DDB = function(cost, salvage, life, period, factor) {
	  // Initialize factor
	  factor = (factor === undefined) ? 2 : factor;

	  cost = utils.parseNumber(cost);
	  salvage = utils.parseNumber(salvage);
	  life = utils.parseNumber(life);
	  period = utils.parseNumber(period);
	  factor = utils.parseNumber(factor);
	  if (utils.anyIsError(cost, salvage, life, period, factor)) {
	    return error.value;
	  }

	  // Return error if any of the parameters is negative or if factor is null
	  if (cost < 0 || salvage < 0 || life < 0 || period < 0 || factor <= 0) {
	    return error.num;
	  }

	  // Return error if period is greater than life
	  if (period > life) {
	    return error.num;
	  }

	  // Return 0 (zero) if salvage is greater than or equal to cost
	  if (salvage >= cost) {
	    return 0;
	  }

	  // Compute depreciation
	  var total = 0;
	  var current = 0;
	  for (var i = 1; i <= period; i++) {
	    current = Math.min((cost - total) * (factor / life), (cost - salvage - total));
	    total += current;
	  }

	  // Return depreciation
	  return current;
	};

	// TODO
	exports.DISC = function() {
	 throw new Error('DISC is not implemented');
	};

	exports.DOLLARDE = function(dollar, fraction) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  dollar = utils.parseNumber(dollar);
	  fraction = utils.parseNumber(fraction);
	  if (utils.anyIsError(dollar, fraction)) {
	    return error.value;
	  }

	  // Return error if fraction is negative
	  if (fraction < 0) {
	    return error.num;
	  }

	  // Return error if fraction is greater than or equal to 0 and less than 1
	  if (fraction >= 0 && fraction < 1) {
	    return error.div0;
	  }

	  // Truncate fraction if it is not an integer
	  fraction = parseInt(fraction, 10);

	  // Compute integer part
	  var result = parseInt(dollar, 10);

	  // Add decimal part
	  result += (dollar % 1) * Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN10)) / fraction;

	  // Round result
	  var power = Math.pow(10, Math.ceil(Math.log(fraction) / Math.LN2) + 1);
	  result = Math.round(result * power) / power;

	  // Return converted dollar price
	  return result;
	};

	exports.DOLLARFR = function(dollar, fraction) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  dollar = utils.parseNumber(dollar);
	  fraction = utils.parseNumber(fraction);
	  if (utils.anyIsError(dollar, fraction)) {
	    return error.value;
	  }

	  // Return error if fraction is negative
	  if (fraction < 0) {
	    return error.num;
	  }

	  // Return error if fraction is greater than or equal to 0 and less than 1
	  if (fraction >= 0 && fraction < 1) {
	    return error.div0;
	  }

	  // Truncate fraction if it is not an integer
	  fraction = parseInt(fraction, 10);

	  // Compute integer part
	  var result = parseInt(dollar, 10);

	  // Add decimal part
	  result += (dollar % 1) * Math.pow(10, -Math.ceil(Math.log(fraction) / Math.LN10)) * fraction;

	  // Return converted dollar price
	  return result;
	};

	// TODO
	exports.DURATION = function() {
	 throw new Error('DURATION is not implemented');
	};

	exports.EFFECT = function(rate, periods) {
	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  if (utils.anyIsError(rate, periods)) {
	    return error.value;
	  }

	  // Return error if rate <=0 or periods < 1
	  if (rate <= 0 || periods < 1) {
	    return error.num;
	  }

	  // Truncate periods if it is not an integer
	  periods = parseInt(periods, 10);

	  // Return effective annual interest rate
	  return Math.pow(1 + rate / periods, periods) - 1;
	};

	exports.FV = function(rate, periods, payment, value, type) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  value = value || 0;
	  type = type || 0;

	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  payment = utils.parseNumber(payment);
	  value = utils.parseNumber(value);
	  type = utils.parseNumber(type);
	  if (utils.anyIsError(rate, periods, payment, value, type)) {
	    return error.value;
	  }

	  // Return future value
	  var result;
	  if (rate === 0) {
	    result = value + payment * periods;
	  } else {
	    var term = Math.pow(1 + rate, periods);
	    if (type === 1) {
	      result = value * term + payment * (1 + rate) * (term - 1) / rate;
	    } else {
	      result = value * term + payment * (term - 1) / rate;
	    }
	  }
	  return -result;
	};

	exports.FVSCHEDULE = function(principal, schedule) {
	  principal = utils.parseNumber(principal);
	  schedule = utils.parseNumberArray(utils.flatten(schedule));
	  if (utils.anyIsError(principal, schedule)) {
	    return error.value;
	  }

	  var n = schedule.length;
	  var future = principal;

	  // Apply all interests in schedule
	  for (var i = 0; i < n; i++) {
	    // Apply scheduled interest
	    future *= 1 + schedule[i];
	  }

	  // Return future value
	  return future;
	};

	// TODO
	exports.INTRATE = function() {
	 throw new Error('INTRATE is not implemented');
	};

	exports.IPMT = function(rate, period, periods, present, future, type) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  future = future || 0;
	  type = type || 0;

	  rate = utils.parseNumber(rate);
	  period = utils.parseNumber(period);
	  periods = utils.parseNumber(periods);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  type = utils.parseNumber(type);
	  if (utils.anyIsError(rate, period, periods, present, future, type)) {
	    return error.value;
	  }

	  // Compute payment
	  var payment = exports.PMT(rate, periods, present, future, type);

	  // Compute interest
	  var interest;
	  if (period === 1) {
	    if (type === 1) {
	      interest = 0;
	    } else {
	      interest = -present;
	    }
	  } else {
	    if (type === 1) {
	      interest = exports.FV(rate, period - 2, payment, present, 1) - payment;
	    } else {
	      interest = exports.FV(rate, period - 1, payment, present, 0);
	    }
	  }

	  // Return interest
	  return interest * rate;
	};

	exports.IRR = function(values, guess) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  guess = guess || 0;

	  values = utils.parseNumberArray(utils.flatten(values));
	  guess = utils.parseNumber(guess);
	  if (utils.anyIsError(values, guess)) {
	    return error.value;
	  }

	  // Calculates the resulting amount
	  var irrResult = function(values, dates, rate) {
	    var r = rate + 1;
	    var result = values[0];
	    for (var i = 1; i < values.length; i++) {
	      result += values[i] / Math.pow(r, (dates[i] - dates[0]) / 365);
	    }
	    return result;
	  };

	  // Calculates the first derivation
	  var irrResultDeriv = function(values, dates, rate) {
	    var r = rate + 1;
	    var result = 0;
	    for (var i = 1; i < values.length; i++) {
	      var frac = (dates[i] - dates[0]) / 365;
	      result -= frac * values[i] / Math.pow(r, frac + 1);
	    }
	    return result;
	  };

	  // Initialize dates and check that values contains at least one positive value and one negative value
	  var dates = [];
	  var positive = false;
	  var negative = false;
	  for (var i = 0; i < values.length; i++) {
	    dates[i] = (i === 0) ? 0 : dates[i - 1] + 365;
	    if (values[i] > 0) {
	      positive = true;
	    }
	    if (values[i] < 0) {
	      negative = true;
	    }
	  }

	  // Return error if values does not contain at least one positive value and one negative value
	  if (!positive || !negative) {
	    return error.num;
	  }

	  // Initialize guess and resultRate
	  guess = (guess === undefined) ? 0.1 : guess;
	  var resultRate = guess;

	  // Set maximum epsilon for end of iteration
	  var epsMax = 1e-10;

	  // Implement Newton's method
	  var newRate, epsRate, resultValue;
	  var contLoop = true;
	  do {
	    resultValue = irrResult(values, dates, resultRate);
	    newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);
	    epsRate = Math.abs(newRate - resultRate);
	    resultRate = newRate;
	    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
	  } while (contLoop);

	  // Return internal rate of return
	  return resultRate;
	};

	exports.ISPMT = function(rate, period, periods, value) {
	  rate = utils.parseNumber(rate);
	  period = utils.parseNumber(period);
	  periods = utils.parseNumber(periods);
	  value = utils.parseNumber(value);
	  if (utils.anyIsError(rate, period, periods, value)) {
	    return error.value;
	  }

	  // Return interest
	  return value * rate * (period / periods - 1);
	};

	// TODO
	exports.MDURATION = function() {
	 throw new Error('MDURATION is not implemented');
	};

	exports.MIRR = function(values, finance_rate, reinvest_rate) {
	  values = utils.parseNumberArray(utils.flatten(values));
	  finance_rate = utils.parseNumber(finance_rate);
	  reinvest_rate = utils.parseNumber(reinvest_rate);
	  if (utils.anyIsError(values, finance_rate, reinvest_rate)) {
	    return error.value;
	  }

	  // Initialize number of values
	  var n = values.length;

	  // Lookup payments (negative values) and incomes (positive values)
	  var payments = [];
	  var incomes = [];
	  for (var i = 0; i < n; i++) {
	    if (values[i] < 0) {
	      payments.push(values[i]);
	    } else {
	      incomes.push(values[i]);
	    }
	  }

	  // Return modified internal rate of return
	  var num = -exports.NPV(reinvest_rate, incomes) * Math.pow(1 + reinvest_rate, n - 1);
	  var den = exports.NPV(finance_rate, payments) * (1 + finance_rate);
	  return Math.pow(num / den, 1 / (n - 1)) - 1;
	};

	exports.NOMINAL = function(rate, periods) {
	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  if (utils.anyIsError(rate, periods)) {
	    return error.value;
	  }

	  // Return error if rate <=0 or periods < 1
	  if (rate <= 0 || periods < 1) {
	    return error.num;
	  }

	  // Truncate periods if it is not an integer
	  periods = parseInt(periods, 10);

	  // Return nominal annual interest rate
	  return (Math.pow(rate + 1, 1 / periods) - 1) * periods;
	};

	exports.NPER = function(rate, payment, present, future, type) {
	  type = (type === undefined) ? 0 : type;
	  future = (future === undefined) ? 0 : future;

	  rate = utils.parseNumber(rate);
	  payment = utils.parseNumber(payment);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  type = utils.parseNumber(type);
	  if (utils.anyIsError(rate, payment, present, future, type)) {
	    return error.value;
	  }

	  // Return number of periods
	  var num = payment * (1 + rate * type) - future * rate;
	  var den = (present * rate + payment * (1 + rate * type));
	  return Math.log(num / den) / Math.log(1 + rate);
	};

	exports.NPV = function() {
	  var args = utils.parseNumberArray(utils.flatten(arguments));
	  if (args instanceof Error) {
	    return args;
	  }

	  // Lookup rate
	  var rate = args[0];

	  // Initialize net present value
	  var value = 0;

	  // Loop on all values
	  for (var j = 1; j < args.length; j++) {
	    value += args[j] / Math.pow(1 + rate, j);
	  }

	  // Return net present value
	  return value;
	};

	// TODO
	exports.ODDFPRICE = function() {
	 throw new Error('ODDFPRICE is not implemented');
	};

	// TODO
	exports.ODDFYIELD = function() {
	 throw new Error('ODDFYIELD is not implemented');
	};

	// TODO
	exports.ODDLPRICE = function() {
	 throw new Error('ODDLPRICE is not implemented');
	};

	// TODO
	exports.ODDLYIELD = function() {
	 throw new Error('ODDLYIELD is not implemented');
	};

	exports.PDURATION = function(rate, present, future) {
	  rate = utils.parseNumber(rate);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  if (utils.anyIsError(rate, present, future)) {
	    return error.value;
	  }

	  // Return error if rate <=0
	  if (rate <= 0) {
	    return error.num;
	  }

	  // Return number of periods
	  return (Math.log(future) - Math.log(present)) / Math.log(1 + rate);
	};

	exports.PMT = function(rate, periods, present, future, type) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  future = future || 0;
	  type = type || 0;

	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  type = utils.parseNumber(type);
	  if (utils.anyIsError(rate, periods, present, future, type)) {
	    return error.value;
	  }

	  // Return payment
	  var result;
	  if (rate === 0) {
	    result = (present + future) / periods;
	  } else {
	    var term = Math.pow(1 + rate, periods);
	    if (type === 1) {
	      result = (future * rate / (term - 1) + present * rate / (1 - 1 / term)) / (1 + rate);
	    } else {
	      result = future * rate / (term - 1) + present * rate / (1 - 1 / term);
	    }
	  }
	  return -result;
	};

	exports.PPMT = function(rate, period, periods, present, future, type) {
	  future = future || 0;
	  type = type || 0;

	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  type = utils.parseNumber(type);
	  if (utils.anyIsError(rate, periods, present, future, type)) {
	    return error.value;
	  }

	  return exports.PMT(rate, periods, present, future, type) - exports.IPMT(rate, period, periods, present, future, type);
	};

	// TODO
	exports.PRICE = function() {
	 throw new Error('PRICE is not implemented');
	};

	// TODO
	exports.PRICEDISC = function() {
	 throw new Error('PRICEDISC is not implemented');
	};

	// TODO
	exports.PRICEMAT = function() {
	 throw new Error('PRICEMAT is not implemented');
	};

	exports.PV = function(rate, periods, payment, future, type) {
	  future = future || 0;
	  type = type || 0;

	  rate = utils.parseNumber(rate);
	  periods = utils.parseNumber(periods);
	  payment = utils.parseNumber(payment);
	  future = utils.parseNumber(future);
	  type = utils.parseNumber(type);
	  if (utils.anyIsError(rate, periods, payment, future, type)) {
	    return error.value;
	  }

	  // Return present value
	  if (rate === 0) {
	    return -payment * periods - future;
	  } else {
	    return (((1 - Math.pow(1 + rate, periods)) / rate) * payment * (1 + rate * type) - future) / Math.pow(1 + rate, periods);
	  }
	};

	exports.RATE = function(periods, payment, present, future, type, guess) {
	  // Credits: rabugento

	  guess = (guess === undefined) ? 0.01 : guess;
	  future = (future === undefined) ? 0 : future;
	  type = (type === undefined) ? 0 : type;

	  periods = utils.parseNumber(periods);
	  payment = utils.parseNumber(payment);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  type = utils.parseNumber(type);
	  guess = utils.parseNumber(guess);
	  if (utils.anyIsError(periods, payment, present, future, type, guess)) {
	    return error.value;
	  }

	  // Set maximum epsilon for end of iteration
	  var epsMax = 1e-6;

	  // Set maximum number of iterations
	  var iterMax = 100;
	  var iter = 0;
	  var close = false;
	  var rate = guess;

	  while (iter < iterMax && !close) {
	    var t1 = Math.pow(rate + 1, periods);
	    var t2 = Math.pow(rate + 1, periods - 1);

	    var f1 = future + t1 * present + payment * (t1 - 1) * (rate * type + 1) / rate;
	    var f2 = periods * t2 * present - payment * (t1 - 1) *(rate * type + 1) / Math.pow(rate,2);
	    var f3 = periods * payment * t2 * (rate * type + 1) / rate + payment * (t1 - 1) * type / rate;

	    var newRate = rate - f1 / (f2 + f3);

	    if (Math.abs(newRate - rate) < epsMax) close = true;
	    iter++
	    rate = newRate;
	  }

	  if (!close) return Number.NaN + rate;
	  return rate;
	};

	// TODO
	exports.RECEIVED = function() {
	 throw new Error('RECEIVED is not implemented');
	};

	exports.RRI = function(periods, present, future) {
	  periods = utils.parseNumber(periods);
	  present = utils.parseNumber(present);
	  future = utils.parseNumber(future);
	  if (utils.anyIsError(periods, present, future)) {
	    return error.value;
	  }

	  // Return error if periods or present is equal to 0 (zero)
	  if (periods === 0 || present === 0) {
	    return error.num;
	  }

	  // Return equivalent interest rate
	  return Math.pow(future / present, 1 / periods) - 1;
	};

	exports.SLN = function(cost, salvage, life) {
	  cost = utils.parseNumber(cost);
	  salvage = utils.parseNumber(salvage);
	  life = utils.parseNumber(life);
	  if (utils.anyIsError(cost, salvage, life)) {
	    return error.value;
	  }

	  // Return error if life equal to 0 (zero)
	  if (life === 0) {
	    return error.num;
	  }

	  // Return straight-line depreciation
	  return (cost - salvage) / life;
	};

	exports.SYD = function(cost, salvage, life, period) {
	  // Return error if any of the parameters is not a number
	  cost = utils.parseNumber(cost);
	  salvage = utils.parseNumber(salvage);
	  life = utils.parseNumber(life);
	  period = utils.parseNumber(period);
	  if (utils.anyIsError(cost, salvage, life, period)) {
	    return error.value;
	  }

	  // Return error if life equal to 0 (zero)
	  if (life === 0) {
	    return error.num;
	  }

	  // Return error if period is lower than 1 or greater than life
	  if (period < 1 || period > life) {
	    return error.num;
	  }

	  // Truncate period if it is not an integer
	  period = parseInt(period, 10);

	  // Return straight-line depreciation
	  return ((cost - salvage) * (life - period + 1) * 2) / (life * (life + 1));
	};

	exports.TBILLEQ = function(settlement, maturity, discount) {
	  settlement = utils.parseDate(settlement);
	  maturity = utils.parseDate(maturity);
	  discount = utils.parseNumber(discount);
	  if (utils.anyIsError(settlement, maturity, discount)) {
	    return error.value;
	  }

	  // Return error if discount is lower than or equal to zero
	  if (discount <= 0) {
	    return error.num;
	  }

	  // Return error if settlement is greater than maturity
	  if (settlement > maturity) {
	    return error.num;
	  }

	  // Return error if maturity is more than one year after settlement
	  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {
	    return error.num;
	  }

	  // Return bond-equivalent yield
	  return (365 * discount) / (360 - discount * dateTime.DAYS360(settlement, maturity, false));
	};

	exports.TBILLPRICE = function(settlement, maturity, discount) {
	  settlement = utils.parseDate(settlement);
	  maturity = utils.parseDate(maturity);
	  discount = utils.parseNumber(discount);
	  if (utils.anyIsError(settlement, maturity, discount)) {
	    return error.value;
	  }

	  // Return error if discount is lower than or equal to zero
	  if (discount <= 0) {
	    return error.num;
	  }

	  // Return error if settlement is greater than maturity
	  if (settlement > maturity) {
	    return error.num;
	  }

	  // Return error if maturity is more than one year after settlement
	  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {
	    return error.num;
	  }

	  // Return bond-equivalent yield
	  return 100 * (1 - discount * dateTime.DAYS360(settlement, maturity, false) / 360);
	};

	exports.TBILLYIELD = function(settlement, maturity, price) {
	  settlement = utils.parseDate(settlement);
	  maturity = utils.parseDate(maturity);
	  price = utils.parseNumber(price);
	  if (utils.anyIsError(settlement, maturity, price)) {
	    return error.value;
	  }

	  // Return error if price is lower than or equal to zero
	  if (price <= 0) {
	    return error.num;
	  }

	  // Return error if settlement is greater than maturity
	  if (settlement > maturity) {
	    return error.num;
	  }

	  // Return error if maturity is more than one year after settlement
	  if (maturity - settlement > 365 * 24 * 60 * 60 * 1000) {
	    return error.num;
	  }

	  // Return bond-equivalent yield
	  return (100 - price) * 360 / (price * dateTime.DAYS360(settlement, maturity, false));
	};

	// TODO
	exports.VDB = function() {
	 throw new Error('VDB is not implemented');
	};


	exports.XIRR = function(values, dates, guess) {
	  // Credits: algorithm inspired by Apache OpenOffice

	  values = utils.parseNumberArray(utils.flatten(values));
	  dates = utils.parseDateArray(utils.flatten(dates));
	  guess = utils.parseNumber(guess);
	  if (utils.anyIsError(values, dates, guess)) {
	    return error.value;
	  }

	  // Calculates the resulting amount
	  var irrResult = function(values, dates, rate) {
	    var r = rate + 1;
	    var result = values[0];
	    for (var i = 1; i < values.length; i++) {
	      result += values[i] / Math.pow(r, dateTime.DAYS(dates[i], dates[0]) / 365);
	    }
	    return result;
	  };

	  // Calculates the first derivation
	  var irrResultDeriv = function(values, dates, rate) {
	    var r = rate + 1;
	    var result = 0;
	    for (var i = 1; i < values.length; i++) {
	      var frac = dateTime.DAYS(dates[i], dates[0]) / 365;
	      result -= frac * values[i] / Math.pow(r, frac + 1);
	    }
	    return result;
	  };

	  // Check that values contains at least one positive value and one negative value
	  var positive = false;
	  var negative = false;
	  for (var i = 0; i < values.length; i++) {
	    if (values[i] > 0) {
	      positive = true;
	    }
	    if (values[i] < 0) {
	      negative = true;
	    }
	  }

	  // Return error if values does not contain at least one positive value and one negative value
	  if (!positive || !negative) {
	    return error.num;
	  }

	  // Initialize guess and resultRate
	  guess = guess || 0.1;
	  var resultRate = guess;

	  // Set maximum epsilon for end of iteration
	  var epsMax = 1e-10;

	  // Implement Newton's method
	  var newRate, epsRate, resultValue;
	  var contLoop = true;
	  do {
	    resultValue = irrResult(values, dates, resultRate);
	    newRate = resultRate - resultValue / irrResultDeriv(values, dates, resultRate);
	    epsRate = Math.abs(newRate - resultRate);
	    resultRate = newRate;
	    contLoop = (epsRate > epsMax) && (Math.abs(resultValue) > epsMax);
	  } while (contLoop);

	  // Return internal rate of return
	  return resultRate;
	};

	exports.XNPV = function(rate, values, dates) {
	  rate = utils.parseNumber(rate);
	  values = utils.parseNumberArray(utils.flatten(values));
	  dates = utils.parseDateArray(utils.flatten(dates));
	  if (utils.anyIsError(rate, values, dates)) {
	    return error.value;
	  }

	  var result = 0;
	  for (var i = 0; i < values.length; i++) {
	    result += values[i] / Math.pow(1 + rate, dateTime.DAYS(dates[i], dates[0]) / 365);
	  }
	  return result;
	};

	// TODO
	exports.YIELD = function() {
	 throw new Error('YIELD is not implemented');
	};

	// TODO
	exports.YIELDDISC = function() {
	 throw new Error('YIELDDISC is not implemented');
	};

	// TODO
	exports.YIELDMAT = function() {
	 throw new Error('YIELDMAT is not implemented');
	};

/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	var error = __webpack_require__(5);

	exports.MATCH = function(lookupValue, lookupArray, matchType) {
	  if (!lookupValue && !lookupArray) {
	    return error.na;
	  }

	  if (arguments.length === 2) {
	    matchType = 1;
	  }
	  if (!(lookupArray instanceof Array)) {
	    return error.na;
	  }

	  if (matchType !== -1 && matchType !== 0 && matchType !== 1) {
	    return error.na;
	  }
	  var index;
	  var indexValue;
	  for (var idx = 0; idx < lookupArray.length; idx++) {
	    if (matchType === 1) {
	      if (lookupArray[idx] === lookupValue) {
	        return idx + 1;
	      } else if (lookupArray[idx] < lookupValue) {
	        if (!indexValue) {
	          index = idx + 1;
	          indexValue = lookupArray[idx];
	        } else if (lookupArray[idx] > indexValue) {
	          index = idx + 1;
	          indexValue = lookupArray[idx];
	        }
	      }
	    } else if (matchType === 0) {
	      if (typeof lookupValue === 'string') {
	        lookupValue = lookupValue.replace(/\?/g, '.');
	        if (lookupArray[idx].toLowerCase().match(lookupValue.toLowerCase())) {
	          return idx + 1;
	        }
	      } else {
	        if (lookupArray[idx] === lookupValue) {
	          return idx + 1;
	        }
	      }
	    } else if (matchType === -1) {
	      if (lookupArray[idx] === lookupValue) {
	        return idx + 1;
	      } else if (lookupArray[idx] > lookupValue) {
	        if (!indexValue) {
	          index = idx + 1;
	          indexValue = lookupArray[idx];
	        } else if (lookupArray[idx] < indexValue) {
	          index = idx + 1;
	          indexValue = lookupArray[idx];
	        }
	      }
	    }
	  }

	  return index ? index : error.na;
	};

/***/ }
/******/ ])
});
;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/formulajs-connect\\node_modules\\formulajs\\dist\\formula.js","/formulajs-connect\\node_modules\\formulajs\\dist",undefined)
},{"_process":38,"buffer":36,"jStat":5,"numeral":6,"numeric":7}],5:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
this.j$ = this.jStat = (function(Math, undefined) {

// For quick reference.
var concat = Array.prototype.concat;
var slice = Array.prototype.slice;
var toString = Object.prototype.toString;

// Calculate correction for IEEE error
// TODO: This calculation can be improved.
function calcRdx(n, m) {
  var val = n > m ? n : m;
  return Math.pow(10,
                  17 - ~~(Math.log(((val > 0) ? val : -val)) * Math.LOG10E));
}


var isArray = Array.isArray || function isArray(arg) {
  return toString.call(arg) === '[object Array]';
};


function isFunction(arg) {
  return toString.call(arg) === '[object Function]';
}


function isNumber(arg) {
  return typeof arg === 'number' && arg === arg;
}


// Converts the jStat matrix to vector.
function toVector(arr) {
  return concat.apply([], arr);
}


// The one and only jStat constructor.
function jStat() {
  return new jStat._init(arguments);
}


// TODO: Remove after all references in src files have been removed.
jStat.fn = jStat.prototype;


// By separating the initializer from the constructor it's easier to handle
// always returning a new instance whether "new" was used or not.
jStat._init = function _init(args) {
  var i;

  // If first argument is an array, must be vector or matrix.
  if (isArray(args[0])) {
    // Check if matrix.
    if (isArray(args[0][0])) {
      // See if a mapping function was also passed.
      if (isFunction(args[1]))
        args[0] = jStat.map(args[0], args[1]);
      // Iterate over each is faster than this.push.apply(this, args[0].
      for (i = 0; i < args[0].length; i++)
        this[i] = args[0][i];
      this.length = args[0].length;

    // Otherwise must be a vector.
    } else {
      this[0] = isFunction(args[1]) ? jStat.map(args[0], args[1]) : args[0];
      this.length = 1;
    }

  // If first argument is number, assume creation of sequence.
  } else if (isNumber(args[0])) {
    this[0] = jStat.seq.apply(null, args);
    this.length = 1;

  // Handle case when jStat object is passed to jStat.
  } else if (args[0] instanceof jStat) {
    // Duplicate the object and pass it back.
    return jStat(args[0].toArray());

  // Unexpected argument value, return empty jStat object.
  // TODO: This is strange behavior. Shouldn't this throw or some such to let
  // the user know they had bad arguments?
  } else {
    this[0] = [];
    this.length = 1;
  }

  return this;
};
jStat._init.prototype = jStat.prototype;
jStat._init.constructor = jStat;


// Utility functions.
// TODO: for internal use only?
jStat.utils = {
  calcRdx: calcRdx,
  isArray: isArray,
  isFunction: isFunction,
  isNumber: isNumber,
  toVector: toVector
};


// Easily extend the jStat object.
// TODO: is this seriously necessary?
jStat.extend = function extend(obj) {
  var i, j;

  if (arguments.length === 1) {
    for (j in obj)
      jStat[j] = obj[j];
    return this;
  }

  for (i = 1; i < arguments.length; i++) {
    for (j in arguments[i])
      obj[j] = arguments[i][j];
  }

  return obj;
};


// Returns the number of rows in the matrix.
jStat.rows = function rows(arr) {
  return arr.length || 1;
};


// Returns the number of columns in the matrix.
jStat.cols = function cols(arr) {
  return arr[0].length || 1;
};


// Returns the dimensions of the object { rows: i, cols: j }
jStat.dimensions = function dimensions(arr) {
  return {
    rows: jStat.rows(arr),
    cols: jStat.cols(arr)
  };
};


// Returns a specified row as a vector
jStat.row = function row(arr, index) {
  return arr[index];
};


// Returns the specified column as a vector
jStat.col = function cols(arr, index) {
  var column = new Array(arr.length);
  for (var i = 0; i < arr.length; i++)
    column[i] = [arr[i][index]];
  return column;
};


// Returns the diagonal of the matrix
jStat.diag = function diag(arr) {
  var nrow = jStat.rows(arr);
  var res = new Array(nrow);
  for (var row = 0; row < nrow; row++)
    res[row] = [arr[row][row]];
  return res;
};


// Returns the anti-diagonal of the matrix
jStat.antidiag = function antidiag(arr) {
  var nrow = jStat.rows(arr) - 1;
  var res = new Array(nrow);
  for (var i = 0; nrow >= 0; nrow--, i++)
    res[i] = [arr[i][nrow]];
  return res;
};

// Transpose a matrix or array.
jStat.transpose = function transpose(arr) {
  var obj = [];
  var objArr, rows, cols, j, i;

  // Make sure arr is in matrix format.
  if (!isArray(arr[0]))
    arr = [arr];

  rows = arr.length;
  cols = arr[0].length;

  for (i = 0; i < cols; i++) {
    objArr = new Array(rows);
    for (j = 0; j < rows; j++)
      objArr[j] = arr[j][i];
    obj.push(objArr);
  }

  // If obj is vector, return only single array.
  return obj.length === 1 ? obj[0] : obj;
};


// Map a function to an array or array of arrays.
// "toAlter" is an internal variable.
jStat.map = function map(arr, func, toAlter) {
  var row, nrow, ncol, res, col;

  if (!isArray(arr[0]))
    arr = [arr];

  nrow = arr.length;
  ncol = arr[0].length;
  res = toAlter ? arr : new Array(nrow);

  for (row = 0; row < nrow; row++) {
    // if the row doesn't exist, create it
    if (!res[row])
      res[row] = new Array(ncol);
    for (col = 0; col < ncol; col++)
      res[row][col] = func(arr[row][col], row, col);
  }

  return res.length === 1 ? res[0] : res;
};


// Destructively alter an array.
jStat.alter = function alter(arr, func) {
  return jStat.map(arr, func, true);
};


// Generate a rows x cols matrix according to the supplied function.
jStat.create = function  create(rows, cols, func) {
  var res = new Array(rows);
  var i, j;

  if (isFunction(cols)) {
    func = cols;
    cols = rows;
  }

  for (i = 0; i < rows; i++) {
    res[i] = new Array(cols);
    for (j = 0; j < cols; j++)
      res[i][j] = func(i, j);
  }

  return res;
};


function retZero() { return 0; }


// Generate a rows x cols matrix of zeros.
jStat.zeros = function zeros(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, retZero);
};


function retOne() { return 1; }


// Generate a rows x cols matrix of ones.
jStat.ones = function ones(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, retOne);
};


// Generate a rows x cols matrix of uniformly random numbers.
jStat.rand = function rand(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, Math.random);
};


function retIdent(i, j) { return i === j ? 1 : 0; }


// Generate an identity matrix of size row x cols.
jStat.identity = function identity(rows, cols) {
  if (!isNumber(cols))
    cols = rows;
  return jStat.create(rows, cols, retIdent);
};


// Tests whether a matrix is symmetric
jStat.symmetric = function symmetric(arr) {
  var issymmetric = true;
  var size = arr.length;
  var row, col;

  if (arr.length !== arr[0].length)
    return false;

  for (row = 0; row < size; row++) {
    for (col = 0; col < size; col++)
      if (arr[col][row] !== arr[row][col])
        return false;
  }

  return true;
};


// Set all values to zero.
jStat.clear = function clear(arr) {
  return jStat.alter(arr, retZero);
};


// Generate sequence.
jStat.seq = function seq(min, max, length, func) {
  if (!isFunction(func))
    func = false;

  var arr = [];
  var hival = calcRdx(min, max);
  var step = (max * hival - min * hival) / ((length - 1) * hival);
  var current = min;
  var cnt;

  // Current is assigned using a technique to compensate for IEEE error.
  // TODO: Needs better implementation.
  for (cnt = 0;
       current <= max;
       cnt++, current = (min * hival + step * hival * cnt) / hival) {
    arr.push((func ? func(current, cnt) : current));
  }

  return arr;
};


// TODO: Go over this entire implementation. Seems a tragic waste of resources
// doing all this work. Instead, and while ugly, use new Function() to generate
// a custom function for each static method.

// Quick reference.
var jProto = jStat.prototype;

// Default length.
jProto.length = 0;

// For internal use only.
// TODO: Check if they're actually used, and if they are then rename them
// to _*
jProto.push = Array.prototype.push;
jProto.sort = Array.prototype.sort;
jProto.splice = Array.prototype.splice;
jProto.slice = Array.prototype.slice;


// Return a clean array.
jProto.toArray = function toArray() {
  return this.length > 1 ? slice.call(this) : slice.call(this)[0];
};


// Map a function to a matrix or vector.
jProto.map = function map(func, toAlter) {
  return jStat(jStat.map(this, func, toAlter));
};


// Destructively alter an array.
jProto.alter = function alter(func) {
  jStat.alter(this, func);
  return this;
};


// Extend prototype with methods that have no argument.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = function(func) {
      var self = this,
      results;
      // Check for callback.
      if (func) {
        setTimeout(function() {
          func.call(self, jProto[passfunc].call(self));
        });
        return this;
      }
      results = jStat[passfunc](this);
      return isArray(results) ? jStat(results) : results;
    };
  })(funcs[i]);
})('transpose clear symmetric rows cols dimensions diag antidiag'.split(' '));


// Extend prototype with methods that have one argument.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = function(index, func) {
      var self = this;
      // check for callback
      if (func) {
        setTimeout(function() {
          func.call(self, jProto[passfunc].call(self, index));
        });
        return this;
      }
      return jStat(jStat[passfunc](this, index));
    };
  })(funcs[i]);
})('row col'.split(' '));


// Extend prototype with simple shortcut methods.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = new Function(
        'return jStat(jStat.' + passfunc + '.apply(null, arguments));');
  })(funcs[i]);
})('create zeros ones rand identity'.split(' '));


// Exposing jStat.
return jStat;

}(Math));
(function(jStat, Math) {

var isFunction = jStat.utils.isFunction;

// Ascending functions for sort
function ascNum(a, b) { return a - b; }

function clip(arg, min, max) {
  return Math.max(min, Math.min(arg, max));
}


// sum of an array
jStat.sum = function sum(arr) {
  var sum = 0;
  var i = arr.length;
  var tmp;
  while (--i >= 0)
    sum += arr[i];
  return sum;
};


// sum squared
jStat.sumsqrd = function sumsqrd(arr) {
  var sum = 0;
  var i = arr.length;
  while (--i >= 0)
    sum += arr[i] * arr[i];
  return sum;
};


// sum of squared errors of prediction (SSE)
jStat.sumsqerr = function sumsqerr(arr) {
  var mean = jStat.mean(arr);
  var sum = 0;
  var i = arr.length;
  var tmp;
  while (--i >= 0) {
    tmp = arr[i] - mean;
    sum += tmp * tmp;
  }
  return sum;
};


// product of an array
jStat.product = function product(arr) {
  var prod = 1;
  var i = arr.length;
  while (--i >= 0)
    prod *= arr[i];
  return prod;
};


// minimum value of an array
jStat.min = function min(arr) {
  var low = arr[0];
  var i = 0;
  while (++i < arr.length)
    if (arr[i] < low)
      low = arr[i];
  return low;
};


// maximum value of an array
jStat.max = function max(arr) {
  var high = arr[0];
  var i = 0;
  while (++i < arr.length)
    if (arr[i] > high)
      high = arr[i];
  return high;
};


// mean value of an array
jStat.mean = function mean(arr) {
  return jStat.sum(arr) / arr.length;
};


// mean squared error (MSE)
jStat.meansqerr = function meansqerr(arr) {
  return jStat.sumsqerr(arr) / arr.length;
};


// geometric mean of an array
jStat.geomean = function geomean(arr) {
  return Math.pow(jStat.product(arr), 1 / arr.length);
};


// median of an array
jStat.median = function median(arr) {
  var arrlen = arr.length;
  var _arr = arr.slice().sort(ascNum);
  // check if array is even or odd, then return the appropriate
  return !(arrlen & 1)
    ? (_arr[(arrlen / 2) - 1 ] + _arr[(arrlen / 2)]) / 2
    : _arr[(arrlen / 2) | 0 ];
};


// cumulative sum of an array
jStat.cumsum = function cumsum(arr) {
  var len = arr.length;
  var sums = new Array(len);
  var i;
  sums[0] = arr[0];
  for (i = 1; i < len; i++)
    sums[i] = sums[i - 1] + arr[i];
  return sums;
};


// successive differences of a sequence
jStat.diff = function diff(arr) {
  var diffs = [];
  var arrLen = arr.length;
  var i;
  for (i = 1; i < arrLen; i++)
    diffs.push(arr[i] - arr[i - 1]);
  return diffs;
};


// mode of an array
// if there are multiple modes of an array, return all of them
// is this the appropriate way of handling it?
jStat.mode = function mode(arr) {
  var arrLen = arr.length;
  var _arr = arr.slice().sort(ascNum);
  var count = 1;
  var maxCount = 0;
  var numMaxCount = 0;
  var mode_arr = [];
  var i;

  for (i = 0; i < arrLen; i++) {
    if (_arr[i] === _arr[i + 1]) {
      count++;
    } else {
      if (count > maxCount) {
        mode_arr = [_arr[i]];
        maxCount = count;
        numMaxCount = 0;
      }
      // are there multiple max counts
      else if (count === maxCount) {
        mode_arr.push(_arr[i]);
        numMaxCount++;
      }
      // resetting count for new value in array
      count = 1;
    }
  }

  return numMaxCount === 0 ? mode_arr[0] : mode_arr;
};


// range of an array
jStat.range = function range(arr) {
  return jStat.max(arr) - jStat.min(arr);
};

// variance of an array
// flag indicates population vs sample
jStat.variance = function variance(arr, flag) {
  return jStat.sumsqerr(arr) / (arr.length - (flag ? 1 : 0));
};


// standard deviation of an array
// flag indicates population vs sample
jStat.stdev = function stdev(arr, flag) {
  return Math.sqrt(jStat.variance(arr, flag));
};


// mean deviation (mean absolute deviation) of an array
jStat.meandev = function meandev(arr) {
  var devSum = 0;
  var mean = jStat.mean(arr);
  var i;
  for (i = arr.length - 1; i >= 0; i--)
    devSum += Math.abs(arr[i] - mean);
  return devSum / arr.length;
};


// median deviation (median absolute deviation) of an array
jStat.meddev = function meddev(arr) {
  var devSum = 0;
  var median = jStat.median(arr);
  var i;
  for (i = arr.length - 1; i >= 0; i--)
    devSum += Math.abs(arr[i] - median);
  return devSum / arr.length;
};


// coefficient of variation
jStat.coeffvar = function coeffvar(arr) {
  return jStat.stdev(arr) / jStat.mean(arr);
};


// quartiles of an array
jStat.quartiles = function quartiles(arr) {
  var arrlen = arr.length;
  var _arr = arr.slice().sort(ascNum);
  return [
    _arr[ Math.round((arrlen) / 4) - 1 ],
    _arr[ Math.round((arrlen) / 2) - 1 ],
    _arr[ Math.round((arrlen) * 3 / 4) - 1 ]
  ];
};


// Arbitary quantiles of an array. Direct port of the scipy.stats
// implementation by Pierre GF Gerard-Marchant.
jStat.quantiles = function quantiles(arr, quantilesArray, alphap, betap) {
  var sortedArray = arr.slice().sort(ascNum);
  var quantileVals = [quantilesArray.length];
  var n = arr.length;
  var i, p, m, aleph, k, gamma;

  if (typeof alphap === 'undefined')
    alphap = 3 / 8;
  if (typeof betap === 'undefined')
    betap = 3 / 8;

  for (i = 0; i < quantilesArray.length; i++) {
    p = quantilesArray[i];
    m = alphap + p * (1 - alphap - betap);
    aleph = n * p + m;
    k = Math.floor(clip(aleph, 1, n - 1));
    gamma = clip(aleph - k, 0, 1);
    quantileVals[i] = (1 - gamma) * sortedArray[k - 1] + gamma * sortedArray[k];
  }

  return quantileVals;
};

// The percentile rank of score in a given array. Returns the percentage
// of all values in the input array that are less than (kind='strict') or
// less or equal than (kind='weak') score. Default is weak.
jStat.percentileOfScore = function percentileOfScore(arr, score, kind) {
  var counter = 0;
  var len = arr.length;
  var strict = false;
  var value, i;

  if (kind === 'strict')
    strict = true;

  for (i = 0; i < len; i++) {
    value = arr[i];
    if ((strict && value < score) ||
        (!strict && value <= score)) {
      counter++;
    }
  }

  return counter / len;
};

// covariance of two arrays
jStat.covariance = function covariance(arr1, arr2) {
  var u = jStat.mean(arr1);
  var v = jStat.mean(arr2);
  var arr1Len = arr1.length;
  var sq_dev = new Array(arr1Len);
  var i;

  for (i = 0; i < arr1Len; i++)
    sq_dev[i] = (arr1[i] - u) * (arr2[i] - v);

  return jStat.sum(sq_dev) / (arr1Len - 1);
};


// (pearson's) population correlation coefficient, rho
jStat.corrcoeff = function corrcoeff(arr1, arr2) {
  return jStat.covariance(arr1, arr2) /
      jStat.stdev(arr1, 1) /
      jStat.stdev(arr2, 1);
};


var jProto = jStat.prototype;


// Extend jProto with method for calculating cumulative sums, as it does not
// run again in case of true.
// If a matrix is passed, automatically assume operation should be done on the
// columns.
jProto.cumsum = function(fullbool, func) {
  var arr = [];
  var i = 0;
  var tmpthis = this;

  // Assignment reassignation depending on how parameters were passed in.
  if (isFunction(fullbool)) {
    func = fullbool;
    fullbool = false;
  }

  // Check if a callback was passed with the function.
  if (func) {
    setTimeout(function() {
      func.call(tmpthis, jProto.cumsum.call(tmpthis, fullbool));
    });
    return this;
  }

  // Check if matrix and run calculations.
  if (this.length > 1) {
    tmpthis = fullbool === true ? this : this.transpose();
    for (; i < tmpthis.length; i++)
      arr[i] = jStat.cumsum(tmpthis[i]);
    return arr;
  }

  return jStat.cumsum(this[0], fullbool);
};


// Extend jProto with methods which don't require arguments and work on columns.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    // If a matrix is passed, automatically assume operation should be done on
    // the columns.
    jProto[passfunc] = function(fullbool, func) {
      var arr = [];
      var i = 0;
      var tmpthis = this;
      // Assignment reassignation depending on how parameters were passed in.
      if (isFunction(fullbool)) {
        func = fullbool;
        fullbool = false;
      }
      // Check if a callback was passed with the function.
      if (func) {
        setTimeout(function() {
          func.call(tmpthis, jProto[passfunc].call(tmpthis, fullbool));
        });
        return this;
      }
      // Check if matrix and run calculations.
      if (this.length > 1) {
        tmpthis = fullbool === true ? this : this.transpose();
        for (; i < tmpthis.length; i++)
          arr[i] = jStat[passfunc](tmpthis[i]);
        return fullbool === true
            ? jStat[passfunc](jStat.utils.toVector(arr))
            : arr;
      }
      // Pass fullbool if only vector, not a matrix. for variance and stdev.
      return jStat[passfunc](this[0], fullbool);
    };
  })(funcs[i]);
})(('sum sumsqrd sumsqerr product min max mean meansqerr geomean median diff ' +
    'mode range variance stdev meandev meddev coeffvar quartiles').split(' '));


// Extend jProto with functions that take arguments. Operations on matrices are
// done on columns.
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jProto[passfunc] = function() {
      var arr = [];
      var i = 0;
      var tmpthis = this;
      var args = Array.prototype.slice.call(arguments);

      // If the last argument is a function, we assume it's a callback; we
      // strip the callback out and call the function again.
      if (isFunction(args[args.length - 1])) {
        var callbackFunction = args[args.length - 1];
        var argsToPass = args.slice(0, args.length - 1);

        setTimeout(function() {
          callbackFunction.call(tmpthis,
                                jProto[passfunc].apply(tmpthis, argsToPass));
        });
        return this;

      // Otherwise we curry the function args and call normally.
      } else {
        var callbackFunction = undefined;
        var curriedFunction = function curriedFunction(vector) {
          return jStat[passfunc].apply(tmpthis, [vector].concat(args));
        }
      }

      // If this is a matrix, run column-by-column.
      if (this.length > 1) {
        tmpthis = tmpthis.transpose();
        for (; i < tmpthis.length; i++)
          arr[i] = curriedFunction(tmpthis[i]);
        return arr;
      }

      // Otherwise run on the vector.
      return curriedFunction(this[0]);
    };
  })(funcs[i]);
})('quantiles percentileOfScore'.split(' '));

}(this.jStat, Math));
// Special functions //
(function(jStat, Math) {

// Log-gamma function
jStat.gammaln = function gammaln(x) {
  var j = 0;
  var cof = [
    76.18009172947146, -86.50532032941677, 24.01409824083091,
    -1.231739572450155, 0.1208650973866179e-2, -0.5395239384953e-5
  ];
  var ser = 1.000000000190015;
  var xx, y, tmp;
  tmp = (y = xx = x) + 5.5;
  tmp -= (xx + 0.5) * Math.log(tmp);
  for (; j < 6; j++)
    ser += cof[j] / ++y;
  return Math.log(2.5066282746310005 * ser / xx) - tmp;
};


// gamma of x
jStat.gammafn = function gammafn(x) {
  var p = [-1.716185138865495, 24.76565080557592, -379.80425647094563,
           629.3311553128184, 866.9662027904133, -31451.272968848367,
           -36144.413418691176, 66456.14382024054
  ];
  var q = [-30.8402300119739, 315.35062697960416, -1015.1563674902192,
           -3107.771671572311, 22538.118420980151, 4755.8462775278811,
           -134659.9598649693, -115132.2596755535];
  var fact = false;
  var n = 0;
  var xden = 0;
  var xnum = 0;
  var y = x;
  var i, z, yi, res, sum, ysq;
  if (y <= 0) {
    res = y % 1 + 3.6e-16;
    if (res) {
      fact = (!(y & 1) ? 1 : -1) * Math.PI / Math.sin(Math.PI * res);
      y = 1 - y;
    } else {
      return Infinity;
    }
  }
  yi = y;
  if (y < 1) {
    z = y++;
  } else {
    z = (y -= n = (y | 0) - 1) - 1;
  }
  for (i = 0; i < 8; ++i) {
    xnum = (xnum + p[i]) * z;
    xden = xden * z + q[i];
  }
  res = xnum / xden + 1;
  if (yi < y) {
    res /= yi;
  } else if (yi > y) {
    for (i = 0; i < n; ++i) {
      res *= y;
      y++;
    }
  }
  if (fact) {
    res = fact / res;
  }
  return res;
};


// lower incomplete gamma function P(a,x)
jStat.gammap = function gammap(a, x) {
  var aln = jStat.gammaln(a);
  var ap = a;
  var sum = 1 / a;
  var del = sum;
  var b = x + 1 - a;
  var c = 1 / 1.0e-30;
  var d = 1 / b;
  var h = d;
  var i = 1;
  // calculate maximum number of itterations required for a
  var ITMAX = -~(Math.log((a >= 1) ? a : 1 / a) * 8.5 + a * 0.4 + 17);
  var an, endval;

  if (x < 0 || a <= 0) {
    return NaN;
  } else if (x < a + 1) {
    for (; i <= ITMAX; i++) {
      sum += del *= x / ++ap;
    }
    return sum * Math.exp(-x + a * Math.log(x) - (aln));
  }

  for (; i <= ITMAX; i++) {
    an = -i * (i - a);
    b += 2;
    d = an * d + b;
    c = b + an / c;
    d = 1 / d;
    h *= d * c;
  }

  return 1 - h * Math.exp(-x + a * Math.log(x) - (aln));
};


// natural log factorial of n
jStat.factorialln = function factorialln(n) {
  return n < 0 ? NaN : jStat.gammaln(n + 1);
};

// factorial of n
jStat.factorial = function factorial(n) {
  return n < 0 ? NaN : jStat.gammafn(n + 1);
};

// combinations of n, m
jStat.combination = function combination(n, m) {
  // make sure n or m don't exceed the upper limit of usable values
  return (n > 170 || m > 170)
      ? Math.exp(jStat.combinationln(n, m))
      : (jStat.factorial(n) / jStat.factorial(m)) / jStat.factorial(n - m);
};


jStat.combinationln = function combinationln(n, m){
  return jStat.factorialln(n) - jStat.factorialln(m) - jStat.factorialln(n - m);
};


// permutations of n, m
jStat.permutation = function permutation(n, m) {
  return jStat.factorial(n) / jStat.factorial(n - m);
};


// beta function
jStat.betafn = function betafn(x, y) {
  // ensure arguments are positive
  if (x <= 0 || y <= 0)
    return undefined;
  // make sure x + y doesn't exceed the upper limit of usable values
  return (x + y > 170)
      ? Math.exp(jStat.betaln(x, y))
      : jStat.gammafn(x) * jStat.gammafn(y) / jStat.gammafn(x + y);
};


// natural logarithm of beta function
jStat.betaln = function betaln(x, y) {
  return jStat.gammaln(x) + jStat.gammaln(y) - jStat.gammaln(x + y);
};


// Evaluates the continued fraction for incomplete beta function by modified
// Lentz's method.
jStat.betacf = function betacf(x, a, b) {
  var fpmin = 1e-30;
  var m = 1;
  var qab = a + b;
  var qap = a + 1;
  var qam = a - 1;
  var c = 1;
  var d = 1 - qab * x / qap;
  var m2, aa, del, h;

  // These q's will be used in factors that occur in the coefficients
  if (Math.abs(d) < fpmin)
    d = fpmin;
  d = 1 / d;
  h = d;

  for (; m <= 100; m++) {
    m2 = 2 * m;
    aa = m * (b - m) * x / ((qam + m2) * (a + m2));
    // One step (the even one) of the recurrence
    d = 1 + aa * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c = 1 + aa / c;
    if (Math.abs(c) < fpmin)
      c = fpmin;
    d = 1 / d;
    h *= d * c;
    aa = -(a + m) * (qab + m) * x / ((a + m2) * (qap + m2));
    // Next step of the recurrence (the odd one)
    d = 1 + aa * d;
    if (Math.abs(d) < fpmin)
      d = fpmin;
    c = 1 + aa / c;
    if (Math.abs(c) < fpmin)
      c = fpmin;
    d = 1 / d;
    del = d * c;
    h *= del;
    if (Math.abs(del - 1.0) < 3e-7)
      break;
  }

  return h;
};


// Returns the inverse incomplte gamma function
jStat.gammapinv = function gammapinv(p, a) {
  var j = 0;
  var a1 = a - 1;
  var EPS = 1e-8;
  var gln = jStat.gammaln(a);
  var x, err, t, u, pp, lna1, afac;

  if (p >= 1)
    return Math.max(100, a + 100 * Math.sqrt(a));
  if (p <= 0)
    return 0;
  if (a > 1) {
    lna1 = Math.log(a1);
    afac = Math.exp(a1 * (lna1 - 1) - gln);
    pp = (p < 0.5) ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t * (0.99229 + t * 0.04481)) - t;
    if (p < 0.5)
      x = -x;
    x = Math.max(1e-3,
                 a * Math.pow(1 - 1 / (9 * a) - x / (3 * Math.sqrt(a)), 3));
  } else {
    t = 1 - a * (0.253 + a * 0.12);
    if (p < t)
      x = Math.pow(p / t, 1 / a);
    else
      x = 1 - Math.log(1 - (p - t) / (1 - t));
  }

  for(; j < 12; j++) {
    if (x <= 0)
      return 0;
    err = jStat.gammap(a, x) - p;
    if (a > 1)
      t = afac * Math.exp(-(x - a1) + a1 * (Math.log(x) - lna1));
    else
      t = Math.exp(-x + a1 * Math.log(x) - gln);
    u = err / t;
    x -= (t = u / (1 - 0.5 * Math.min(1, u * ((a - 1) / x - 1))));
    if (x <= 0)
      x = 0.5 * (x + t);
    if (Math.abs(t) < EPS * x)
      break;
  }

  return x;
};


// Returns the error function erf(x)
jStat.erf = function erf(x) {
  var cof = [-1.3026537197817094, 6.4196979235649026e-1, 1.9476473204185836e-2,
             -9.561514786808631e-3, -9.46595344482036e-4, 3.66839497852761e-4,
             4.2523324806907e-5, -2.0278578112534e-5, -1.624290004647e-6,
             1.303655835580e-6, 1.5626441722e-8, -8.5238095915e-8,
             6.529054439e-9, 5.059343495e-9, -9.91364156e-10,
             -2.27365122e-10, 9.6467911e-11, 2.394038e-12,
             -6.886027e-12, 8.94487e-13, 3.13092e-13,
             -1.12708e-13, 3.81e-16, 7.106e-15,
             -1.523e-15, -9.4e-17, 1.21e-16,
             -2.8e-17];
  var j = cof.length - 1;
  var isneg = false;
  var d = 0;
  var dd = 0;
  var t, ty, tmp, res;

  if (x < 0) {
    x = -x;
    isneg = true;
  }

  t = 2 / (2 + x);
  ty = 4 * t - 2;

  for(; j > 0; j--) {
    tmp = d;
    d = ty * d - dd + cof[j];
    dd = tmp;
  }

  res = t * Math.exp(-x * x + 0.5 * (cof[0] + ty * d) - dd);
  return isneg ? res - 1 : 1 - res;
};


// Returns the complmentary error function erfc(x)
jStat.erfc = function erfc(x) {
  return 1 - jStat.erf(x);
};


// Returns the inverse of the complementary error function
jStat.erfcinv = function erfcinv(p) {
  var j = 0;
  var x, err, t, pp;
  if (p >= 2)
    return -100;
  if (p <= 0)
    return 100;
  pp = (p < 1) ? p : 2 - p;
  t = Math.sqrt(-2 * Math.log(pp / 2));
  x = -0.70711 * ((2.30753 + t * 0.27061) /
                  (1 + t * (0.99229 + t * 0.04481)) - t);
  for (; j < 2; j++) {
    err = jStat.erfc(x) - pp;
    x += err / (1.12837916709551257 * Math.exp(-x * x) - x * err);
  }
  return (p < 1) ? x : -x;
};


// Returns the inverse of the incomplete beta function
jStat.ibetainv = function ibetainv(p, a, b) {
  var EPS = 1e-8;
  var a1 = a - 1;
  var b1 = b - 1;
  var j = 0;
  var lna, lnb, pp, t, u, err, x, al, h, w, afac;
  if (p <= 0)
    return 0;
  if (p >= 1)
    return 1;
  if (a >= 1 && b >= 1) {
    pp = (p < 0.5) ? p : 1 - p;
    t = Math.sqrt(-2 * Math.log(pp));
    x = (2.30753 + t * 0.27061) / (1 + t* (0.99229 + t * 0.04481)) - t;
    if (p < 0.5)
      x = -x;
    al = (x * x - 3) / 6;
    h = 2 / (1 / (2 * a - 1)  + 1 / (2 * b - 1));
    w = (x * Math.sqrt(al + h) / h) - (1 / (2 * b - 1) - 1 / (2 * a - 1)) *
        (al + 5 / 6 - 2 / (3 * h));
    x = a / (a + b * Math.exp(2 * w));
  } else {
    lna = Math.log(a / (a + b));
    lnb = Math.log(b / (a + b));
    t = Math.exp(a * lna) / a;
    u = Math.exp(b * lnb) / b;
    w = t + u;
    if (p < t / w)
      x = Math.pow(a * w * p, 1 / a);
    else
      x = 1 - Math.pow(b * w * (1 - p), 1 / b);
  }
  afac = -jStat.gammaln(a) - jStat.gammaln(b) + jStat.gammaln(a + b);
  for(; j < 10; j++) {
    if (x === 0 || x === 1)
      return x;
    err = jStat.ibeta(x, a, b) - p;
    t = Math.exp(a1 * Math.log(x) + b1 * Math.log(1 - x) + afac);
    u = err / t;
    x -= (t = u / (1 - 0.5 * Math.min(1, u * (a1 / x - b1 / (1 - x)))));
    if (x <= 0)
      x = 0.5 * (x + t);
    if (x >= 1)
      x = 0.5 * (x + t + 1);
    if (Math.abs(t) < EPS * x && j > 0)
      break;
  }
  return x;
};


// Returns the incomplete beta function I_x(a,b)
jStat.ibeta = function ibeta(x, a, b) {
  // Factors in front of the continued fraction.
  var bt = (x === 0 || x === 1) ?  0 :
    Math.exp(jStat.gammaln(a + b) - jStat.gammaln(a) -
             jStat.gammaln(b) + a * Math.log(x) + b *
             Math.log(1 - x));
  if (x < 0 || x > 1)
    return false;
  if (x < (a + 1) / (a + b + 2))
    // Use continued fraction directly.
    return bt * jStat.betacf(x, a, b) / a;
  // else use continued fraction after making the symmetry transformation.
  return 1 - bt * jStat.betacf(1 - x, b, a) / b;
};


// Returns a normal deviate (mu=0, sigma=1).
// If n and m are specified it returns a object of normal deviates.
jStat.randn = function randn(n, m) {
  var u, v, x, y, q, mat;
  if (!m)
    m = n;
  if (n)
    return jStat.create(n, m, function() { return jStat.randn(); });
  do {
    u = Math.random();
    v = 1.7156 * (Math.random() - 0.5);
    x = u - 0.449871;
    y = Math.abs(v) + 0.386595;
    q = x * x + y * (0.19600 * y - 0.25472 * x);
  } while (q > 0.27597 && (q > 0.27846 || v * v > -4 * Math.log(u) * u * u));
  return v / u;
};


// Returns a gamma deviate by the method of Marsaglia and Tsang.
jStat.randg = function randg(shape, n, m) {
  var oalph = shape;
  var a1, a2, u, v, x, mat;
  if (!m)
    m = n;
  if (!shape)
    shape = 1;
  if (n) {
    mat = jStat.zeros(n,m);
    mat.alter(function() { return jStat.randg(shape); });
    return mat;
  }
  if (shape < 1)
    shape += 1;
  a1 = shape - 1 / 3;
  a2 = 1 / Math.sqrt(9 * a1);
  do {
    do {
      x = jStat.randn();
      v = 1 + a2 * x;
    } while(v <= 0);
    v = v * v * v;
    u = Math.random();
  } while(u > 1 - 0.331 * Math.pow(x, 4) &&
          Math.log(u) > 0.5 * x*x + a1 * (1 - v + Math.log(v)));
  // alpha > 1
  if (shape == oalph)
    return a1 * v;
  // alpha < 1
  do {
    u = Math.random();
  } while(u === 0);
  return Math.pow(u, 1 / oalph) * a1 * v;
};


// making use of static methods on the instance
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jStat.fn[passfunc] = function() {
      return jStat(
          jStat.map(this, function(value) { return jStat[passfunc](value); }));
    }
  })(funcs[i]);
})('gammaln gammafn factorial factorialln'.split(' '));


(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jStat.fn[passfunc] = function() {
      return jStat(jStat[passfunc].apply(null, arguments));
    };
  })(funcs[i]);
})('randn'.split(' '));

}(this.jStat, Math));
(function(jStat, Math) {

// generate all distribution instance methods
(function(list) {
  for (var i = 0; i < list.length; i++) (function(func) {
    // distribution instance method
    jStat[func] = function(a, b, c) {
      if (!(this instanceof arguments.callee))
        return new arguments.callee(a, b, c);
      this._a = a;
      this._b = b;
      this._c = c;
      return this;
    };
    // distribution method to be used on a jStat instance
    jStat.fn[func] = function(a, b, c) {
      var newthis = jStat[func](a, b, c);
      newthis.data = this;
      return newthis;
    };
    // sample instance method
    jStat[func].prototype.sample = function(arr) {
      var a = this._a;
      var b = this._b;
      var c = this._c;
      if (arr)
        return jStat.alter(arr, function() {
          return jStat[func].sample(a, b, c);
        });
      else
        return jStat[func].sample(a, b, c);
    };
    // generate the pdf, cdf and inv instance methods
    (function(vals) {
      for (var i = 0; i < vals.length; i++) (function(fnfunc) {
        jStat[func].prototype[fnfunc] = function(x) {
          var a = this._a;
          var b = this._b;
          var c = this._c;
          if (!x && x !== 0)
            x = this.data;
          if (typeof x !== 'number') {
            return jStat.fn.map.call(x, function(x) {
              return jStat[func][fnfunc](x, a, b, c);
            });
          }
          return jStat[func][fnfunc](x, a, b, c);
        };
      })(vals[i]);
    })('pdf cdf inv'.split(' '));
    // generate the mean, median, mode and variance instance methods
    (function(vals) {
      for (var i = 0; i < vals.length; i++) (function(fnfunc) {
        jStat[func].prototype[fnfunc] = function() {
          return jStat[func][fnfunc](this._a, this._b, this._c);
        };
      })(vals[i]);
    })('mean median mode variance'.split(' '));
  })(list[i]);
})((
  'beta centralF cauchy chisquare exponential gamma invgamma kumaraswamy ' +
  'lognormal normal pareto studentt weibull uniform  binomial negbin hypgeom ' +
  'poisson triangular'
).split(' '));



// extend beta function with static methods
jStat.extend(jStat.beta, {
  pdf: function pdf(x, alpha, beta) {
    // PDF is zero outside the support
    if (x > 1 || x < 0)
      return 0;
    // PDF is one for the uniform case
    if (alpha == 1 && beta == 1)
      return 1;

    if (alpha < 512 || beta < 512) {
      return (Math.pow(x, alpha - 1) * Math.pow(1 - x, beta - 1)) /
          jStat.betafn(alpha, beta);
    } else {
      return Math.exp((alpha - 1) * Math.log(x) +
                      (beta - 1) * Math.log(1 - x) -
                      jStat.betaln(alpha, beta));
    }
  },

  cdf: function cdf(x, alpha, beta) {
    return (x > 1 || x < 0) ? (x > 1) * 1 : jStat.ibeta(x, alpha, beta);
  },

  inv: function inv(x, alpha, beta) {
    return jStat.ibetainv(x, alpha, beta);
  },

  mean: function mean(alpha, beta) {
    return alpha / (alpha + beta);
  },

  median: function median(alpha, beta) {
    throw new Error('median not yet implemented');
  },

  mode: function mode(alpha, beta) {
    return (alpha * beta) / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));
  },

  // return a random sample
  sample: function sample(alpha, beta) {
    var u = jStat.randg(alpha);
    return u / (u + jStat.randg(beta));
  },

  variance: function variance(alpha, beta) {
    return (alpha * beta) / (Math.pow(alpha + beta, 2) * (alpha + beta + 1));
  }
});

// extend F function with static methods
jStat.extend(jStat.centralF, {
  pdf: function pdf(x, df1, df2) {
    if (x < 0)
      return undefined;
    return Math.sqrt((Math.pow(df1 * x, df1) * Math.pow(df2, df2)) /
                     (Math.pow(df1 * x + df2, df1 + df2))) /
                     (x * jStat.betafn(df1/2, df2/2));

  },

  cdf: function cdf(x, df1, df2) {
    return jStat.ibeta((df1 * x) / (df1 * x + df2), df1 / 2, df2 / 2);
  },

  inv: function inv(x, df1, df2) {
    return df2 / (df1 * (1 / jStat.ibetainv(x, df1 / 2, df2 / 2) - 1));
  },

  mean: function mean(df1, df2) {
    return (df2 > 2) ? df2 / (df2 - 2) : undefined;
  },

  mode: function mode(df1, df2) {
    return (df1 > 2) ? (df2 * (df1 - 2)) / (df1 * (df2 + 2)) : undefined;
  },

  // return a random sample
  sample: function sample(df1, df2) {
    var x1 = jStat.randg(df1 / 2) * 2;
    var x2 = jStat.randg(df2 / 2) * 2;
    return (x1 / df1) / (x2 / df2);
  },

  variance: function variance(df1, df2) {
    if (df2 <= 4)
      return undefined;
    return 2 * df2 * df2 * (df1 + df2 - 2) /
        (df1 * (df2 - 2) * (df2 - 2) * (df2 - 4));
  }
});


// extend cauchy function with static methods
jStat.extend(jStat.cauchy, {
  pdf: function pdf(x, local, scale) {
    return (scale / (Math.pow(x - local, 2) + Math.pow(scale, 2))) / Math.PI;
  },

  cdf: function cdf(x, local, scale) {
    return Math.atan((x - local) / scale) / Math.PI + 0.5;
  },

  inv: function(p, local, scale) {
    return local + scale * Math.tan(Math.PI * (p - 0.5));
  },

  median: function median(local, scale) {
    return local;
  },

  mode: function mode(local, scale) {
    return local;
  },

  sample: function sample(local, scale) {
    return jStat.randn() *
        Math.sqrt(1 / (2 * jStat.randg(0.5))) * scale + local;
  }
});



// extend chisquare function with static methods
jStat.extend(jStat.chisquare, {
  pdf: function pdf(x, dof) {
    return Math.exp((dof / 2 - 1) * Math.log(x) - x / 2 - (dof / 2) *
                    Math.log(2) - jStat.gammaln(dof / 2));
  },

  cdf: function cdf(x, dof) {
    return jStat.gammap(dof / 2, x / 2);
  },

  inv: function(p, dof) {
    return 2 * jStat.gammapinv(p, 0.5 * dof);
  },

  mean : function(dof) {
    return dof;
  },

  // TODO: this is an approximation (is there a better way?)
  median: function median(dof) {
    return dof * Math.pow(1 - (2 / (9 * dof)), 3);
  },

  mode: function mode(dof) {
    return (dof - 2 > 0) ? dof - 2 : 0;
  },

  sample: function sample(dof) {
    return jStat.randg(dof / 2) * 2;
  },

  variance: function variance(dof) {
    return 2 * dof;
  }
});



// extend exponential function with static methods
jStat.extend(jStat.exponential, {
  pdf: function pdf(x, rate) {
    return x < 0 ? 0 : rate * Math.exp(-rate * x);
  },

  cdf: function cdf(x, rate) {
    return x < 0 ? 0 : 1 - Math.exp(-rate * x);
  },

  inv: function(p, rate) {
    return -Math.log(1 - p) / rate;
  },

  mean : function(rate) {
    return 1 / rate;
  },

  median: function (rate) {
    return (1 / rate) * Math.log(2);
  },

  mode: function mode(rate) {
    return 0;
  },

  sample: function sample(rate) {
    return -1 / rate * Math.log(Math.random());
  },

  variance : function(rate) {
    return Math.pow(rate, -2);
  }
});



// extend gamma function with static methods
jStat.extend(jStat.gamma, {
  pdf: function pdf(x, shape, scale) {
    return Math.exp((shape - 1) * Math.log(x) - x / scale -
                    jStat.gammaln(shape) - shape * Math.log(scale));
  },

  cdf: function cdf(x, shape, scale) {
    return jStat.gammap(shape, x / scale);
  },

  inv: function(p, shape, scale) {
    return jStat.gammapinv(p, shape) * scale;
  },

  mean : function(shape, scale) {
    return shape * scale;
  },

  mode: function mode(shape, scale) {
    if(shape > 1) return (shape - 1) * scale;
    return undefined;
  },

  sample: function sample(shape, scale) {
    return jStat.randg(shape) * scale;
  },

  variance: function variance(shape, scale) {
    return shape * scale * scale;
  }
});

// extend inverse gamma function with static methods
jStat.extend(jStat.invgamma, {
  pdf: function pdf(x, shape, scale) {
    return Math.exp(-(shape + 1) * Math.log(x) - scale / x -
                    jStat.gammaln(shape) + shape * Math.log(scale));
  },

  cdf: function cdf(x, shape, scale) {
    return 1 - jStat.gammap(shape, scale / x);
  },

  inv: function(p, shape, scale) {
    return scale / jStat.gammapinv(1 - p, shape);
  },

  mean : function(shape, scale) {
    return (shape > 1) ? scale / (shape - 1) : undefined;
  },

  mode: function mode(shape, scale) {
    return scale / (shape + 1);
  },

  sample: function sample(shape, scale) {
    return scale / jStat.randg(shape);
  },

  variance: function variance(shape, scale) {
    if (shape <= 2)
      return undefined;
    return scale * scale / ((shape - 1) * (shape - 1) * (shape - 2));
  }
});


// extend kumaraswamy function with static methods
jStat.extend(jStat.kumaraswamy, {
  pdf: function pdf(x, alpha, beta) {
    return Math.exp(Math.log(alpha) + Math.log(beta) + (alpha - 1) *
                    Math.log(x) + (beta - 1) *
                    Math.log(1 - Math.pow(x, alpha)));
  },

  cdf: function cdf(x, alpha, beta) {
    return (1 - Math.pow(1 - Math.pow(x, alpha), beta));
  },

  mean : function(alpha, beta) {
    return (beta * jStat.gammafn(1 + 1 / alpha) *
            jStat.gammafn(beta)) / (jStat.gammafn(1 + 1 / alpha + beta));
  },

  median: function median(alpha, beta) {
    return Math.pow(1 - Math.pow(2, -1 / beta), 1 / alpha);
  },

  mode: function mode(alpha, beta) {
    if (!(alpha >= 1 && beta >= 1 && (alpha !== 1 && beta !== 1)))
      return undefined;
    return Math.pow((alpha - 1) / (alpha * beta - 1), 1 / alpha);
  },

  variance: function variance(alpha, beta) {
    throw new Error('variance not yet implemented');
    // TODO: complete this
  }
});



// extend lognormal function with static methods
jStat.extend(jStat.lognormal, {
  pdf: function pdf(x, mu, sigma) {
    return Math.exp(-Math.log(x) - 0.5 * Math.log(2 * Math.PI) -
                    Math.log(sigma) - Math.pow(Math.log(x) - mu, 2) /
                    (2 * sigma * sigma));
  },

  cdf: function cdf(x, mu, sigma) {
    return 0.5 +
        (0.5 * jStat.erf((Math.log(x) - mu) / Math.sqrt(2 * sigma * sigma)));
  },

  inv: function(p, mu, sigma) {
    return Math.exp(-1.41421356237309505 * sigma * jStat.erfcinv(2 * p) + mu);
  },

  mean: function mean(mu, sigma) {
    return Math.exp(mu + sigma * sigma / 2);
  },

  median: function median(mu, sigma) {
    return Math.exp(mu);
  },

  mode: function mode(mu, sigma) {
    return Math.exp(mu - sigma * sigma);
  },

  sample: function sample(mu, sigma) {
    return Math.exp(jStat.randn() * sigma + mu);
  },

  variance: function variance(mu, sigma) {
    return (Math.exp(sigma * sigma) - 1) * Math.exp(2 * mu + sigma * sigma);
  }
});



// extend normal function with static methods
jStat.extend(jStat.normal, {
  pdf: function pdf(x, mean, std) {
    return Math.exp(-0.5 * Math.log(2 * Math.PI) -
                    Math.log(std) - Math.pow(x - mean, 2) / (2 * std * std));
  },

  cdf: function cdf(x, mean, std) {
    return 0.5 * (1 + jStat.erf((x - mean) / Math.sqrt(2 * std * std)));
  },

  inv: function(p, mean, std) {
    return -1.41421356237309505 * std * jStat.erfcinv(2 * p) + mean;
  },

  mean : function(mean, std) {
    return mean;
  },

  median: function median(mean, std) {
    return mean;
  },

  mode: function (mean, std) {
    return mean;
  },

  sample: function sample(mean, std) {
    return jStat.randn() * std + mean;
  },

  variance : function(mean, std) {
    return std * std;
  }
});



// extend pareto function with static methods
jStat.extend(jStat.pareto, {
  pdf: function pdf(x, scale, shape) {
    if (x <= scale)
      return undefined;
    return (shape * Math.pow(scale, shape)) / Math.pow(x, shape + 1);
  },

  cdf: function cdf(x, scale, shape) {
    return 1 - Math.pow(scale / x, shape);
  },

  mean: function mean(scale, shape) {
    if (shape <= 1)
      return undefined;
    return (shape * Math.pow(scale, shape)) / (shape - 1);
  },

  median: function median(scale, shape) {
    return scale * (shape * Math.SQRT2);
  },

  mode: function mode(scale, shape) {
    return scale;
  },

  variance : function(scale, shape) {
    if (shape <= 2)
      return undefined;
    return (scale*scale * shape) / (Math.pow(shape - 1, 2) * (shape - 2));
  }
});



// extend studentt function with static methods
jStat.extend(jStat.studentt, {
  pdf: function pdf(x, dof) {
    return (jStat.gammafn((dof + 1) / 2) / (Math.sqrt(dof * Math.PI) *
        jStat.gammafn(dof / 2))) *
        Math.pow(1 + ((x * x) / dof), -((dof + 1) / 2));
  },

  cdf: function cdf(x, dof) {
    var dof2 = dof / 2;
    return jStat.ibeta((x + Math.sqrt(x * x + dof)) /
                       (2 * Math.sqrt(x * x + dof)), dof2, dof2);
  },

  inv: function(p, dof) {
    var x = jStat.ibetainv(2 * Math.min(p, 1 - p), 0.5 * dof, 0.5);
    x = Math.sqrt(dof * (1 - x) / x);
    return (p > 0.5) ? x : -x;
  },

  mean: function mean(dof) {
    return (dof > 1) ? 0 : undefined;
  },

  median: function median(dof) {
    return 0;
  },

  mode: function mode(dof) {
    return 0;
  },

  sample: function sample(dof) {
    return jStat.randn() * Math.sqrt(dof / (2 * jStat.randg(dof / 2)));
  },

  variance: function variance(dof) {
    return (dof  > 2) ? dof / (dof - 2) : (dof > 1) ? Infinity : undefined;
  }
});



// extend weibull function with static methods
jStat.extend(jStat.weibull, {
  pdf: function pdf(x, scale, shape) {
    if (x < 0)
      return 0;
    return (shape / scale) * Math.pow((x / scale), (shape - 1)) *
        Math.exp(-(Math.pow((x / scale), shape)));
  },

  cdf: function cdf(x, scale, shape) {
    return x < 0 ? 0 : 1 - Math.exp(-Math.pow((x / scale), shape));
  },

  inv: function(p, scale, shape) {
    return scale * Math.pow(-Math.log(1 - p), 1 / shape);
  },

  mean : function(scale, shape) {
    return scale * jStat.gammafn(1 + 1 / shape);
  },

  median: function median(scale, shape) {
    return scale * Math.pow(Math.log(2), 1 / shape);
  },

  mode: function mode(scale, shape) {
    if (shape <= 1)
      return undefined;
    return scale * Math.pow((shape - 1) / shape, 1 / shape);
  },

  sample: function sample(scale, shape) {
    return scale * Math.pow(-Math.log(Math.random()), 1 / shape);
  },

  variance: function variance(scale, shape) {
    return scale * scale * jStat.gammafn(1 + 2 / shape) -
        Math.pow(this.mean(scale, shape), 2);
  }
});



// extend uniform function with static methods
jStat.extend(jStat.uniform, {
  pdf: function pdf(x, a, b) {
    return (x < a || x > b) ? 0 : 1 / (b - a);
  },

  cdf: function cdf(x, a, b) {
    if (x < a)
      return 0;
    else if (x < b)
      return (x - a) / (b - a);
    return 1;
  },

  mean: function mean(a, b) {
    return 0.5 * (a + b);
  },

  median: function median(a, b) {
    return jStat.mean(a, b);
  },

  mode: function mode(a, b) {
    throw new Error('mode is not yet implemented');
  },

  sample: function sample(a, b) {
    return (a / 2 + b / 2) + (b / 2 - a / 2) * (2 * Math.random() - 1);
  },

  variance: function variance(a, b) {
    return Math.pow(b - a, 2) / 12;
  }
});



// extend uniform function with static methods
jStat.extend(jStat.binomial, {
  pdf: function pdf(k, n, p) {
    return (p === 0 || p === 1) ?
      ((n * p) === k ? 1 : 0) :
      jStat.combination(n, k) * Math.pow(p, k) * Math.pow(1 - p, n - k);
  },

  cdf: function cdf(x, n, p) {
    var binomarr = [],
    k = 0;
    if (x < 0) {
      return 0;
    }
    if (x < n) {
      for (; k <= x; k++) {
        binomarr[ k ] = jStat.binomial.pdf(k, n, p);
      }
      return jStat.sum(binomarr);
    }
    return 1;
  }
});



// extend uniform function with static methods
jStat.extend(jStat.negbin, {
  pdf: function pdf(k, r, p) {
    return k !== k | 0
      ? false
      : k < 0
        ? 0
        : jStat.combination(k + r - 1, r - 1) * Math.pow(1 - p, k) * Math.pow(p, r);
  },

  cdf: function cdf(x, r, p) {
    var sum = 0,
    k = 0;
    if (x < 0) return 0;
    for (; k <= x; k++) {
      sum += jStat.negbin.pdf(k, r, p);
    }
    return sum;
  }
});



// extend uniform function with static methods
jStat.extend(jStat.hypgeom, {
  pdf: function pdf(k, N, m, n) {
    // Hypergeometric PDF.

    // A simplification of the CDF algorithm below.

    // k = number of successes drawn
    // N = population size
    // m = number of successes in population
    // n = number of items drawn from population

    if(k !== k | 0) {
      return false;
    } else if(k < 0 || k < m - (N - n)) {
      // It's impossible to have this few successes drawn.
      return 0;
    } else if(k > n || k > m) {
      // It's impossible to have this many successes drawn.
      return 0;
    } else if (m * 2 > N) {
      // More than half the population is successes.

      if(n * 2 > N) {
        // More than half the population is sampled.

        return jStat.hypgeom.pdf(N - m - n + k, N, N - m, N - n)
      } else {
        // Half or less of the population is sampled.

        return jStat.hypgeom.pdf(n - k, N, N - m, n);
      }

    } else if(n * 2 > N) {
      // Half or less is successes.

      return jStat.hypgeom.pdf(m - k, N, m, N - n);

    } else if(m < n) {
      // We want to have the number of things sampled to be less than the
      // successes available. So swap the definitions of successful and sampled.
      return jStat.hypgeom.pdf(k, N, n, m);
    } else {
      // If we get here, half or less of the population was sampled, half or
      // less of it was successes, and we had fewer sampled things than
      // successes. Now we can do this complicated iterative algorithm in an
      // efficient way.

      // The basic premise of the algorithm is that we partially normalize our
      // intermediate product to keep it in a numerically good region, and then
      // finish the normalization at the end.

      // This variable holds the scaled probability of the current number of
      // successes.
      var scaledPDF = 1;

      // This keeps track of how much we have normalized.
      var samplesDone = 0;

      for(var i = 0; i < k; i++) {
        // For every possible number of successes up to that observed...

        while(scaledPDF > 1 && samplesDone < n) {
          // Intermediate result is growing too big. Apply some of the
          // normalization to shrink everything.

          scaledPDF *= 1 - (m / (N - samplesDone));

          // Say we've normalized by this sample already.
          samplesDone++;
        }

        // Work out the partially-normalized hypergeometric PDF for the next
        // number of successes
        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));
      }

      for(; samplesDone < n; samplesDone++) {
        // Apply all the rest of the normalization
        scaledPDF *= 1 - (m / (N - samplesDone));
      }

      // Bound answer sanely before returning.
      return Math.min(1, Math.max(0, scaledPDF));
    }
  },

  cdf: function cdf(x, N, m, n) {
    // Hypergeometric CDF.

    // This algorithm is due to Prof. Thomas S. Ferguson, <tom@math.ucla.edu>,
    // and comes from his hypergeometric test calculator at
    // <http://www.math.ucla.edu/~tom/distributions/Hypergeometric.html>.

    // x = number of successes drawn
    // N = population size
    // m = number of successes in population
    // n = number of items drawn from population

    if(x < 0 || x < m - (N - n)) {
      // It's impossible to have this few successes drawn or fewer.
      return 0;
    } else if(x >= n || x >= m) {
      // We will always have this many successes or fewer.
      return 1;
    } else if (m * 2 > N) {
      // More than half the population is successes.

      if(n * 2 > N) {
        // More than half the population is sampled.

        return jStat.hypgeom.cdf(N - m - n + x, N, N - m, N - n)
      } else {
        // Half or less of the population is sampled.

        return 1 - jStat.hypgeom.cdf(n - x - 1, N, N - m, n);
      }

    } else if(n * 2 > N) {
      // Half or less is successes.

      return 1 - jStat.hypgeom.cdf(m - x - 1, N, m, N - n);

    } else if(m < n) {
      // We want to have the number of things sampled to be less than the
      // successes available. So swap the definitions of successful and sampled.
      return jStat.hypgeom.cdf(x, N, n, m);
    } else {
      // If we get here, half or less of the population was sampled, half or
      // less of it was successes, and we had fewer sampled things than
      // successes. Now we can do this complicated iterative algorithm in an
      // efficient way.

      // The basic premise of the algorithm is that we partially normalize our
      // intermediate sum to keep it in a numerically good region, and then
      // finish the normalization at the end.

      // Holds the intermediate, scaled total CDF.
      var scaledCDF = 1;

      // This variable holds the scaled probability of the current number of
      // successes.
      var scaledPDF = 1;

      // This keeps track of how much we have normalized.
      var samplesDone = 0;

      for(var i = 0; i < x; i++) {
        // For every possible number of successes up to that observed...

        while(scaledCDF > 1 && samplesDone < n) {
          // Intermediate result is growing too big. Apply some of the
          // normalization to shrink everything.

          var factor = 1 - (m / (N - samplesDone));

          scaledPDF *= factor;
          scaledCDF *= factor;

          // Say we've normalized by this sample already.
          samplesDone++;
        }

        // Work out the partially-normalized hypergeometric PDF for the next
        // number of successes
        scaledPDF *= (n - i) * (m - i) / ((i + 1) * (N - m - n + i + 1));

        // Add to the CDF answer.
        scaledCDF += scaledPDF;
      }

      for(; samplesDone < n; samplesDone++) {
        // Apply all the rest of the normalization
        scaledCDF *= 1 - (m / (N - samplesDone));
      }

      // Bound answer sanely before returning.
      return Math.min(1, Math.max(0, scaledCDF));
    }
  }
});



// extend uniform function with static methods
jStat.extend(jStat.poisson, {
  pdf: function pdf(k, l) {
    return Math.pow(l, k) * Math.exp(-l) / jStat.factorial(k);
  },

  cdf: function cdf(x, l) {
    var sumarr = [],
    k = 0;
    if (x < 0) return 0;
    for (; k <= x; k++) {
      sumarr.push(jStat.poisson.pdf(k, l));
    }
    return jStat.sum(sumarr);
  },

  mean : function(l) {
    return l;
  },

  variance : function(l) {
    return l;
  },

  sample: function sample(l) {
    var p = 1, k = 0, L = Math.exp(-l);
    do {
      k++;
      p *= Math.random();
    } while (p > L);
    return k - 1;
  }
});

// extend triangular function with static methods
jStat.extend(jStat.triangular, {
  pdf: function pdf(x, a, b, c) {
    return (b <= a || c < a || c > b)
      ? undefined
      : (x < a || x > b)
        ? 0
        : (x <= c)
          ? (2 * (x - a)) / ((b - a) * (c - a))
          : (2 * (b - x)) / ((b - a) * (b - c));
  },

  cdf: function cdf(x, a, b, c) {
    if (b <= a || c < a || c > b)
      return undefined;
    if (x < a) {
      return 0;
    } else {
      if (x <= c)
        return Math.pow(x - a, 2) / ((b - a) * (c - a));
      return 1 - Math.pow(b - x, 2) / ((b - a) * (b - c));
    }
    // never reach this
    return 1;
  },

  mean: function mean(a, b, c) {
    return (a + b + c) / 3;
  },

  median: function median(a, b, c) {
    if (c <= (a + b) / 2) {
      return b - Math.sqrt((b - a) * (b - c)) / Math.sqrt(2);
    } else if (c > (a + b) / 2) {
      return a + Math.sqrt((b - a) * (c - a)) / Math.sqrt(2);
    }
  },

  mode: function mode(a, b, c) {
    return c;
  },

  sample: function sample(a, b, c) {
    var u = Math.random();
    if (u < ((c - a) / (b - a)))
      return a + Math.sqrt(u * (b - a) * (c - a))
    return b - Math.sqrt((1 - u) * (b - a) * (b - c));
  },

  variance: function variance(a, b, c) {
    return (a * a + b * b + c * c - a * b - a * c - b * c) / 18;
  }
});

}(this.jStat, Math));
/* Provides functions for the solution of linear system of equations, integration, extrapolation,
 * interpolation, eigenvalue problems, differential equations and PCA analysis. */

(function(jStat, Math) {

var push = Array.prototype.push;
var isArray = jStat.utils.isArray;

jStat.extend({

  // add a vector/matrix to a vector/matrix or scalar
  add: function add(arr, arg) {
    // check if arg is a vector or scalar
    if (isArray(arg)) {
      if (!isArray(arg[0])) arg = [ arg ];
      return jStat.map(arr, function(value, row, col) {
        return value + arg[row][col];
      });
    }
    return jStat.map(arr, function(value) { return value + arg; });
  },

  // subtract a vector or scalar from the vector
  subtract: function subtract(arr, arg) {
    // check if arg is a vector or scalar
    if (isArray(arg)) {
      if (!isArray(arg[0])) arg = [ arg ];
      return jStat.map(arr, function(value, row, col) {
        return value - arg[row][col] || 0;
      });
    }
    return jStat.map(arr, function(value) { return value - arg; });
  },

  // matrix division
  divide: function divide(arr, arg) {
    if (isArray(arg)) {
      if (!isArray(arg[0])) arg = [ arg ];
      return jStat.multiply(arr, jStat.inv(arg));
    }
    return jStat.map(arr, function(value) { return value / arg; });
  },

  // matrix multiplication
  multiply: function multiply(arr, arg) {
    var row, col, nrescols, sum,
    nrow = arr.length,
    ncol = arr[0].length,
    res = jStat.zeros(nrow, nrescols = (isArray(arg)) ? arg[0].length : ncol),
    rescols = 0;
    if (isArray(arg)) {
      for (; rescols < nrescols; rescols++) {
        for (row = 0; row < nrow; row++) {
          sum = 0;
          for (col = 0; col < ncol; col++)
          sum += arr[row][col] * arg[col][rescols];
          res[row][rescols] = sum;
        }
      }
      return (nrow === 1 && rescols === 1) ? res[0][0] : res;
    }
    return jStat.map(arr, function(value) { return value * arg; });
  },

  // Returns the dot product of two matricies
  dot: function dot(arr, arg) {
    if (!isArray(arr[0])) arr = [ arr ];
    if (!isArray(arg[0])) arg = [ arg ];
    // convert column to row vector
    var left = (arr[0].length === 1 && arr.length !== 1) ? jStat.transpose(arr) : arr,
    right = (arg[0].length === 1 && arg.length !== 1) ? jStat.transpose(arg) : arg,
    res = [],
    row = 0,
    nrow = left.length,
    ncol = left[0].length,
    sum, col;
    for (; row < nrow; row++) {
      res[row] = [];
      sum = 0;
      for (col = 0; col < ncol; col++)
      sum += left[row][col] * right[row][col];
      res[row] = sum;
    }
    return (res.length === 1) ? res[0] : res;
  },

  // raise every element by a scalar
  pow: function pow(arr, arg) {
    return jStat.map(arr, function(value) { return Math.pow(value, arg); });
  },

  // generate the absolute values of the vector
  abs: function abs(arr) {
    return jStat.map(arr, function(value) { return Math.abs(value); });
  },

  // computes the p-norm of the vector
  // In the case that a matrix is passed, uses the first row as the vector
  norm: function norm(arr, p) {
    var nnorm = 0,
    i = 0;
    // check the p-value of the norm, and set for most common case
    if (isNaN(p)) p = 2;
    // check if multi-dimensional array, and make vector correction
    if (isArray(arr[0])) arr = arr[0];
    // vector norm
    for (; i < arr.length; i++) {
      nnorm += Math.pow(Math.abs(arr[i]), p);
    }
    return Math.pow(nnorm, 1 / p);
  },

  // TODO: make compatible with matrices
  // computes the angle between two vectors in rads
  angle: function angle(arr, arg) {
    return Math.acos(jStat.dot(arr, arg) / (jStat.norm(arr) * jStat.norm(arg)));
  },

  // augment one matrix by another
  aug: function aug(a, b) {
    var newarr = a.slice(),
    i = 0;
    for (; i < newarr.length; i++) {
      push.apply(newarr[i], b[i]);
    }
    return newarr;
  },

  inv: function inv(a) {
    var rows = a.length,
    cols = a[0].length,
    b = jStat.identity(rows, cols),
    c = jStat.gauss_jordan(a, b),
    obj = [],
    i = 0,
    j;
    for (; i < rows; i++) {
      obj[i] = [];
      for (j = cols - 1; j < c[0].length; j++)
      obj[i][j - cols] = c[i][j];
    }
    return obj;
  },

  // calculate the determinant of a matrix
  det: function det(a) {
    var alen = a.length,
    alend = alen * 2,
    vals = new Array(alend),
    rowshift = alen - 1,
    colshift = alend - 1,
    mrow = rowshift - alen + 1,
    mcol = colshift,
    i = 0,
    result = 0,
    j;
    // check for special 2x2 case
    if (alen === 2) {
      return a[0][0] * a[1][1] - a[0][1] * a[1][0];
    }
    for (; i < alend; i++) {
      vals[i] = 1;
    }
    for (i = 0; i < alen; i++) {
      for (j = 0; j < alen; j++) {
        vals[(mrow < 0) ? mrow + alen : mrow ] *= a[i][j];
        vals[(mcol < alen) ? mcol + alen : mcol ] *= a[i][j];
        mrow++;
        mcol--;
      }
      mrow = --rowshift - alen + 1;
      mcol = --colshift;
    }
    for (i = 0; i < alen; i++) {
      result += vals[i];
    }
    for (; i < alend; i++) {
      result -= vals[i];
    }
    return result;
  },

  gauss_elimination: function gauss_elimination(a, b) {
    var i = 0,
    j = 0,
    n = a.length,
    m = a[0].length,
    factor = 1,
    sum = 0,
    x = [],
    maug, pivot, temp, k;
    a = jStat.aug(a, b);
    maug = a[0].length;
    for(; i < n; i++) {
      pivot = a[i][i];
      j = i;
      for (k = i + 1; k < m; k++) {
        if (pivot < Math.abs(a[k][i])) {
          pivot = a[k][i];
          j = k;
        }
      }
      if (j != i) {
        for(k = 0; k < maug; k++) {
          temp = a[i][k];
          a[i][k] = a[j][k];
          a[j][k] = temp;
        }
      }
      for (j = i + 1; j < n; j++) {
        factor = a[j][i] / a[i][i];
        for(k = i; k < maug; k++) {
          a[j][k] = a[j][k] - factor * a[i][k];
        }
      }
    }
    for (i = n - 1; i >= 0; i--) {
      sum = 0;
      for (j = i + 1; j<= n - 1; j++) {
        sum = x[j] * a[i][j];
      }
      x[i] =(a[i][maug - 1] - sum) / a[i][i];
    }
    return x;
  },

  gauss_jordan: function gauss_jordan(a, b) {
    var m = jStat.aug(a, b),
    h = m.length,
    w = m[0].length;
    // find max pivot
    for (var y = 0; y < h; y++) {
      var maxrow = y;
      for (var y2 = y+1; y2 < h; y2++) {
        if (Math.abs(m[y2][y]) > Math.abs(m[maxrow][y]))
          maxrow = y2;
      }
      var tmp = m[y];
      m[y] = m[maxrow];
      m[maxrow] = tmp
      for (var y2 = y+1; y2 < h; y2++) {
        c = m[y2][y] / m[y][y];
        for (var x = y; x < w; x++) {
          m[y2][x] -= m[y][x] * c;
        }
      }
    }
    // backsubstitute
    for (var y = h-1; y >= 0; y--) {
      c = m[y][y];
      for (var y2 = 0; y2 < y; y2++) {
        for (var x = w-1; x > y-1; x--) {
          m[y2][x] -= m[y][x] * m[y2][y] / c;
        }
      }
      m[y][y] /= c;
      for (var x = h; x < w; x++) {
        m[y][x] /= c;
      }
    }
    return m;
  },

  lu: function lu(a, b) {
    throw new Error('lu not yet implemented');
  },

  cholesky: function cholesky(a, b) {
    throw new Error('cholesky not yet implemented');
  },

  gauss_jacobi: function gauss_jacobi(a, b, x, r) {
    var i = 0;
    var j = 0;
    var n = a.length;
    var l = [];
    var u = [];
    var d = [];
    var xv, c, h, xk;
    for (; i < n; i++) {
      l[i] = [];
      u[i] = [];
      d[i] = [];
      for (j = 0; j < n; j++) {
        if (i > j) {
          l[i][j] = a[i][j];
          u[i][j] = d[i][j] = 0;
        } else if (i < j) {
          u[i][j] = a[i][j];
          l[i][j] = d[i][j] = 0;
        } else {
          d[i][j] = a[i][j];
          l[i][j] = u[i][j] = 0;
        }
      }
    }
    h = jStat.multiply(jStat.multiply(jStat.inv(d), jStat.add(l, u)), -1);
    c = jStat.multiply(jStat.inv(d), b);
    xv = x;
    xk = jStat.add(jStat.multiply(h, x), c);
    i = 2;
    while (Math.abs(jStat.norm(jStat.subtract(xk,xv))) > r) {
      xv = xk;
      xk = jStat.add(jStat.multiply(h, xv), c);
      i++;
    }
    return xk;
  },

  gauss_seidel: function gauss_seidel(a, b, x, r) {
    var i = 0;
    var n = a.length;
    var l = [];
    var u = [];
    var d = [];
    var j, xv, c, h, xk;
    for (; i < n; i++) {
      l[i] = [];
      u[i] = [];
      d[i] = [];
      for (j = 0; j < n; j++) {
        if (i > j) {
          l[i][j] = a[i][j];
          u[i][j] = d[i][j] = 0;
        } else if (i < j) {
          u[i][j] = a[i][j];
          l[i][j] = d[i][j] = 0;
        } else {
          d[i][j] = a[i][j];
          l[i][j] = u[i][j] = 0;
        }
      }
    }
    h = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d, l)), u), -1);
    c = jStat.multiply(jStat.inv(jStat.add(d, l)), b);
    xv = x;
    xk = jStat.add(jStat.multiply(h, x), c);
    i = 2;
    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
      xv = xk;
      xk = jStat.add(jStat.multiply(h, xv), c);
      i = i + 1;
    }
    return xk;
  },

  SOR: function SOR(a, b, x, r, w) {
    var i = 0;
    var n = a.length;
    var l = [];
    var u = [];
    var d = [];
    var j, xv, c, h, xk;
    for (; i < n; i++) {
      l[i] = [];
      u[i] = [];
      d[i] = [];
      for (j = 0; j < n; j++) {
        if (i > j) {
          l[i][j] = a[i][j];
          u[i][j] = d[i][j] = 0;
        } else if (i < j) {
          u[i][j] = a[i][j];
          l[i][j] = d[i][j] = 0;
        } else {
          d[i][j] = a[i][j];
          l[i][j] = u[i][j] = 0;
        }
      }
    }
    h = jStat.multiply(jStat.inv(jStat.add(d, jStat.multiply(l, w))),
                       jStat.subtract(jStat.multiply(d, 1 - w),
                                      jStat.multiply(u, w)));
    c = jStat.multiply(jStat.multiply(jStat.inv(jStat.add(d,
        jStat.multiply(l, w))), b), w);
    xv = x;
    xk = jStat.add(jStat.multiply(h, x), c);
    i = 2;
    while (Math.abs(jStat.norm(jStat.subtract(xk, xv))) > r) {
      xv = xk;
      xk = jStat.add(jStat.multiply(h, xv), c);
      i++;
    }
    return xk;
  },

  householder: function householder(a) {
    var m = a.length;
    var n = a[0].length;
    var i = 0;
    var w = [];
    var p = [];
    var alpha, r, k, j, factor;
    for (; i < m - 1; i++) {
      alpha = 0;
      for (j = i + 1; j < n; j++)
      alpha += (a[j][i] * a[j][i]);
      factor = (a[i + 1][i] > 0) ? -1 : 1;
      alpha = factor * Math.sqrt(alpha);
      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));
      w = jStat.zeros(m, 1);
      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);
      for (k = i + 2; k < m; k++) w[k][0] = a[k][i] / (2 * r);
      p = jStat.subtract(jStat.identity(m, n),
          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
      a = jStat.multiply(p, jStat.multiply(a, p));
    }
    return a;
  },

  // TODO: not working properly.
  QR: function QR(a, b) {
    var m = a.length;
    var n = a[0].length;
    var i = 0;
    var w = [];
    var p = [];
    var x = [];
    var j, alpha, r, k, factor, sum;
    for (; i < m - 1; i++) {
      alpha = 0;
      for (j = i + 1; j < n; j++)
        alpha += (a[j][i] * a[j][i]);
      factor = (a[i + 1][i] > 0) ? -1 : 1;
      alpha = factor * Math.sqrt(alpha);
      r = Math.sqrt((((alpha * alpha) - a[i + 1][i] * alpha) / 2));
      w = jStat.zeros(m, 1);
      w[i + 1][0] = (a[i + 1][i] - alpha) / (2 * r);
      for (k = i + 2; k < m; k++)
        w[k][0] = a[k][i] / (2 * r);
      p = jStat.subtract(jStat.identity(m, n),
          jStat.multiply(jStat.multiply(w, jStat.transpose(w)), 2));
      a = jStat.multiply(p, a);
      b = jStat.multiply(p, b);
    }
    for (i = m - 1; i >= 0; i--) {
      sum = 0;
      for (j = i + 1; j <= n - 1; j++)
      sum = x[j] * a[i][j];
      x[i] = b[i][0] / a[i][i];
    }
    return x;
  },

  jacobi: function jacobi(a) {
    var condition = 1;
    var count = 0;
    var n = a.length;
    var e = jStat.identity(n, n);
    var ev = [];
    var b, i, j, p, q, maxim, theta, s;
    // condition === 1 only if tolerance is not reached
    while (condition === 1) {
      count++;
      maxim = a[0][1];
      p = 0;
      q = 1;
      for (i = 0; i < n; i++) {
        for (j = 0; j < n; j++) {
          if (i != j) {
            if (maxim < Math.abs(a[i][j])) {
              maxim = Math.abs(a[i][j]);
              p = i;
              q = j;
            }
          }
        }
      }
      if (a[p][p] === a[q][q])
        theta = (a[p][q] > 0) ? Math.PI / 4 : -Math.PI / 4;
      else
        theta = Math.atan(2 * a[p][q] / (a[p][p] - a[q][q])) / 2;
      s = jStat.identity(n, n);
      s[p][p] = Math.cos(theta);
      s[p][q] = -Math.sin(theta);
      s[q][p] = Math.sin(theta);
      s[q][q] = Math.cos(theta);
      // eigen vector matrix
      e = jStat.multiply(e, s);
      b = jStat.multiply(jStat.multiply(jStat.inv(s), a), s);
      a = b;
      condition = 0;
      for (i = 1; i < n; i++) {
        for (j = 1; j < n; j++) {
          if (i != j && Math.abs(a[i][j]) > 0.001) {
            condition = 1;
          }
        }
      }
    }
    for (i = 0; i < n; i++) ev.push(a[i][i]);
    //returns both the eigenvalue and eigenmatrix
    return [e, ev];
  },

  rungekutta: function rungekutta(f, h, p, t_j, u_j, order) {
    var k1, k2, u_j1, k3, k4;
    if (order === 2) {
      while (t_j <= p) {
        k1 = h * f(t_j, u_j);
        k2 = h * f(t_j + h, u_j + k1);
        u_j1 = u_j + (k1 + k2) / 2;
        u_j = u_j1;
        t_j = t_j + h;
      }
    }
    if (order === 4) {
      while (t_j <= p) {
        k1 = h * f(t_j, u_j);
        k2 = h * f(t_j + h / 2, u_j + k1 / 2);
        k3 = h * f(t_j + h / 2, u_j + k2 / 2);
        k4 = h * f(t_j +h, u_j + k3);
        u_j1 = u_j + (k1 + 2 * k2 + 2 * k3 + k4) / 6;
        u_j = u_j1;
        t_j = t_j + h;
      }
    }
    return u_j;
  },

  romberg: function romberg(f, a, b, order) {
    var i = 0;
    var h = (b - a) / 2;
    var x = [];
    var h1 = [];
    var g = [];
    var m, a1, j, k, I, d;
    while (i < order / 2) {
      I = f(a);
      for (j = a, k = 0; j <= b; j = j + h, k++) x[k] = j;
      m = x.length;
      for (j = 1; j < m - 1; j++) {
        I += (((j % 2) !== 0) ? 4 : 2) * f(x[j]);
      }
      I = (h / 3) * (I + f(b));
      g[i] = I;
      h /= 2;
      i++;
    }
    a1 = g.length;
    m = 1;
    while (a1 !== 1) {
      for (j = 0; j < a1 - 1; j++)
      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
      a1 = h1.length;
      g = h1;
      h1 = [];
      m++;
    }
    return g;
  },

  richardson: function richardson(X, f, x, h) {
    function pos(X, x) {
      var i = 0;
      var n = X.length;
      var p;
      for (; i < n; i++)
        if (X[i] === x) p = i;
      return p;
    }
    var n = X.length,
    h_min = Math.abs(x - X[pos(X, x) + 1]),
    i = 0,
    g = [],
    h1 = [],
    y1, y2, m, a, j;
    while (h >= h_min) {
      y1 = pos(X, x + h);
      y2 = pos(X, x);
      g[i] = (f[y1] - 2 * f[y2] + f[2 * y2 - y1]) / (h * h);
      h /= 2;
      i++;
    }
    a = g.length;
    m = 1;
    while (a != 1) {
      for (j = 0; j < a - 1; j++)
      h1[j] = ((Math.pow(4, m)) * g[j + 1] - g[j]) / (Math.pow(4, m) - 1);
      a = h1.length;
      g = h1;
      h1 = [];
      m++;
    }
    return g;
  },

  simpson: function simpson(f, a, b, n) {
    var h = (b - a) / n;
    var I = f(a);
    var x = [];
    var j = a;
    var k = 0;
    var i = 1;
    var m;
    for (; j <= b; j = j + h, k++)
      x[k] = j;
    m = x.length;
    for (; i < m - 1; i++) {
      I += ((i % 2 !== 0) ? 4 : 2) * f(x[i]);
    }
    return (h / 3) * (I + f(b));
  },

  hermite: function hermite(X, F, dF, value) {
    var n = X.length;
    var p = 0;
    var i = 0;
    var l = [];
    var dl = [];
    var A = [];
    var B = [];
    var j;
    for (; i < n; i++) {
      l[i] = 1;
      for (j = 0; j < n; j++) {
        if (i != j) l[i] *= (value - X[j]) / (X[i] - X[j]);
      }
      dl[i] = 0;
      for (j = 0; j < n; j++) {
        if (i != j) dl[i] += 1 / (X [i] - X[j]);
      }
      A[i] = (1 - 2 * (value - X[i]) * dl[i]) * (l[i] * l[i]);
      B[i] = (value - X[i]) * (l[i] * l[i]);
      p += (A[i] * F[i] + B[i] * dF[i]);
    }
    return p;
  },

  lagrange: function lagrange(X, F, value) {
    var p = 0;
    var i = 0;
    var j, l;
    var n = X.length;
    for (; i < n; i++) {
      l = F[i];
      for (j = 0; j < n; j++) {
        // calculating the lagrange polynomial L_i
        if (i != j) l *= (value - X[j]) / (X[i] - X[j]);
      }
      // adding the lagrange polynomials found above
      p += l;
    }
    return p;
  },

  cubic_spline: function cubic_spline(X, F, value) {
    var n = X.length;
    var i = 0, j;
    var A = [];
    var B = [];
    var alpha = [];
    var c = [];
    var h = [];
    var b = [];
    var d = [];
    for (; i < n - 1; i++)
      h[i] = X[i + 1] - X[i];
    alpha[0] = 0;
    for (i = 1; i < n - 1; i++) {
      alpha[i] = (3 / h[i]) * (F[i + 1] - F[i]) -
          (3 / h[i-1]) * (F[i] - F[i-1]);
    }
    for (i = 1; i < n - 1; i++) {
      A[i] = [];
      B[i] = [];
      A[i][i-1] = h[i-1];
      A[i][i] = 2 * (h[i - 1] + h[i]);
      A[i][i+1] = h[i];
      B[i][0] = alpha[i];
    }
    c = jStat.multiply(jStat.inv(A), B);
    for (j = 0; j < n - 1; j++) {
      b[j] = (F[j + 1] - F[j]) / h[j] - h[j] * (c[j + 1][0] + 2 * c[j][0]) / 3;
      d[j] = (c[j + 1][0] - c[j][0]) / (3 * h[j]);
    }
    for (j = 0; j < n; j++) {
      if (X[j] > value) break;
    }
    j -= 1;
    return F[j] + (value - X[j]) * b[j] + jStat.sq(value-X[j]) *
        c[j] + (value - X[j]) * jStat.sq(value - X[j]) * d[j];
  },

  gauss_quadrature: function gauss_quadrature() {
    throw new Error('gauss_quadrature not yet implemented');
  },

  PCA: function PCA(X) {
    var m = X.length;
    var n = X[0].length;
    var flag = false;
    var i = 0;
    var j, temp1;
    var u = [];
    var D = [];
    var result = [];
    var temp2 = [];
    var Y = [];
    var Bt = [];
    var B = [];
    var C = [];
    var V = [];
    var Vt = [];
    for (i = 0; i < m; i++) {
      u[i] = jStat.sum(X[i]) / n;
    }
    for (i = 0; i < n; i++) {
      B[i] = [];
      for(j = 0; j < m; j++) {
        B[i][j] = X[j][i] - u[j];
      }
    }
    B = jStat.transpose(B);
    for (i = 0; i < m; i++) {
      C[i] = [];
      for (j = 0; j < m; j++) {
        C[i][j] = (jStat.dot([B[i]], [B[j]])) / (n - 1);
      }
    }
    result = jStat.jacobi(C);
    V = result[0];
    D = result[1];
    Vt = jStat.transpose(V);
    for (i = 0; i < D.length; i++) {
      for (j = i; j < D.length; j++) {
        if(D[i] < D[j])  {
          temp1 = D[i];
          D[i] = D[j];
          D[j] = temp1;
          temp2 = Vt[i];
          Vt[i] = Vt[j];
          Vt[j] = temp2;
        }
      }
    }
    Bt = jStat.transpose(B);
    for (i = 0; i < m; i++) {
      Y[i] = [];
      for (j = 0; j < Bt.length; j++) {
        Y[i][j] = jStat.dot([Vt[i]], [Bt[j]]);
      }
    }
    return [X, D, Vt, Y];
  }
});

// extend jStat.fn with methods that require one argument
(function(funcs) {
  for (var i = 0; i < funcs.length; i++) (function(passfunc) {
    jStat.fn[passfunc] = function(arg, func) {
      var tmpthis = this;
      // check for callback
      if (func) {
        setTimeout(function() {
          func.call(tmpthis, jStat.fn[passfunc].call(tmpthis, arg));
        }, 15);
        return this;
      }
      if (typeof jStat[passfunc](this, arg) === 'number')
        return jStat[passfunc](this, arg);
      else
        return jStat(jStat[passfunc](this, arg));
    };
  }(funcs[i]));
}('add divide multiply subtract dot pow abs norm angle'.split(' ')));

}(this.jStat, Math));
(function(jStat, Math) {

var slice = [].slice;
var isNumber = jStat.utils.isNumber;

// flag==true denotes use of sample standard deviation
// Z Statistics
jStat.extend({
  // 2 different parameter lists:
  // (value, mean, sd)
  // (value, array, flag)
  zscore: function zscore() {
    var args = slice.call(arguments);
    if (isNumber(args[1])) {
      return (args[0] - args[1]) / args[2];
    }
    return (args[0] - jStat.mean(args[1])) / jStat.stdev(args[1], args[2]);
  },

  // 3 different paramter lists:
  // (value, mean, sd, sides)
  // (zscore, sides)
  // (value, array, sides, flag)
  ztest: function ztest() {
    var args = slice.call(arguments);
    if (args.length === 4) {
      if(isNumber(args[1])) {
        var z = jStat.zscore(args[0],args[1],args[2])
        return (args[3] === 1) ?
          (jStat.normal.cdf(-Math.abs(z),0,1)) :
          (jStat.normal.cdf(-Math.abs(z),0,1)* 2);
      }
      var z = args[0]
      return (args[2] === 1) ?
        (jStat.normal.cdf(-Math.abs(z),0,1)) :
        (jStat.normal.cdf(-Math.abs(z),0,1)*2);
    }
    var z = jStat.zscore(args[0],args[1],args[3])
    return (args[1] === 1) ?
      (jStat.normal.cdf(-Math.abs(z), 0, 1)) :
      (jStat.normal.cdf(-Math.abs(z), 0, 1)*2);
  }
});

jStat.extend(jStat.fn, {
  zscore: function zscore(value, flag) {
    return (value - this.mean()) / this.stdev(flag);
  },

  ztest: function ztest(value, sides, flag) {
    var zscore = Math.abs(this.zscore(value, flag));
    return (sides === 1) ?
      (jStat.normal.cdf(-zscore, 0, 1)) :
      (jStat.normal.cdf(-zscore, 0, 1) * 2);
  }
});

// T Statistics
jStat.extend({
  // 2 parameter lists
  // (value, mean, sd, n)
  // (value, array)
  tscore: function tscore() {
    var args = slice.call(arguments);
    return (args.length === 4) ?
      ((args[0] - args[1]) / (args[2] / Math.sqrt(args[3]))) :
      ((args[0] - jStat.mean(args[1])) /
       (jStat.stdev(args[1], true) / Math.sqrt(args[1].length)));
  },

  // 3 different paramter lists:
  // (value, mean, sd, n, sides)
  // (tscore, n, sides)
  // (value, array, sides)
  ttest: function ttest() {
    var args = slice.call(arguments);
    var tscore;
    if (args.length === 5) {
      tscore = Math.abs(jStat.tscore(args[0], args[1], args[2], args[3]));
      return (args[4] === 1) ?
        (jStat.studentt.cdf(-tscore, args[3]-1)) :
        (jStat.studentt.cdf(-tscore, args[3]-1)*2);
    }
    if (isNumber(args[1])) {
      tscore = Math.abs(args[0])
      return (args[2] == 1) ?
        (jStat.studentt.cdf(-tscore, args[1]-1)) :
        (jStat.studentt.cdf(-tscore, args[1]-1) * 2);
    }
    tscore = Math.abs(jStat.tscore(args[0], args[1]))
    return (args[2] == 1) ?
      (jStat.studentt.cdf(-tscore, args[1].length-1)) :
      (jStat.studentt.cdf(-tscore, args[1].length-1) * 2);
  }
});

jStat.extend(jStat.fn, {
  tscore: function tscore(value) {
    return (value - this.mean()) / (this.stdev(true) / Math.sqrt(this.cols()));
  },

  ttest: function ttest(value, sides) {
    return (sides === 1) ?
      (1 - jStat.studentt.cdf(Math.abs(this.tscore(value)), this.cols()-1)) :
      (jStat.studentt.cdf(-Math.abs(this.tscore(value)), this.cols()-1)*2);
  }
});

// F Statistics
jStat.extend({
  // Paramter list is as follows:
  // (array1, array2, array3, ...)
  // or it is an array of arrays
  // array of arrays conversion
  anovafscore: function anovafscore() {
    var args = slice.call(arguments),
    expVar, sample, sampMean, sampSampMean, tmpargs, unexpVar, i, j;
    if (args.length === 1) {
      tmpargs = new Array(args[0].length);
      for (i = 0; i < args[0].length; i++) {
        tmpargs[i] = args[0][i];
      }
      args = tmpargs;
    }
    // 2 sample case
    if (args.length === 2) {
      return jStat.variance(args[0]) / jStat.variance(args[1]);
    }
    // Builds sample array
    sample = new Array();
    for (i = 0; i < args.length; i++) {
      sample = sample.concat(args[i]);
    }
    sampMean = jStat.mean(sample);
    // Computes the explained variance
    expVar = 0;
    for (i = 0; i < args.length; i++) {
      expVar = expVar + args[i].length * Math.pow(jStat.mean(args[i]) - sampMean, 2);
    }
    expVar /= (args.length - 1);
    // Computes unexplained variance
    unexpVar = 0;
    for (i = 0; i < args.length; i++) {
      sampSampMean = jStat.mean(args[i]);
      for (j = 0; j < args[i].length; j++) {
        unexpVar += Math.pow(args[i][j] - sampSampMean, 2);
      }
    }
    unexpVar /= (sample.length - args.length);
    return expVar / unexpVar;
  },

  // 2 different paramter setups
  // (array1, array2, array3, ...)
  // (anovafscore, df1, df2)
  anovaftest: function anovaftest() {
    var args = slice.call(arguments),
    df1, df2, n, i;
    if (isNumber(args[0])) {
      return 1 - jStat.centralF.cdf(args[0], args[1], args[2]);
    }
    anovafscore = jStat.anovafscore(args);
    df1 = args.length - 1;
    n = 0;
    for (i = 0; i < args.length; i++) {
      n = n + args[i].length;
    }
    df2 = n - df1 - 1;
    return 1 - jStat.centralF.cdf(anovafscore, df1, df2);
  },

  ftest: function ftest(fscore, df1, df2) {
    return 1 - jStat.centralF.cdf(fscore, df1, df2);
  }
});

jStat.extend(jStat.fn, {
  anovafscore: function anovafscore() {
    return jStat.anovafscore(this.toArray());
  },

  anovaftes: function anovaftes() {
    var n = 0;
    var i;
    for (i = 0; i < this.length; i++) {
      n = n + this[i].length;
    }
    return jStat.ftest(this.anovafscore(), this.length - 1, n - this.length);
  }
});

// Error Bounds
jStat.extend({
  // 2 different parameter setups
  // (value, alpha, sd, n)
  // (value, alpha, array)
  normalci: function normalci() {
    var args = slice.call(arguments),
    ans = new Array(2),
    change;
    if (args.length === 4) {
      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *
                        args[2] / Math.sqrt(args[3]));
    } else {
      change = Math.abs(jStat.normal.inv(args[1] / 2, 0, 1) *
                        jStat.stdev(args[2]) / Math.sqrt(args[2].length));
    }
    ans[0] = args[0] - change;
    ans[1] = args[0] + change;
    return ans;
  },

  // 2 different parameter setups
  // (value, alpha, sd, n)
  // (value, alpha, array)
  tci: function tci() {
    var args = slice.call(arguments),
    ans = new Array(2),
    change;
    if (args.length === 4) {
      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[3] - 1) *
                        args[2] / Math.sqrt(args[3]));
    } else {
      change = Math.abs(jStat.studentt.inv(args[1] / 2, args[2].length - 1) *
                        jStat.stdev(args[2], true) / Math.sqrt(args[2].length));
    }
    ans[0] = args[0] - change;
    ans[1] = args[0] + change;
    return ans;
  },

  significant: function significant(pvalue, alpha) {
    return pvalue < alpha;
  }
});

jStat.extend(jStat.fn, {
  normalci: function normalci(value, alpha) {
    return jStat.normalci(value, alpha, this.toArray());
  },

  tci: function tci(value, alpha) {
    return jStat.tci(value, alpha, this.toArray());
  }
});

}(this.jStat, Math));

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/formulajs-connect\\node_modules\\jStat\\dist\\jstat.js","/formulajs-connect\\node_modules\\jStat\\dist",undefined)
},{"_process":38,"buffer":36}],6:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/*!
 * numeral.js
 * version : 1.5.3
 * author : Adam Draper
 * license : MIT
 * http://adamwdraper.github.com/Numeral-js/
 */

(function () {

    /************************************
        Constants
    ************************************/

    var numeral,
        VERSION = '1.5.3',
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',
        zeroFormat = null,
        defaultFormat = '0,0',
        // check for nodeJS
        hasModule = (typeof module !== 'undefined' && module.exports);


    /************************************
        Constructors
    ************************************/


    // Numeral prototype object
    function Numeral (number) {
        this._value = number;
    }

    /**
     * Implementation of toFixed() that treats floats more like decimals
     *
     * Fixes binary rounding issues (eg. (0.615).toFixed(2) === '0.61') that present
     * problems for accounting- and finance-related software.
     */
    function toFixed (value, precision, roundingFunction, optionals) {
        var power = Math.pow(10, precision),
            optionalsRegExp,
            output;
            
        //roundingFunction = (roundingFunction !== undefined ? roundingFunction : Math.round);
        // Multiply up by precision, round accurately, then divide and use native toFixed():
        output = (roundingFunction(value * power) / power).toFixed(precision);

        if (optionals) {
            optionalsRegExp = new RegExp('0{1,' + optionals + '}$');
            output = output.replace(optionalsRegExp, '');
        }

        return output;
    }

    /************************************
        Formatting
    ************************************/

    // determine what type of formatting we need to do
    function formatNumeral (n, format, roundingFunction) {
        var output;

        // figure out what kind of format we are dealing with
        if (format.indexOf('$') > -1) { // currency!!!!!
            output = formatCurrency(n, format, roundingFunction);
        } else if (format.indexOf('%') > -1) { // percentage
            output = formatPercentage(n, format, roundingFunction);
        } else if (format.indexOf(':') > -1) { // time
            output = formatTime(n, format);
        } else { // plain ol' numbers or bytes
            output = formatNumber(n._value, format, roundingFunction);
        }

        // return string
        return output;
    }

    // revert to number
    function unformatNumeral (n, string) {
        var stringOriginal = string,
            thousandRegExp,
            millionRegExp,
            billionRegExp,
            trillionRegExp,
            suffixes = ['KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            bytesMultiplier = false,
            power;

        if (string.indexOf(':') > -1) {
            n._value = unformatTime(string);
        } else {
            if (string === zeroFormat) {
                n._value = 0;
            } else {
                if (languages[currentLanguage].delimiters.decimal !== '.') {
                    string = string.replace(/\./g,'').replace(languages[currentLanguage].delimiters.decimal, '.');
                }

                // see if abbreviations are there so that we can multiply to the correct number
                thousandRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.thousand + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                millionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.million + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                billionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.billion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');
                trillionRegExp = new RegExp('[^a-zA-Z]' + languages[currentLanguage].abbreviations.trillion + '(?:\\)|(\\' + languages[currentLanguage].currency.symbol + ')?(?:\\))?)?$');

                // see if bytes are there so that we can multiply to the correct number
                for (power = 0; power <= suffixes.length; power++) {
                    bytesMultiplier = (string.indexOf(suffixes[power]) > -1) ? Math.pow(1024, power + 1) : false;

                    if (bytesMultiplier) {
                        break;
                    }
                }

                // do some math to create our number
                n._value = ((bytesMultiplier) ? bytesMultiplier : 1) * ((stringOriginal.match(thousandRegExp)) ? Math.pow(10, 3) : 1) * ((stringOriginal.match(millionRegExp)) ? Math.pow(10, 6) : 1) * ((stringOriginal.match(billionRegExp)) ? Math.pow(10, 9) : 1) * ((stringOriginal.match(trillionRegExp)) ? Math.pow(10, 12) : 1) * ((string.indexOf('%') > -1) ? 0.01 : 1) * (((string.split('-').length + Math.min(string.split('(').length-1, string.split(')').length-1)) % 2)? 1: -1) * Number(string.replace(/[^0-9\.]+/g, ''));

                // round if we are talking about bytes
                n._value = (bytesMultiplier) ? Math.ceil(n._value) : n._value;
            }
        }
        return n._value;
    }

    function formatCurrency (n, format, roundingFunction) {
        var symbolIndex = format.indexOf('$'),
            openParenIndex = format.indexOf('('),
            minusSignIndex = format.indexOf('-'),
            space = '',
            spliceIndex,
            output;

        // check for space before or after currency
        if (format.indexOf(' $') > -1) {
            space = ' ';
            format = format.replace(' $', '');
        } else if (format.indexOf('$ ') > -1) {
            space = ' ';
            format = format.replace('$ ', '');
        } else {
            format = format.replace('$', '');
        }

        // format the number
        output = formatNumber(n._value, format, roundingFunction);

        // position the symbol
        if (symbolIndex <= 1) {
            if (output.indexOf('(') > -1 || output.indexOf('-') > -1) {
                output = output.split('');
                spliceIndex = 1;
                if (symbolIndex < openParenIndex || symbolIndex < minusSignIndex){
                    // the symbol appears before the "(" or "-"
                    spliceIndex = 0;
                }
                output.splice(spliceIndex, 0, languages[currentLanguage].currency.symbol + space);
                output = output.join('');
            } else {
                output = languages[currentLanguage].currency.symbol + space + output;
            }
        } else {
            if (output.indexOf(')') > -1) {
                output = output.split('');
                output.splice(-1, 0, space + languages[currentLanguage].currency.symbol);
                output = output.join('');
            } else {
                output = output + space + languages[currentLanguage].currency.symbol;
            }
        }

        return output;
    }

    function formatPercentage (n, format, roundingFunction) {
        var space = '',
            output,
            value = n._value * 100;

        // check for space before %
        if (format.indexOf(' %') > -1) {
            space = ' ';
            format = format.replace(' %', '');
        } else {
            format = format.replace('%', '');
        }

        output = formatNumber(value, format, roundingFunction);
        
        if (output.indexOf(')') > -1 ) {
            output = output.split('');
            output.splice(-1, 0, space + '%');
            output = output.join('');
        } else {
            output = output + space + '%';
        }

        return output;
    }

    function formatTime (n) {
        var hours = Math.floor(n._value/60/60),
            minutes = Math.floor((n._value - (hours * 60 * 60))/60),
            seconds = Math.round(n._value - (hours * 60 * 60) - (minutes * 60));
        return hours + ':' + ((minutes < 10) ? '0' + minutes : minutes) + ':' + ((seconds < 10) ? '0' + seconds : seconds);
    }

    function unformatTime (string) {
        var timeArray = string.split(':'),
            seconds = 0;
        // turn hours and minutes into seconds and add them all up
        if (timeArray.length === 3) {
            // hours
            seconds = seconds + (Number(timeArray[0]) * 60 * 60);
            // minutes
            seconds = seconds + (Number(timeArray[1]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[2]);
        } else if (timeArray.length === 2) {
            // minutes
            seconds = seconds + (Number(timeArray[0]) * 60);
            // seconds
            seconds = seconds + Number(timeArray[1]);
        }
        return Number(seconds);
    }

    function formatNumber (value, format, roundingFunction) {
        var negP = false,
            signed = false,
            optDec = false,
            abbr = '',
            abbrK = false, // force abbreviation to thousands
            abbrM = false, // force abbreviation to millions
            abbrB = false, // force abbreviation to billions
            abbrT = false, // force abbreviation to trillions
            abbrForce = false, // force abbreviation
            bytes = '',
            ord = '',
            abs = Math.abs(value),
            suffixes = ['B', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB'],
            min,
            max,
            power,
            w,
            precision,
            thousands,
            d = '',
            neg = false;

        // check if number is zero and a custom zero format has been set
        if (value === 0 && zeroFormat !== null) {
            return zeroFormat;
        } else {
            // see if we should use parentheses for negative number or if we should prefix with a sign
            // if both are present we default to parentheses
            if (format.indexOf('(') > -1) {
                negP = true;
                format = format.slice(1, -1);
            } else if (format.indexOf('+') > -1) {
                signed = true;
                format = format.replace(/\+/g, '');
            }

            // see if abbreviation is wanted
            if (format.indexOf('a') > -1) {
                // check if abbreviation is specified
                abbrK = format.indexOf('aK') >= 0;
                abbrM = format.indexOf('aM') >= 0;
                abbrB = format.indexOf('aB') >= 0;
                abbrT = format.indexOf('aT') >= 0;
                abbrForce = abbrK || abbrM || abbrB || abbrT;

                // check for space before abbreviation
                if (format.indexOf(' a') > -1) {
                    abbr = ' ';
                    format = format.replace(' a', '');
                } else {
                    format = format.replace('a', '');
                }

                if (abs >= Math.pow(10, 12) && !abbrForce || abbrT) {
                    // trillion
                    abbr = abbr + languages[currentLanguage].abbreviations.trillion;
                    value = value / Math.pow(10, 12);
                } else if (abs < Math.pow(10, 12) && abs >= Math.pow(10, 9) && !abbrForce || abbrB) {
                    // billion
                    abbr = abbr + languages[currentLanguage].abbreviations.billion;
                    value = value / Math.pow(10, 9);
                } else if (abs < Math.pow(10, 9) && abs >= Math.pow(10, 6) && !abbrForce || abbrM) {
                    // million
                    abbr = abbr + languages[currentLanguage].abbreviations.million;
                    value = value / Math.pow(10, 6);
                } else if (abs < Math.pow(10, 6) && abs >= Math.pow(10, 3) && !abbrForce || abbrK) {
                    // thousand
                    abbr = abbr + languages[currentLanguage].abbreviations.thousand;
                    value = value / Math.pow(10, 3);
                }
            }

            // see if we are formatting bytes
            if (format.indexOf('b') > -1) {
                // check for space before
                if (format.indexOf(' b') > -1) {
                    bytes = ' ';
                    format = format.replace(' b', '');
                } else {
                    format = format.replace('b', '');
                }

                for (power = 0; power <= suffixes.length; power++) {
                    min = Math.pow(1024, power);
                    max = Math.pow(1024, power+1);

                    if (value >= min && value < max) {
                        bytes = bytes + suffixes[power];
                        if (min > 0) {
                            value = value / min;
                        }
                        break;
                    }
                }
            }

            // see if ordinal is wanted
            if (format.indexOf('o') > -1) {
                // check for space before
                if (format.indexOf(' o') > -1) {
                    ord = ' ';
                    format = format.replace(' o', '');
                } else {
                    format = format.replace('o', '');
                }

                ord = ord + languages[currentLanguage].ordinal(value);
            }

            if (format.indexOf('[.]') > -1) {
                optDec = true;
                format = format.replace('[.]', '.');
            }

            w = value.toString().split('.')[0];
            precision = format.split('.')[1];
            thousands = format.indexOf(',');

            if (precision) {
                if (precision.indexOf('[') > -1) {
                    precision = precision.replace(']', '');
                    precision = precision.split('[');
                    d = toFixed(value, (precision[0].length + precision[1].length), roundingFunction, precision[1].length);
                } else {
                    d = toFixed(value, precision.length, roundingFunction);
                }

                w = d.split('.')[0];

                if (d.split('.')[1].length) {
                    d = languages[currentLanguage].delimiters.decimal + d.split('.')[1];
                } else {
                    d = '';
                }

                if (optDec && Number(d.slice(1)) === 0) {
                    d = '';
                }
            } else {
                w = toFixed(value, null, roundingFunction);
            }

            // format number
            if (w.indexOf('-') > -1) {
                w = w.slice(1);
                neg = true;
            }

            if (thousands > -1) {
                w = w.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g, '$1' + languages[currentLanguage].delimiters.thousands);
            }

            if (format.indexOf('.') === 0) {
                w = '';
            }

            return ((negP && neg) ? '(' : '') + ((!negP && neg) ? '-' : '') + ((!neg && signed) ? '+' : '') + w + d + ((ord) ? ord : '') + ((abbr) ? abbr : '') + ((bytes) ? bytes : '') + ((negP && neg) ? ')' : '');
        }
    }

    /************************************
        Top Level Functions
    ************************************/

    numeral = function (input) {
        if (numeral.isNumeral(input)) {
            input = input.value();
        } else if (input === 0 || typeof input === 'undefined') {
            input = 0;
        } else if (!Number(input)) {
            input = numeral.fn.unformat(input);
        }

        return new Numeral(Number(input));
    };

    // version number
    numeral.version = VERSION;

    // compare numeral object
    numeral.isNumeral = function (obj) {
        return obj instanceof Numeral;
    };

    // This function will load languages and then set the global language.  If
    // no arguments are passed in, it will simply return the current global
    // language key.
    numeral.language = function (key, values) {
        if (!key) {
            return currentLanguage;
        }

        if (key && !values) {
            if(!languages[key]) {
                throw new Error('Unknown language : ' + key);
            }
            currentLanguage = key;
        }

        if (values || !languages[key]) {
            loadLanguage(key, values);
        }

        return numeral;
    };
    
    // This function provides access to the loaded language data.  If
    // no arguments are passed in, it will simply return the current
    // global language object.
    numeral.languageData = function (key) {
        if (!key) {
            return languages[currentLanguage];
        }
        
        if (!languages[key]) {
            throw new Error('Unknown language : ' + key);
        }
        
        return languages[key];
    };

    numeral.language('en', {
        delimiters: {
            thousands: ',',
            decimal: '.'
        },
        abbreviations: {
            thousand: 'k',
            million: 'm',
            billion: 'b',
            trillion: 't'
        },
        ordinal: function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        },
        currency: {
            symbol: '$'
        }
    });

    numeral.zeroFormat = function (format) {
        zeroFormat = typeof(format) === 'string' ? format : null;
    };

    numeral.defaultFormat = function (format) {
        defaultFormat = typeof(format) === 'string' ? format : '0.0';
    };

    /************************************
        Helpers
    ************************************/

    function loadLanguage(key, values) {
        languages[key] = values;
    }

    /************************************
        Floating-point helpers
    ************************************/

    // The floating-point helper functions and implementation
    // borrows heavily from sinful.js: http://guipn.github.io/sinful.js/

    /**
     * Array.prototype.reduce for browsers that don't support it
     * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/Reduce#Compatibility
     */
    if ('function' !== typeof Array.prototype.reduce) {
        Array.prototype.reduce = function (callback, opt_initialValue) {
            'use strict';
            
            if (null === this || 'undefined' === typeof this) {
                // At the moment all modern browsers, that support strict mode, have
                // native implementation of Array.prototype.reduce. For instance, IE8
                // does not support strict mode, so this check is actually useless.
                throw new TypeError('Array.prototype.reduce called on null or undefined');
            }
            
            if ('function' !== typeof callback) {
                throw new TypeError(callback + ' is not a function');
            }

            var index,
                value,
                length = this.length >>> 0,
                isValueSet = false;

            if (1 < arguments.length) {
                value = opt_initialValue;
                isValueSet = true;
            }

            for (index = 0; length > index; ++index) {
                if (this.hasOwnProperty(index)) {
                    if (isValueSet) {
                        value = callback(value, this[index], index, this);
                    } else {
                        value = this[index];
                        isValueSet = true;
                    }
                }
            }

            if (!isValueSet) {
                throw new TypeError('Reduce of empty array with no initial value');
            }

            return value;
        };
    }

    
    /**
     * Computes the multiplier necessary to make x >= 1,
     * effectively eliminating miscalculations caused by
     * finite precision.
     */
    function multiplier(x) {
        var parts = x.toString().split('.');
        if (parts.length < 2) {
            return 1;
        }
        return Math.pow(10, parts[1].length);
    }

    /**
     * Given a variable number of arguments, returns the maximum
     * multiplier that must be used to normalize an operation involving
     * all of them.
     */
    function correctionFactor() {
        var args = Array.prototype.slice.call(arguments);
        return args.reduce(function (prev, next) {
            var mp = multiplier(prev),
                mn = multiplier(next);
        return mp > mn ? mp : mn;
        }, -Infinity);
    }        


    /************************************
        Numeral Prototype
    ************************************/


    numeral.fn = Numeral.prototype = {

        clone : function () {
            return numeral(this);
        },

        format : function (inputString, roundingFunction) {
            return formatNumeral(this, 
                  inputString ? inputString : defaultFormat, 
                  (roundingFunction !== undefined) ? roundingFunction : Math.round
              );
        },

        unformat : function (inputString) {
            if (Object.prototype.toString.call(inputString) === '[object Number]') { 
                return inputString; 
            }
            return unformatNumeral(this, inputString ? inputString : defaultFormat);
        },

        value : function () {
            return this._value;
        },

        valueOf : function () {
            return this._value;
        },

        set : function (value) {
            this._value = Number(value);
            return this;
        },

        add : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum + corrFactor * curr;
            }
            this._value = [this._value, value].reduce(cback, 0) / corrFactor;
            return this;
        },

        subtract : function (value) {
            var corrFactor = correctionFactor.call(null, this._value, value);
            function cback(accum, curr, currI, O) {
                return accum - corrFactor * curr;
            }
            this._value = [value].reduce(cback, this._value * corrFactor) / corrFactor;            
            return this;
        },

        multiply : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) * (curr * corrFactor) /
                    (corrFactor * corrFactor);
            }
            this._value = [this._value, value].reduce(cback, 1);
            return this;
        },

        divide : function (value) {
            function cback(accum, curr, currI, O) {
                var corrFactor = correctionFactor(accum, curr);
                return (accum * corrFactor) / (curr * corrFactor);
            }
            this._value = [this._value, value].reduce(cback);            
            return this;
        },

        difference : function (value) {
            return Math.abs(numeral(this._value).subtract(value).value());
        }

    };

    /************************************
        Exposing Numeral
    ************************************/

    // CommonJS module is defined
    if (hasModule) {
        module.exports = numeral;
    }

    /*global ender:false */
    if (typeof ender === 'undefined') {
        // here, `this` means `window` in the browser, or `global` on the server
        // add `numeral` as a global object via a string identifier,
        // for Closure Compiler 'advanced' mode
        this['numeral'] = numeral;
    }

    /*global define:false */
    if (typeof define === 'function' && define.amd) {
        define([], function () {
            return numeral;
        });
    }
}).call(this);

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/formulajs-connect\\node_modules\\numeral\\numeral.js","/formulajs-connect\\node_modules\\numeral",undefined)
},{"_process":38,"buffer":36}],7:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
"use strict";

var numeric = (typeof exports === "undefined")?(function numeric() {}):(exports);
if(typeof global !== "undefined") { global.numeric = numeric; }

numeric.version = "1.2.6";

// 1. Utility functions
numeric.bench = function bench (f,interval) {
    var t1,t2,n,i;
    if(typeof interval === "undefined") { interval = 15; }
    n = 0.5;
    t1 = new Date();
    while(1) {
        n*=2;
        for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
        while(i>0) { f(); i--; }
        t2 = new Date();
        if(t2-t1 > interval) break;
    }
    for(i=n;i>3;i-=4) { f(); f(); f(); f(); }
    while(i>0) { f(); i--; }
    t2 = new Date();
    return 1000*(3*n-1)/(t2-t1);
}

numeric._myIndexOf = (function _myIndexOf(w) {
    var n = this.length,k;
    for(k=0;k<n;++k) if(this[k]===w) return k;
    return -1;
});
numeric.myIndexOf = (Array.prototype.indexOf)?Array.prototype.indexOf:numeric._myIndexOf;

numeric.Function = Function;
numeric.precision = 4;
numeric.largeArray = 50;

numeric.prettyPrint = function prettyPrint(x) {
    function fmtnum(x) {
        if(x === 0) { return '0'; }
        if(isNaN(x)) { return 'NaN'; }
        if(x<0) { return '-'+fmtnum(-x); }
        if(isFinite(x)) {
            var scale = Math.floor(Math.log(x) / Math.log(10));
            var normalized = x / Math.pow(10,scale);
            var basic = normalized.toPrecision(numeric.precision);
            if(parseFloat(basic) === 10) { scale++; normalized = 1; basic = normalized.toPrecision(numeric.precision); }
            return parseFloat(basic).toString()+'e'+scale.toString();
        }
        return 'Infinity';
    }
    var ret = [];
    function foo(x) {
        var k;
        if(typeof x === "undefined") { ret.push(Array(numeric.precision+8).join(' ')); return false; }
        if(typeof x === "string") { ret.push('"'+x+'"'); return false; }
        if(typeof x === "boolean") { ret.push(x.toString()); return false; }
        if(typeof x === "number") {
            var a = fmtnum(x);
            var b = x.toPrecision(numeric.precision);
            var c = parseFloat(x.toString()).toString();
            var d = [a,b,c,parseFloat(b).toString(),parseFloat(c).toString()];
            for(k=1;k<d.length;k++) { if(d[k].length < a.length) a = d[k]; }
            ret.push(Array(numeric.precision+8-a.length).join(' ')+a);
            return false;
        }
        if(x === null) { ret.push("null"); return false; }
        if(typeof x === "function") { 
            ret.push(x.toString());
            var flag = false;
            for(k in x) { if(x.hasOwnProperty(k)) { 
                if(flag) ret.push(',\n');
                else ret.push('\n{');
                flag = true; 
                ret.push(k); 
                ret.push(': \n'); 
                foo(x[k]); 
            } }
            if(flag) ret.push('}\n');
            return true;
        }
        if(x instanceof Array) {
            if(x.length > numeric.largeArray) { ret.push('...Large Array...'); return true; }
            var flag = false;
            ret.push('[');
            for(k=0;k<x.length;k++) { if(k>0) { ret.push(','); if(flag) ret.push('\n '); } flag = foo(x[k]); }
            ret.push(']');
            return true;
        }
        ret.push('{');
        var flag = false;
        for(k in x) { if(x.hasOwnProperty(k)) { if(flag) ret.push(',\n'); flag = true; ret.push(k); ret.push(': \n'); foo(x[k]); } }
        ret.push('}');
        return true;
    }
    foo(x);
    return ret.join('');
}

numeric.parseDate = function parseDate(d) {
    function foo(d) {
        if(typeof d === 'string') { return Date.parse(d.replace(/-/g,'/')); }
        if(!(d instanceof Array)) { throw new Error("parseDate: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseFloat = function parseFloat_(d) {
    function foo(d) {
        if(typeof d === 'string') { return parseFloat(d); }
        if(!(d instanceof Array)) { throw new Error("parseFloat: parameter must be arrays of strings"); }
        var ret = [],k;
        for(k=0;k<d.length;k++) { ret[k] = foo(d[k]); }
        return ret;
    }
    return foo(d);
}

numeric.parseCSV = function parseCSV(t) {
    var foo = t.split('\n');
    var j,k;
    var ret = [];
    var pat = /(([^'",]*)|('[^']*')|("[^"]*")),/g;
    var patnum = /^\s*(([+-]?[0-9]+(\.[0-9]*)?(e[+-]?[0-9]+)?)|([+-]?[0-9]*(\.[0-9]+)?(e[+-]?[0-9]+)?))\s*$/;
    var stripper = function(n) { return n.substr(0,n.length-1); }
    var count = 0;
    for(k=0;k<foo.length;k++) {
      var bar = (foo[k]+",").match(pat),baz;
      if(bar.length>0) {
          ret[count] = [];
          for(j=0;j<bar.length;j++) {
              baz = stripper(bar[j]);
              if(patnum.test(baz)) { ret[count][j] = parseFloat(baz); }
              else ret[count][j] = baz;
          }
          count++;
      }
    }
    return ret;
}

numeric.toCSV = function toCSV(A) {
    var s = numeric.dim(A);
    var i,j,m,n,row,ret;
    m = s[0];
    n = s[1];
    ret = [];
    for(i=0;i<m;i++) {
        row = [];
        for(j=0;j<m;j++) { row[j] = A[i][j].toString(); }
        ret[i] = row.join(', ');
    }
    return ret.join('\n')+'\n';
}

numeric.getURL = function getURL(url) {
    var client = new XMLHttpRequest();
    client.open("GET",url,false);
    client.send();
    return client;
}

numeric.imageURL = function imageURL(img) {
    function base64(A) {
        var n = A.length, i,x,y,z,p,q,r,s;
        var key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
        var ret = "";
        for(i=0;i<n;i+=3) {
            x = A[i];
            y = A[i+1];
            z = A[i+2];
            p = x >> 2;
            q = ((x & 3) << 4) + (y >> 4);
            r = ((y & 15) << 2) + (z >> 6);
            s = z & 63;
            if(i+1>=n) { r = s = 64; }
            else if(i+2>=n) { s = 64; }
            ret += key.charAt(p) + key.charAt(q) + key.charAt(r) + key.charAt(s);
            }
        return ret;
    }
    function crc32Array (a,from,to) {
        if(typeof from === "undefined") { from = 0; }
        if(typeof to === "undefined") { to = a.length; }
        var table = [0x00000000, 0x77073096, 0xEE0E612C, 0x990951BA, 0x076DC419, 0x706AF48F, 0xE963A535, 0x9E6495A3,
                     0x0EDB8832, 0x79DCB8A4, 0xE0D5E91E, 0x97D2D988, 0x09B64C2B, 0x7EB17CBD, 0xE7B82D07, 0x90BF1D91, 
                     0x1DB71064, 0x6AB020F2, 0xF3B97148, 0x84BE41DE, 0x1ADAD47D, 0x6DDDE4EB, 0xF4D4B551, 0x83D385C7,
                     0x136C9856, 0x646BA8C0, 0xFD62F97A, 0x8A65C9EC, 0x14015C4F, 0x63066CD9, 0xFA0F3D63, 0x8D080DF5, 
                     0x3B6E20C8, 0x4C69105E, 0xD56041E4, 0xA2677172, 0x3C03E4D1, 0x4B04D447, 0xD20D85FD, 0xA50AB56B, 
                     0x35B5A8FA, 0x42B2986C, 0xDBBBC9D6, 0xACBCF940, 0x32D86CE3, 0x45DF5C75, 0xDCD60DCF, 0xABD13D59, 
                     0x26D930AC, 0x51DE003A, 0xC8D75180, 0xBFD06116, 0x21B4F4B5, 0x56B3C423, 0xCFBA9599, 0xB8BDA50F,
                     0x2802B89E, 0x5F058808, 0xC60CD9B2, 0xB10BE924, 0x2F6F7C87, 0x58684C11, 0xC1611DAB, 0xB6662D3D,
                     0x76DC4190, 0x01DB7106, 0x98D220BC, 0xEFD5102A, 0x71B18589, 0x06B6B51F, 0x9FBFE4A5, 0xE8B8D433,
                     0x7807C9A2, 0x0F00F934, 0x9609A88E, 0xE10E9818, 0x7F6A0DBB, 0x086D3D2D, 0x91646C97, 0xE6635C01, 
                     0x6B6B51F4, 0x1C6C6162, 0x856530D8, 0xF262004E, 0x6C0695ED, 0x1B01A57B, 0x8208F4C1, 0xF50FC457, 
                     0x65B0D9C6, 0x12B7E950, 0x8BBEB8EA, 0xFCB9887C, 0x62DD1DDF, 0x15DA2D49, 0x8CD37CF3, 0xFBD44C65, 
                     0x4DB26158, 0x3AB551CE, 0xA3BC0074, 0xD4BB30E2, 0x4ADFA541, 0x3DD895D7, 0xA4D1C46D, 0xD3D6F4FB, 
                     0x4369E96A, 0x346ED9FC, 0xAD678846, 0xDA60B8D0, 0x44042D73, 0x33031DE5, 0xAA0A4C5F, 0xDD0D7CC9, 
                     0x5005713C, 0x270241AA, 0xBE0B1010, 0xC90C2086, 0x5768B525, 0x206F85B3, 0xB966D409, 0xCE61E49F, 
                     0x5EDEF90E, 0x29D9C998, 0xB0D09822, 0xC7D7A8B4, 0x59B33D17, 0x2EB40D81, 0xB7BD5C3B, 0xC0BA6CAD, 
                     0xEDB88320, 0x9ABFB3B6, 0x03B6E20C, 0x74B1D29A, 0xEAD54739, 0x9DD277AF, 0x04DB2615, 0x73DC1683, 
                     0xE3630B12, 0x94643B84, 0x0D6D6A3E, 0x7A6A5AA8, 0xE40ECF0B, 0x9309FF9D, 0x0A00AE27, 0x7D079EB1, 
                     0xF00F9344, 0x8708A3D2, 0x1E01F268, 0x6906C2FE, 0xF762575D, 0x806567CB, 0x196C3671, 0x6E6B06E7, 
                     0xFED41B76, 0x89D32BE0, 0x10DA7A5A, 0x67DD4ACC, 0xF9B9DF6F, 0x8EBEEFF9, 0x17B7BE43, 0x60B08ED5, 
                     0xD6D6A3E8, 0xA1D1937E, 0x38D8C2C4, 0x4FDFF252, 0xD1BB67F1, 0xA6BC5767, 0x3FB506DD, 0x48B2364B, 
                     0xD80D2BDA, 0xAF0A1B4C, 0x36034AF6, 0x41047A60, 0xDF60EFC3, 0xA867DF55, 0x316E8EEF, 0x4669BE79, 
                     0xCB61B38C, 0xBC66831A, 0x256FD2A0, 0x5268E236, 0xCC0C7795, 0xBB0B4703, 0x220216B9, 0x5505262F, 
                     0xC5BA3BBE, 0xB2BD0B28, 0x2BB45A92, 0x5CB36A04, 0xC2D7FFA7, 0xB5D0CF31, 0x2CD99E8B, 0x5BDEAE1D, 
                     0x9B64C2B0, 0xEC63F226, 0x756AA39C, 0x026D930A, 0x9C0906A9, 0xEB0E363F, 0x72076785, 0x05005713, 
                     0x95BF4A82, 0xE2B87A14, 0x7BB12BAE, 0x0CB61B38, 0x92D28E9B, 0xE5D5BE0D, 0x7CDCEFB7, 0x0BDBDF21, 
                     0x86D3D2D4, 0xF1D4E242, 0x68DDB3F8, 0x1FDA836E, 0x81BE16CD, 0xF6B9265B, 0x6FB077E1, 0x18B74777, 
                     0x88085AE6, 0xFF0F6A70, 0x66063BCA, 0x11010B5C, 0x8F659EFF, 0xF862AE69, 0x616BFFD3, 0x166CCF45, 
                     0xA00AE278, 0xD70DD2EE, 0x4E048354, 0x3903B3C2, 0xA7672661, 0xD06016F7, 0x4969474D, 0x3E6E77DB, 
                     0xAED16A4A, 0xD9D65ADC, 0x40DF0B66, 0x37D83BF0, 0xA9BCAE53, 0xDEBB9EC5, 0x47B2CF7F, 0x30B5FFE9, 
                     0xBDBDF21C, 0xCABAC28A, 0x53B39330, 0x24B4A3A6, 0xBAD03605, 0xCDD70693, 0x54DE5729, 0x23D967BF, 
                     0xB3667A2E, 0xC4614AB8, 0x5D681B02, 0x2A6F2B94, 0xB40BBE37, 0xC30C8EA1, 0x5A05DF1B, 0x2D02EF8D];
     
        var crc = -1, y = 0, n = a.length,i;

        for (i = from; i < to; i++) {
            y = (crc ^ a[i]) & 0xFF;
            crc = (crc >>> 8) ^ table[y];
        }
     
        return crc ^ (-1);
    }

    var h = img[0].length, w = img[0][0].length, s1, s2, next,k,length,a,b,i,j,adler32,crc32;
    var stream = [
                  137, 80, 78, 71, 13, 10, 26, 10,                           //  0: PNG signature
                  0,0,0,13,                                                  //  8: IHDR Chunk length
                  73, 72, 68, 82,                                            // 12: "IHDR" 
                  (w >> 24) & 255, (w >> 16) & 255, (w >> 8) & 255, w&255,   // 16: Width
                  (h >> 24) & 255, (h >> 16) & 255, (h >> 8) & 255, h&255,   // 20: Height
                  8,                                                         // 24: bit depth
                  2,                                                         // 25: RGB
                  0,                                                         // 26: deflate
                  0,                                                         // 27: no filter
                  0,                                                         // 28: no interlace
                  -1,-2,-3,-4,                                               // 29: CRC
                  -5,-6,-7,-8,                                               // 33: IDAT Chunk length
                  73, 68, 65, 84,                                            // 37: "IDAT"
                  // RFC 1950 header starts here
                  8,                                                         // 41: RFC1950 CMF
                  29                                                         // 42: RFC1950 FLG
                  ];
    crc32 = crc32Array(stream,12,29);
    stream[29] = (crc32>>24)&255;
    stream[30] = (crc32>>16)&255;
    stream[31] = (crc32>>8)&255;
    stream[32] = (crc32)&255;
    s1 = 1;
    s2 = 0;
    for(i=0;i<h;i++) {
        if(i<h-1) { stream.push(0); }
        else { stream.push(1); }
        a = (3*w+1+(i===0))&255; b = ((3*w+1+(i===0))>>8)&255;
        stream.push(a); stream.push(b);
        stream.push((~a)&255); stream.push((~b)&255);
        if(i===0) stream.push(0);
        for(j=0;j<w;j++) {
            for(k=0;k<3;k++) {
                a = img[k][i][j];
                if(a>255) a = 255;
                else if(a<0) a=0;
                else a = Math.round(a);
                s1 = (s1 + a )%65521;
                s2 = (s2 + s1)%65521;
                stream.push(a);
            }
        }
        stream.push(0);
    }
    adler32 = (s2<<16)+s1;
    stream.push((adler32>>24)&255);
    stream.push((adler32>>16)&255);
    stream.push((adler32>>8)&255);
    stream.push((adler32)&255);
    length = stream.length - 41;
    stream[33] = (length>>24)&255;
    stream[34] = (length>>16)&255;
    stream[35] = (length>>8)&255;
    stream[36] = (length)&255;
    crc32 = crc32Array(stream,37);
    stream.push((crc32>>24)&255);
    stream.push((crc32>>16)&255);
    stream.push((crc32>>8)&255);
    stream.push((crc32)&255);
    stream.push(0);
    stream.push(0);
    stream.push(0);
    stream.push(0);
//    a = stream.length;
    stream.push(73);  // I
    stream.push(69);  // E
    stream.push(78);  // N
    stream.push(68);  // D
    stream.push(174); // CRC1
    stream.push(66);  // CRC2
    stream.push(96);  // CRC3
    stream.push(130); // CRC4
    return 'data:image/png;base64,'+base64(stream);
}

// 2. Linear algebra with Arrays.
numeric._dim = function _dim(x) {
    var ret = [];
    while(typeof x === "object") { ret.push(x.length); x = x[0]; }
    return ret;
}

numeric.dim = function dim(x) {
    var y,z;
    if(typeof x === "object") {
        y = x[0];
        if(typeof y === "object") {
            z = y[0];
            if(typeof z === "object") {
                return numeric._dim(x);
            }
            return [x.length,y.length];
        }
        return [x.length];
    }
    return [];
}

numeric.mapreduce = function mapreduce(body,init) {
    return Function('x','accum','_s','_k',
            'if(typeof accum === "undefined") accum = '+init+';\n'+
            'if(typeof x === "number") { var xi = x; '+body+'; return accum; }\n'+
            'if(typeof _s === "undefined") _s = numeric.dim(x);\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i,xi;\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) {\n'+
            '        accum = arguments.callee(x[i],accum,_s,_k+1);\n'+
            '    }'+
            '    return accum;\n'+
            '}\n'+
            'for(i=_n-1;i>=1;i-=2) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '    xi = x[i-1];\n'+
            '    '+body+';\n'+
            '}\n'+
            'if(i === 0) {\n'+
            '    xi = x[i];\n'+
            '    '+body+'\n'+
            '}\n'+
            'return accum;'
            );
}
numeric.mapreduce2 = function mapreduce2(body,setup) {
    return Function('x',
            'var n = x.length;\n'+
            'var i,xi;\n'+setup+';\n'+
            'for(i=n-1;i!==-1;--i) { \n'+
            '    xi = x[i];\n'+
            '    '+body+';\n'+
            '}\n'+
            'return accum;'
            );
}


numeric.same = function same(x,y) {
    var i,n;
    if(!(x instanceof Array) || !(y instanceof Array)) { return false; }
    n = x.length;
    if(n !== y.length) { return false; }
    for(i=0;i<n;i++) {
        if(x[i] === y[i]) { continue; }
        if(typeof x[i] === "object") { if(!same(x[i],y[i])) return false; }
        else { return false; }
    }
    return true;
}

numeric.rep = function rep(s,v,k) {
    if(typeof k === "undefined") { k=0; }
    var n = s[k], ret = Array(n), i;
    if(k === s.length-1) {
        for(i=n-2;i>=0;i-=2) { ret[i+1] = v; ret[i] = v; }
        if(i===-1) { ret[0] = v; }
        return ret;
    }
    for(i=n-1;i>=0;i--) { ret[i] = numeric.rep(s,v,k+1); }
    return ret;
}


numeric.dotMMsmall = function dotMMsmall(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0;
    p = x.length; q = y.length; r = y[0].length;
    ret = Array(p);
    for(i=p-1;i>=0;i--) {
        foo = Array(r);
        bar = x[i];
        for(k=r-1;k>=0;k--) {
            woo = bar[q-1]*y[q-1][k];
            for(j=q-2;j>=1;j-=2) {
                i0 = j-1;
                woo += bar[j]*y[j][k] + bar[i0]*y[i0][k];
            }
            if(j===0) { woo += bar[0]*y[0][k]; }
            foo[k] = woo;
        }
        ret[i] = foo;
    }
    return ret;
}
numeric._getCol = function _getCol(A,j,x) {
    var n = A.length, i;
    for(i=n-1;i>0;--i) {
        x[i] = A[i][j];
        --i;
        x[i] = A[i][j];
    }
    if(i===0) x[0] = A[0][j];
}
numeric.dotMMbig = function dotMMbig(x,y){
    var gc = numeric._getCol, p = y.length, v = Array(p);
    var m = x.length, n = y[0].length, A = new Array(m), xj;
    var VV = numeric.dotVV;
    var i,j,k,z;
    --p;
    --m;
    for(i=m;i!==-1;--i) A[i] = Array(n);
    --n;
    for(i=n;i!==-1;--i) {
        gc(y,i,v);
        for(j=m;j!==-1;--j) {
            z=0;
            xj = x[j];
            A[j][i] = VV(xj,v);
        }
    }
    return A;
}

numeric.dotMV = function dotMV(x,y) {
    var p = x.length, q = y.length,i;
    var ret = Array(p), dotVV = numeric.dotVV;
    for(i=p-1;i>=0;i--) { ret[i] = dotVV(x[i],y); }
    return ret;
}

numeric.dotVM = function dotVM(x,y) {
    var i,j,k,p,q,r,ret,foo,bar,woo,i0,k0,p0,r0,s1,s2,s3,baz,accum;
    p = x.length; q = y[0].length;
    ret = Array(q);
    for(k=q-1;k>=0;k--) {
        woo = x[p-1]*y[p-1][k];
        for(j=p-2;j>=1;j-=2) {
            i0 = j-1;
            woo += x[j]*y[j][k] + x[i0]*y[i0][k];
        }
        if(j===0) { woo += x[0]*y[0][k]; }
        ret[k] = woo;
    }
    return ret;
}

numeric.dotVV = function dotVV(x,y) {
    var i,n=x.length,i1,ret = x[n-1]*y[n-1];
    for(i=n-2;i>=1;i-=2) {
        i1 = i-1;
        ret += x[i]*y[i] + x[i1]*y[i1];
    }
    if(i===0) { ret += x[0]*y[0]; }
    return ret;
}

numeric.dot = function dot(x,y) {
    var d = numeric.dim;
    switch(d(x).length*1000+d(y).length) {
    case 2002:
        if(y.length < 10) return numeric.dotMMsmall(x,y);
        else return numeric.dotMMbig(x,y);
    case 2001: return numeric.dotMV(x,y);
    case 1002: return numeric.dotVM(x,y);
    case 1001: return numeric.dotVV(x,y);
    case 1000: return numeric.mulVS(x,y);
    case 1: return numeric.mulSV(x,y);
    case 0: return x*y;
    default: throw new Error('numeric.dot only works on vectors and matrices');
    }
}

numeric.diag = function diag(d) {
    var i,i1,j,n = d.length, A = Array(n), Ai;
    for(i=n-1;i>=0;i--) {
        Ai = Array(n);
        i1 = i+2;
        for(j=n-1;j>=i1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j>i) { Ai[j] = 0; }
        Ai[i] = d[i];
        for(j=i-1;j>=1;j-=2) {
            Ai[j] = 0;
            Ai[j-1] = 0;
        }
        if(j===0) { Ai[0] = 0; }
        A[i] = Ai;
    }
    return A;
}
numeric.getDiag = function(A) {
    var n = Math.min(A.length,A[0].length),i,ret = Array(n);
    for(i=n-1;i>=1;--i) {
        ret[i] = A[i][i];
        --i;
        ret[i] = A[i][i];
    }
    if(i===0) {
        ret[0] = A[0][0];
    }
    return ret;
}

numeric.identity = function identity(n) { return numeric.diag(numeric.rep([n],1)); }
numeric.pointwise = function pointwise(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = '_s';
    fun[params.length+1] = '_k';
    fun[params.length+2] = (
            'if(typeof _s === "undefined") _s = numeric.dim('+thevec+');\n'+
            'if(typeof _k === "undefined") _k = 0;\n'+
            'var _n = _s[_k];\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            'if(_k < _s.length-1) {\n'+
            '    for(i=_n-1;i>=0;i--) ret[i] = arguments.callee('+params.join(',')+',_s,_k+1);\n'+
            '    return ret;\n'+
            '}\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            '    '+body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric.pointwise2 = function pointwise2(params,body,setup) {
    if(typeof setup === "undefined") { setup = ""; }
    var fun = [];
    var k;
    var avec = /\[i\]$/,p,thevec = '';
    var haveret = false;
    for(k=0;k<params.length;k++) {
        if(avec.test(params[k])) {
            p = params[k].substring(0,params[k].length-3);
            thevec = p;
        } else { p = params[k]; }
        if(p==='ret') haveret = true;
        fun.push(p);
    }
    fun[params.length] = (
            'var _n = '+thevec+'.length;\n'+
            'var i'+(haveret?'':', ret = Array(_n)')+';\n'+
            setup+'\n'+
            'for(i=_n-1;i!==-1;--i) {\n'+
            body+'\n'+
            '}\n'+
            'return ret;'
            );
    return Function.apply(null,fun);
}
numeric._biforeach = (function _biforeach(x,y,s,k,f) {
    if(k === s.length-1) { f(x,y); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _biforeach(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
});
numeric._biforeach2 = (function _biforeach2(x,y,s,k,f) {
    if(k === s.length-1) { return f(x,y); }
    var i,n=s[k],ret = Array(n);
    for(i=n-1;i>=0;--i) { ret[i] = _biforeach2(typeof x==="object"?x[i]:x,typeof y==="object"?y[i]:y,s,k+1,f); }
    return ret;
});
numeric._foreach = (function _foreach(x,s,k,f) {
    if(k === s.length-1) { f(x); return; }
    var i,n=s[k];
    for(i=n-1;i>=0;i--) { _foreach(x[i],s,k+1,f); }
});
numeric._foreach2 = (function _foreach2(x,s,k,f) {
    if(k === s.length-1) { return f(x); }
    var i,n=s[k], ret = Array(n);
    for(i=n-1;i>=0;i--) { ret[i] = _foreach2(x[i],s,k+1,f); }
    return ret;
});

/*numeric.anyV = numeric.mapreduce('if(xi) return true;','false');
numeric.allV = numeric.mapreduce('if(!xi) return false;','true');
numeric.any = function(x) { if(typeof x.length === "undefined") return x; return numeric.anyV(x); }
numeric.all = function(x) { if(typeof x.length === "undefined") return x; return numeric.allV(x); }*/

numeric.ops2 = {
        add: '+',
        sub: '-',
        mul: '*',
        div: '/',
        mod: '%',
        and: '&&',
        or:  '||',
        eq:  '===',
        neq: '!==',
        lt:  '<',
        gt:  '>',
        leq: '<=',
        geq: '>=',
        band: '&',
        bor: '|',
        bxor: '^',
        lshift: '<<',
        rshift: '>>',
        rrshift: '>>>'
};
numeric.opseq = {
        addeq: '+=',
        subeq: '-=',
        muleq: '*=',
        diveq: '/=',
        modeq: '%=',
        lshifteq: '<<=',
        rshifteq: '>>=',
        rrshifteq: '>>>=',
        bandeq: '&=',
        boreq: '|=',
        bxoreq: '^='
};
numeric.mathfuns = ['abs','acos','asin','atan','ceil','cos',
                    'exp','floor','log','round','sin','sqrt','tan',
                    'isNaN','isFinite'];
numeric.mathfuns2 = ['atan2','pow','max','min'];
numeric.ops1 = {
        neg: '-',
        not: '!',
        bnot: '~',
        clone: ''
};
numeric.mapreducers = {
        any: ['if(xi) return true;','var accum = false;'],
        all: ['if(!xi) return false;','var accum = true;'],
        sum: ['accum += xi;','var accum = 0;'],
        prod: ['accum *= xi;','var accum = 1;'],
        norm2Squared: ['accum += xi*xi;','var accum = 0;'],
        norminf: ['accum = max(accum,abs(xi));','var accum = 0, max = Math.max, abs = Math.abs;'],
        norm1: ['accum += abs(xi)','var accum = 0, abs = Math.abs;'],
        sup: ['accum = max(accum,xi);','var accum = -Infinity, max = Math.max;'],
        inf: ['accum = min(accum,xi);','var accum = Infinity, min = Math.min;']
};

(function () {
    var i,o;
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        numeric.ops2[o] = o;
    }
    for(i in numeric.ops2) {
        if(numeric.ops2.hasOwnProperty(i)) {
            o = numeric.ops2[i];
            var code, codeeq, setup = '';
            if(numeric.myIndexOf.call(numeric.mathfuns2,i)!==-1) {
                setup = 'var '+o+' = Math.'+o+';\n';
                code = function(r,x,y) { return r+' = '+o+'('+x+','+y+')'; };
                codeeq = function(x,y) { return x+' = '+o+'('+x+','+y+')'; };
            } else {
                code = function(r,x,y) { return r+' = '+x+' '+o+' '+y; };
                if(numeric.opseq.hasOwnProperty(i+'eq')) {
                    codeeq = function(x,y) { return x+' '+o+'= '+y; };
                } else {
                    codeeq = function(x,y) { return x+' = '+x+' '+o+' '+y; };                    
                }
            }
            numeric[i+'VV'] = numeric.pointwise2(['x[i]','y[i]'],code('ret[i]','x[i]','y[i]'),setup);
            numeric[i+'SV'] = numeric.pointwise2(['x','y[i]'],code('ret[i]','x','y[i]'),setup);
            numeric[i+'VS'] = numeric.pointwise2(['x[i]','y'],code('ret[i]','x[i]','y'),setup);
            numeric[i] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var VV = numeric.'+i+'VV, VS = numeric.'+i+'VS, SV = numeric.'+i+'SV;\n'+
                    'var dim = numeric.dim;\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof x === "object") {\n'+
                    '      if(typeof y === "object") x = numeric._biforeach2(x,y,dim(x),0,VV);\n'+
                    '      else x = numeric._biforeach2(x,y,dim(x),0,VS);\n'+
                    '  } else if(typeof y === "object") x = numeric._biforeach2(x,y,dim(y),0,SV);\n'+
                    '  else '+codeeq('x','y')+'\n'+
                    '}\nreturn x;\n');
            numeric[o] = numeric[i];
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]','x[i]'], codeeq('ret[i]','x[i]'),setup);
            numeric[i+'eqS'] = numeric.pointwise2(['ret[i]','x'], codeeq('ret[i]','x'),setup);
            numeric[i+'eq'] = Function(
                    'var n = arguments.length, i, x = arguments[0], y;\n'+
                    'var V = numeric.'+i+'eqV, S = numeric.'+i+'eqS\n'+
                    'var s = numeric.dim(x);\n'+
                    'for(i=1;i!==n;++i) { \n'+
                    '  y = arguments[i];\n'+
                    '  if(typeof y === "object") numeric._biforeach(x,y,s,0,V);\n'+
                    '  else numeric._biforeach(x,y,s,0,S);\n'+
                    '}\nreturn x;\n');
        }
    }
    for(i=0;i<numeric.mathfuns2.length;++i) {
        o = numeric.mathfuns2[i];
        delete numeric.ops2[o];
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        numeric.ops1[o] = o;
    }
    for(i in numeric.ops1) {
        if(numeric.ops1.hasOwnProperty(i)) {
            setup = '';
            o = numeric.ops1[i];
            if(numeric.myIndexOf.call(numeric.mathfuns,i)!==-1) {
                if(Math.hasOwnProperty(o)) setup = 'var '+o+' = Math.'+o+';\n';
            }
            numeric[i+'eqV'] = numeric.pointwise2(['ret[i]'],'ret[i] = '+o+'(ret[i]);',setup);
            numeric[i+'eq'] = Function('x',
                    'if(typeof x !== "object") return '+o+'x\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'eqV;\n'+
                    'var s = numeric.dim(x);\n'+
                    'numeric._foreach(x,s,0,V);\n'+
                    'return x;\n');
            numeric[i+'V'] = numeric.pointwise2(['x[i]'],'ret[i] = '+o+'(x[i]);',setup);
            numeric[i] = Function('x',
                    'if(typeof x !== "object") return '+o+'(x)\n'+
                    'var i;\n'+
                    'var V = numeric.'+i+'V;\n'+
                    'var s = numeric.dim(x);\n'+
                    'return numeric._foreach2(x,s,0,V);\n');
        }
    }
    for(i=0;i<numeric.mathfuns.length;++i) {
        o = numeric.mathfuns[i];
        delete numeric.ops1[o];
    }
    for(i in numeric.mapreducers) {
        if(numeric.mapreducers.hasOwnProperty(i)) {
            o = numeric.mapreducers[i];
            numeric[i+'V'] = numeric.mapreduce2(o[0],o[1]);
            numeric[i] = Function('x','s','k',
                    o[1]+
                    'if(typeof x !== "object") {'+
                    '    xi = x;\n'+
                    o[0]+';\n'+
                    '    return accum;\n'+
                    '}'+
                    'if(typeof s === "undefined") s = numeric.dim(x);\n'+
                    'if(typeof k === "undefined") k = 0;\n'+
                    'if(k === s.length-1) return numeric.'+i+'V(x);\n'+
                    'var xi;\n'+
                    'var n = x.length, i;\n'+
                    'for(i=n-1;i!==-1;--i) {\n'+
                    '   xi = arguments.callee(x[i]);\n'+
                    o[0]+';\n'+
                    '}\n'+
                    'return accum;\n');
        }
    }
}());

numeric.truncVV = numeric.pointwise(['x[i]','y[i]'],'ret[i] = round(x[i]/y[i])*y[i];','var round = Math.round;');
numeric.truncVS = numeric.pointwise(['x[i]','y'],'ret[i] = round(x[i]/y)*y;','var round = Math.round;');
numeric.truncSV = numeric.pointwise(['x','y[i]'],'ret[i] = round(x/y[i])*y[i];','var round = Math.round;');
numeric.trunc = function trunc(x,y) {
    if(typeof x === "object") {
        if(typeof y === "object") return numeric.truncVV(x,y);
        return numeric.truncVS(x,y);
    }
    if (typeof y === "object") return numeric.truncSV(x,y);
    return Math.round(x/y)*y;
}

numeric.inv = function inv(x) {
    var s = numeric.dim(x), abs = Math.abs, m = s[0], n = s[1];
    var A = numeric.clone(x), Ai, Aj;
    var I = numeric.identity(m), Ii, Ij;
    var i,j,k,x;
    for(j=0;j<n;++j) {
        var i0 = -1;
        var v0 = -1;
        for(i=j;i!==m;++i) { k = abs(A[i][j]); if(k>v0) { i0 = i; v0 = k; } }
        Aj = A[i0]; A[i0] = A[j]; A[j] = Aj;
        Ij = I[i0]; I[i0] = I[j]; I[j] = Ij;
        x = Aj[j];
        for(k=j;k!==n;++k)    Aj[k] /= x; 
        for(k=n-1;k!==-1;--k) Ij[k] /= x;
        for(i=m-1;i!==-1;--i) {
            if(i!==j) {
                Ai = A[i];
                Ii = I[i];
                x = Ai[j];
                for(k=j+1;k!==n;++k)  Ai[k] -= Aj[k]*x;
                for(k=n-1;k>0;--k) { Ii[k] -= Ij[k]*x; --k; Ii[k] -= Ij[k]*x; }
                if(k===0) Ii[0] -= Ij[0]*x;
            }
        }
    }
    return I;
}

numeric.det = function det(x) {
    var s = numeric.dim(x);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: det() only works on square matrices'); }
    var n = s[0], ret = 1,i,j,k,A = numeric.clone(x),Aj,Ai,alpha,temp,k1,k2,k3;
    for(j=0;j<n-1;j++) {
        k=j;
        for(i=j+1;i<n;i++) { if(Math.abs(A[i][j]) > Math.abs(A[k][j])) { k = i; } }
        if(k !== j) {
            temp = A[k]; A[k] = A[j]; A[j] = temp;
            ret *= -1;
        }
        Aj = A[j];
        for(i=j+1;i<n;i++) {
            Ai = A[i];
            alpha = Ai[j]/Aj[j];
            for(k=j+1;k<n-1;k+=2) {
                k1 = k+1;
                Ai[k] -= Aj[k]*alpha;
                Ai[k1] -= Aj[k1]*alpha;
            }
            if(k!==n) { Ai[k] -= Aj[k]*alpha; }
        }
        if(Aj[j] === 0) { return 0; }
        ret *= Aj[j];
    }
    return ret*A[j][j];
}

numeric.transpose = function transpose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
            --j;
            Bj = ret[j]; Bj[i] = A1[j]; Bj[i-1] = A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = A1[0]; Bj[i-1] = A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = A0[j];
            --j;
            ret[j][0] = A0[j];
        }
        if(j===0) { ret[0][0] = A0[0]; }
    }
    return ret;
}
numeric.negtranspose = function negtranspose(x) {
    var i,j,m = x.length,n = x[0].length, ret=Array(n),A0,A1,Bj;
    for(j=0;j<n;j++) ret[j] = Array(m);
    for(i=m-1;i>=1;i-=2) {
        A1 = x[i];
        A0 = x[i-1];
        for(j=n-1;j>=1;--j) {
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
            --j;
            Bj = ret[j]; Bj[i] = -A1[j]; Bj[i-1] = -A0[j];
        }
        if(j===0) {
            Bj = ret[0]; Bj[i] = -A1[0]; Bj[i-1] = -A0[0];
        }
    }
    if(i===0) {
        A0 = x[0];
        for(j=n-1;j>=1;--j) {
            ret[j][0] = -A0[j];
            --j;
            ret[j][0] = -A0[j];
        }
        if(j===0) { ret[0][0] = -A0[0]; }
    }
    return ret;
}

numeric._random = function _random(s,k) {
    var i,n=s[k],ret=Array(n), rnd;
    if(k === s.length-1) {
        rnd = Math.random;
        for(i=n-1;i>=1;i-=2) {
            ret[i] = rnd();
            ret[i-1] = rnd();
        }
        if(i===0) { ret[0] = rnd(); }
        return ret;
    }
    for(i=n-1;i>=0;i--) ret[i] = _random(s,k+1);
    return ret;
}
numeric.random = function random(s) { return numeric._random(s,0); }

numeric.norm2 = function norm2(x) { return Math.sqrt(numeric.norm2Squared(x)); }

numeric.linspace = function linspace(a,b,n) {
    if(typeof n === "undefined") n = Math.max(Math.round(b-a)+1,1);
    if(n<2) { return n===1?[a]:[]; }
    var i,ret = Array(n);
    n--;
    for(i=n;i>=0;i--) { ret[i] = (i*b+(n-i)*a)/n; }
    return ret;
}

numeric.getBlock = function getBlock(x,from,to) {
    var s = numeric.dim(x);
    function foo(x,k) {
        var i,a = from[k], n = to[k]-a, ret = Array(n);
        if(k === s.length-1) {
            for(i=n;i>=0;i--) { ret[i] = x[i+a]; }
            return ret;
        }
        for(i=n;i>=0;i--) { ret[i] = foo(x[i+a],k+1); }
        return ret;
    }
    return foo(x,0);
}

numeric.setBlock = function setBlock(x,from,to,B) {
    var s = numeric.dim(x);
    function foo(x,y,k) {
        var i,a = from[k], n = to[k]-a;
        if(k === s.length-1) { for(i=n;i>=0;i--) { x[i+a] = y[i]; } }
        for(i=n;i>=0;i--) { foo(x[i+a],y[i],k+1); }
    }
    foo(x,B,0);
    return x;
}

numeric.getRange = function getRange(A,I,J) {
    var m = I.length, n = J.length;
    var i,j;
    var B = Array(m), Bi, AI;
    for(i=m-1;i!==-1;--i) {
        B[i] = Array(n);
        Bi = B[i];
        AI = A[I[i]];
        for(j=n-1;j!==-1;--j) Bi[j] = AI[J[j]];
    }
    return B;
}

numeric.blockMatrix = function blockMatrix(X) {
    var s = numeric.dim(X);
    if(s.length<4) return numeric.blockMatrix([X]);
    var m=s[0],n=s[1],M,N,i,j,Xij;
    M = 0; N = 0;
    for(i=0;i<m;++i) M+=X[i][0].length;
    for(j=0;j<n;++j) N+=X[0][j][0].length;
    var Z = Array(M);
    for(i=0;i<M;++i) Z[i] = Array(N);
    var I=0,J,ZI,k,l,Xijk;
    for(i=0;i<m;++i) {
        J=N;
        for(j=n-1;j!==-1;--j) {
            Xij = X[i][j];
            J -= Xij[0].length;
            for(k=Xij.length-1;k!==-1;--k) {
                Xijk = Xij[k];
                ZI = Z[I+k];
                for(l = Xijk.length-1;l!==-1;--l) ZI[J+l] = Xijk[l];
            }
        }
        I += X[i][0].length;
    }
    return Z;
}

numeric.tensor = function tensor(x,y) {
    if(typeof x === "number" || typeof y === "number") return numeric.mul(x,y);
    var s1 = numeric.dim(x), s2 = numeric.dim(y);
    if(s1.length !== 1 || s2.length !== 1) {
        throw new Error('numeric: tensor product is only defined for vectors');
    }
    var m = s1[0], n = s2[0], A = Array(m), Ai, i,j,xi;
    for(i=m-1;i>=0;i--) {
        Ai = Array(n);
        xi = x[i];
        for(j=n-1;j>=3;--j) {
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
            --j;
            Ai[j] = xi * y[j];
        }
        while(j>=0) { Ai[j] = xi * y[j]; --j; }
        A[i] = Ai;
    }
    return A;
}

// 3. The Tensor type T
numeric.T = function T(x,y) { this.x = x; this.y = y; }
numeric.t = function t(x,y) { return new numeric.T(x,y); }

numeric.Tbinop = function Tbinop(rr,rc,cr,cc,setup) {
    var io = numeric.indexOf;
    if(typeof setup !== "string") {
        var k;
        setup = '';
        for(k in numeric) {
            if(numeric.hasOwnProperty(k) && (rr.indexOf(k)>=0 || rc.indexOf(k)>=0 || cr.indexOf(k)>=0 || cc.indexOf(k)>=0) && k.length>1) {
                setup += 'var '+k+' = numeric.'+k+';\n';
            }
        }
    }
    return Function(['y'],
            'var x = this;\n'+
            'if(!(y instanceof numeric.T)) { y = new numeric.T(y); }\n'+
            setup+'\n'+
            'if(x.y) {'+
            '  if(y.y) {'+
            '    return new numeric.T('+cc+');\n'+
            '  }\n'+
            '  return new numeric.T('+cr+');\n'+
            '}\n'+
            'if(y.y) {\n'+
            '  return new numeric.T('+rc+');\n'+
            '}\n'+
            'return new numeric.T('+rr+');\n'
    );
}

numeric.T.prototype.add = numeric.Tbinop(
        'add(x.x,y.x)',
        'add(x.x,y.x),y.y',
        'add(x.x,y.x),x.y',
        'add(x.x,y.x),add(x.y,y.y)');
numeric.T.prototype.sub = numeric.Tbinop(
        'sub(x.x,y.x)',
        'sub(x.x,y.x),neg(y.y)',
        'sub(x.x,y.x),x.y',
        'sub(x.x,y.x),sub(x.y,y.y)');
numeric.T.prototype.mul = numeric.Tbinop(
        'mul(x.x,y.x)',
        'mul(x.x,y.x),mul(x.x,y.y)',
        'mul(x.x,y.x),mul(x.y,y.x)',
        'sub(mul(x.x,y.x),mul(x.y,y.y)),add(mul(x.x,y.y),mul(x.y,y.x))');

numeric.T.prototype.reciprocal = function reciprocal() {
    var mul = numeric.mul, div = numeric.div;
    if(this.y) {
        var d = numeric.add(mul(this.x,this.x),mul(this.y,this.y));
        return new numeric.T(div(this.x,d),div(numeric.neg(this.y),d));
    }
    return new T(div(1,this.x));
}
numeric.T.prototype.div = function div(y) {
    if(!(y instanceof numeric.T)) y = new numeric.T(y);
    if(y.y) { return this.mul(y.reciprocal()); }
    var div = numeric.div;
    if(this.y) { return new numeric.T(div(this.x,y.x),div(this.y,y.x)); }
    return new numeric.T(div(this.x,y.x));
}
numeric.T.prototype.dot = numeric.Tbinop(
        'dot(x.x,y.x)',
        'dot(x.x,y.x),dot(x.x,y.y)',
        'dot(x.x,y.x),dot(x.y,y.x)',
        'sub(dot(x.x,y.x),dot(x.y,y.y)),add(dot(x.x,y.y),dot(x.y,y.x))'
        );
numeric.T.prototype.transpose = function transpose() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),t(y)); }
    return new numeric.T(t(x));
}
numeric.T.prototype.transjugate = function transjugate() {
    var t = numeric.transpose, x = this.x, y = this.y;
    if(y) { return new numeric.T(t(x),numeric.negtranspose(y)); }
    return new numeric.T(t(x));
}
numeric.Tunop = function Tunop(r,c,s) {
    if(typeof s !== "string") { s = ''; }
    return Function(
            'var x = this;\n'+
            s+'\n'+
            'if(x.y) {'+
            '  '+c+';\n'+
            '}\n'+
            r+';\n'
    );
}

numeric.T.prototype.exp = numeric.Tunop(
        'return new numeric.T(ex)',
        'return new numeric.T(mul(cos(x.y),ex),mul(sin(x.y),ex))',
        'var ex = numeric.exp(x.x), cos = numeric.cos, sin = numeric.sin, mul = numeric.mul;');
numeric.T.prototype.conj = numeric.Tunop(
        'return new numeric.T(x.x);',
        'return new numeric.T(x.x,numeric.neg(x.y));');
numeric.T.prototype.neg = numeric.Tunop(
        'return new numeric.T(neg(x.x));',
        'return new numeric.T(neg(x.x),neg(x.y));',
        'var neg = numeric.neg;');
numeric.T.prototype.sin = numeric.Tunop(
        'return new numeric.T(numeric.sin(x.x))',
        'return x.exp().sub(x.neg().exp()).div(new numeric.T(0,2));');
numeric.T.prototype.cos = numeric.Tunop(
        'return new numeric.T(numeric.cos(x.x))',
        'return x.exp().add(x.neg().exp()).div(2);');
numeric.T.prototype.abs = numeric.Tunop(
        'return new numeric.T(numeric.abs(x.x));',
        'return new numeric.T(numeric.sqrt(numeric.add(mul(x.x,x.x),mul(x.y,x.y))));',
        'var mul = numeric.mul;');
numeric.T.prototype.log = numeric.Tunop(
        'return new numeric.T(numeric.log(x.x));',
        'var theta = new numeric.T(numeric.atan2(x.y,x.x)), r = x.abs();\n'+
        'return new numeric.T(numeric.log(r.x),theta.x);');
numeric.T.prototype.norm2 = numeric.Tunop(
        'return numeric.norm2(x.x);',
        'var f = numeric.norm2Squared;\n'+
        'return Math.sqrt(f(x.x)+f(x.y));');
numeric.T.prototype.inv = function inv() {
    var A = this;
    if(typeof A.y === "undefined") { return new numeric.T(numeric.inv(A.x)); }
    var n = A.x.length, i, j, k;
    var Rx = numeric.identity(n),Ry = numeric.rep([n,n],0);
    var Ax = numeric.clone(A.x), Ay = numeric.clone(A.y);
    var Aix, Aiy, Ajx, Ajy, Rix, Riy, Rjx, Rjy;
    var i,j,k,d,d1,ax,ay,bx,by,temp;
    for(i=0;i<n;i++) {
        ax = Ax[i][i]; ay = Ay[i][i];
        d = ax*ax+ay*ay;
        k = i;
        for(j=i+1;j<n;j++) {
            ax = Ax[j][i]; ay = Ay[j][i];
            d1 = ax*ax+ay*ay;
            if(d1 > d) { k=j; d = d1; }
        }
        if(k!==i) {
            temp = Ax[i]; Ax[i] = Ax[k]; Ax[k] = temp;
            temp = Ay[i]; Ay[i] = Ay[k]; Ay[k] = temp;
            temp = Rx[i]; Rx[i] = Rx[k]; Rx[k] = temp;
            temp = Ry[i]; Ry[i] = Ry[k]; Ry[k] = temp;
        }
        Aix = Ax[i]; Aiy = Ay[i];
        Rix = Rx[i]; Riy = Ry[i];
        ax = Aix[i]; ay = Aiy[i];
        for(j=i+1;j<n;j++) {
            bx = Aix[j]; by = Aiy[j];
            Aix[j] = (bx*ax+by*ay)/d;
            Aiy[j] = (by*ax-bx*ay)/d;
        }
        for(j=0;j<n;j++) {
            bx = Rix[j]; by = Riy[j];
            Rix[j] = (bx*ax+by*ay)/d;
            Riy[j] = (by*ax-bx*ay)/d;
        }
        for(j=i+1;j<n;j++) {
            Ajx = Ax[j]; Ajy = Ay[j];
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ajx[i]; ay = Ajy[i];
            for(k=i+1;k<n;k++) {
                bx = Aix[k]; by = Aiy[k];
                Ajx[k] -= bx*ax-by*ay;
                Ajy[k] -= by*ax+bx*ay;
            }
            for(k=0;k<n;k++) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= bx*ax-by*ay;
                Rjy[k] -= by*ax+bx*ay;
            }
        }
    }
    for(i=n-1;i>0;i--) {
        Rix = Rx[i]; Riy = Ry[i];
        for(j=i-1;j>=0;j--) {
            Rjx = Rx[j]; Rjy = Ry[j];
            ax = Ax[j][i]; ay = Ay[j][i];
            for(k=n-1;k>=0;k--) {
                bx = Rix[k]; by = Riy[k];
                Rjx[k] -= ax*bx - ay*by;
                Rjy[k] -= ax*by + ay*bx;
            }
        }
    }
    return new numeric.T(Rx,Ry);
}
numeric.T.prototype.get = function get(i) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length;
    if(y) {
        while(k<n) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        return new numeric.T(x,y);
    }
    while(k<n) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    return new numeric.T(x);
}
numeric.T.prototype.set = function set(i,v) {
    var x = this.x, y = this.y, k = 0, ik, n = i.length, vx = v.x, vy = v.y;
    if(n===0) {
        if(vy) { this.y = vy; }
        else if(y) { this.y = undefined; }
        this.x = x;
        return this;
    }
    if(vy) {
        if(y) { /* ok */ }
        else {
            y = numeric.rep(numeric.dim(x),0);
            this.y = y;
        }
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        y[ik] = vy;
        return this;
    }
    if(y) {
        while(k<n-1) {
            ik = i[k];
            x = x[ik];
            y = y[ik];
            k++;
        }
        ik = i[k];
        x[ik] = vx;
        if(vx instanceof Array) y[ik] = numeric.rep(numeric.dim(vx),0);
        else y[ik] = 0;
        return this;
    }
    while(k<n-1) {
        ik = i[k];
        x = x[ik];
        k++;
    }
    ik = i[k];
    x[ik] = vx;
    return this;
}
numeric.T.prototype.getRows = function getRows(i0,i1) {
    var n = i1-i0+1, j;
    var rx = Array(n), ry, x = this.x, y = this.y;
    for(j=i0;j<=i1;j++) { rx[j-i0] = x[j]; }
    if(y) {
        ry = Array(n);
        for(j=i0;j<=i1;j++) { ry[j-i0] = y[j]; }
        return new numeric.T(rx,ry);
    }
    return new numeric.T(rx);
}
numeric.T.prototype.setRows = function setRows(i0,i1,A) {
    var j;
    var rx = this.x, ry = this.y, x = A.x, y = A.y;
    for(j=i0;j<=i1;j++) { rx[j] = x[j-i0]; }
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        for(j=i0;j<=i1;j++) { ry[j] = y[j-i0]; }
    } else if(ry) {
        for(j=i0;j<=i1;j++) { ry[j] = numeric.rep([x[j-i0].length],0); }
    }
    return this;
}
numeric.T.prototype.getRow = function getRow(k) {
    var x = this.x, y = this.y;
    if(y) { return new numeric.T(x[k],y[k]); }
    return new numeric.T(x[k]);
}
numeric.T.prototype.setRow = function setRow(i,v) {
    var rx = this.x, ry = this.y, x = v.x, y = v.y;
    rx[i] = x;
    if(y) {
        if(!ry) { ry = numeric.rep(numeric.dim(rx),0); this.y = ry; }
        ry[i] = y;
    } else if(ry) {
        ry = numeric.rep([x.length],0);
    }
    return this;
}

numeric.T.prototype.getBlock = function getBlock(from,to) {
    var x = this.x, y = this.y, b = numeric.getBlock;
    if(y) { return new numeric.T(b(x,from,to),b(y,from,to)); }
    return new numeric.T(b(x,from,to));
}
numeric.T.prototype.setBlock = function setBlock(from,to,A) {
    if(!(A instanceof numeric.T)) A = new numeric.T(A);
    var x = this.x, y = this.y, b = numeric.setBlock, Ax = A.x, Ay = A.y;
    if(Ay) {
        if(!y) { this.y = numeric.rep(numeric.dim(this),0); y = this.y; }
        b(x,from,to,Ax);
        b(y,from,to,Ay);
        return this;
    }
    b(x,from,to,Ax);
    if(y) b(y,from,to,numeric.rep(numeric.dim(Ax),0));
}
numeric.T.rep = function rep(s,v) {
    var T = numeric.T;
    if(!(v instanceof T)) v = new T(v);
    var x = v.x, y = v.y, r = numeric.rep;
    if(y) return new T(r(s,x),r(s,y));
    return new T(r(s,x));
}
numeric.T.diag = function diag(d) {
    if(!(d instanceof numeric.T)) d = new numeric.T(d);
    var x = d.x, y = d.y, diag = numeric.diag;
    if(y) return new numeric.T(diag(x),diag(y));
    return new numeric.T(diag(x));
}
numeric.T.eig = function eig() {
    if(this.y) { throw new Error('eig: not implemented for complex matrices.'); }
    return numeric.eig(this.x);
}
numeric.T.identity = function identity(n) { return new numeric.T(numeric.identity(n)); }
numeric.T.prototype.getDiag = function getDiag() {
    var n = numeric;
    var x = this.x, y = this.y;
    if(y) { return new n.T(n.getDiag(x),n.getDiag(y)); }
    return new n.T(n.getDiag(x));
}

// 4. Eigenvalues of real matrices

numeric.house = function house(x) {
    var v = numeric.clone(x);
    var s = x[0] >= 0 ? 1 : -1;
    var alpha = s*numeric.norm2(x);
    v[0] += alpha;
    var foo = numeric.norm2(v);
    if(foo === 0) { /* this should not happen */ throw new Error('eig: internal error'); }
    return numeric.div(v,foo);
}

numeric.toUpperHessenberg = function toUpperHessenberg(me) {
    var s = numeric.dim(me);
    if(s.length !== 2 || s[0] !== s[1]) { throw new Error('numeric: toUpperHessenberg() only works on square matrices'); }
    var m = s[0], i,j,k,x,v,A = numeric.clone(me),B,C,Ai,Ci,Q = numeric.identity(m),Qi;
    for(j=0;j<m-2;j++) {
        x = Array(m-j-1);
        for(i=j+1;i<m;i++) { x[i-j-1] = A[i][j]; }
        if(numeric.norm2(x)>0) {
            v = numeric.house(x);
            B = numeric.getBlock(A,[j+1,j],[m-1,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Ai = A[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Ai[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(A,[0,j+1],[m-1,m-1]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Ai = A[i]; Ci = C[i]; for(k=j+1;k<m;k++) Ai[k] -= 2*Ci[k-j-1]; }
            B = Array(m-j-1);
            for(i=j+1;i<m;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<m;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    return {H:A, Q:Q};
}

numeric.epsilon = 2.220446049250313e-16;

numeric.QRFrancis = function(H,maxiter) {
    if(typeof maxiter === "undefined") { maxiter = 10000; }
    H = numeric.clone(H);
    var H0 = numeric.clone(H);
    var s = numeric.dim(H),m=s[0],x,v,a,b,c,d,det,tr, Hloc, Q = numeric.identity(m), Qi, Hi, B, C, Ci,i,j,k,iter;
    if(m<3) { return {Q:Q, B:[ [0,m-1] ]}; }
    var epsilon = numeric.epsilon;
    for(iter=0;iter<maxiter;iter++) {
        for(j=0;j<m-1;j++) {
            if(Math.abs(H[j+1][j]) < epsilon*(Math.abs(H[j][j])+Math.abs(H[j+1][j+1]))) {
                var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[j,j]),maxiter);
                var QH2 = numeric.QRFrancis(numeric.getBlock(H,[j+1,j+1],[m-1,m-1]),maxiter);
                B = Array(j+1);
                for(i=0;i<=j;i++) { B[i] = Q[i]; }
                C = numeric.dot(QH1.Q,B);
                for(i=0;i<=j;i++) { Q[i] = C[i]; }
                B = Array(m-j-1);
                for(i=j+1;i<m;i++) { B[i-j-1] = Q[i]; }
                C = numeric.dot(QH2.Q,B);
                for(i=j+1;i<m;i++) { Q[i] = C[i-j-1]; }
                return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,j+1))};
            }
        }
        a = H[m-2][m-2]; b = H[m-2][m-1];
        c = H[m-1][m-2]; d = H[m-1][m-1];
        tr = a+d;
        det = (a*d-b*c);
        Hloc = numeric.getBlock(H, [0,0], [2,2]);
        if(tr*tr>=4*det) {
            var s1,s2;
            s1 = 0.5*(tr+Math.sqrt(tr*tr-4*det));
            s2 = 0.5*(tr-Math.sqrt(tr*tr-4*det));
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,s1+s2)),
                               numeric.diag(numeric.rep([3],s1*s2)));
        } else {
            Hloc = numeric.add(numeric.sub(numeric.dot(Hloc,Hloc),
                                           numeric.mul(Hloc,tr)),
                               numeric.diag(numeric.rep([3],det)));
        }
        x = [Hloc[0][0],Hloc[1][0],Hloc[2][0]];
        v = numeric.house(x);
        B = [H[0],H[1],H[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<m;k++) Hi[k] -= 2*Ci[k]; }
        B = numeric.getBlock(H, [0,0],[m-1,2]);
        C = numeric.tensor(numeric.dot(B,v),v);
        for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=0;k<3;k++) Hi[k] -= 2*Ci[k]; }
        B = [Q[0],Q[1],Q[2]];
        C = numeric.tensor(v,numeric.dot(v,B));
        for(i=0;i<3;i++) { Qi = Q[i]; Ci = C[i]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        var J;
        for(j=0;j<m-2;j++) {
            for(k=j;k<=j+1;k++) {
                if(Math.abs(H[k+1][k]) < epsilon*(Math.abs(H[k][k])+Math.abs(H[k+1][k+1]))) {
                    var QH1 = numeric.QRFrancis(numeric.getBlock(H,[0,0],[k,k]),maxiter);
                    var QH2 = numeric.QRFrancis(numeric.getBlock(H,[k+1,k+1],[m-1,m-1]),maxiter);
                    B = Array(k+1);
                    for(i=0;i<=k;i++) { B[i] = Q[i]; }
                    C = numeric.dot(QH1.Q,B);
                    for(i=0;i<=k;i++) { Q[i] = C[i]; }
                    B = Array(m-k-1);
                    for(i=k+1;i<m;i++) { B[i-k-1] = Q[i]; }
                    C = numeric.dot(QH2.Q,B);
                    for(i=k+1;i<m;i++) { Q[i] = C[i-k-1]; }
                    return {Q:Q,B:QH1.B.concat(numeric.add(QH2.B,k+1))};
                }
            }
            J = Math.min(m-1,j+3);
            x = Array(J-j);
            for(i=j+1;i<=J;i++) { x[i-j-1] = H[i][j]; }
            v = numeric.house(x);
            B = numeric.getBlock(H, [j+1,j],[J,m-1]);
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Hi = H[i]; Ci = C[i-j-1]; for(k=j;k<m;k++) Hi[k] -= 2*Ci[k-j]; }
            B = numeric.getBlock(H, [0,j+1],[m-1,J]);
            C = numeric.tensor(numeric.dot(B,v),v);
            for(i=0;i<m;i++) { Hi = H[i]; Ci = C[i]; for(k=j+1;k<=J;k++) Hi[k] -= 2*Ci[k-j-1]; }
            B = Array(J-j);
            for(i=j+1;i<=J;i++) B[i-j-1] = Q[i];
            C = numeric.tensor(v,numeric.dot(v,B));
            for(i=j+1;i<=J;i++) { Qi = Q[i]; Ci = C[i-j-1]; for(k=0;k<m;k++) Qi[k] -= 2*Ci[k]; }
        }
    }
    throw new Error('numeric: eigenvalue iteration does not converge -- increase maxiter?');
}

numeric.eig = function eig(A,maxiter) {
    var QH = numeric.toUpperHessenberg(A);
    var QB = numeric.QRFrancis(QH.H,maxiter);
    var T = numeric.T;
    var n = A.length,i,k,flag = false,B = QB.B,H = numeric.dot(QB.Q,numeric.dot(QH.H,numeric.transpose(QB.Q)));
    var Q = new T(numeric.dot(QB.Q,QH.Q)),Q0;
    var m = B.length,j;
    var a,b,c,d,p1,p2,disc,x,y,p,q,n1,n2;
    var sqrt = Math.sqrt;
    for(k=0;k<m;k++) {
        i = B[k][0];
        if(i === B[k][1]) {
            // nothing
        } else {
            j = i+1;
            a = H[i][i];
            b = H[i][j];
            c = H[j][i];
            d = H[j][j];
            if(b === 0 && c === 0) continue;
            p1 = -a-d;
            p2 = a*d-b*c;
            disc = p1*p1-4*p2;
            if(disc>=0) {
                if(p1<0) x = -0.5*(p1-sqrt(disc));
                else     x = -0.5*(p1+sqrt(disc));
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1);
                    p = (a-x)/n1;
                    q = b/n1;
                } else {
                    n2 = sqrt(n2);
                    p = c/n2;
                    q = (d-x)/n2;
                }
                Q0 = new T([[q,-p],[p,q]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            } else {
                x = -0.5*p1;
                y = 0.5*sqrt(-disc);
                n1 = (a-x)*(a-x)+b*b;
                n2 = c*c+(d-x)*(d-x);
                if(n1>n2) {
                    n1 = sqrt(n1+y*y);
                    p = (a-x)/n1;
                    q = b/n1;
                    x = 0;
                    y /= n1;
                } else {
                    n2 = sqrt(n2+y*y);
                    p = c/n2;
                    q = (d-x)/n2;
                    x = y/n2;
                    y = 0;
                }
                Q0 = new T([[q,-p],[p,q]],[[x,y],[y,-x]]);
                Q.setRows(i,j,Q0.dot(Q.getRows(i,j)));
            }
        }
    }
    var R = Q.dot(A).dot(Q.transjugate()), n = A.length, E = numeric.T.identity(n);
    for(j=0;j<n;j++) {
        if(j>0) {
            for(k=j-1;k>=0;k--) {
                var Rk = R.get([k,k]), Rj = R.get([j,j]);
                if(numeric.neq(Rk.x,Rj.x) || numeric.neq(Rk.y,Rj.y)) {
                    x = R.getRow(k).getBlock([k],[j-1]);
                    y = E.getRow(j).getBlock([k],[j-1]);
                    E.set([j,k],(R.get([k,j]).neg().sub(x.dot(y))).div(Rk.sub(Rj)));
                } else {
                    E.setRow(j,E.getRow(k));
                    continue;
                }
            }
        }
    }
    for(j=0;j<n;j++) {
        x = E.getRow(j);
        E.setRow(j,x.div(x.norm2()));
    }
    E = E.transpose();
    E = Q.transjugate().dot(E);
    return { lambda:R.getDiag(), E:E };
};

// 5. Compressed Column Storage matrices
numeric.ccsSparse = function ccsSparse(A) {
    var m = A.length,n,foo, i,j, counts = [];
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            j = parseInt(j);
            while(j>=counts.length) counts[counts.length] = 0;
            if(foo[j]!==0) counts[j]++;
        }
    }
    var n = counts.length;
    var Ai = Array(n+1);
    Ai[0] = 0;
    for(i=0;i<n;++i) Ai[i+1] = Ai[i] + counts[i];
    var Aj = Array(Ai[n]), Av = Array(Ai[n]);
    for(i=m-1;i!==-1;--i) {
        foo = A[i];
        for(j in foo) {
            if(foo[j]!==0) {
                counts[j]--;
                Aj[Ai[j]+counts[j]] = i;
                Av[Ai[j]+counts[j]] = foo[j];
            }
        }
    }
    return [Ai,Aj,Av];
}
numeric.ccsFull = function ccsFull(A) {
    var Ai = A[0], Aj = A[1], Av = A[2], s = numeric.ccsDim(A), m = s[0], n = s[1], i,j,j0,j1,k;
    var B = numeric.rep([m,n],0);
    for(i=0;i<n;i++) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j<j1;++j) { B[Aj[j]][i] = Av[j]; }
    }
    return B;
}
numeric.ccsTSolve = function ccsTSolve(A,b,x,bj,xj) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, max = Math.max,n=0;
    if(typeof bj === "undefined") x = numeric.rep([m],0);
    if(typeof bj === "undefined") bj = numeric.linspace(0,x.length-1);
    if(typeof xj === "undefined") xj = [];
    function dfs(j) {
        var k;
        if(x[j] !== 0) return;
        x[j] = 1;
        for(k=Ai[j];k<Ai[j+1];++k) dfs(Aj[k]);
        xj[n] = j;
        ++n;
    }
    var i,j,j0,j1,k,l,l0,l1,a;
    for(i=bj.length-1;i!==-1;--i) { dfs(bj[i]); }
    xj.length = n;
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=bj.length-1;i!==-1;--i) { j = bj[i]; x[j] = b[j]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = max(Ai[j+1],j0);
        for(k=j0;k!==j1;++k) { if(Aj[k] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k!==j1;++k) {
            l = Aj[k];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsDFS = function ccsDFS(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[J];
    k1[0] = k11 = Ai[J+1];
    while(1) {
        if(km >= k11) {
            xj[n] = j[m];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Pinv[Aj[km]];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve = function ccsLPSolve(A,B,x,xj,I,Pinv,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Pinv[Bj[i]],Ai,Aj,x,xj,Pinv); }
    for(i=xj.length-1;i!==-1;--i) { x[xj[i]] = 0; }
    for(i=i0;i!==i1;++i) { j = Pinv[Bj[i]]; x[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Pinv[Aj[k]] === j) { x[j] /= Av[k]; break; } }
        a = x[j];
        for(k=j0;k<j1;++k) {
            l = Pinv[Aj[k]];
            if(l !== j) x[l] -= a*Av[k];
        }
    }
    return x;
}
numeric.ccsLUP1 = function ccsLUP1(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var x = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,x,xj,i,Pinv,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(x[k]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(x[i])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
            a = x[i]; x[i] = x[e]; x[e] = a;
        }
        a = Li[i];
        e = Ui[i];
        d = x[i];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = x[k];
            xj[j] = 0;
            x[k] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsDFS0 = function ccsDFS0(n) {
    this.k = Array(n);
    this.k1 = Array(n);
    this.j = Array(n);
}
numeric.ccsDFS0.prototype.dfs = function dfs(J,Ai,Aj,x,xj,Pinv,P) {
    var m = 0,foo,n=xj.length;
    var k = this.k, k1 = this.k1, j = this.j,km,k11;
    if(x[J]!==0) return;
    x[J] = 1;
    j[0] = J;
    k[0] = km = Ai[Pinv[J]];
    k1[0] = k11 = Ai[Pinv[J]+1];
    while(1) {
        if(isNaN(km)) throw new Error("Ow!");
        if(km >= k11) {
            xj[n] = Pinv[j[m]];
            if(m===0) return;
            ++n;
            --m;
            km = k[m];
            k11 = k1[m];
        } else {
            foo = Aj[km];
            if(x[foo] === 0) {
                x[foo] = 1;
                k[m] = km;
                ++m;
                j[m] = foo;
                foo = Pinv[foo];
                km = Ai[foo];
                k1[m] = k11 = Ai[foo+1];
            } else ++km;
        }
    }
}
numeric.ccsLPSolve0 = function ccsLPSolve0(A,B,y,xj,I,Pinv,P,dfs) {
    var Ai = A[0], Aj = A[1], Av = A[2],m = Ai.length-1, n=0;
    var Bi = B[0], Bj = B[1], Bv = B[2];
    
    var i,i0,i1,j,J,j0,j1,k,l,l0,l1,a;
    i0 = Bi[I];
    i1 = Bi[I+1];
    xj.length = 0;
    for(i=i0;i<i1;++i) { dfs.dfs(Bj[i],Ai,Aj,y,xj,Pinv,P); }
    for(i=xj.length-1;i!==-1;--i) { j = xj[i]; y[P[j]] = 0; }
    for(i=i0;i!==i1;++i) { j = Bj[i]; y[j] = Bv[i]; }
    for(i=xj.length-1;i!==-1;--i) {
        j = xj[i];
        l = P[j];
        j0 = Ai[j];
        j1 = Ai[j+1];
        for(k=j0;k<j1;++k) { if(Aj[k] === l) { y[l] /= Av[k]; break; } }
        a = y[l];
        for(k=j0;k<j1;++k) y[Aj[k]] -= a*Av[k];
        y[l] = a;
    }
}
numeric.ccsLUP0 = function ccsLUP0(A,threshold) {
    var m = A[0].length-1;
    var L = [numeric.rep([m+1],0),[],[]], U = [numeric.rep([m+1], 0),[],[]];
    var Li = L[0], Lj = L[1], Lv = L[2], Ui = U[0], Uj = U[1], Uv = U[2];
    var y = numeric.rep([m],0), xj = numeric.rep([m],0);
    var i,j,k,j0,j1,a,e,c,d,K;
    var sol = numeric.ccsLPSolve0, max = Math.max, abs = Math.abs;
    var P = numeric.linspace(0,m-1),Pinv = numeric.linspace(0,m-1);
    var dfs = new numeric.ccsDFS0(m);
    if(typeof threshold === "undefined") { threshold = 1; }
    for(i=0;i<m;++i) {
        sol(L,A,y,xj,i,Pinv,P,dfs);
        a = -1;
        e = -1;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            if(k <= i) continue;
            c = abs(y[P[k]]);
            if(c > a) { e = k; a = c; }
        }
        if(abs(y[P[i]])<threshold*a) {
            j = P[i];
            a = P[e];
            P[i] = a; Pinv[a] = i;
            P[e] = j; Pinv[j] = e;
        }
        a = Li[i];
        e = Ui[i];
        d = y[P[i]];
        Lj[a] = P[i];
        Lv[a] = 1;
        ++a;
        for(j=xj.length-1;j!==-1;--j) {
            k = xj[j];
            c = y[P[k]];
            xj[j] = 0;
            y[P[k]] = 0;
            if(k<=i) { Uj[e] = k; Uv[e] = c;   ++e; }
            else     { Lj[a] = P[k]; Lv[a] = c/d; ++a; }
        }
        Li[i+1] = a;
        Ui[i+1] = e;
    }
    for(j=Lj.length-1;j!==-1;--j) { Lj[j] = Pinv[Lj[j]]; }
    return {L:L, U:U, P:P, Pinv:Pinv};
}
numeric.ccsLUP = numeric.ccsLUP0;

numeric.ccsDim = function ccsDim(A) { return [numeric.sup(A[1])+1,A[0].length-1]; }
numeric.ccsGetBlock = function ccsGetBlock(A,i,j) {
    var s = numeric.ccsDim(A),m=s[0],n=s[1];
    if(typeof i === "undefined") { i = numeric.linspace(0,m-1); }
    else if(typeof i === "number") { i = [i]; }
    if(typeof j === "undefined") { j = numeric.linspace(0,n-1); }
    else if(typeof j === "number") { j = [j]; }
    var p,p0,p1,P = i.length,q,Q = j.length,r,jq,ip;
    var Bi = numeric.rep([n],0), Bj=[], Bv=[], B = [Bi,Bj,Bv];
    var Ai = A[0], Aj = A[1], Av = A[2];
    var x = numeric.rep([m],0),count=0,flags = numeric.rep([m],0);
    for(q=0;q<Q;++q) {
        jq = j[q];
        var q0 = Ai[jq];
        var q1 = Ai[jq+1];
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 1;
            x[r] = Av[p];
        }
        for(p=0;p<P;++p) {
            ip = i[p];
            if(flags[ip]) {
                Bj[count] = p;
                Bv[count] = x[i[p]];
                ++count;
            }
        }
        for(p=q0;p<q1;++p) {
            r = Aj[p];
            flags[r] = 0;
        }
        Bi[q+1] = count;
    }
    return B;
}

numeric.ccsDot = function ccsDot(A,B) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var Bi = B[0], Bj = B[1], Bv = B[2];
    var sA = numeric.ccsDim(A), sB = numeric.ccsDim(B);
    var m = sA[0], n = sA[1], o = sB[1];
    var x = numeric.rep([m],0), flags = numeric.rep([m],0), xj = Array(m);
    var Ci = numeric.rep([o],0), Cj = [], Cv = [], C = [Ci,Cj,Cv];
    var i,j,k,j0,j1,i0,i1,l,p,a,b;
    for(k=0;k!==o;++k) {
        j0 = Bi[k];
        j1 = Bi[k+1];
        p = 0;
        for(j=j0;j<j1;++j) {
            a = Bj[j];
            b = Bv[j];
            i0 = Ai[a];
            i1 = Ai[a+1];
            for(i=i0;i<i1;++i) {
                l = Aj[i];
                if(flags[l]===0) {
                    xj[p] = l;
                    flags[l] = 1;
                    p = p+1;
                }
                x[l] = x[l] + Av[i]*b;
            }
        }
        j0 = Ci[k];
        j1 = j0+p;
        Ci[k+1] = j1;
        for(j=p-1;j!==-1;--j) {
            b = j0+j;
            i = xj[j];
            Cj[b] = i;
            Cv[b] = x[i];
            flags[i] = 0;
            x[i] = 0;
        }
        Ci[k+1] = Ci[k]+p;
    }
    return C;
}

numeric.ccsLUPSolve = function ccsLUPSolve(LUP,B) {
    var L = LUP.L, U = LUP.U, P = LUP.P;
    var Bi = B[0];
    var flag = false;
    if(typeof Bi !== "object") { B = [[0,B.length],numeric.linspace(0,B.length-1),B]; Bi = B[0]; flag = true; }
    var Bj = B[1], Bv = B[2];
    var n = L[0].length-1, m = Bi.length-1;
    var x = numeric.rep([n],0), xj = Array(n);
    var b = numeric.rep([n],0), bj = Array(n);
    var Xi = numeric.rep([m+1],0), Xj = [], Xv = [];
    var sol = numeric.ccsTSolve;
    var i,j,j0,j1,k,J,N=0;
    for(i=0;i<m;++i) {
        k = 0;
        j0 = Bi[i];
        j1 = Bi[i+1];
        for(j=j0;j<j1;++j) { 
            J = LUP.Pinv[Bj[j]];
            bj[k] = J;
            b[J] = Bv[j];
            ++k;
        }
        bj.length = k;
        sol(L,b,x,bj,xj);
        for(j=bj.length-1;j!==-1;--j) b[bj[j]] = 0;
        sol(U,x,b,xj,bj);
        if(flag) return b;
        for(j=xj.length-1;j!==-1;--j) x[xj[j]] = 0;
        for(j=bj.length-1;j!==-1;--j) {
            J = bj[j];
            Xj[N] = J;
            Xv[N] = b[J];
            b[J] = 0;
            ++N;
        }
        Xi[i+1] = N;
    }
    return [Xi,Xj,Xv];
}

numeric.ccsbinop = function ccsbinop(body,setup) {
    if(typeof setup === "undefined") setup='';
    return Function('X','Y',
            'var Xi = X[0], Xj = X[1], Xv = X[2];\n'+
            'var Yi = Y[0], Yj = Y[1], Yv = Y[2];\n'+
            'var n = Xi.length-1,m = Math.max(numeric.sup(Xj),numeric.sup(Yj))+1;\n'+
            'var Zi = numeric.rep([n+1],0), Zj = [], Zv = [];\n'+
            'var x = numeric.rep([m],0),y = numeric.rep([m],0);\n'+
            'var xk,yk,zk;\n'+
            'var i,j,j0,j1,k,p=0;\n'+
            setup+
            'for(i=0;i<n;++i) {\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Xj[j];\n'+
            '    x[k] = 1;\n'+
            '    Zj[p] = k;\n'+
            '    ++p;\n'+
            '  }\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Yj[j];\n'+
            '    y[k] = Yv[j];\n'+
            '    if(x[k] === 0) {\n'+
            '      Zj[p] = k;\n'+
            '      ++p;\n'+
            '    }\n'+
            '  }\n'+
            '  Zi[i+1] = p;\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = Xv[j];\n'+
            '  j0 = Zi[i]; j1 = Zi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) {\n'+
            '    k = Zj[j];\n'+
            '    xk = x[k];\n'+
            '    yk = y[k];\n'+
            body+'\n'+
            '    Zv[j] = zk;\n'+
            '  }\n'+
            '  j0 = Xi[i]; j1 = Xi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) x[Xj[j]] = 0;\n'+
            '  j0 = Yi[i]; j1 = Yi[i+1];\n'+
            '  for(j=j0;j!==j1;++j) y[Yj[j]] = 0;\n'+
            '}\n'+
            'return [Zi,Zj,Zv];'
            );
};

(function() {
    var k,A,B,C;
    for(k in numeric.ops2) {
        if(isFinite(eval('1'+numeric.ops2[k]+'0'))) A = '[Y[0],Y[1],numeric.'+k+'(X,Y[2])]';
        else A = 'NaN';
        if(isFinite(eval('0'+numeric.ops2[k]+'1'))) B = '[X[0],X[1],numeric.'+k+'(X[2],Y)]';
        else B = 'NaN';
        if(isFinite(eval('1'+numeric.ops2[k]+'0')) && isFinite(eval('0'+numeric.ops2[k]+'1'))) C = 'numeric.ccs'+k+'MM(X,Y)';
        else C = 'NaN';
        numeric['ccs'+k+'MM'] = numeric.ccsbinop('zk = xk '+numeric.ops2[k]+'yk;');
        numeric['ccs'+k] = Function('X','Y',
                'if(typeof X === "number") return '+A+';\n'+
                'if(typeof Y === "number") return '+B+';\n'+
                'return '+C+';\n'
                );
    }
}());

numeric.ccsScatter = function ccsScatter(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = numeric.sup(Aj)+1,m=Ai.length;
    var Ri = numeric.rep([n],0),Rj=Array(m), Rv = Array(m);
    var counts = numeric.rep([n],0),i;
    for(i=0;i<m;++i) counts[Aj[i]]++;
    for(i=0;i<n;++i) Ri[i+1] = Ri[i] + counts[i];
    var ptr = Ri.slice(0),k,Aii;
    for(i=0;i<m;++i) {
        Aii = Aj[i];
        k = ptr[Aii];
        Rj[k] = Ai[i];
        Rv[k] = Av[i];
        ptr[Aii]=ptr[Aii]+1;
    }
    return [Ri,Rj,Rv];
}

numeric.ccsGather = function ccsGather(A) {
    var Ai = A[0], Aj = A[1], Av = A[2];
    var n = Ai.length-1,m = Aj.length;
    var Ri = Array(m), Rj = Array(m), Rv = Array(m);
    var i,j,j0,j1,p;
    p=0;
    for(i=0;i<n;++i) {
        j0 = Ai[i];
        j1 = Ai[i+1];
        for(j=j0;j!==j1;++j) {
            Rj[p] = i;
            Ri[p] = Aj[j];
            Rv[p] = Av[j];
            ++p;
        }
    }
    return [Ri,Rj,Rv];
}

// The following sparse linear algebra routines are deprecated.

numeric.sdim = function dim(A,ret,k) {
    if(typeof ret === "undefined") { ret = []; }
    if(typeof A !== "object") return ret;
    if(typeof k === "undefined") { k=0; }
    if(!(k in ret)) { ret[k] = 0; }
    if(A.length > ret[k]) ret[k] = A.length;
    var i;
    for(i in A) {
        if(A.hasOwnProperty(i)) dim(A[i],ret,k+1);
    }
    return ret;
};

numeric.sclone = function clone(A,k,n) {
    if(typeof k === "undefined") { k=0; }
    if(typeof n === "undefined") { n = numeric.sdim(A).length; }
    var i,ret = Array(A.length);
    if(k === n-1) {
        for(i in A) { if(A.hasOwnProperty(i)) ret[i] = A[i]; }
        return ret;
    }
    for(i in A) {
        if(A.hasOwnProperty(i)) ret[i] = clone(A[i],k+1,n);
    }
    return ret;
}

numeric.sdiag = function diag(d) {
    var n = d.length,i,ret = Array(n),i1,i2,i3;
    for(i=n-1;i>=1;i-=2) {
        i1 = i-1;
        ret[i] = []; ret[i][i] = d[i];
        ret[i1] = []; ret[i1][i1] = d[i1];
    }
    if(i===0) { ret[0] = []; ret[0][0] = d[i]; }
    return ret;
}

numeric.sidentity = function identity(n) { return numeric.sdiag(numeric.rep([n],1)); }

numeric.stranspose = function transpose(A) {
    var ret = [], n = A.length, i,j,Ai;
    for(i in A) {
        if(!(A.hasOwnProperty(i))) continue;
        Ai = A[i];
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(typeof ret[j] !== "object") { ret[j] = []; }
            ret[j][i] = Ai[j];
        }
    }
    return ret;
}

numeric.sLUP = function LUP(A,tol) {
    throw new Error("The function numeric.sLUP had a bug in it and has been removed. Please use the new numeric.ccsLUP function instead.");
};

numeric.sdotMM = function dotMM(A,B) {
    var p = A.length, q = B.length, BT = numeric.stranspose(B), r = BT.length, Ai, BTk;
    var i,j,k,accum;
    var ret = Array(p),reti;
    for(i=p-1;i>=0;i--) {
        reti = [];
        Ai = A[i];
        for(k=r-1;k>=0;k--) {
            accum = 0;
            BTk = BT[k];
            for(j in Ai) {
                if(!(Ai.hasOwnProperty(j))) continue;
                if(j in BTk) { accum += Ai[j]*BTk[j]; }
            }
            if(accum) reti[k] = accum;
        }
        ret[i] = reti;
    }
    return ret;
}

numeric.sdotMV = function dotMV(A,x) {
    var p = A.length, Ai, i,j;
    var ret = Array(p), accum;
    for(i=p-1;i>=0;i--) {
        Ai = A[i];
        accum = 0;
        for(j in Ai) {
            if(!(Ai.hasOwnProperty(j))) continue;
            if(x[j]) accum += Ai[j]*x[j];
        }
        if(accum) ret[i] = accum;
    }
    return ret;
}

numeric.sdotVM = function dotMV(x,A) {
    var i,j,Ai,alpha;
    var ret = [], accum;
    for(i in x) {
        if(!x.hasOwnProperty(i)) continue;
        Ai = A[i];
        alpha = x[i];
        for(j in Ai) {
            if(!Ai.hasOwnProperty(j)) continue;
            if(!ret[j]) { ret[j] = 0; }
            ret[j] += alpha*Ai[j];
        }
    }
    return ret;
}

numeric.sdotVV = function dotVV(x,y) {
    var i,ret=0;
    for(i in x) { if(x[i] && y[i]) ret+= x[i]*y[i]; }
    return ret;
}

numeric.sdot = function dot(A,B) {
    var m = numeric.sdim(A).length, n = numeric.sdim(B).length;
    var k = m*1000+n;
    switch(k) {
    case 0: return A*B;
    case 1001: return numeric.sdotVV(A,B);
    case 2001: return numeric.sdotMV(A,B);
    case 1002: return numeric.sdotVM(A,B);
    case 2002: return numeric.sdotMM(A,B);
    default: throw new Error('numeric.sdot not implemented for tensors of order '+m+' and '+n);
    }
}

numeric.sscatter = function scatter(V) {
    var n = V[0].length, Vij, i, j, m = V.length, A = [], Aj;
    for(i=n-1;i>=0;--i) {
        if(!V[m-1][i]) continue;
        Aj = A;
        for(j=0;j<m-2;j++) {
            Vij = V[j][i];
            if(!Aj[Vij]) Aj[Vij] = [];
            Aj = Aj[Vij];
        }
        Aj[V[j][i]] = V[j+1][i];
    }
    return A;
}

numeric.sgather = function gather(A,ret,k) {
    if(typeof ret === "undefined") ret = [];
    if(typeof k === "undefined") k = [];
    var n,i,Ai;
    n = k.length;
    for(i in A) {
        if(A.hasOwnProperty(i)) {
            k[n] = parseInt(i);
            Ai = A[i];
            if(typeof Ai === "number") {
                if(Ai) {
                    if(ret.length === 0) {
                        for(i=n+1;i>=0;--i) ret[i] = [];
                    }
                    for(i=n;i>=0;--i) ret[i].push(k[i]);
                    ret[n+1].push(Ai);
                }
            } else gather(Ai,ret,k);
        }
    }
    if(k.length>n) k.pop();
    return ret;
}

// 6. Coordinate matrices
numeric.cLU = function LU(A) {
    var I = A[0], J = A[1], V = A[2];
    var p = I.length, m=0, i,j,k,a,b,c;
    for(i=0;i<p;i++) if(I[i]>m) m=I[i];
    m++;
    var L = Array(m), U = Array(m), left = numeric.rep([m],Infinity), right = numeric.rep([m],-Infinity);
    var Ui, Uj,alpha;
    for(k=0;k<p;k++) {
        i = I[k];
        j = J[k];
        if(j<left[i]) left[i] = j;
        if(j>right[i]) right[i] = j;
    }
    for(i=0;i<m-1;i++) { if(right[i] > right[i+1]) right[i+1] = right[i]; }
    for(i=m-1;i>=1;i--) { if(left[i]<left[i-1]) left[i-1] = left[i]; }
    var countL = 0, countU = 0;
    for(i=0;i<m;i++) {
        U[i] = numeric.rep([right[i]-left[i]+1],0);
        L[i] = numeric.rep([i-left[i]],0);
        countL += i-left[i]+1;
        countU += right[i]-i+1;
    }
    for(k=0;k<p;k++) { i = I[k]; U[i][J[k]-left[i]] = V[k]; }
    for(i=0;i<m-1;i++) {
        a = i-left[i];
        Ui = U[i];
        for(j=i+1;left[j]<=i && j<m;j++) {
            b = i-left[j];
            c = right[i]-i;
            Uj = U[j];
            alpha = Uj[b]/Ui[a];
            if(alpha) {
                for(k=1;k<=c;k++) { Uj[k+b] -= alpha*Ui[k+a]; }
                L[j][i-left[j]] = alpha;
            }
        }
    }
    var Ui = [], Uj = [], Uv = [], Li = [], Lj = [], Lv = [];
    var p,q,foo;
    p=0; q=0;
    for(i=0;i<m;i++) {
        a = left[i];
        b = right[i];
        foo = U[i];
        for(j=i;j<=b;j++) {
            if(foo[j-a]) {
                Ui[p] = i;
                Uj[p] = j;
                Uv[p] = foo[j-a];
                p++;
            }
        }
        foo = L[i];
        for(j=a;j<i;j++) {
            if(foo[j-a]) {
                Li[q] = i;
                Lj[q] = j;
                Lv[q] = foo[j-a];
                q++;
            }
        }
        Li[q] = i;
        Lj[q] = i;
        Lv[q] = 1;
        q++;
    }
    return {U:[Ui,Uj,Uv], L:[Li,Lj,Lv]};
};

numeric.cLUsolve = function LUsolve(lu,b) {
    var L = lu.L, U = lu.U, ret = numeric.clone(b);
    var Li = L[0], Lj = L[1], Lv = L[2];
    var Ui = U[0], Uj = U[1], Uv = U[2];
    var p = Ui.length, q = Li.length;
    var m = ret.length,i,j,k;
    k = 0;
    for(i=0;i<m;i++) {
        while(Lj[k] < i) {
            ret[i] -= Lv[k]*ret[Lj[k]];
            k++;
        }
        k++;
    }
    k = p-1;
    for(i=m-1;i>=0;i--) {
        while(Uj[k] > i) {
            ret[i] -= Uv[k]*ret[Uj[k]];
            k--;
        }
        ret[i] /= Uv[k];
        k--;
    }
    return ret;
};

numeric.cgrid = function grid(n,shape) {
    if(typeof n === "number") n = [n,n];
    var ret = numeric.rep(n,-1);
    var i,j,count;
    if(typeof shape !== "function") {
        switch(shape) {
        case 'L':
            shape = function(i,j) { return (i>=n[0]/2 || j<n[1]/2); }
            break;
        default:
            shape = function(i,j) { return true; };
            break;
        }
    }
    count=0;
    for(i=1;i<n[0]-1;i++) for(j=1;j<n[1]-1;j++) 
        if(shape(i,j)) {
            ret[i][j] = count;
            count++;
        }
    return ret;
}

numeric.cdelsq = function delsq(g) {
    var dir = [[-1,0],[0,-1],[0,1],[1,0]];
    var s = numeric.dim(g), m = s[0], n = s[1], i,j,k,p,q;
    var Li = [], Lj = [], Lv = [];
    for(i=1;i<m-1;i++) for(j=1;j<n-1;j++) {
        if(g[i][j]<0) continue;
        for(k=0;k<4;k++) {
            p = i+dir[k][0];
            q = j+dir[k][1];
            if(g[p][q]<0) continue;
            Li.push(g[i][j]);
            Lj.push(g[p][q]);
            Lv.push(-1);
        }
        Li.push(g[i][j]);
        Lj.push(g[i][j]);
        Lv.push(4);
    }
    return [Li,Lj,Lv];
}

numeric.cdotMV = function dotMV(A,x) {
    var ret, Ai = A[0], Aj = A[1], Av = A[2],k,p=Ai.length,N;
    N=0;
    for(k=0;k<p;k++) { if(Ai[k]>N) N = Ai[k]; }
    N++;
    ret = numeric.rep([N],0);
    for(k=0;k<p;k++) { ret[Ai[k]]+=Av[k]*x[Aj[k]]; }
    return ret;
}

// 7. Splines

numeric.Spline = function Spline(x,yl,yr,kl,kr) { this.x = x; this.yl = yl; this.yr = yr; this.kl = kl; this.kr = kr; }
numeric.Spline.prototype._at = function _at(x1,p) {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var x1,a,b,t;
    var add = numeric.add, sub = numeric.sub, mul = numeric.mul;
    a = sub(mul(kl[p],x[p+1]-x[p]),sub(yr[p+1],yl[p]));
    b = add(mul(kr[p+1],x[p]-x[p+1]),sub(yr[p+1],yl[p]));
    t = (x1-x[p])/(x[p+1]-x[p]);
    var s = t*(1-t);
    return add(add(add(mul(1-t,yl[p]),mul(t,yr[p+1])),mul(a,s*(1-t))),mul(b,s*t));
}
numeric.Spline.prototype.at = function at(x0) {
    if(typeof x0 === "number") {
        var x = this.x;
        var n = x.length;
        var p,q,mid,floor = Math.floor,a,b,t;
        p = 0;
        q = n-1;
        while(q-p>1) {
            mid = floor((p+q)/2);
            if(x[mid] <= x0) p = mid;
            else q = mid;
        }
        return this._at(x0,p);
    }
    var n = x0.length, i, ret = Array(n);
    for(i=n-1;i!==-1;--i) ret[i] = this.at(x0[i]);
    return ret;
}
numeric.Spline.prototype.diff = function diff() {
    var x = this.x;
    var yl = this.yl;
    var yr = this.yr;
    var kl = this.kl;
    var kr = this.kr;
    var n = yl.length;
    var i,dx,dy;
    var zl = kl, zr = kr, pl = Array(n), pr = Array(n);
    var add = numeric.add, mul = numeric.mul, div = numeric.div, sub = numeric.sub;
    for(i=n-1;i!==-1;--i) {
        dx = x[i+1]-x[i];
        dy = sub(yr[i+1],yl[i]);
        pl[i] = div(add(mul(dy, 6),mul(kl[i],-4*dx),mul(kr[i+1],-2*dx)),dx*dx);
        pr[i+1] = div(add(mul(dy,-6),mul(kl[i], 2*dx),mul(kr[i+1], 4*dx)),dx*dx);
    }
    return new numeric.Spline(x,zl,zr,pl,pr);
}
numeric.Spline.prototype.roots = function roots() {
    function sqr(x) { return x*x; }
    function heval(y0,y1,k0,k1,x) {
        var A = k0*2-(y1-y0);
        var B = -k1*2+(y1-y0);
        var t = (x+1)*0.5;
        var s = t*(1-t);
        return (1-t)*y0+t*y1+A*s*(1-t)+B*s*t;
    }
    var ret = [];
    var x = this.x, yl = this.yl, yr = this.yr, kl = this.kl, kr = this.kr;
    if(typeof yl[0] === "number") {
        yl = [yl];
        yr = [yr];
        kl = [kl];
        kr = [kr];
    }
    var m = yl.length,n=x.length-1,i,j,k,y,s,t;
    var ai,bi,ci,di, ret = Array(m),ri,k0,k1,y0,y1,A,B,D,dx,cx,stops,z0,z1,zm,t0,t1,tm;
    var sqrt = Math.sqrt;
    for(i=0;i!==m;++i) {
        ai = yl[i];
        bi = yr[i];
        ci = kl[i];
        di = kr[i];
        ri = [];
        for(j=0;j!==n;j++) {
            if(j>0 && bi[j]*ai[j]<0) ri.push(x[j]);
            dx = (x[j+1]-x[j]);
            cx = x[j];
            y0 = ai[j];
            y1 = bi[j+1];
            k0 = ci[j]/dx;
            k1 = di[j+1]/dx;
            D = sqr(k0-k1+3*(y0-y1)) + 12*k1*y0;
            A = k1+3*y0+2*k0-3*y1;
            B = 3*(k1+k0+2*(y0-y1));
            if(D<=0) {
                z0 = A/B;
                if(z0>x[j] && z0<x[j+1]) stops = [x[j],z0,x[j+1]];
                else stops = [x[j],x[j+1]];
            } else {
                z0 = (A-sqrt(D))/B;
                z1 = (A+sqrt(D))/B;
                stops = [x[j]];
                if(z0>x[j] && z0<x[j+1]) stops.push(z0);
                if(z1>x[j] && z1<x[j+1]) stops.push(z1);
                stops.push(x[j+1]);
            }
            t0 = stops[0];
            z0 = this._at(t0,j);
            for(k=0;k<stops.length-1;k++) {
                t1 = stops[k+1];
                z1 = this._at(t1,j);
                if(z0 === 0) {
                    ri.push(t0); 
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                if(z1 === 0 || z0*z1>0) {
                    t0 = t1;
                    z0 = z1;
                    continue;
                }
                var side = 0;
                while(1) {
                    tm = (z0*t1-z1*t0)/(z0-z1);
                    if(tm <= t0 || tm >= t1) { break; }
                    zm = this._at(tm,j);
                    if(zm*z1>0) {
                        t1 = tm;
                        z1 = zm;
                        if(side === -1) z0*=0.5;
                        side = -1;
                    } else if(zm*z0>0) {
                        t0 = tm;
                        z0 = zm;
                        if(side === 1) z1*=0.5;
                        side = 1;
                    } else break;
                }
                ri.push(tm);
                t0 = stops[k+1];
                z0 = this._at(t0, j);
            }
            if(z1 === 0) ri.push(t1);
        }
        ret[i] = ri;
    }
    if(typeof this.yl[0] === "number") return ret[0];
    return ret;
}
numeric.spline = function spline(x,y,k1,kn) {
    var n = x.length, b = [], dx = [], dy = [];
    var i;
    var sub = numeric.sub,mul = numeric.mul,add = numeric.add;
    for(i=n-2;i>=0;i--) { dx[i] = x[i+1]-x[i]; dy[i] = sub(y[i+1],y[i]); }
    if(typeof k1 === "string" || typeof kn === "string") { 
        k1 = kn = "periodic";
    }
    // Build sparse tridiagonal system
    var T = [[],[],[]];
    switch(typeof k1) {
    case "undefined":
        b[0] = mul(3/(dx[0]*dx[0]),dy[0]);
        T[0].push(0,0);
        T[1].push(0,1);
        T[2].push(2/dx[0],1/dx[0]);
        break;
    case "string":
        b[0] = add(mul(3/(dx[n-2]*dx[n-2]),dy[n-2]),mul(3/(dx[0]*dx[0]),dy[0]));
        T[0].push(0,0,0);
        T[1].push(n-2,0,1);
        T[2].push(1/dx[n-2],2/dx[n-2]+2/dx[0],1/dx[0]);
        break;
    default:
        b[0] = k1;
        T[0].push(0);
        T[1].push(0);
        T[2].push(1);
        break;
    }
    for(i=1;i<n-1;i++) {
        b[i] = add(mul(3/(dx[i-1]*dx[i-1]),dy[i-1]),mul(3/(dx[i]*dx[i]),dy[i]));
        T[0].push(i,i,i);
        T[1].push(i-1,i,i+1);
        T[2].push(1/dx[i-1],2/dx[i-1]+2/dx[i],1/dx[i]);
    }
    switch(typeof kn) {
    case "undefined":
        b[n-1] = mul(3/(dx[n-2]*dx[n-2]),dy[n-2]);
        T[0].push(n-1,n-1);
        T[1].push(n-2,n-1);
        T[2].push(1/dx[n-2],2/dx[n-2]);
        break;
    case "string":
        T[1][T[1].length-1] = 0;
        break;
    default:
        b[n-1] = kn;
        T[0].push(n-1);
        T[1].push(n-1);
        T[2].push(1);
        break;
    }
    if(typeof b[0] !== "number") b = numeric.transpose(b);
    else b = [b];
    var k = Array(b.length);
    if(typeof k1 === "string") {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.ccsLUPSolve(numeric.ccsLUP(numeric.ccsScatter(T)),b[i]);
            k[i][n-1] = k[i][0];
        }
    } else {
        for(i=k.length-1;i!==-1;--i) {
            k[i] = numeric.cLUsolve(numeric.cLU(T),b[i]);
        }
    }
    if(typeof y[0] === "number") k = k[0];
    else k = numeric.transpose(k);
    return new numeric.Spline(x,y,y,k,k);
}

// 8. FFT
numeric.fftpow2 = function fftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    fftpow2(xe,ye);
    fftpow2(xo,yo);
    j = n/2;
    var t,k = (-6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric._ifftpow2 = function _ifftpow2(x,y) {
    var n = x.length;
    if(n === 1) return;
    var cos = Math.cos, sin = Math.sin, i,j;
    var xe = Array(n/2), ye = Array(n/2), xo = Array(n/2), yo = Array(n/2);
    j = n/2;
    for(i=n-1;i!==-1;--i) {
        --j;
        xo[j] = x[i];
        yo[j] = y[i];
        --i;
        xe[j] = x[i];
        ye[j] = y[i];
    }
    _ifftpow2(xe,ye);
    _ifftpow2(xo,yo);
    j = n/2;
    var t,k = (6.2831853071795864769252867665590057683943387987502116419/n),ci,si;
    for(i=n-1;i!==-1;--i) {
        --j;
        if(j === -1) j = n/2-1;
        t = k*i;
        ci = cos(t);
        si = sin(t);
        x[i] = xe[j] + ci*xo[j] - si*yo[j];
        y[i] = ye[j] + ci*yo[j] + si*xo[j];
    }
}
numeric.ifftpow2 = function ifftpow2(x,y) {
    numeric._ifftpow2(x,y);
    numeric.diveq(x,x.length);
    numeric.diveq(y,y.length);
}
numeric.convpow2 = function convpow2(ax,ay,bx,by) {
    numeric.fftpow2(ax,ay);
    numeric.fftpow2(bx,by);
    var i,n = ax.length,axi,bxi,ayi,byi;
    for(i=n-1;i!==-1;--i) {
        axi = ax[i]; ayi = ay[i]; bxi = bx[i]; byi = by[i];
        ax[i] = axi*bxi-ayi*byi;
        ay[i] = axi*byi+ayi*bxi;
    }
    numeric.ifftpow2(ax,ay);
}
numeric.T.prototype.fft = function fft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (-3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X;
}
numeric.T.prototype.ifft = function ifft() {
    var x = this.x, y = this.y;
    var n = x.length, log = Math.log, log2 = log(2),
        p = Math.ceil(log(2*n-1)/log2), m = Math.pow(2,p);
    var cx = numeric.rep([m],0), cy = numeric.rep([m],0), cos = Math.cos, sin = Math.sin;
    var k, c = (3.141592653589793238462643383279502884197169399375105820/n),t;
    var a = numeric.rep([m],0), b = numeric.rep([m],0),nhalf = Math.floor(n/2);
    for(k=0;k<n;k++) a[k] = x[k];
    if(typeof y !== "undefined") for(k=0;k<n;k++) b[k] = y[k];
    cx[0] = 1;
    for(k=1;k<=m/2;k++) {
        t = c*k*k;
        cx[k] = cos(t);
        cy[k] = sin(t);
        cx[m-k] = cos(t);
        cy[m-k] = sin(t)
    }
    var X = new numeric.T(a,b), Y = new numeric.T(cx,cy);
    X = X.mul(Y);
    numeric.convpow2(X.x,X.y,numeric.clone(Y.x),numeric.neg(Y.y));
    X = X.mul(Y);
    X.x.length = n;
    X.y.length = n;
    return X.div(n);
}

//9. Unconstrained optimization
numeric.gradient = function gradient(f,x) {
    var n = x.length;
    var f0 = f(x);
    if(isNaN(f0)) throw new Error('gradient: f(x) is a NaN!');
    var max = Math.max;
    var i,x0 = numeric.clone(x),f1,f2, J = Array(n);
    var div = numeric.div, sub = numeric.sub,errest,roundoff,max = Math.max,eps = 1e-3,abs = Math.abs, min = Math.min;
    var t0,t1,t2,it=0,d1,d2,N;
    for(i=0;i<n;i++) {
        var h = max(1e-6*f0,1e-8);
        while(1) {
            ++it;
            if(it>20) { throw new Error("Numerical gradient fails"); }
            x0[i] = x[i]+h;
            f1 = f(x0);
            x0[i] = x[i]-h;
            f2 = f(x0);
            x0[i] = x[i];
            if(isNaN(f1) || isNaN(f2)) { h/=16; continue; }
            J[i] = (f1-f2)/(2*h);
            t0 = x[i]-h;
            t1 = x[i];
            t2 = x[i]+h;
            d1 = (f1-f0)/h;
            d2 = (f0-f2)/h;
            N = max(abs(J[i]),abs(f0),abs(f1),abs(f2),abs(t0),abs(t1),abs(t2),1e-8);
            errest = min(max(abs(d1-J[i]),abs(d2-J[i]),abs(d1-d2))/N,h/N);
            if(errest>eps) { h/=16; }
            else break;
            }
    }
    return J;
}

numeric.uncmin = function uncmin(f,x0,tol,gradient,maxit,callback,options) {
    var grad = numeric.gradient;
    if(typeof options === "undefined") { options = {}; }
    if(typeof tol === "undefined") { tol = 1e-8; }
    if(typeof gradient === "undefined") { gradient = function(x) { return grad(f,x); }; }
    if(typeof maxit === "undefined") maxit = 1000;
    x0 = numeric.clone(x0);
    var n = x0.length;
    var f0 = f(x0),f1,df0;
    if(isNaN(f0)) throw new Error('uncmin: f(x0) is a NaN!');
    var max = Math.max, norm2 = numeric.norm2;
    tol = max(tol,numeric.epsilon);
    var step,g0,g1,H1 = options.Hinv || numeric.identity(n);
    var dot = numeric.dot, inv = numeric.inv, sub = numeric.sub, add = numeric.add, ten = numeric.tensor, div = numeric.div, mul = numeric.mul;
    var all = numeric.all, isfinite = numeric.isFinite, neg = numeric.neg;
    var it=0,i,s,x1,y,Hy,Hs,ys,i0,t,nstep,t1,t2;
    var msg = "";
    g0 = gradient(x0);
    while(it<maxit) {
        if(typeof callback === "function") { if(callback(it,x0,f0,g0,H1)) { msg = "Callback returned true"; break; } }
        if(!all(isfinite(g0))) { msg = "Gradient has Infinity or NaN"; break; }
        step = neg(dot(H1,g0));
        if(!all(isfinite(step))) { msg = "Search direction has Infinity or NaN"; break; }
        nstep = norm2(step);
        if(nstep < tol) { msg="Newton step smaller than tol"; break; }
        t = 1;
        df0 = dot(g0,step);
        // line search
        x1 = x0;
        while(it < maxit) {
            if(t*nstep < tol) { break; }
            s = mul(step,t);
            x1 = add(x0,s);
            f1 = f(x1);
            if(f1-f0 >= 0.1*t*df0 || isNaN(f1)) {
                t *= 0.5;
                ++it;
                continue;
            }
            break;
        }
        if(t*nstep < tol) { msg = "Line search step size smaller than tol"; break; }
        if(it === maxit) { msg = "maxit reached during line search"; break; }
        g1 = gradient(x1);
        y = sub(g1,g0);
        ys = dot(y,s);
        Hy = dot(H1,y);
        H1 = sub(add(H1,
                mul(
                        (ys+dot(y,Hy))/(ys*ys),
                        ten(s,s)    )),
                div(add(ten(Hy,s),ten(s,Hy)),ys));
        x0 = x1;
        f0 = f1;
        g0 = g1;
        ++it;
    }
    return {solution: x0, f: f0, gradient: g0, invHessian: H1, iterations:it, message: msg};
}

// 10. Ode solver (Dormand-Prince)
numeric.Dopri = function Dopri(x,y,f,ymid,iterations,msg,events) {
    this.x = x;
    this.y = y;
    this.f = f;
    this.ymid = ymid;
    this.iterations = iterations;
    this.events = events;
    this.message = msg;
}
numeric.Dopri.prototype._at = function _at(xi,j) {
    function sqr(x) { return x*x; }
    var sol = this;
    var xs = sol.x;
    var ys = sol.y;
    var k1 = sol.f;
    var ymid = sol.ymid;
    var n = xs.length;
    var x0,x1,xh,y0,y1,yh,xi;
    var floor = Math.floor,h;
    var c = 0.5;
    var add = numeric.add, mul = numeric.mul,sub = numeric.sub, p,q,w;
    x0 = xs[j];
    x1 = xs[j+1];
    y0 = ys[j];
    y1 = ys[j+1];
    h  = x1-x0;
    xh = x0+c*h;
    yh = ymid[j];
    p = sub(k1[j  ],mul(y0,1/(x0-xh)+2/(x0-x1)));
    q = sub(k1[j+1],mul(y1,1/(x1-xh)+2/(x1-x0)));
    w = [sqr(xi - x1) * (xi - xh) / sqr(x0 - x1) / (x0 - xh),
         sqr(xi - x0) * sqr(xi - x1) / sqr(x0 - xh) / sqr(x1 - xh),
         sqr(xi - x0) * (xi - xh) / sqr(x1 - x0) / (x1 - xh),
         (xi - x0) * sqr(xi - x1) * (xi - xh) / sqr(x0-x1) / (x0 - xh),
         (xi - x1) * sqr(xi - x0) * (xi - xh) / sqr(x0-x1) / (x1 - xh)];
    return add(add(add(add(mul(y0,w[0]),
                           mul(yh,w[1])),
                           mul(y1,w[2])),
                           mul( p,w[3])),
                           mul( q,w[4]));
}
numeric.Dopri.prototype.at = function at(x) {
    var i,j,k,floor = Math.floor;
    if(typeof x !== "number") {
        var n = x.length, ret = Array(n);
        for(i=n-1;i!==-1;--i) {
            ret[i] = this.at(x[i]);
        }
        return ret;
    }
    var x0 = this.x;
    i = 0; j = x0.length-1;
    while(j-i>1) {
        k = floor(0.5*(i+j));
        if(x0[k] <= x) i = k;
        else j = k;
    }
    return this._at(x,i);
}

numeric.dopri = function dopri(x0,x1,y0,f,tol,maxit,event) {
    if(typeof tol === "undefined") { tol = 1e-6; }
    if(typeof maxit === "undefined") { maxit = 1000; }
    var xs = [x0], ys = [y0], k1 = [f(x0,y0)], k2,k3,k4,k5,k6,k7, ymid = [];
    var A2 = 1/5;
    var A3 = [3/40,9/40];
    var A4 = [44/45,-56/15,32/9];
    var A5 = [19372/6561,-25360/2187,64448/6561,-212/729];
    var A6 = [9017/3168,-355/33,46732/5247,49/176,-5103/18656];
    var b = [35/384,0,500/1113,125/192,-2187/6784,11/84];
    var bm = [0.5*6025192743/30085553152,
              0,
              0.5*51252292925/65400821598,
              0.5*-2691868925/45128329728,
              0.5*187940372067/1594534317056,
              0.5*-1776094331/19743644256,
              0.5*11237099/235043384];
    var c = [1/5,3/10,4/5,8/9,1,1];
    var e = [-71/57600,0,71/16695,-71/1920,17253/339200,-22/525,1/40];
    var i = 0,er,j;
    var h = (x1-x0)/10;
    var it = 0;
    var add = numeric.add, mul = numeric.mul, y1,erinf;
    var max = Math.max, min = Math.min, abs = Math.abs, norminf = numeric.norminf,pow = Math.pow;
    var any = numeric.any, lt = numeric.lt, and = numeric.and, sub = numeric.sub;
    var e0, e1, ev;
    var ret = new numeric.Dopri(xs,ys,k1,ymid,-1,"");
    if(typeof event === "function") e0 = event(x0,y0);
    while(x0<x1 && it<maxit) {
        ++it;
        if(x0+h>x1) h = x1-x0;
        k2 = f(x0+c[0]*h,                add(y0,mul(   A2*h,k1[i])));
        k3 = f(x0+c[1]*h,            add(add(y0,mul(A3[0]*h,k1[i])),mul(A3[1]*h,k2)));
        k4 = f(x0+c[2]*h,        add(add(add(y0,mul(A4[0]*h,k1[i])),mul(A4[1]*h,k2)),mul(A4[2]*h,k3)));
        k5 = f(x0+c[3]*h,    add(add(add(add(y0,mul(A5[0]*h,k1[i])),mul(A5[1]*h,k2)),mul(A5[2]*h,k3)),mul(A5[3]*h,k4)));
        k6 = f(x0+c[4]*h,add(add(add(add(add(y0,mul(A6[0]*h,k1[i])),mul(A6[1]*h,k2)),mul(A6[2]*h,k3)),mul(A6[3]*h,k4)),mul(A6[4]*h,k5)));
        y1 = add(add(add(add(add(y0,mul(k1[i],h*b[0])),mul(k3,h*b[2])),mul(k4,h*b[3])),mul(k5,h*b[4])),mul(k6,h*b[5]));
        k7 = f(x0+h,y1);
        er = add(add(add(add(add(mul(k1[i],h*e[0]),mul(k3,h*e[2])),mul(k4,h*e[3])),mul(k5,h*e[4])),mul(k6,h*e[5])),mul(k7,h*e[6]));
        if(typeof er === "number") erinf = abs(er);
        else erinf = norminf(er);
        if(erinf > tol) { // reject
            h = 0.2*h*pow(tol/erinf,0.25);
            if(x0+h === x0) {
                ret.msg = "Step size became too small";
                break;
            }
            continue;
        }
        ymid[i] = add(add(add(add(add(add(y0,
                mul(k1[i],h*bm[0])),
                mul(k3   ,h*bm[2])),
                mul(k4   ,h*bm[3])),
                mul(k5   ,h*bm[4])),
                mul(k6   ,h*bm[5])),
                mul(k7   ,h*bm[6]));
        ++i;
        xs[i] = x0+h;
        ys[i] = y1;
        k1[i] = k7;
        if(typeof event === "function") {
            var yi,xl = x0,xr = x0+0.5*h,xi;
            e1 = event(xr,ymid[i-1]);
            ev = and(lt(e0,0),lt(0,e1));
            if(!any(ev)) { xl = xr; xr = x0+h; e0 = e1; e1 = event(xr,y1); ev = and(lt(e0,0),lt(0,e1)); }
            if(any(ev)) {
                var xc, yc, en,ei;
                var side=0, sl = 1.0, sr = 1.0;
                while(1) {
                    if(typeof e0 === "number") xi = (sr*e1*xl-sl*e0*xr)/(sr*e1-sl*e0);
                    else {
                        xi = xr;
                        for(j=e0.length-1;j!==-1;--j) {
                            if(e0[j]<0 && e1[j]>0) xi = min(xi,(sr*e1[j]*xl-sl*e0[j]*xr)/(sr*e1[j]-sl*e0[j]));
                        }
                    }
                    if(xi <= xl || xi >= xr) break;
                    yi = ret._at(xi, i-1);
                    ei = event(xi,yi);
                    en = and(lt(e0,0),lt(0,ei));
                    if(any(en)) {
                        xr = xi;
                        e1 = ei;
                        ev = en;
                        sr = 1.0;
                        if(side === -1) sl *= 0.5;
                        else sl = 1.0;
                        side = -1;
                    } else {
                        xl = xi;
                        e0 = ei;
                        sl = 1.0;
                        if(side === 1) sr *= 0.5;
                        else sr = 1.0;
                        side = 1;
                    }
                }
                y1 = ret._at(0.5*(x0+xi),i-1);
                ret.f[i] = f(xi,yi);
                ret.x[i] = xi;
                ret.y[i] = yi;
                ret.ymid[i-1] = y1;
                ret.events = ev;
                ret.iterations = it;
                return ret;
            }
        }
        x0 += h;
        y0 = y1;
        e0 = e1;
        h = min(0.8*h*pow(tol/erinf,0.25),4*h);
    }
    ret.iterations = it;
    return ret;
}

// 11. Ax = b
numeric.LU = function(A, fast) {
  fast = fast || false;

  var abs = Math.abs;
  var i, j, k, absAjk, Akk, Ak, Pk, Ai;
  var max;
  var n = A.length, n1 = n-1;
  var P = new Array(n);
  if(!fast) A = numeric.clone(A);

  for (k = 0; k < n; ++k) {
    Pk = k;
    Ak = A[k];
    max = abs(Ak[k]);
    for (j = k + 1; j < n; ++j) {
      absAjk = abs(A[j][k]);
      if (max < absAjk) {
        max = absAjk;
        Pk = j;
      }
    }
    P[k] = Pk;

    if (Pk != k) {
      A[k] = A[Pk];
      A[Pk] = Ak;
      Ak = A[k];
    }

    Akk = Ak[k];

    for (i = k + 1; i < n; ++i) {
      A[i][k] /= Akk;
    }

    for (i = k + 1; i < n; ++i) {
      Ai = A[i];
      for (j = k + 1; j < n1; ++j) {
        Ai[j] -= Ai[k] * Ak[j];
        ++j;
        Ai[j] -= Ai[k] * Ak[j];
      }
      if(j===n1) Ai[j] -= Ai[k] * Ak[j];
    }
  }

  return {
    LU: A,
    P:  P
  };
}

numeric.LUsolve = function LUsolve(LUP, b) {
  var i, j;
  var LU = LUP.LU;
  var n   = LU.length;
  var x = numeric.clone(b);
  var P   = LUP.P;
  var Pi, LUi, LUii, tmp;

  for (i=n-1;i!==-1;--i) x[i] = b[i];
  for (i = 0; i < n; ++i) {
    Pi = P[i];
    if (P[i] !== i) {
      tmp = x[i];
      x[i] = x[Pi];
      x[Pi] = tmp;
    }

    LUi = LU[i];
    for (j = 0; j < i; ++j) {
      x[i] -= x[j] * LUi[j];
    }
  }

  for (i = n - 1; i >= 0; --i) {
    LUi = LU[i];
    for (j = i + 1; j < n; ++j) {
      x[i] -= x[j] * LUi[j];
    }

    x[i] /= LUi[i];
  }

  return x;
}

numeric.solve = function solve(A,b,fast) { return numeric.LUsolve(numeric.LU(A,fast), b); }

// 12. Linear programming
numeric.echelonize = function echelonize(A) {
    var s = numeric.dim(A), m = s[0], n = s[1];
    var I = numeric.identity(m);
    var P = Array(m);
    var i,j,k,l,Ai,Ii,Z,a;
    var abs = Math.abs;
    var diveq = numeric.diveq;
    A = numeric.clone(A);
    for(i=0;i<m;++i) {
        k = 0;
        Ai = A[i];
        Ii = I[i];
        for(j=1;j<n;++j) if(abs(Ai[k])<abs(Ai[j])) k=j;
        P[i] = k;
        diveq(Ii,Ai[k]);
        diveq(Ai,Ai[k]);
        for(j=0;j<m;++j) if(j!==i) {
            Z = A[j]; a = Z[k];
            for(l=n-1;l!==-1;--l) Z[l] -= Ai[l]*a;
            Z = I[j];
            for(l=m-1;l!==-1;--l) Z[l] -= Ii[l]*a;
        }
    }
    return {I:I, A:A, P:P};
}

numeric.__solveLP = function __solveLP(c,A,b,tol,maxit,x,flag) {
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var m = c.length, n = b.length,y;
    var unbounded = false, cb,i0=0;
    var alpha = 1.0;
    var f0,df0,AT = numeric.transpose(A), svd = numeric.svd,transpose = numeric.transpose,leq = numeric.leq, sqrt = Math.sqrt, abs = Math.abs;
    var muleq = numeric.muleq;
    var norm = numeric.norminf, any = numeric.any,min = Math.min;
    var all = numeric.all, gt = numeric.gt;
    var p = Array(m), A0 = Array(n),e=numeric.rep([n],1), H;
    var solve = numeric.solve, z = sub(b,dot(A,x)),count;
    var dotcc = dot(c,c);
    var g;
    for(count=i0;count<maxit;++count) {
        var i,j,d;
        for(i=n-1;i!==-1;--i) A0[i] = div(A[i],z[i]);
        var A1 = transpose(A0);
        for(i=m-1;i!==-1;--i) p[i] = (/*x[i]+*/sum(A1[i]));
        alpha = 0.25*abs(dotcc/dot(c,p));
        var a1 = 100*sqrt(dotcc/dot(p,p));
        if(!isFinite(alpha) || alpha>a1) alpha = a1;
        g = add(c,mul(alpha,p));
        H = dot(A1,A0);
        for(i=m-1;i!==-1;--i) H[i][i] += 1;
        d = solve(H,div(g,alpha),true);
        var t0 = div(z,dot(A,d));
        var t = 1.0;
        for(i=n-1;i!==-1;--i) if(t0[i]<0) t = min(t,-0.999*t0[i]);
        y = sub(x,mul(d,t));
        z = sub(b,dot(A,y));
        if(!all(gt(z,0))) return { solution: x, message: "", iterations: count };
        x = y;
        if(alpha<tol) return { solution: y, message: "", iterations: count };
        if(flag) {
            var s = dot(c,g), Ag = dot(A,g);
            unbounded = true;
            for(i=n-1;i!==-1;--i) if(s*Ag[i]<0) { unbounded = false; break; }
        } else {
            if(x[m-1]>=0) unbounded = false;
            else unbounded = true;
        }
        if(unbounded) return { solution: y, message: "Unbounded", iterations: count };
    }
    return { solution: x, message: "maximum iteration count exceeded", iterations:count };
}

numeric._solveLP = function _solveLP(c,A,b,tol,maxit) {
    var m = c.length, n = b.length,y;
    var sum = numeric.sum, log = numeric.log, mul = numeric.mul, sub = numeric.sub, dot = numeric.dot, div = numeric.div, add = numeric.add;
    var c0 = numeric.rep([m],0).concat([1]);
    var J = numeric.rep([n,1],-1);
    var A0 = numeric.blockMatrix([[A                   ,   J  ]]);
    var b0 = b;
    var y = numeric.rep([m],0).concat(Math.max(0,numeric.sup(numeric.neg(b)))+1);
    var x0 = numeric.__solveLP(c0,A0,b0,tol,maxit,y,false);
    var x = numeric.clone(x0.solution);
    x.length = m;
    var foo = numeric.inf(sub(b,dot(A,x)));
    if(foo<0) { return { solution: NaN, message: "Infeasible", iterations: x0.iterations }; }
    var ret = numeric.__solveLP(c, A, b, tol, maxit-x0.iterations, x, true);
    ret.iterations += x0.iterations;
    return ret;
};

numeric.solveLP = function solveLP(c,A,b,Aeq,beq,tol,maxit) {
    if(typeof maxit === "undefined") maxit = 1000;
    if(typeof tol === "undefined") tol = numeric.epsilon;
    if(typeof Aeq === "undefined") return numeric._solveLP(c,A,b,tol,maxit);
    var m = Aeq.length, n = Aeq[0].length, o = A.length;
    var B = numeric.echelonize(Aeq);
    var flags = numeric.rep([n],0);
    var P = B.P;
    var Q = [];
    var i;
    for(i=P.length-1;i!==-1;--i) flags[P[i]] = 1;
    for(i=n-1;i!==-1;--i) if(flags[i]===0) Q.push(i);
    var g = numeric.getRange;
    var I = numeric.linspace(0,m-1), J = numeric.linspace(0,o-1);
    var Aeq2 = g(Aeq,I,Q), A1 = g(A,J,P), A2 = g(A,J,Q), dot = numeric.dot, sub = numeric.sub;
    var A3 = dot(A1,B.I);
    var A4 = sub(A2,dot(A3,Aeq2)), b4 = sub(b,dot(A3,beq));
    var c1 = Array(P.length), c2 = Array(Q.length);
    for(i=P.length-1;i!==-1;--i) c1[i] = c[P[i]];
    for(i=Q.length-1;i!==-1;--i) c2[i] = c[Q[i]];
    var c4 = sub(c2,dot(c1,dot(B.I,Aeq2)));
    var S = numeric._solveLP(c4,A4,b4,tol,maxit);
    var x2 = S.solution;
    if(x2!==x2) return S;
    var x1 = dot(B.I,sub(beq,dot(Aeq2,x2)));
    var x = Array(c.length);
    for(i=P.length-1;i!==-1;--i) x[P[i]] = x1[i];
    for(i=Q.length-1;i!==-1;--i) x[Q[i]] = x2[i];
    return { solution: x, message:S.message, iterations: S.iterations };
}

numeric.MPStoLP = function MPStoLP(MPS) {
    if(MPS instanceof String) { MPS.split('\n'); }
    var state = 0;
    var states = ['Initial state','NAME','ROWS','COLUMNS','RHS','BOUNDS','ENDATA'];
    var n = MPS.length;
    var i,j,z,N=0,rows = {}, sign = [], rl = 0, vars = {}, nv = 0;
    var name;
    var c = [], A = [], b = [];
    function err(e) { throw new Error('MPStoLP: '+e+'\nLine '+i+': '+MPS[i]+'\nCurrent state: '+states[state]+'\n'); }
    for(i=0;i<n;++i) {
        z = MPS[i];
        var w0 = z.match(/\S*/g);
        var w = [];
        for(j=0;j<w0.length;++j) if(w0[j]!=="") w.push(w0[j]);
        if(w.length === 0) continue;
        for(j=0;j<states.length;++j) if(z.substr(0,states[j].length) === states[j]) break;
        if(j<states.length) {
            state = j;
            if(j===1) { name = w[1]; }
            if(j===6) return { name:name, c:c, A:numeric.transpose(A), b:b, rows:rows, vars:vars };
            continue;
        }
        switch(state) {
        case 0: case 1: err('Unexpected line');
        case 2: 
            switch(w[0]) {
            case 'N': if(N===0) N = w[1]; else err('Two or more N rows'); break;
            case 'L': rows[w[1]] = rl; sign[rl] = 1; b[rl] = 0; ++rl; break;
            case 'G': rows[w[1]] = rl; sign[rl] = -1;b[rl] = 0; ++rl; break;
            case 'E': rows[w[1]] = rl; sign[rl] = 0;b[rl] = 0; ++rl; break;
            default: err('Parse error '+numeric.prettyPrint(w));
            }
            break;
        case 3:
            if(!vars.hasOwnProperty(w[0])) { vars[w[0]] = nv; c[nv] = 0; A[nv] = numeric.rep([rl],0); ++nv; }
            var p = vars[w[0]];
            for(j=1;j<w.length;j+=2) {
                if(w[j] === N) { c[p] = parseFloat(w[j+1]); continue; }
                var q = rows[w[j]];
                A[p][q] = (sign[q]<0?-1:1)*parseFloat(w[j+1]);
            }
            break;
        case 4:
            for(j=1;j<w.length;j+=2) b[rows[w[j]]] = (sign[rows[w[j]]]<0?-1:1)*parseFloat(w[j+1]);
            break;
        case 5: /*FIXME*/ break;
        case 6: err('Internal error');
        }
    }
    err('Reached end of file without ENDATA');
}
// seedrandom.js version 2.0.
// Author: David Bau 4/2/2011
//
// Defines a method Math.seedrandom() that, when called, substitutes
// an explicitly seeded RC4-based algorithm for Math.random().  Also
// supports automatic seeding from local or network sources of entropy.
//
// Usage:
//
//   <script src=http://davidbau.com/encode/seedrandom-min.js></script>
//
//   Math.seedrandom('yipee'); Sets Math.random to a function that is
//                             initialized using the given explicit seed.
//
//   Math.seedrandom();        Sets Math.random to a function that is
//                             seeded using the current time, dom state,
//                             and other accumulated local entropy.
//                             The generated seed string is returned.
//
//   Math.seedrandom('yowza', true);
//                             Seeds using the given explicit seed mixed
//                             together with accumulated entropy.
//
//   <script src="http://bit.ly/srandom-512"></script>
//                             Seeds using physical random bits downloaded
//                             from random.org.
//
//   <script src="https://jsonlib.appspot.com/urandom?callback=Math.seedrandom">
//   </script>                 Seeds using urandom bits from call.jsonlib.com,
//                             which is faster than random.org.
//
// Examples:
//
//   Math.seedrandom("hello");            // Use "hello" as the seed.
//   document.write(Math.random());       // Always 0.5463663768140734
//   document.write(Math.random());       // Always 0.43973793770592234
//   var rng1 = Math.random;              // Remember the current prng.
//
//   var autoseed = Math.seedrandom();    // New prng with an automatic seed.
//   document.write(Math.random());       // Pretty much unpredictable.
//
//   Math.random = rng1;                  // Continue "hello" prng sequence.
//   document.write(Math.random());       // Always 0.554769432473455
//
//   Math.seedrandom(autoseed);           // Restart at the previous seed.
//   document.write(Math.random());       // Repeat the 'unpredictable' value.
//
// Notes:
//
// Each time seedrandom('arg') is called, entropy from the passed seed
// is accumulated in a pool to help generate future seeds for the
// zero-argument form of Math.seedrandom, so entropy can be injected over
// time by calling seedrandom with explicit data repeatedly.
//
// On speed - This javascript implementation of Math.random() is about
// 3-10x slower than the built-in Math.random() because it is not native
// code, but this is typically fast enough anyway.  Seeding is more expensive,
// especially if you use auto-seeding.  Some details (timings on Chrome 4):
//
// Our Math.random()            - avg less than 0.002 milliseconds per call
// seedrandom('explicit')       - avg less than 0.5 milliseconds per call
// seedrandom('explicit', true) - avg less than 2 milliseconds per call
// seedrandom()                 - avg about 38 milliseconds per call
//
// LICENSE (BSD):
//
// Copyright 2010 David Bau, all rights reserved.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are met:
// 
//   1. Redistributions of source code must retain the above copyright
//      notice, this list of conditions and the following disclaimer.
//
//   2. Redistributions in binary form must reproduce the above copyright
//      notice, this list of conditions and the following disclaimer in the
//      documentation and/or other materials provided with the distribution.
// 
//   3. Neither the name of this module nor the names of its contributors may
//      be used to endorse or promote products derived from this software
//      without specific prior written permission.
// 
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
/**
 * All code is in an anonymous closure to keep the global namespace clean.
 *
 * @param {number=} overflow 
 * @param {number=} startdenom
 */

// Patched by Seb so that seedrandom.js does not pollute the Math object.
// My tests suggest that doing Math.trouble = 1 makes Math lookups about 5%
// slower.
numeric.seedrandom = { pow:Math.pow, random:Math.random };

(function (pool, math, width, chunks, significance, overflow, startdenom) {


//
// seedrandom()
// This is the seedrandom function described above.
//
math['seedrandom'] = function seedrandom(seed, use_entropy) {
  var key = [];
  var arc4;

  // Flatten the seed string or build one from local entropy if needed.
  seed = mixkey(flatten(
    use_entropy ? [seed, pool] :
    arguments.length ? seed :
    [new Date().getTime(), pool, window], 3), key);

  // Use the seed to initialize an ARC4 generator.
  arc4 = new ARC4(key);

  // Mix the randomness into accumulated entropy.
  mixkey(arc4.S, pool);

  // Override Math.random

  // This function returns a random double in [0, 1) that contains
  // randomness in every bit of the mantissa of the IEEE 754 value.

  math['random'] = function random() {  // Closure to return a random double:
    var n = arc4.g(chunks);             // Start with a numerator n < 2 ^ 48
    var d = startdenom;                 //   and denominator d = 2 ^ 48.
    var x = 0;                          //   and no 'extra last byte'.
    while (n < significance) {          // Fill up all significant digits by
      n = (n + x) * width;              //   shifting numerator and
      d *= width;                       //   denominator and generating a
      x = arc4.g(1);                    //   new least-significant-byte.
    }
    while (n >= overflow) {             // To avoid rounding up, before adding
      n /= 2;                           //   last byte, shift everything
      d /= 2;                           //   right using integer math until
      x >>>= 1;                         //   we have exactly the desired bits.
    }
    return (n + x) / d;                 // Form the number within [0, 1).
  };

  // Return the seed that was used
  return seed;
};

//
// ARC4
//
// An ARC4 implementation.  The constructor takes a key in the form of
// an array of at most (width) integers that should be 0 <= x < (width).
//
// The g(count) method returns a pseudorandom integer that concatenates
// the next (count) outputs from ARC4.  Its return value is a number x
// that is in the range 0 <= x < (width ^ count).
//
/** @constructor */
function ARC4(key) {
  var t, u, me = this, keylen = key.length;
  var i = 0, j = me.i = me.j = me.m = 0;
  me.S = [];
  me.c = [];

  // The empty key [] is treated as [0].
  if (!keylen) { key = [keylen++]; }

  // Set up S using the standard key scheduling algorithm.
  while (i < width) { me.S[i] = i++; }
  for (i = 0; i < width; i++) {
    t = me.S[i];
    j = lowbits(j + t + key[i % keylen]);
    u = me.S[j];
    me.S[i] = u;
    me.S[j] = t;
  }

  // The "g" method returns the next (count) outputs as one number.
  me.g = function getnext(count) {
    var s = me.S;
    var i = lowbits(me.i + 1); var t = s[i];
    var j = lowbits(me.j + t); var u = s[j];
    s[i] = u;
    s[j] = t;
    var r = s[lowbits(t + u)];
    while (--count) {
      i = lowbits(i + 1); t = s[i];
      j = lowbits(j + t); u = s[j];
      s[i] = u;
      s[j] = t;
      r = r * width + s[lowbits(t + u)];
    }
    me.i = i;
    me.j = j;
    return r;
  };
  // For robust unpredictability discard an initial batch of values.
  // See http://www.rsa.com/rsalabs/node.asp?id=2009
  me.g(width);
}

//
// flatten()
// Converts an object tree to nested arrays of strings.
//
/** @param {Object=} result 
  * @param {string=} prop
  * @param {string=} typ */
function flatten(obj, depth, result, prop, typ) {
  result = [];
  typ = typeof(obj);
  if (depth && typ == 'object') {
    for (prop in obj) {
      if (prop.indexOf('S') < 5) {    // Avoid FF3 bug (local/sessionStorage)
        try { result.push(flatten(obj[prop], depth - 1)); } catch (e) {}
      }
    }
  }
  return (result.length ? result : obj + (typ != 'string' ? '\0' : ''));
}

//
// mixkey()
// Mixes a string seed into a key that is an array of integers, and
// returns a shortened string seed that is equivalent to the result key.
//
/** @param {number=} smear 
  * @param {number=} j */
function mixkey(seed, key, smear, j) {
  seed += '';                         // Ensure the seed is a string
  smear = 0;
  for (j = 0; j < seed.length; j++) {
    key[lowbits(j)] =
      lowbits((smear ^= key[lowbits(j)] * 19) + seed.charCodeAt(j));
  }
  seed = '';
  for (j in key) { seed += String.fromCharCode(key[j]); }
  return seed;
}

//
// lowbits()
// A quick "n mod width" for width a power of 2.
//
function lowbits(n) { return n & (width - 1); }

//
// The following constants are related to IEEE 754 limits.
//
startdenom = math.pow(width, chunks);
significance = math.pow(2, significance);
overflow = significance * 2;

//
// When seedrandom.js is loaded, we immediately mix a few bits
// from the built-in RNG into the entropy pool.  Because we do
// not want to intefere with determinstic PRNG state later,
// seedrandom will not call math.random on its own again after
// initialization.
//
mixkey(math.random(), pool);

// End anonymous scope, and pass initial values.
}(
  [],   // pool: entropy pool starts empty
  numeric.seedrandom, // math: package containing random, pow, and seedrandom
  256,  // width: each RC4 output is 0 <= x < 256
  6,    // chunks: at least six RC4 outputs for each double
  52    // significance: there are 52 significant digits in a double
  ));
/* This file is a slightly modified version of quadprog.js from Alberto Santini.
 * It has been slightly modified by Sébastien Loisel to make sure that it handles
 * 0-based Arrays instead of 1-based Arrays.
 * License is in resources/LICENSE.quadprog */
(function(exports) {

function base0to1(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=0;i<n;i++) ret[i+1] = base0to1(A[i]);
    return ret;
}
function base1to0(A) {
    if(typeof A !== "object") { return A; }
    var ret = [], i,n=A.length;
    for(i=1;i<n;i++) ret[i-1] = base1to0(A[i]);
    return ret;
}

function dpori(a, lda, n) {
    var i, j, k, kp1, t;

    for (k = 1; k <= n; k = k + 1) {
        a[k][k] = 1 / a[k][k];
        t = -a[k][k];
        //~ dscal(k - 1, t, a[1][k], 1);
        for (i = 1; i < k; i = i + 1) {
            a[i][k] = t * a[i][k];
        }

        kp1 = k + 1;
        if (n < kp1) {
            break;
        }
        for (j = kp1; j <= n; j = j + 1) {
            t = a[k][j];
            a[k][j] = 0;
            //~ daxpy(k, t, a[1][k], 1, a[1][j], 1);
            for (i = 1; i <= k; i = i + 1) {
                a[i][j] = a[i][j] + (t * a[i][k]);
            }
        }
    }

}

function dposl(a, lda, n, b) {
    var i, k, kb, t;

    for (k = 1; k <= n; k = k + 1) {
        //~ t = ddot(k - 1, a[1][k], 1, b[1], 1);
        t = 0;
        for (i = 1; i < k; i = i + 1) {
            t = t + (a[i][k] * b[i]);
        }

        b[k] = (b[k] - t) / a[k][k];
    }

    for (kb = 1; kb <= n; kb = kb + 1) {
        k = n + 1 - kb;
        b[k] = b[k] / a[k][k];
        t = -b[k];
        //~ daxpy(k - 1, t, a[1][k], 1, b[1], 1);
        for (i = 1; i < k; i = i + 1) {
            b[i] = b[i] + (t * a[i][k]);
        }
    }
}

function dpofa(a, lda, n, info) {
    var i, j, jm1, k, t, s;

    for (j = 1; j <= n; j = j + 1) {
        info[1] = j;
        s = 0;
        jm1 = j - 1;
        if (jm1 < 1) {
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        } else {
            for (k = 1; k <= jm1; k = k + 1) {
                //~ t = a[k][j] - ddot(k - 1, a[1][k], 1, a[1][j], 1);
                t = a[k][j];
                for (i = 1; i < k; i = i + 1) {
                    t = t - (a[i][j] * a[i][k]);
                }
                t = t / a[k][k];
                a[k][j] = t;
                s = s + t * t;
            }
            s = a[j][j] - s;
            if (s <= 0) {
                break;
            }
            a[j][j] = Math.sqrt(s);
        }
        info[1] = 0;
    }
}

function qpgen2(dmat, dvec, fddmat, n, sol, crval, amat,
    bvec, fdamat, q, meq, iact, nact, iter, work, ierr) {

    var i, j, l, l1, info, it1, iwzv, iwrv, iwrm, iwsv, iwuv, nvl, r, iwnbv,
        temp, sum, t1, tt, gc, gs, nu,
        t1inf, t2min,
        vsmall, tmpa, tmpb,
        go;

    r = Math.min(n, q);
    l = 2 * n + (r * (r + 5)) / 2 + 2 * q + 1;

    vsmall = 1.0e-60;
    do {
        vsmall = vsmall + vsmall;
        tmpa = 1 + 0.1 * vsmall;
        tmpb = 1 + 0.2 * vsmall;
    } while (tmpa <= 1 || tmpb <= 1);

    for (i = 1; i <= n; i = i + 1) {
        work[i] = dvec[i];
    }
    for (i = n + 1; i <= l; i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }

    info = [];

    if (ierr[1] === 0) {
        dpofa(dmat, fddmat, n, info);
        if (info[1] !== 0) {
            ierr[1] = 2;
            return;
        }
        dposl(dmat, fddmat, n, dvec);
        dpori(dmat, fddmat, n);
    } else {
        for (j = 1; j <= n; j = j + 1) {
            sol[j] = 0;
            for (i = 1; i <= j; i = i + 1) {
                sol[j] = sol[j] + dmat[i][j] * dvec[i];
            }
        }
        for (j = 1; j <= n; j = j + 1) {
            dvec[j] = 0;
            for (i = j; i <= n; i = i + 1) {
                dvec[j] = dvec[j] + dmat[j][i] * sol[i];
            }
        }
    }

    crval[1] = 0;
    for (j = 1; j <= n; j = j + 1) {
        sol[j] = dvec[j];
        crval[1] = crval[1] + work[j] * sol[j];
        work[j] = 0;
        for (i = j + 1; i <= n; i = i + 1) {
            dmat[i][j] = 0;
        }
    }
    crval[1] = -crval[1] / 2;
    ierr[1] = 0;

    iwzv = n;
    iwrv = iwzv + n;
    iwuv = iwrv + r;
    iwrm = iwuv + r + 1;
    iwsv = iwrm + (r * (r + 1)) / 2;
    iwnbv = iwsv + q;

    for (i = 1; i <= q; i = i + 1) {
        sum = 0;
        for (j = 1; j <= n; j = j + 1) {
            sum = sum + amat[j][i] * amat[j][i];
        }
        work[iwnbv + i] = Math.sqrt(sum);
    }
    nact = 0;
    iter[1] = 0;
    iter[2] = 0;

    function fn_goto_50() {
        iter[1] = iter[1] + 1;

        l = iwsv;
        for (i = 1; i <= q; i = i + 1) {
            l = l + 1;
            sum = -bvec[i];
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + amat[j][i] * sol[j];
            }
            if (Math.abs(sum) < vsmall) {
                sum = 0;
            }
            if (i > meq) {
                work[l] = sum;
            } else {
                work[l] = -Math.abs(sum);
                if (sum > 0) {
                    for (j = 1; j <= n; j = j + 1) {
                        amat[j][i] = -amat[j][i];
                    }
                    bvec[i] = -bvec[i];
                }
            }
        }

        for (i = 1; i <= nact; i = i + 1) {
            work[iwsv + iact[i]] = 0;
        }

        nvl = 0;
        temp = 0;
        for (i = 1; i <= q; i = i + 1) {
            if (work[iwsv + i] < temp * work[iwnbv + i]) {
                nvl = i;
                temp = work[iwsv + i] / work[iwnbv + i];
            }
        }
        if (nvl === 0) {
            return 999;
        }

        return 0;
    }

    function fn_goto_55() {
        for (i = 1; i <= n; i = i + 1) {
            sum = 0;
            for (j = 1; j <= n; j = j + 1) {
                sum = sum + dmat[j][i] * amat[j][nvl];
            }
            work[i] = sum;
        }

        l1 = iwzv;
        for (i = 1; i <= n; i = i + 1) {
            work[l1 + i] = 0;
        }
        for (j = nact + 1; j <= n; j = j + 1) {
            for (i = 1; i <= n; i = i + 1) {
                work[l1 + i] = work[l1 + i] + dmat[i][j] * work[j];
            }
        }

        t1inf = true;
        for (i = nact; i >= 1; i = i - 1) {
            sum = work[i];
            l = iwrm + (i * (i + 3)) / 2;
            l1 = l - i;
            for (j = i + 1; j <= nact; j = j + 1) {
                sum = sum - work[l] * work[iwrv + j];
                l = l + j;
            }
            sum = sum / work[l1];
            work[iwrv + i] = sum;
            if (iact[i] < meq) {
                // continue;
                break;
            }
            if (sum < 0) {
                // continue;
                break;
            }
            t1inf = false;
            it1 = i;
        }

        if (!t1inf) {
            t1 = work[iwuv + it1] / work[iwrv + it1];
            for (i = 1; i <= nact; i = i + 1) {
                if (iact[i] < meq) {
                    // continue;
                    break;
                }
                if (work[iwrv + i] < 0) {
                    // continue;
                    break;
                }
                temp = work[iwuv + i] / work[iwrv + i];
                if (temp < t1) {
                    t1 = temp;
                    it1 = i;
                }
            }
        }

        sum = 0;
        for (i = iwzv + 1; i <= iwzv + n; i = i + 1) {
            sum = sum + work[i] * work[i];
        }
        if (Math.abs(sum) <= vsmall) {
            if (t1inf) {
                ierr[1] = 1;
                // GOTO 999
                return 999;
            } else {
                for (i = 1; i <= nact; i = i + 1) {
                    work[iwuv + i] = work[iwuv + i] - t1 * work[iwrv + i];
                }
                work[iwuv + nact + 1] = work[iwuv + nact + 1] + t1;
                // GOTO 700
                return 700;
            }
        } else {
            sum = 0;
            for (i = 1; i <= n; i = i + 1) {
                sum = sum + work[iwzv + i] * amat[i][nvl];
            }
            tt = -work[iwsv + nvl] / sum;
            t2min = true;
            if (!t1inf) {
                if (t1 < tt) {
                    tt = t1;
                    t2min = false;
                }
            }

            for (i = 1; i <= n; i = i + 1) {
                sol[i] = sol[i] + tt * work[iwzv + i];
                if (Math.abs(sol[i]) < vsmall) {
                    sol[i] = 0;
                }
            }

            crval[1] = crval[1] + tt * sum * (tt / 2 + work[iwuv + nact + 1]);
            for (i = 1; i <= nact; i = i + 1) {
                work[iwuv + i] = work[iwuv + i] - tt * work[iwrv + i];
            }
            work[iwuv + nact + 1] = work[iwuv + nact + 1] + tt;

            if (t2min) {
                nact = nact + 1;
                iact[nact] = nvl;

                l = iwrm + ((nact - 1) * nact) / 2 + 1;
                for (i = 1; i <= nact - 1; i = i + 1) {
                    work[l] = work[i];
                    l = l + 1;
                }

                if (nact === n) {
                    work[l] = work[n];
                } else {
                    for (i = n; i >= nact + 1; i = i - 1) {
                        if (work[i] === 0) {
                            // continue;
                            break;
                        }
                        gc = Math.max(Math.abs(work[i - 1]), Math.abs(work[i]));
                        gs = Math.min(Math.abs(work[i - 1]), Math.abs(work[i]));
                        if (work[i - 1] >= 0) {
                            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        } else {
                            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
                        }
                        gc = work[i - 1] / temp;
                        gs = work[i] / temp;

                        if (gc === 1) {
                            // continue;
                            break;
                        }
                        if (gc === 0) {
                            work[i - 1] = gs * temp;
                            for (j = 1; j <= n; j = j + 1) {
                                temp = dmat[j][i - 1];
                                dmat[j][i - 1] = dmat[j][i];
                                dmat[j][i] = temp;
                            }
                        } else {
                            work[i - 1] = temp;
                            nu = gs / (1 + gc);
                            for (j = 1; j <= n; j = j + 1) {
                                temp = gc * dmat[j][i - 1] + gs * dmat[j][i];
                                dmat[j][i] = nu * (dmat[j][i - 1] + temp) - dmat[j][i];
                                dmat[j][i - 1] = temp;

                            }
                        }
                    }
                    work[l] = work[nact];
                }
            } else {
                sum = -bvec[nvl];
                for (j = 1; j <= n; j = j + 1) {
                    sum = sum + sol[j] * amat[j][nvl];
                }
                if (nvl > meq) {
                    work[iwsv + nvl] = sum;
                } else {
                    work[iwsv + nvl] = -Math.abs(sum);
                    if (sum > 0) {
                        for (j = 1; j <= n; j = j + 1) {
                            amat[j][nvl] = -amat[j][nvl];
                        }
                        bvec[nvl] = -bvec[nvl];
                    }
                }
                // GOTO 700
                return 700;
            }
        }

        return 0;
    }

    function fn_goto_797() {
        l = iwrm + (it1 * (it1 + 1)) / 2 + 1;
        l1 = l + it1;
        if (work[l1] === 0) {
            // GOTO 798
            return 798;
        }
        gc = Math.max(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        gs = Math.min(Math.abs(work[l1 - 1]), Math.abs(work[l1]));
        if (work[l1 - 1] >= 0) {
            temp = Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        } else {
            temp = -Math.abs(gc * Math.sqrt(1 + gs * gs / (gc * gc)));
        }
        gc = work[l1 - 1] / temp;
        gs = work[l1] / temp;

        if (gc === 1) {
            // GOTO 798
            return 798;
        }
        if (gc === 0) {
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = work[l1 - 1];
                work[l1 - 1] = work[l1];
                work[l1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = dmat[i][it1];
                dmat[i][it1] = dmat[i][it1 + 1];
                dmat[i][it1 + 1] = temp;
            }
        } else {
            nu = gs / (1 + gc);
            for (i = it1 + 1; i <= nact; i = i + 1) {
                temp = gc * work[l1 - 1] + gs * work[l1];
                work[l1] = nu * (work[l1 - 1] + temp) - work[l1];
                work[l1 - 1] = temp;
                l1 = l1 + i;
            }
            for (i = 1; i <= n; i = i + 1) {
                temp = gc * dmat[i][it1] + gs * dmat[i][it1 + 1];
                dmat[i][it1 + 1] = nu * (dmat[i][it1] + temp) - dmat[i][it1 + 1];
                dmat[i][it1] = temp;
            }
        }

        return 0;
    }

    function fn_goto_798() {
        l1 = l - it1;
        for (i = 1; i <= it1; i = i + 1) {
            work[l1] = work[l];
            l = l + 1;
            l1 = l1 + 1;
        }

        work[iwuv + it1] = work[iwuv + it1 + 1];
        iact[it1] = iact[it1 + 1];
        it1 = it1 + 1;
        if (it1 < nact) {
            // GOTO 797
            return 797;
        }

        return 0;
    }

    function fn_goto_799() {
        work[iwuv + nact] = work[iwuv + nact + 1];
        work[iwuv + nact + 1] = 0;
        iact[nact] = 0;
        nact = nact - 1;
        iter[2] = iter[2] + 1;

        return 0;
    }

    go = 0;
    while (true) {
        go = fn_goto_50();
        if (go === 999) {
            return;
        }
        while (true) {
            go = fn_goto_55();
            if (go === 0) {
                break;
            }
            if (go === 999) {
                return;
            }
            if (go === 700) {
                if (it1 === nact) {
                    fn_goto_799();
                } else {
                    while (true) {
                        fn_goto_797();
                        go = fn_goto_798();
                        if (go !== 797) {
                            break;
                        }
                    }
                    fn_goto_799();
                }
            }
        }
    }

}

function solveQP(Dmat, dvec, Amat, bvec, meq, factorized) {
    Dmat = base0to1(Dmat);
    dvec = base0to1(dvec);
    Amat = base0to1(Amat);
    var i, n, q,
        nact, r,
        crval = [], iact = [], sol = [], work = [], iter = [],
        message;

    meq = meq || 0;
    factorized = factorized ? base0to1(factorized) : [undefined, 0];
    bvec = bvec ? base0to1(bvec) : [];

    // In Fortran the array index starts from 1
    n = Dmat.length - 1;
    q = Amat[1].length - 1;

    if (!bvec) {
        for (i = 1; i <= q; i = i + 1) {
            bvec[i] = 0;
        }
    }
    for (i = 1; i <= q; i = i + 1) {
        iact[i] = 0;
    }
    nact = 0;
    r = Math.min(n, q);
    for (i = 1; i <= n; i = i + 1) {
        sol[i] = 0;
    }
    crval[1] = 0;
    for (i = 1; i <= (2 * n + (r * (r + 5)) / 2 + 2 * q + 1); i = i + 1) {
        work[i] = 0;
    }
    for (i = 1; i <= 2; i = i + 1) {
        iter[i] = 0;
    }

    qpgen2(Dmat, dvec, n, n, sol, crval, Amat,
        bvec, n, q, meq, iact, nact, iter, work, factorized);

    message = "";
    if (factorized[1] === 1) {
        message = "constraints are inconsistent, no solution!";
    }
    if (factorized[1] === 2) {
        message = "matrix D in quadratic function is not positive definite!";
    }

    return {
        solution: base1to0(sol),
        value: base1to0(crval),
        unconstrained_solution: base1to0(dvec),
        iterations: base1to0(iter),
        iact: base1to0(iact),
        message: message
    };
}
exports.solveQP = solveQP;
}(numeric));
/*
Shanti Rao sent me this routine by private email. I had to modify it
slightly to work on Arrays instead of using a Matrix object.
It is apparently translated from http://stitchpanorama.sourceforge.net/Python/svd.py
*/

numeric.svd= function svd(A) {
    var temp;
//Compute the thin SVD from G. H. Golub and C. Reinsch, Numer. Math. 14, 403-420 (1970)
	var prec= numeric.epsilon; //Math.pow(2,-52) // assumes double prec
	var tolerance= 1.e-64/prec;
	var itmax= 50;
	var c=0;
	var i=0;
	var j=0;
	var k=0;
	var l=0;
	
	var u= numeric.clone(A);
	var m= u.length;
	
	var n= u[0].length;
	
	if (m < n) throw "Need more rows than columns"
	
	var e = new Array(n);
	var q = new Array(n);
	for (i=0; i<n; i++) e[i] = q[i] = 0.0;
	var v = numeric.rep([n,n],0);
//	v.zero();
	
 	function pythag(a,b)
 	{
		a = Math.abs(a)
		b = Math.abs(b)
		if (a > b)
			return a*Math.sqrt(1.0+(b*b/a/a))
		else if (b == 0.0) 
			return a
		return b*Math.sqrt(1.0+(a*a/b/b))
	}

	//Householder's reduction to bidiagonal form

	var f= 0.0;
	var g= 0.0;
	var h= 0.0;
	var x= 0.0;
	var y= 0.0;
	var z= 0.0;
	var s= 0.0;
	
	for (i=0; i < n; i++)
	{	
		e[i]= g;
		s= 0.0;
		l= i+1;
		for (j=i; j < m; j++) 
			s += (u[j][i]*u[j][i]);
		if (s <= tolerance)
			g= 0.0;
		else
		{	
			f= u[i][i];
			g= Math.sqrt(s);
			if (f >= 0.0) g= -g;
			h= f*g-s
			u[i][i]=f-g;
			for (j=l; j < n; j++)
			{
				s= 0.0
				for (k=i; k < m; k++) 
					s += u[k][i]*u[k][j]
				f= s/h
				for (k=i; k < m; k++) 
					u[k][j]+=f*u[k][i]
			}
		}
		q[i]= g
		s= 0.0
		for (j=l; j < n; j++) 
			s= s + u[i][j]*u[i][j]
		if (s <= tolerance)
			g= 0.0
		else
		{	
			f= u[i][i+1]
			g= Math.sqrt(s)
			if (f >= 0.0) g= -g
			h= f*g - s
			u[i][i+1] = f-g;
			for (j=l; j < n; j++) e[j]= u[i][j]/h
			for (j=l; j < m; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += (u[j][k]*u[i][k])
				for (k=l; k < n; k++) 
					u[j][k]+=s*e[k]
			}	
		}
		y= Math.abs(q[i])+Math.abs(e[i])
		if (y>x) 
			x=y
	}
	
	// accumulation of right hand gtransformations
	for (i=n-1; i != -1; i+= -1)
	{	
		if (g != 0.0)
		{
		 	h= g*u[i][i+1]
			for (j=l; j < n; j++) 
				v[j][i]=u[i][j]/h
			for (j=l; j < n; j++)
			{	
				s=0.0
				for (k=l; k < n; k++) 
					s += u[i][k]*v[k][j]
				for (k=l; k < n; k++) 
					v[k][j]+=(s*v[k][i])
			}	
		}
		for (j=l; j < n; j++)
		{
			v[i][j] = 0;
			v[j][i] = 0;
		}
		v[i][i] = 1;
		g= e[i]
		l= i
	}
	
	// accumulation of left hand transformations
	for (i=n-1; i != -1; i+= -1)
	{	
		l= i+1
		g= q[i]
		for (j=l; j < n; j++) 
			u[i][j] = 0;
		if (g != 0.0)
		{
			h= u[i][i]*g
			for (j=l; j < n; j++)
			{
				s=0.0
				for (k=l; k < m; k++) s += u[k][i]*u[k][j];
				f= s/h
				for (k=i; k < m; k++) u[k][j]+=f*u[k][i];
			}
			for (j=i; j < m; j++) u[j][i] = u[j][i]/g;
		}
		else
			for (j=i; j < m; j++) u[j][i] = 0;
		u[i][i] += 1;
	}
	
	// diagonalization of the bidiagonal form
	prec= prec*x
	for (k=n-1; k != -1; k+= -1)
	{
		for (var iteration=0; iteration < itmax; iteration++)
		{	// test f splitting
			var test_convergence = false
			for (l=k; l != -1; l+= -1)
			{	
				if (Math.abs(e[l]) <= prec)
				{	test_convergence= true
					break 
				}
				if (Math.abs(q[l-1]) <= prec)
					break 
			}
			if (!test_convergence)
			{	// cancellation of e[l] if l>0
				c= 0.0
				s= 1.0
				var l1= l-1
				for (i =l; i<k+1; i++)
				{	
					f= s*e[i]
					e[i]= c*e[i]
					if (Math.abs(f) <= prec)
						break
					g= q[i]
					h= pythag(f,g)
					q[i]= h
					c= g/h
					s= -f/h
					for (j=0; j < m; j++)
					{	
						y= u[j][l1]
						z= u[j][i]
						u[j][l1] =  y*c+(z*s)
						u[j][i] = -y*s+(z*c)
					} 
				}	
			}
			// test f convergence
			z= q[k]
			if (l== k)
			{	//convergence
				if (z<0.0)
				{	//q[k] is made non-negative
					q[k]= -z
					for (j=0; j < n; j++)
						v[j][k] = -v[j][k]
				}
				break  //break out of iteration loop and move on to next k value
			}
			if (iteration >= itmax-1)
				throw 'Error: no convergence.'
			// shift from bottom 2x2 minor
			x= q[l]
			y= q[k-1]
			g= e[k-1]
			h= e[k]
			f= ((y-z)*(y+z)+(g-h)*(g+h))/(2.0*h*y)
			g= pythag(f,1.0)
			if (f < 0.0)
				f= ((x-z)*(x+z)+h*(y/(f-g)-h))/x
			else
				f= ((x-z)*(x+z)+h*(y/(f+g)-h))/x
			// next QR transformation
			c= 1.0
			s= 1.0
			for (i=l+1; i< k+1; i++)
			{	
				g= e[i]
				y= q[i]
				h= s*g
				g= c*g
				z= pythag(f,h)
				e[i-1]= z
				c= f/z
				s= h/z
				f= x*c+g*s
				g= -x*s+g*c
				h= y*s
				y= y*c
				for (j=0; j < n; j++)
				{	
					x= v[j][i-1]
					z= v[j][i]
					v[j][i-1] = x*c+z*s
					v[j][i] = -x*s+z*c
				}
				z= pythag(f,h)
				q[i-1]= z
				c= f/z
				s= h/z
				f= c*g+s*y
				x= -s*g+c*y
				for (j=0; j < m; j++)
				{
					y= u[j][i-1]
					z= u[j][i]
					u[j][i-1] = y*c+z*s
					u[j][i] = -y*s+z*c
				}
			}
			e[l]= 0.0
			e[k]= f
			q[k]= x
		} 
	}
		
	//vt= transpose(v)
	//return (u,q,vt)
	for (i=0;i<q.length; i++) 
	  if (q[i] < prec) q[i] = 0
	  
	//sort eigenvalues	
	for (i=0; i< n; i++)
	{	 
	//writeln(q)
	 for (j=i-1; j >= 0; j--)
	 {
	  if (q[j] < q[i])
	  {
	//  writeln(i,'-',j)
	   c = q[j]
	   q[j] = q[i]
	   q[i] = c
	   for(k=0;k<u.length;k++) { temp = u[k][i]; u[k][i] = u[k][j]; u[k][j] = temp; }
	   for(k=0;k<v.length;k++) { temp = v[k][i]; v[k][i] = v[k][j]; v[k][j] = temp; }
//	   u.swapCols(i,j)
//	   v.swapCols(i,j)
	   i = j	   
	  }
	 }	
	}
	
	return {U:u,S:q,V:v}
};


}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/formulajs-connect\\node_modules\\numeric\\numeric-1.2.6.js","/formulajs-connect\\node_modules\\numeric",undefined)
},{"_process":38,"buffer":36}],8:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Is a FFL quick-formatter (V05 '3.1m chars' 90ms) and is FFL to indexed formatter
 */
function FFLFormatter(register, data) {
    this.register = register;
    register.addColumn('desc')
    this.vars = register.getIndex('i')
    this.original = data;
    this.data = data;
    this.reassembled = '';
    this.constants = [];
    register.constants = this.constants
    this.comments = [];
    this.header = '';
    this.indents = [];
    for (var i = 0; i < 30; i++) {
        this.indents[i] = new Array(i).join(" ")
    }
}

/**
 * Extract imports, model name,comments in header
 */
FFLFormatter.prototype.extractHeader = function() {
    this.header = this.original.substring(0, this.original.indexOf('{'))
    //INFO: the header is not indexed.
    this.register.header = this.header;
    const headerLines = this.header.split('\n');
    for (var i = 0; i < headerLines.length; i++) {
        var headerLine = headerLines[i].trim();
        var modelName;
        if (modelName = headerLine.match(/^\s*model (\w+)/i)) {
            this.name = modelName[1];
            break;
        }
    }
}
FFLFormatter.prototype.extractConstants = function() {
    var index = 0;
    const constants = this.constants;
    this.data = this.data.replace(/"(.*?)"/gm, function($0) {
        constants[++index] = $0
        return '__' + index
    })
}
FFLFormatter.prototype.insertConstants = function() {
    var constants = this.constants;
    this.reassembled = this.reassembled.replace(/__(\d+)/gm, function($1, $2) {
        return constants[parseInt($2)]
    })
}
FFLFormatter.prototype.extractComments = function() {
    var comments = {}
    var index = 0;
    this.data = this.data.replace(/\/\/.*/gm, function($0) {
        comments[++index] = $0
        return '____' + index
    })
    this.comments = comments;
}

FFLFormatter.prototype.removeWhite = function() {
    this.data = this.data.replace(/\s\s+/g, ' ')
    //TODO: parse by properties, not by semicolons
        .replace(/;\s+/g, ';')//7ms of 100ms..(V05) (expensive, but it is removing trailing whitespaces of properties)
}
FFLFormatter.prototype.extractVars = function() {
    var noneexit = true;
    var data = this.data;
    var index = 0;
    const vars = [];
    const register = this.register;
    while (noneexit) {
        noneexit = false;
        data = data.replace(/{([^}{]*?)}/gm, function($0, $1, $2) {
            //this happens to many times...
            noneexit = true;
            const index = register.addRow([$1, $2, $0.length + $2])
            return '___' + index
        })
    }
    //  this.vars = vars;
}
FFLFormatter.prototype.findRootVariable = function() {
    return this.register.lastRowIndex()

}
FFLFormatter.prototype.buildTree = function() {
    this.extractHeader();
    this.extractConstants();
    this.extractComments();
    this.removeWhite();
    this.extractVars();
    var firstVar = this.findRootVariable();
    this.reassembled = this.prettyFormatFFL(2, firstVar)
    this.insertConstants();
}
FFLFormatter.prototype.walk = function(visit) {
    this.extractHeader();
    this.extractConstants();
    this.extractComments();
    this.removeWhite();
    this.extractVars();
    var firstVar = this.register.lastRowIndex();
    const firstRow = this.vars[firstVar];
    firstRow[0] = firstRow[0].replace(/root /gi, 'variable root ').trim()

    //this is a trick, not wrong!. parent and child index are the same to start with root.
    firstRow.push('root', firstVar, null, null, null, null, 0, [])
    this.walkTree(visit, firstVar, 1)
}
FFLFormatter.prototype.walkTree = function(visit, parentId, depth) {
    var self = this;
    const parts = this.vars[parentId][0].trim().split(';')
    var children = 0;
    if (parts[parts.length - 1] == '') {
        parts.length--;
    } else {
        var temp = parts[parts.length - 1];
        parts.length--;
        temp.replace(/((?!( variable | tuple )).)+/gm, function($1) {
            //here should go tuple/modifier/refer-to extraction.
            const refIdStartIndex = $1.indexOf('___');
            const varDesc = $1.substring(0, refIdStartIndex - 1)
            const tuple = varDesc.startsWith('tuple');
            const referIdx = varDesc.toLowerCase().indexOf('refers to')
            const referstoVariableName = referIdx != -1 ? varDesc.substring(referIdx + 10) : null;
            const varname = tuple ? referIdx == -1 ? varDesc.substring(6) : varDesc.substring(6, referIdx) : referIdx == -1 ? varDesc.substring(9) : varDesc.substring(9, referIdx);
            const modifier = varname.startsWith('+=') ? "+=" : varname.startsWith('+') ? '+' : varname.startsWith('=') ? '=' : varname.startsWith('-') ? '-' : null;
            const name = varname.substring(modifier ? modifier.length : 0).trim();//it might be a double space in the end. its too easy to trim.
            const varRefIndex = parseInt($1.substring(refIdStartIndex + 3));

            const variable = self.vars[varRefIndex];
            variable.push(name, varRefIndex, modifier, parentId, tuple, referstoVariableName, ++children, [])

            self.vars[parentId][10].push(variable)
            self.walkTree(visit, varRefIndex, depth + 1)
            return ''
        });
    }
    visit(parentId, parts)
}
//test if this is quicker than indexing, and recreate FFL
//scorecardTool is using this, internally
FFLFormatter.prototype.prettyFormatFFL = function(depth, index) {
    var self = this;
    const indent = this.indents[depth];
    const variable = this.vars[index][0].trim()
    const parts = variable.split(';')
    const varparts = [];
    if (parts[parts.length - 1] == '') {
        parts.length--;
    } else {
        var temp = parts[parts.length - 1];
        parts.length--
        temp.replace(/((?!( variable | tuple )).)+/gm, function($1) {
            const refId = $1.indexOf('___');
            varparts.push(indent + $1.substring(0, refId - 1) + "\n" + indent + "{\n" + self.prettyFormatFFL(depth + 1, parseInt($1.substring(refId + 3))) + "\n" + indent + "}")
            return ''
        });
    }
    var lb = ';\n'
    var r;
    if (parts.length == 0) {
        if (varparts.length == 0) {
            r = ''
        } else {
            r = varparts.join('\n')
        }
    } else {
        if (varparts.length == 0) {
            r = indent + parts.join(lb + indent) + ';'
        } else {
            r = indent + parts.join(lb + indent) + ";\n" + (varparts.length > 0 ? varparts.join('\n') : ';')
        }
    }
    return r;
}
var formulaMapping = {inputRequired: 'required'}
FFLFormatter.prototype.lookupConstant = function(index) {
    return this.constants[parseInt(index.substring(2))].replace(/'/g, "\\'").replace(/(?:\\r\\n|\\r|\\n)/g, "[br]")
}
FFLFormatter.prototype.parseProperties = function() {
    const register = this.register;
    const index = register.getIndex('i');
    const formatter = this;
    this.walk(function(v, raw_properties) {
            for (var i = 0; i < raw_properties.length; i++) {
                const p = raw_properties[i];
                const p_seperator_index = p.indexOf(':');//can't use split. some properties use multiple :
                var key = p.substring(0, p_seperator_index).trim();
                key = formulaMapping[key] || key
                register.addColumn(key)
                var value = p.substring(p_seperator_index + 1).trim();
                //TODO: internationalization should not happen here:
                //TODO: But to introduce Internationalization will take a day.
                //TODO: So thats why we are injecting constant Strings here.
                //TODO: making the model one language only for now
                if (value.startsWith('__')) value = formatter.lookupConstant(value)
                register.value(v, key, value)
            }
        }
    )
}
FFLFormatter.prototype.toString = function() {
    this.buildTree();
    return this.header + '{\n' + this.reassembled + '\n}';
}

function Factory() {
    this.on = false;
}
exports.Formatter = FFLFormatter;
exports.FFLFormatter = new Factory();

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\ffl\\FFLFormatter.js","/lme-core\\exchange_modules\\ffl",undefined)
},{"_process":38,"buffer":36}],9:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
//http://excelformulabeautifier.com/
function finFormulaGeneric(buf) {
    /**
     * Choices fix, this is a problem for titles and hints containing ":" chars.
     * TODO: move to choice specific logic.
     */
    var buf = buf.replace(/:/gm, ', ');
    buf = buf.replace(/(\$p|@|#|%|\.\.)/gmi, '');

    //temp case fix, <= lt,gt,lte,gte from Cases,
    buf = buf.replace(/\[\<\=/gm, '[');
    buf = buf.replace(/\[\</gm, '[');
    buf = buf.replace(/\|\</gm, '|');
    buf = buf.replace(/\[\=/gm, '[');
    buf = buf.replace(/\|\<\=/gm, '|');
    buf = buf.replace(/\|\=/gm, '|');
    buf = buf.replace(/\|\>\=/gm, '|');
    buf = buf.replace(/\|\>/gm, '|');
    //end temp case fix

    /**
     * Here are all time references
     the same as hasAnyValue? HasValue(var) ?
     */
    buf = buf.replace(/\(FirstValueT\((\w+),1,MaxT\)>0\)/gi, 'AnyDataAvailable($1)')//regular test for any data entered
    buf = buf.replace(/FormulaSetInT\(GetT\(T\,-1\)\)<>NoTrend/gi, '!x.isprevnotrend');

    buf = buf.replace(/LastTinYear\(FirstTinFormulaSet\(Trend,\s*(\w+|\d+)\)\)/gi, 'x.firsttrend.lastbkyr');
    buf = buf.replace(/FirstTInFormulaset\(NoTrend\)/gi, 'x.firstnotrend');
    buf = buf.replace(/FirstTInFormulaset\(Trend\)/gi, 'x.firsttrend');
    buf = buf.replace(/FirstTinFormulaSet\(NoTrend,\s*(\w+|\d+)\)/gi, 'x.firstnotrend');
    buf = buf.replace(/FirstTinFormulaSet\(Trend,\s*(\w+|\d+)\)/gi, 'x.firsttrend');

    buf = buf.replace(/LastTinFormulaSet\(NoTrend\)/gi, 'x.lastnotrend');
    buf = buf.replace(/LastTinFormulaSet\(Trend\)/gi, 'x.lasttrend');
    buf = buf.replace(/LastTinFormulaSet\(NoTrend,\s*(\w+|\d+)\)/gi, 'x.lastnotrend');
    buf = buf.replace(/LastTinFormulaSet\(Trend,\s*(\w+|\d+)\)/gi, 'x.lasttrend');
    // buf = buf.replace(/LastTinFormulaSet\(NoTrend,PeriodInT\)/gi, 'x.lastnotrend');

    buf = buf.replace(/FormulaSetInT\(LastTinPeriod\)/gi, 'x.lastinperiod');
    buf = buf.replace(/FormulaSetInT\(FirstTinPeriod\)/gi, 'x.firstinperiod');

    buf = buf.replace(/\[LastTinPeriod\(PeriodInT\)]/gi, '[lastinperiod]');
    buf = buf.replace(/\LastTinPeriod\(PeriodInT\)/gi, 'x.lastinperiod');
    buf = buf.replace(/LastTinYear\(T-TsY\)/gi, 'x.prevbkyear');

    buf = buf.replace(/\[1]/g, '[doc]');
    buf = buf.replace(/\[T]/g, ''); //Variable[T] is the same as Variable, its always in default to the corresponding time.
    buf = buf.replace(/\[GetT\(T,-1\)]/gi, '[prev]'); //Variable[T] is the same as Variable, its always in default to the corresponding time.
    buf = buf.replace(/\[LastT\]/gi, '[lastinperiod]');
    //(FormulaSetInT(GetT(T,-1))<>NoTrend) ==>  !x.prev.isnotrend
    buf = buf.replace(/ValueT\(1\)/gi, 'x.firstdetail');
    buf = buf.replace(/GetT\(T,-TsY,0,TsY\)/gi, 'x.prevbkyr');
    buf = buf.replace(/GetT\(T,-1\)/gi, 'x.prev');
    buf = buf.replace(/GetT(T,-1,1,1)/gi, 'x.prev');
    buf = buf.replace(/\(MaxT\)/g, '(x.last)');//only replace Function(MaxT) into  Function(x.last)


    //TODO: same as TSY?
    buf = buf.replace(/TsY\(LastTinPeriod\)/gi, 'TsY');
    buf = buf.replace(/TsY\(T\)/gi, 'x.tsy');
    buf = buf.replace(/\[0\]/g, '.title ');
    /*buf = buf.replace(/Visible\((\w+)\)/gi, '$1.visible')  ; Is done in ASTPreparser.js*/

    //(& types
    buf = buf.replace(/(=|,|\()\s{0,4}\&/gm, ' $1 ');// replace all '=   &' and '(  &'   with = or ( respectively
    buf = buf.replace(/\(\s*not /gim, '(!');//this of course only tackles the half of it
    buf = buf.replace(/^\s*&/gm, '');

    //AND &
    buf = buf.replace(/&/gmi, '+');// convert & to &&
    buf = buf.replace(/ And /gmi, '&&');// convert & to &&
    buf = buf.replace(/\)\s*and\s*\(/gmi, ')&&(');// convert )  and ( => &&

    buf = buf.replace(/\s*&&not\s*/gmi, '&& !');// convert )  and ( => &&

    //OR |
    buf = buf.replace(/\||\s+or /gmi, ' || ');// convert | to ||
    buf = buf.replace(/ Or /gmi, ' || ');// convert OR to ||
    buf = buf.replace(/\)\s*or\s*\(/gim, ')||(');

    //fix = to == when <=
    buf = buf.replace(/=/gm, '==');// convert = to ==
    buf = buf.replace(/<==/gm, '<=');
    buf = buf.replace(/>==/gm, '>=');
    buf = buf.replace(/<>/gm, '!=');
    buf = buf.replace(/<->/gm, '!=');
    buf = buf.replace(/ Implies /g, '&&');
    buf = buf.replace(/ mod /g, ' % ');

    return buf;
}

//console.info(finFormulaGeneric('[(VATPaymentFraction[GetT(T,-1)]>0)*(Round(VATPaymentFraction[GetT(T,-1)],0)=VATPaymentFraction[GetT(T,-1)])]'))
function javaScriptToFinGeneric(buf) {
    var buf = buf.replace(/!=/gm, '<>');
    //buf = buf.replace(/<=/gm, '<==');
    //buf = buf.replace(/>=/gm, '>==');
    buf = buf.replace(/==/gm, '=');// convert = to ==
    buf = buf.replace(/\|\|/gmi, ' | ');// convert | to ||
    buf = buf.replace(/&&/gmi, ' & ');// convert )  and ( => &&
    return buf;
}

//if it ends up being impossible to resolve generic
//we will have to do it in the formula-bootstrap.js
//there we know what is a Variable name
function finChoice(formula) {
    /**
     * Sometimes FFL is converted incorrectly with a trailing '\''
     * This is bugfixing the problem
     */
    formula = formula.replace(/\\''$/g, "'")

    //looks like a variable reference
    if (/^[a-z0-9_ ]+$/i.test(formula)) {
        return formula + '.choices';
    }
    //tricky one is just
    //three options
    //Directly with mm/dd/yy
    else if (formula.indexOf("|") < 0 && formula.indexOf(":") < 0) {
        const cleanslice = formula.slice(1, -1);
        return '[{ "name": "' + cleanslice + '", "value": "' + cleanslice + '" }]';
    }
    //NL|USA|BEL|GER
    else if (formula.indexOf(":") < 0) {
        var split = formula.split('|');
        //remove a trailing and leading " character.
        split[0] = split[0].slice(1);
        split[split.length - 1] = split[split.length - 1].slice(0, -1);

        split = split.map(function(e, idx) {
            return '{ "name": "' + idx + '" ,"value":' + (e ? '"' + e + '"' : null) + '}'
        })
        return "[" + split.join(',') + "]";
    }
    //HIGH:1|LOW:2|UNKNOWN:3
    else {
        formula = formula.trim().slice(1, -1);
        var choices = formula.replace(/'/gmi, '');
        choices = choices.replace(/: /g, ":")
        choices = choices.replace(/:/gmi, '\" , \"value\" : \"');
        choices = choices.replace(/\|/gmi, '\"} , { \"name\" :\"');
        return "[{ \"name\" : \"" + choices + "\" }]";
    }
}

function FinFormula() {
}

FinFormula.prototype.toJavascriptChoice = function(choiceObjectString) {
    var choiceObject = JSON.parse(choiceObjectString.replace(/'/gmi, '"'));
    var response = '';
    for (var i = 0; i < choiceObject.length; i++) {
        var choiceItem = choiceObject[i];
        if (i !== 0) {
            response += '|';
        }
        response += choiceItem.name + '|' + choiceItem.value;
    }
    return response;
}

FinFormula.prototype.finFormulaGeneric = finFormulaGeneric;
FinFormula.prototype.javaScriptToFinGeneric = javaScriptToFinGeneric;
FinFormula.prototype.parseFormula = finFormulaGeneric;
FinFormula.prototype.finChoice = finChoice;

//something more usefull came to mind, catches this large chunk of possibilities.
//>> old version would look like : buf = buf.replace(/Q_Map([0-9]{2})/gi, 'Q_MAP$1')9;
FinFormula.prototype.fixCasing = function(buf) {
    return buf.replace(/[^\w]{1}(Q_\w*)/gmi, function($1) {
        return $1.toUpperCase()
    })
};
module.exports = FinFormula.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\ffl\\FinFormula.js","/lme-core\\exchange_modules\\ffl",undefined)
},{"_process":38,"buffer":36}],10:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * All indexed will be linked to a array of values, like a DB structure
 * Lightweigt data-model
 * @constructor
 */
function Register() {
    this.schema = []
    this.createdIndexes = []
    this.clean()
    this.changes = []
}

Register.prototype.clean = function() {
    this.header = null;
    this.constants = []
    for (var j = 0; j < this.createdIndexes.length; j++) {
        delete this[this.createdIndexes[j]];
    }
    this.createdIndexes = []
    this.schema.length = 0
    this.i = []
    this.schemaIndexes = {}
    //somehow 'valid' is a real important property
    //{{MODEL_VARIABLENAME_undefined}} will exist when 'valid' is not added to the list here. (since valid is created on demand in RegisterToLMEParser
    //Something alike if (VARIABLENAME.pattern) VARIABLENAME.valid = if(VARIABLENAME.test(VARIABLENAME),'','Invalid Input')
    //therefore adding the property 'valid 'too late while parsing.
    var schema = ['desc', 'start', 'end', 'name', 'index', 'modifier', 'parentId', 'tuple', 'refersto', 'treeindex', 'children', 'valid']//expect 'valid' to exist
    for (var j = 0; j < schema.length; j++) {
        this.addColumn(schema[j]);
    }
}
Register.prototype.getIndex = function(name) {
    if (!this[name]) this.createIndex(name)
    return this[name]
}
Register.prototype.lastRowIndex = function() {
    return this.i.length - 1
}
Register.prototype.addColumn = function(name) {
    if (this.schemaIndexes[name] == null) {
        this.schemaIndexes[name] = this.schema.length
        this.schema.push(name)
    }
}
Register.prototype.value = function(idx, key, value) {
    this.i[idx][this.schemaIndexes[key]] = value
}
Register.prototype.find = function(key, value) {
    const idx = this.schemaIndexes[key]
    const result = []
    for (var i = 0; i < this.i.length; i++) {
        if (this.i[i][idx] === value) result.push(this.i[i])
    }
    return result;
}
//can only be unique indexes, string based.
Register.prototype.createIndex = function(name) {
    if (!this[name]) {
        this.createdIndexes.push(name)
        const index = {}
        const sindex = this.schemaIndexes[name]
        const a = this.i
        for (var i = 0; i < a.length; i++) index[a[i][sindex]] = a[i]
        this[name] = index
    }
}
Register.prototype.addRow = function(row) {
    this.i.push(row)
    return this.i.length - 1
}
Register.prototype.inheritProperty = function(name, paramIndex) {
    const variable = this.getIndex('name')[name]
    if (variable[paramIndex]) return variable[paramIndex]
    if (variable[this.schemaIndexes.refersto]) return this.inheritProperty(variable[this.schemaIndexes.refersto], paramIndex)
    return "";
}
Register.prototype.doProx = function doProx(name, metaData, paramIndex) {
    const register = this;
    const variable = this.getIndex('name')[name];
    Object.defineProperty(metaData, 'value', {
        set: function(value) {
            variable[paramIndex] = value;
            register.changes.push({
                name: name,
                param: paramIndex
            })
        },
        get: function() {
            return register.inheritProperty(name, paramIndex);
        }
    });
}
Register.prototype.createInformationObject = function(name, hidden) {
    const variable = [];
    for (var paramIndex = 0; paramIndex < this.schema.length; paramIndex++) {
        var propertyName = this.schema[paramIndex];

        if (hidden.indexOf(paramIndex) != -1) continue
        const metaData = {name: propertyName};
        this.doProx(name, metaData, paramIndex)
        variable.push(metaData)
    }
    return variable;
}
Register.prototype.getAll = function(name) {
    const r = [], index = this.i, indexpos = this.schemaIndexes[name];
    for (var i = 0; i < index.length; i++) r[i] = index[i][indexpos]
    return r;
}
Register.prototype.walk = function(node, depth, visitor) {
    visitor(node, depth)
    const childs = node[this.schemaIndexes.children];
    for (var i = 0; i < childs.length; i++) {
        this.walk(childs[i], depth + 1, visitor)
    }
}
Register.prototype.toString = function() {
    return "variables:[" + this.i.length + "]\n" + this.i.join('\n')
}
exports.Register = Register
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\ffl\\Register.js","/lme-core\\exchange_modules\\ffl",undefined)
},{"_process":38,"buffer":36}],11:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Backwards compatible decorator, until all unit-tests success it will serve to fix bugs.
 */
const SolutionFacade = require('../../src/SolutionFacade')
const RegisterToLMEParser = require('./RegisterToLMEParser').RegisterToLMEParser
const FFLFormatter = require('./FFLFormatter').Formatter
const Register = require('./Register').Register

function RegisterPlainFFLToLMEParser() {
}

RegisterPlainFFLToLMEParser.prototype.name = 'ffl'
RegisterPlainFFLToLMEParser.prototype.status = 'green';
RegisterPlainFFLToLMEParser.prototype.headername = '.finance ffl';

RegisterPlainFFLToLMEParser.prototype.deParse = function(data, workbook) {
    return new RegisterToLMEParser().deParse(data, workbook)
}
RegisterPlainFFLToLMEParser.prototype.parseData = function(data, workbook) {
    const register = new Register()
    const fflFormatter = new FFLFormatter(register, data)
    fflFormatter.parseProperties();
    workbook.modelName = fflFormatter.name || workbook.modelName;
    return new RegisterToLMEParser().parseData(register, workbook)
}
exports.RegisterPlainFFLToLMEParser = RegisterPlainFFLToLMEParser;
SolutionFacade.addParser(RegisterPlainFFLToLMEParser.prototype);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\ffl\\RegisterPlainFFLDecorator.js","/lme-core\\exchange_modules\\ffl",undefined)
},{"../../src/SolutionFacade":28,"./FFLFormatter":8,"./Register":10,"./RegisterToLMEParser":13,"_process":38,"buffer":36}],12:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Used in front-end to reassemble the FFL file when needed.
 */
const StringBuffer = require('../../../model-tests/StringUtils').StringBuffer
//extract underlying data-model
//make an register, schema - indexed with array values
//Can expand while adding more properties and keeps its integrity
//schema and nodes
//re-use over implementations

function RegisterToFFL(register) {
    this.schema = register.schema;
    this.constants = register.constants;
    register.createIndex('name')
    //this.nodes = register.getIndex('name');
    this.vars = register.getIndex('name');
    this.child = {}
    this.nameIndex = register.schemaIndexes.name;
    this.descIndex = register.schemaIndexes.desc;
    this.startIndex = register.schemaIndexes.start;
    this.endIndex = register.schemaIndexes.end;
    this.treeIndex = register.schemaIndexes.treeindex;
    this.parentNameIndex = register.schemaIndexes.parentId;
    this.stringIndex = register.schemaIndexes.index;
    this.modifierIndex = register.schemaIndexes.modifier;
    this.referstoIndex = register.schemaIndexes.refersto;
    this.tupleIndex = register.schemaIndexes.tuple;
    this.displaytypeIndex = register.schemaIndexes.displaytype;
    this.visibleIndex = register.schemaIndexes.visible;
    this.decimalsIndex = register.schemaIndexes.fixed_decimals;
    this.datatypeIndex = register.schemaIndexes.datatype;
    this.frequencyIndex = register.schemaIndexes.frequency;
    this.options_titleIndex = register.schemaIndexes.options_title;
    this.formulaindex = register.schemaIndexes.formula;
    this.lockedIndex = register.schemaIndexes.locked;
    this.requiredIndex = register.schemaIndexes.required;
    this.childIndex = register.schemaIndexes.children;
    this.output = "";
    this.delimiter = ';'
    this.line_delimiter = '\n'
    //some properties are generated for the tree structure, and cannot be changes manually
    this.variableProperties = [this.nameIndex, this.modifierIndex, this.referstoIndex, this.tupleIndex]
    this.hiddenProperties = [this.startIndex, this.endIndex, this.treeIndex, this.stringIndex, this.schema.indexOf('version'), this.parentNameIndex, this.childIndex, this.descIndex]
    this.indents = [];
    const depth = 30
    for (var i = 0; i < depth; i++) {
        this.indents[i] = new Array(i).join(" ")
    }
    this.relevant = []
    for (var i = 0; i < this.schema.length; i++) {
        if ((this.hiddenProperties.indexOf(i) == -1) && (this.variableProperties.indexOf(i) == -1)) {
            this.relevant.push(i)
        }
    }
    //creating indents + brackets
    const shiftindent = [];
    for (var i = 0; i < depth; i++) {
        shiftindent[i] = []
        for (var j = 0; j <= i; j++) {
            var item = [];
            for (var k = 0; k <= j; k++) {
                item.push(new Array(i - k).join(" "))
                item.push("}\n")
            }
            shiftindent[i][j] = item.join("")
        }
    }

    this.shiftindent = shiftindent;
    this.formulaIndexes = []
    var formulas = ['valid', 'title', 'hint', 'locked', 'visible', 'required', 'choices']
    for (var i = 0; i < formulas.length; i++) {
        this.formulaIndexes.push(register.schemaIndexes[formulas[i]])
    }
    this.defaultValues = [];
    this.defaultValues[this.visibleIndex] = {
        undefined: true,
        null: true,
        '1.0': true,
        '1': true,
        'true': true,
        'On': true
    }
    this.defaultValues[this.lockedIndex] = {
        undefined: true,
        null: true,
        '0.0': true,
        '0': true,
        'false': true,
        'Off': true,
        'No': true
    }
    this.defaultValues[this.requiredIndex] = {
        undefined: true,
        null: true,
        '0.0': true,
        '0': true,
        'false': true,
        'No': true,
        'Off': true
    }
}

RegisterToFFL.prototype.toGeneratedCommaSeperated = function(rooNodeName) {
    const delimiter = this.delimiter;
    const hidden = this.hiddenProperties;
    const lines = []
    const rootNode = this.vars[rooNodeName || 'root']
    this.walk(rootNode, 0, function(variable, depth) {
        lines.push(new StringBuffer().append(" ".repeat(depth)).append(variable.filter(function(value, index) {
            return hidden.indexOf(index) == -1;
        }).join(delimiter)).toString());
    })
    this.output = lines.join(this.line_delimiter);
    return this.output;
}
RegisterToFFL.prototype.walk = function(node, depth, visitor) {
    visitor(node, depth)
    const childs = node[this.childIndex];
    for (var i = 0; i < childs.length; i++) {
        this.walk(childs[i], depth + 1, visitor)
    }
}
RegisterToFFL.prototype.validate = function(line) {
    return (this.schema.length - this.hiddenProperties.length) == ((line.match(/;/g) || []).length + 1)
}

/**
 * TODO: internationalization should happen here, inject constants on placeholders
 */
RegisterToFFL.prototype.toGeneratedFFL = function(rootVariableName, modelName) {
    const constants = this.constants;
    const formattedFFL = []
    const midx = this.modifierIndex;
    const nidx = this.nameIndex;
    const ridx = this.referstoIndex;
    const rname = " refers to "
    const indents = this.indents;
    const tidx = this.tupleIndex;
    const tuple = "tuple "
    const variable = "variable "
    //define shiftindent relevant indexes;
    const schema = this.schema;
    const relevant = this.relevant;
    const shiftindent = this.shiftindent;

    var cdept = 0;
    const rootNode = this.vars[rootVariableName || 'root'];
    this.walk(rootNode, 1, function(node, depth) {
        const items = [];
        if (cdept >= depth) items.push(shiftindent[cdept][(cdept - depth)])
        items.push(indents[depth])
        items.push(node[tidx] ? tuple : variable)
        items.push(node[midx] || "")
        items.push(node[nidx])
        if (ridx != -1 && node[ridx]) {
            items.push(rname);
            items.push(node[ridx])
        }
        items.push("\n")
        items.push(indents[depth])

        const props = []
        for (var i = 0; i < relevant.length; i++) {
            const real = relevant[i]
            if (node[real]) {
                props.push([indents[depth + 1], schema[real], ": ", node[real], ";"].join(""))
            }
        }
        if (props.length > 0) {
            items.push("{\n")
            items.push(props.join("\n"))
        } else {
            items.push("{")
        }
        cdept = depth;
        formattedFFL.push(items.join(""));
    })
    formattedFFL.push(shiftindent[cdept][cdept - 1]);
    if (!rootVariableName) {
        formattedFFL[1] = " root\n {"
        formattedFFL.shift()
    }
    for (var i = 0; i < formattedFFL.length; i++) {
        var obj = formattedFFL[i];
        formattedFFL[i] = obj.replace(/__(\d+)/gm, function($1, $2) {
            return constants[parseInt($1.substring(2))]
        })
    }
    return formattedFFL;
}
exports.RegisterToFFL = RegisterToFFL;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\ffl\\RegisterToFFL.js","/lme-core\\exchange_modules\\ffl",undefined)
},{"../../../model-tests/StringUtils":46,"_process":38,"buffer":36}],13:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const SolutionFacade = require('../../src/SolutionFacade')
const RegisterToFFL = require('./RegisterToFFL').RegisterToFFL
const FinFormula = require('./FinFormula')
const AST = require('../../../ast-node-utils/index').ast
const log = require('log6')
var esprima = require('esprima');

/**
 * ffl parsing, supports refers-to, modifiers. internationalization. v1:{@fflparser.js} field-validations
 * V2
 *  Quicker, cleaner, flexible, less data-loss
 *   1) Indexing makes lookups while processing data more efficient and use less code.
 *   2) Prefer ["a","b"].join('') above "a" + "b" its way quicker.
 *   3) The indexer has removed parsing abnormals with propername " visible" etc.. Makes the code more clean
 *   4) Own char-interpreter was more complex than recursive regex-replace.
 *
 * TODO: load property names in DB which directly correspond, fix defaults while saving.
 * TODO: some exotic choices not work correctly
 */
function RegisterToLMEParser() {
}

RegisterToLMEParser.prototype.name = 'ffl2'
RegisterToLMEParser.prototype.status = 'green';
RegisterToLMEParser.prototype.headername = '.finance ffl';
RegisterToLMEParser.prototype.walk = function(node, depth, visitor) {
    visitor(node, depth)
    const childs = node[this.childIndex];
    for (var i = 0; i < childs.length; i++) {
        this.walk(childs[i], depth + 1, visitor)
    }
}
RegisterToLMEParser.prototype.deParse = function(data, workbook) {
    if (!workbook.indexer) return null;
    return new RegisterToFFL(workbook.indexer).toGeneratedFFL(undefined, workbook.modelName)
}
RegisterToLMEParser.prototype.parseData = function(data, workbook) {
    const indexer = data;
    workbook.indexer = indexer;
    const self = this;
    const fflRegister = new RegisterToFFL(indexer)
    const register = data.getIndex('name');
    const modelName = workbook.modelName || indexer.name;
    const solution = SolutionFacade.createSolution(modelName || "NEW");
    const nameIndex = indexer.schemaIndexes.name;
    const tupleIndex = indexer.schemaIndexes.tuple;
    const validIndex = indexer.schemaIndexes.valid;
    const lengthIndex = indexer.schemaIndexes.length;
    const patternIndex = indexer.schemaIndexes.pattern;
    const referstoIndex = indexer.schemaIndexes.refersto;
    const displayTypeIndex = indexer.schemaIndexes.displaytype;
    const dataTypeIndex = indexer.schemaIndexes.datatype;
    const rangeIndex = indexer.schemaIndexes.range;
    const aggregationIndex = indexer.schemaIndexes.aggregation;
    const modifierIndex = indexer.schemaIndexes.modifier;
    this.childIndex = indexer.schemaIndexes.children;
    const childIndex = this.childIndex;
    const choiceIndex = indexer.schemaIndexes.choices;
    const trend_formulaIndex = indexer.schemaIndexes.formula_trend;
    const notrend_formulaIndex = indexer.schemaIndexes.formula_notrend;
    this.formulaIndexes = []
    const formulaIndexes = this.formulaIndexes
    var formulas = ['valid', 'title', 'hint', 'locked', 'visible', 'required', 'choices']
    for (var i = 0; i < formulas.length; i++) {
        this.formulaIndexes.push(data.schemaIndexes[formulas[i]])
    }
    //only inherit properties once.
    const inherited = {}

    //INFO: inheritance could also be possible via database
    function inheritProperties(node) {
        if (!inherited[node[nameIndex]] && node[referstoIndex]) {
            inherited[node[nameIndex]] = true
            const supertype = register[node[referstoIndex]]
            if (log.DEBUG && supertype == null) log.debug('RefersTo: [' + node[referstoIndex] + '] is declared in the model but does not exsists');
            //first inherit from parents of parents.
            if (supertype[fflRegister.referstoIndex]) inheritProperties(supertype)
            for (var i = 0; i < supertype.length; i++) {
                if (node[i] == null) node[i] = supertype[i];
            }
        }
    }

    var nestedTupleDepth = 0
    const tuples = []
    const rootNode = register['root']
    this.walk(rootNode, 3, function(node, depth) {
        if (depth < tuples.length) {
            tuples.length = depth;
            while (tuples.length > 0 && !tuples[depth - 1]) tuples.length--
        }
        const nodeName = node[nameIndex];
        var type = node[displayTypeIndex]
        inheritProperties(node)

        // expecting an parentName..
        var parentId = node[fflRegister.parentNameIndex] ? indexer.i[node[fflRegister.parentNameIndex]][fflRegister.nameIndex] : null;
        if (parentId == 'root') {
            parentId = undefined;
        }

        /**
         * This is where formula-sets are combined.
         * if the node has and trend and notrend formula, the target formula will be x.trend ? node.formula_trend : valueFormula
         * Ofcourse this will be for every formulaset that exists in the node
         * Document formulaset is notrend, formula = notrend
         * This way it would also be possible to have and formulaset 'orange', 'document' and trend formulasets
         */
        var trendformula = node[trend_formulaIndex];
        var valueFormula = node[notrend_formulaIndex] || node[fflRegister.formulaindex];//notrend is more specific than formula
        if (trendformula !== undefined && valueFormula !== trendformula) {//first of all, if both formula's are identical. We can skip the exercise
            valueFormula = 'If(IsTrend,' + trendformula + ',' + (valueFormula ? valueFormula : 'NA') + ')';
        }
        if (node[fflRegister.frequencyIndex] == 'column' && node[dataTypeIndex] == 'number' && node[aggregationIndex] == 'flow') {
            valueFormula = 'If(TimeAggregated,Aggregate(Self,x),' + valueFormula + ')'
        }
        //if column && number.. (aggregate)

        if (node[modifierIndex] == '=') {
            const siblings = indexer.i[node[fflRegister.parentNameIndex]][childIndex]
            var formula = '0';
            for (var i = 0; i < siblings.length; i++) {
                if (siblings[i][modifierIndex] && siblings[i][modifierIndex] != '=') {
                    formula += siblings[i][modifierIndex] + siblings[i][nameIndex];
                }
            }
            valueFormula = formula;
        }
        if (type == 'select') {
            if (!node[choiceIndex]) {
                if (log.debug) log.debug('Row [' + nodeName + '] is type [select], but does not have choices')
            } else if (node[choiceIndex].split('|').length == 2) {
                type = 'radio'
            } else {
                if (log.TRACE) log.trace('[' + nodeName + '] ' + node.choices)
            }
        }

        //TODO: quick-fix move into IDE ScorecardTool-addon
        if (nodeName.match(/MAP[0-9,A-z]+_(VALIDATION|INFO|HINT|WARNING)$/i)) {
            if (fflRegister.defaultValues[fflRegister.visibleIndex][node[fflRegister.visibleIndex]]) {
                node[fflRegister.visibleIndex] = 'Length(' + nodeName + ')'
                node[fflRegister.frequencyIndex] = 'none'
            }
            type = 'string'
        } else if (nodeName.match(/MAP[0-9,A-z]+_PARAGRAAF[0-9]+$/i)) {
            node[fflRegister.frequencyIndex] = 'none'
            type = 'paragraph'
        }


        if (!node[validIndex]) {
            //valid formula's (this will become more complex soon valid(list<predicate,message>) now predicate,message
            //info: patternIndex is language-specific (f.e. email- regular expression)
            const validFormulas = []
            //if (node[validIndex]) validFormulas.push(node[validIndex])
            if (node[patternIndex]) validFormulas.push("REGEXPMATCH(" + node[patternIndex] + ',' + node[nameIndex] + ')');
            if (node[lengthIndex]) validFormulas.push('Length(' + node[nameIndex] + ') ' + node[lengthIndex]);
            if (node[rangeIndex]) validFormulas.push('(' + node[rangeIndex].replace(/(>|>=|<|<=)/gi, node[nameIndex] + ' $1') + ')');
            if (node[dataTypeIndex] == 'number') validFormulas.push('not isNaN(OnNA(' + node[nameIndex] + ',null))');
            //its also only interesting when its a required field and entered
            // or when its entered and required
            //' + node[nameIndex] + '.required &&
            //valid formulas are only interesting when entered OR required
            if (validFormulas.length > 0) node[validIndex] = 'If(' + validFormulas.join(' And ') + ',"","Enter valid input.")'
            //if (validFormulas.length > 0) console.info(node[nameIndex] + ':' + node[validIndex])
        }
        const frequency = (node[tupleIndex]) ? 'none' : (node[fflRegister.frequencyIndex] || 'column');
        if (node[tupleIndex]) type = 'paragraph'
        var uiNode = SolutionFacade.createUIFormulaLink(solution, nodeName, 'value', self.parseFFLFormula(indexer, valueFormula, nodeName, 'value', type), type, frequency);
        //hierarchical visibility
        const visibleFormula = node[fflRegister.visibleIndex];
        if (visibleFormula && parentId) node[fflRegister.visibleIndex] = fflRegister.defaultValues[visibleFormula] ? parentId + '.visible' : parentId + '.visible and ' + visibleFormula

        if (node[fflRegister.decimalsIndex]) uiNode.decimals = parseInt(node[fflRegister.decimalsIndex]);

        uiNode.frequency = frequency;

        /**
         * Tuple properties
         */
        if (node[tupleIndex] || tuples.length > 0) {
            uiNode.tuple = true;
            uiNode.nestedTupleDepth = 0
            for (var i = 0; i < tuples.length; i++)
                if (tuples[i]) uiNode.nestedTupleDepth++
            if (node[tupleIndex]) {
                uiNode.tupleDefinition = true;
                uiNode.datatype = 'string' //Will story string-based values (Jan,Piet,123Jaar,Etc..)
                if (tuples.length > 0) {
                    uiNode.tupleDefinitionName = tuples[tuples.length - 1].rowId;
                    uiNode.tupleProperty = true
                }
                tuples[depth] = uiNode
            } else {
                uiNode.tupleDefinitionName = tuples[tuples.length - 1].rowId;
                uiNode.tupleProperty = true
            }
        }

        if (node[fflRegister.options_titleIndex] == 'locked') uiNode.title_locked = true

        uiNode.datatype = node[dataTypeIndex] || 'number';

        if (nodeName !== 'root') solution.setParentName(uiNode, parentId);

        for (var i = 0; i < formulaIndexes.length; i++) {
            const index = formulaIndexes[i];
            if (node[index]) {
                if (!fflRegister.defaultValues[index] || !fflRegister.defaultValues[index][node[index]])
                    SolutionFacade.createUIFormulaLink(solution, nodeName, indexer.schema[index], self.parseFFLFormula(indexer, node[index], nodeName, indexer.schema[index], null), undefined, frequency);
            }
        }
    });
    //think about formula-sets, same ritual as trend + notrend formulasets
    return solution;
}

/**
 * @param {optional} modelName
 */
RegisterToLMEParser.prototype.parseFFLFormula = function(indexer, formula, nodeName, col, type) {
    if (!formula) return type == 'string' ? AST.STRING("") : {
        "type": "Identifier",
        "name": 'null'
    }
    var finparse = col == 'choices' ? FinFormula.finChoice(formula) : FinFormula.parseFormula(formula)
    //allow multi-language here
    finparse = finparse.replace(/__(\d+)/gm, function($1, $2) {
        return indexer.constants[parseInt($2)]
    })
    var formulaReturn = 'undefined';
    try {
        formulaReturn = esprima.parse(finparse).body[0].expression
    }
    catch (e) {
        if (log.DEBUG) log.debug('unable to parse [' + finparse + '] returning it as String value [' + nodeName + "] : " + col, e);
        formulaReturn = AST.STRING(finparse);
    }
    return formulaReturn;
}

exports.RegisterToLMEParser = RegisterToLMEParser;
SolutionFacade.addParser(RegisterToLMEParser.prototype);
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\ffl\\RegisterToLMEParser.js","/lme-core\\exchange_modules\\ffl",undefined)
},{"../../../ast-node-utils/index":2,"../../src/SolutionFacade":28,"./FinFormula":9,"./RegisterToFFL":12,"_process":38,"buffer":36,"esprima":35,"log6":35}],14:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/*
 First, most basic export of values
 Just calling getAllValues() internally to export
 */
var SolutionFacade = require('../../src/SolutionFacade');
var PropertiesAssembler = require('../../src/PropertiesAssembler');
var jsonValues = {
    name: 'jsonvalues',
    extension: 'json',
    headername: 'JSON Values',
    parseData: function(data, workbook) {
        updateValues(data, workbook.context.values);
        return SolutionFacade.createSolution(workbook.getSolutionName());
    },
    deParse: function(rowId, workbook) {
        const allValues = workbook.getAllChangedValues();
        //clean up the audit while deparsing.
        allValues.forEach(function(el) {
            if (el.varName.endsWith('_title')) {
                el.varName = correctPropertyName(el.varName)
            } else {
                el.varName = correctFileName(el.varName)
            }
        })
        return allValues;
    }
};

function correctPropertyName(name) {
    return name.replace(/^([^_]+_[\w]*_\w+)$/gmi, '$1');
}

function correctFileName(name) {
    return name.replace(/^([^_]+_[\w]*)_\w+$/gmi, '$1');
}

/**
 * values are directly injected into the context, not through the API
 * They will not be saved in the audit.
 */
function updateValues(data, docValues) {
    for (var key in docValues) {
        docValues[key] = {};
    }
    for (var key in data.values) {
        const value = data.values[key];
        var nodeId = key.split('#')[0]
        const nodeColId = key.split('#')[1]
        if (!nodeId.endsWith('_value')) {
            nodeId = nodeId + '_value'
        }
        const fetch = PropertiesAssembler.fetch(nodeId);
        //we don't have to import values for variables we don't use.
        if (fetch) {
            var enteredValue = value.value;
            if (fetch.datatype == 'number') {
                enteredValue = enteredValue == null ? null : Number(enteredValue)
            }
            docValues[fetch.ref][parseInt(nodeColId)] = enteredValue;
        }
    }
}

SolutionFacade.addParser(jsonValues)
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\jsonvalues\\jsonvalues.js","/lme-core\\exchange_modules\\jsonvalues",undefined)
},{"../../src/PropertiesAssembler":26,"../../src/SolutionFacade":28,"_process":38,"buffer":36}],15:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const SolutionFacade = require('../../src/SolutionFacade')
const FormulaService = require('../../src/FormulaService')
const PropertiesAssembler = require('../../src/PropertiesAssembler')
const FunctionMap = require('../../src/FunctionMap')
const log = require('log6');

function FormulaInfo(dataArg, schema, modelName) {
    this.formulas = [];
    this.variables = []
    const self = this;
    this.data = dataArg;
    const data = [];
    this.nodes = [];
    const forms = {};
    FormulaService.visitFormulas(function(formula) {
        formula.id = formula.id || formula.index;
        forms[formula.name] = formula;
        self.addFormula(formula)
    });
    const names = {};
    const modelNamePrefix = modelName + '_';
    this.formulas.forEach(function(formula) {
        const name = correctFileName(formula.name);
        if (names[name] === undefined) {
            names[name] = true;
            const title = forms[modelNamePrefix + name + '_title'] || {original: null};
            const hint = forms[modelNamePrefix + name + '_hint'] || {original: ''};
            const visible = forms[modelNamePrefix + name + '_visible'] || {original: false};
            const valid = forms[modelNamePrefix + name + '_valid'] || {original: false};
            const value = forms[modelNamePrefix + name + '_value'] || {original: ''};
            const formula_trend = forms[modelNamePrefix + name + '_trend'] || {original: ''};
            const formula_notrend = forms[modelNamePrefix + name + '_notrend'] || {original: ''};
            const locked = forms[modelNamePrefix + name + '_locked'] || {original: false};
            const choices = forms[modelNamePrefix + name + '_choices'] || {original: null};
            data.push([name, title.original, value.original, formula_trend.original, formula_notrend.original, visible.original, locked.original, choices.original, hint.original, valid.original])
        }
    })
    const types = ['name', 'title', 'value', 'notrend', 'trend', 'visible', 'locked', 'choices', 'hint', 'valid'];
    //this.formulas = undefined;
    this.meta = {
        view: {
            columns: []
        }
    }
    var counter = 0;
    types.forEach(function(type) {
        self.meta.view.columns.push({
            "width": ['locked', 'visible', 'entered'].indexOf(type) == -1 ? 50 : undefined,
            "name": type,
            "dataTypeName": "text",
            "fieldName": type,
            "position": counter++,
            "renderTypeName": "text",
        })
    })
}

FormulaInfo.prototype.setSchema = function(schema) {
    this.schema = schema;
}
FormulaInfo.prototype.addFormula = function(formula) {
    formula.fflname = variableName(formula.name)
    this.formulas.push(formula);
}

function correctFileName(name) {
    return name.replace(/^[^_]+_([\w]*)_\w+$/gmi, '$1');
}

function variableName(name) {
    return name.replace(/^[^_]+_([\w]*_\w+)$/gmi, '$1');
}

function LMEParser() {
}

LMEParser.prototype.name = 'lme'
LMEParser.prototype.status = 'green';
LMEParser.prototype.headername = '.finance lme';
LMEParser.prototype.parseData = function(data, workbook) {
    const solution = SolutionFacade.createSolution(data.name);
    solution.nodes = data.nodes;
    if (data.variables) FormulaService.initVariables(data.variables)
    PropertiesAssembler.bulkInsert(solution);
    FormulaService.bulkInsertFormula(data.formulas)
    data.formulas.forEach(function(formula) {
        FunctionMap.initializeFormula(formula);
    })
    if (log.DEBUG) log.info('Done import ' + data.name)
    return solution;
}
const unwantedKeys = {
    delegate: true,
    ast: true,
    body: true
}
LMEParser.prototype.deParse = function(rowId, workbook) {
    const modelName = workbook.getSolutionName();
    const formulaInfo = {};
    const info = new FormulaInfo(formulaInfo, {}, modelName);
    info.name = modelName;
    PropertiesAssembler.findAllInSolution(modelName, function(property) {
        info.nodes.push(property)
    })
    FormulaService.getVariables(function(variable) {
        info.variables.push(variable)
    });
    return JSON.stringify(info, function(key, value) {
        return unwantedKeys[key] ? undefined : value;
    }, 0);
}
SolutionFacade.addParser(LMEParser.prototype);
exports.LMEParser = LMEParser.prototype
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\lme\\lmeparser.js","/lme-core\\exchange_modules\\lme",undefined)
},{"../../src/FormulaService":22,"../../src/FunctionMap":23,"../../src/PropertiesAssembler":26,"../../src/SolutionFacade":28,"_process":38,"buffer":36,"log6":35}],16:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Gives a Object-oriented view over a part of the model
 * Objectify the entire model is simply too expensive to do. 128(t3)*128(t2)*128(t1)*128(t0)*500(cols)*5000(vars)...
 * So we focus on the parts that are created, active and interesting to see/modify
 *
 * The LMETree has .sort() to sort the entire rows array naturally
 *  Ordering the Nodes requires a somewhat complex sort-function.
 *  ((VariableID|TupleDefinitionID),tIndex(tDepth)){maxTupleDepth}
 *  e.g: 0005,001,0006,000,0006,000 = 0006(John)
 *  e.g: 0005,001,0006,000,0008,001 = 0008(John,CarPayment)
 *
 *  Where id's are translated into Unique names per tIndex
 *  So 0005,001 is always the First (John) in this example
 *  So 0005,001,0006,000 is always the First (John,CarPayment) in this example
 *  0008 can be any child-variable in 0005.0006.* Example John.CarPayment.Status
 *
 * (!)       TODO:                                                      Another option should be
 * (?) be aware null-tuple is post-fixed with ,0,0 : t(2)    => 2,0,0 | 2,2,2
 * (?) be aware first-tuple is post-fixed with ,0  : t(4,1)  => 4,1,0 | 4,1,1
 *
 *  So will mean that:
 *  a(0)       = a0a0a0
 *   b(0,0)    = a0b0b0
 *    d(0,0,0) = a0b0d0
 *   b(0,1)    = a0b1b0 (!) what to do with the last index? re-use the one before or not?
 *    d(0,1,1) = a0b1d1
 *   b(0,tMax) = a0b9b0
 *  a(1)       = a1a0a0 (!) what to do with the last index? re-use the one before or not?
 *   b(1,tMax) = a1b9b0
 *  e(0)       = e0e0e0
 *
 * The LMETree.nodes has a blueprint from the entire model. (without tuple-instances, and not hiding the Tuple Definition)
 * The LMETree.no has all created nodes in a map, to speed up lookups.
 * The LMETree.rows is the Array, used for manipulation/view
 */
const SolutionFacade = require('../../src/SolutionFacade');
const PropertiesAssembler = require('../../src/PropertiesAssembler');

function WebExport() {
    this.exportAsObject = true;
    this.hide = true;
    this.name = 'webexport';
    this.headername = 'Native Object Web Presentation';
}

function LMETree(name, workbook) {
    this.name = name;
    this.workbook = workbook;
    this.nodes = {};
    this.names = {};
    this.rows = []
    this.no = {}
    this.repeats = {
        undefined: [workbook.context.columnSize, 1],
        none: [1, 1],
        column: [workbook.context.columnSize, 1],
        document: [1, workbook.context.columnSize],
        timeline: [1, workbook.context.columnSize]
    }
    this.columns = workbook.context.columns;
}

function noChange(workbook, rowId, col, index, type, yas) {
    var r;//return value
    var c = -1;//calculation counter
    return {
        get: function() {
            if (workbook.context.calc_count !== c && c < 0) {
                c = workbook.context.calc_count;
                r = workbook.get(rowId, col, index, yas);
            }
            return r;
        }
    }
}

function changeAble(workbook, rowId, col, index, type, yas) {
    var r;//return value
    var c = -1;//calculation counter
    return {
        get: function() {
            if (workbook.context.calc_count !== c) {
                c = workbook.context.calc_count;
                r = workbook.get(rowId, col, index, yas);
            }
            return r;
        }
    }
}

function changeAndCache(workbook, rowId, col, index, type, yas) {
    var r;//return value
    var c = -1;//calculation counter
    return {
        get: function() {
            if (workbook.context.calc_count !== c) {
                c = workbook.context.calc_count;
                r = workbook.get(rowId, col, index, yas);
            }
            return r;
        },
        set: function(v) {
            /*if (v != null && ((v.indexOf('+') > -1) || (v.indexOf('-') > -1) || (v.indexOf('/') > -1) || (v.indexOf('*')) > -1)) {
                if (!v.endsWith('+') && !v.endsWith('-'))
                    v = eval(v)
                else
                    return
            }*/
            workbook.set(rowId, (v == null || v == '') ? null : v, col, index, yas);
        }
    }
}

/**
 * Cache means only resolve once
 * Change means user can modify the value
 */
var properties = {
    title: {change: true, prox: changeAndCache},
    original: {change: true, prox: noChange},
    value: {change: true, prox: changeAndCache},
    visible: {prox: changeAble},
    entered: {prox: changeAble},
    valid: {prox: changeAble},
    locked: {prox: changeAble},
    required: {prox: changeAble},
    hint: {cache: true, prox: noChange},
    choices: {cache: true, prox: noChange}
}

var tuplecounter = 0;
LMETree.prototype.addTupleNode = function(node, treePath, index, yas, treeDepth) {
    const tree = this;
    const unique = yas.display + '__' + node.rowId
    const workbook = this.workbook;
    const rowId = node.rowId;
    const amount = this.repeats.document[0]
    const colspan = this.repeats.document[1];
    const type = 'tuple_add';
    const parent = this.nodes[yas.display + '_' + treePath[treePath.length - 1]];
    const path = treePath.join('.');
    const has = node.hash.slice();
    if (yas.depth == 0) {
        has[1] = '999'
    } else if (yas.depth == 1) {
        has[1] = yas.uihash
        has[3] = '999'
    } else if (yas.depth == 2) {
        has[1] = yas.parent.uihash
        has[3] = yas.uihash
        has[5] = '999'
    } else if (yas.depth == 3) {
        //throw Error('Something wrong here..')
        has[1] = yas.parent.uihash
        has[3] = yas.uihash
        has[5] = '999'
    }
    const rv = {
        id: rowId,
        order_id: has.join('.'),
        treeDepth: treeDepth,
        add: function() {
            const inneryas = workbook.addTuple(node.rowId, ++tuplecounter + '_' + yas.display + '_' + node.rowId, yas)
            workbook.set(node.rowId, inneryas.display + ":" + node.rowId, 'value', undefined, inneryas)

            workbook.walkProperties(node, function(child, yasi, cTreeDepth, yi) {
                if (yasi == 'new') {
                    tree.addTupleNode(child, path.split('.'), index, yi, cTreeDepth)
                }
                else {
                    tree.addWebNode(child, path.split('.'), index, yi, cTreeDepth)
                }
            }, inneryas, node.rowId, treePath.length)
            return inneryas;
        },
        //index is deprecated. Lookup the next sibling when needed. Could be tuple..
        index: index,
        title_locked: node.title_locked,
        type: 'tuple_add',
        path: path,
        ammount: amount,
        display: yas.display,
        colspan: colspan,
        depth: yas.depth + 1,//This could be a quick-fix to a serious problem.
        visible: true,
        cols: [{
            value: unique,
            entered: false,
            type: 'tuple_add',
            locked: true,
            visible: true,
            valid: true
        }],
        children: []
    };
    Object.defineProperty(rv, 'title', properties.title.prox(workbook, rowId, 'title', 0, undefined, yas));
    if (parent) parent.children.push(rv);
    this.nodes[unique] = rv;
    this.rows.push(rv)
}
LMETree.prototype.addWebNode = function(node, treePath, index, yas, treeDepth) {
    const workbook = this.workbook;
    const rowId = node.rowId;
    const unique = yas.display + "_" + rowId
    const amount = this.repeats[node.frequency][0]
    const colspan = this.repeats[node.frequency][1];
    const type = node.displayAs;
    const datatype = node.datatype
    const displaytype = type;// node.datatype;
    const path = treePath.join('.')
    const has = node.hash.slice();
    //alright this is a big step. and seems to work (there is a variable set wrongly.)
    if (yas.depth == 0) {
        has[1] = yas.uihash
    } else if (yas.depth == 1) {
        has[1] = yas.uihash
    } else if (yas.depth == 2) {
        has[3] = yas.uihash
        has[1] = yas.parent.uihash
    } else if (yas.depth == 3) {
        has[5] = yas.uihash
        has[3] = yas.parent.uihash
        has[1] = yas.parent.parent.uihash
    }
    const rv = {
        id: rowId,
        treeDepth: treeDepth,
        depth: yas.depth,
        display: yas.display,
        order_id: has.join('.'),
        index: index,
        title_locked: node.title_locked,
        type: node.displayAs,
        path: path,
        ammount: amount,
        colspan: colspan,
        tupleDefinition: node.tupleDefinition,
        cols: [],
        children: []
    };
    /**
     * Proxy properties to the column objects
     */
    var rt = {}
    Object.defineProperty(rt, 'value', properties.title.prox(workbook, rowId, 'title', 0, undefined, yas));
    if (node.frequency !== 'none') {
        rv.cols.push({
            value: null,
            entered: null,
            type: 'title',
            locked: null,
            valid: null
        });
    }
    for (var index = 0; index < amount; index++) {
        const r = {
            type: type,
            value: null,
            visible: null,
            entered: null,
            required: null,
            locked: null,
            valid: null
        }
        rv.cols.push(r);

        Object.defineProperty(r, 'value', properties.value.prox(workbook, rowId, 'value', index, displaytype, yas));
        Object.defineProperty(r, 'visible', properties.visible.prox(workbook, rowId, 'visible', index, displaytype, yas));
        Object.defineProperty(r, 'entered', properties.entered.prox(workbook, rowId, 'entered', index, displaytype, yas));
        Object.defineProperty(r, 'required', properties.required.prox(workbook, rowId, 'required', index, displaytype, yas));
        Object.defineProperty(r, 'locked', properties.locked.prox(workbook, rowId, 'locked', index, displaytype, yas));
        Object.defineProperty(r, 'valid', properties.locked.prox(workbook, rowId, 'valid', index, displaytype, yas));
    }
    /**
     * Proxy properties to the row object
     */
    this.columns.forEach(function(col) {
        rv[col] = null;
        Object.defineProperty(rv, col, properties[col].prox(workbook, rowId, col, 0, displaytype, yas));
    });
    const parent = this.nodes[yas.display + "_" + treePath[treePath.length - 1]];
    if (parent) parent.children.push(rv);
    this.nodes[unique] = rv;
    this.no[rowId] = rv;
    this.rows.push(rv)
}
WebExport.prototype.parseData = function(webExport, workbook) {
    return SolutionFacade.createSolution(workbook.modelName);
}

WebExport.prototype.deParse = function(rowId, workbook) {
    const modelName = workbook.getSolutionName();

    const lmeTree = new LMETree(modelName, workbook);
    PropertiesAssembler.findAllInSolution(modelName, function(node) {
        lmeTree.names[node.rowId] = true;
    });
    const treePath = [];
    var currentDepth = 0;
    const indexPath = [];
    //make the walk here,
    const rootNode = workbook.fetchSolutionNode(rowId, 'value') || workbook.getRootSolutionProperty(modelName);
    PropertiesAssembler.indexProperties(modelName)

    workbook.walkProperties(rootNode, function(node, yas, treeDepth, y) {
        if (node && node.rowId !== 'root') {
            if (treeDepth > currentDepth) {
                treePath.push(node.parentrowId)
                indexPath.push(-1)
                currentDepth = treeDepth;
            } else if (treeDepth < currentDepth) {
                treePath.length = treeDepth;
                indexPath.length = treeDepth;
                currentDepth = treeDepth;
            }
            const index = indexPath[indexPath.length - 1] + 1
            indexPath[indexPath.length - 1] = index
            if (yas == 'new') {
                lmeTree.addTupleNode(node, treePath, index, y, treeDepth)
            } else {
                lmeTree.addWebNode(node, treePath, index, y, treeDepth)
            }
        }
    }, workbook.resolveY(0).parent, null, 0)
    lmeTree.offset = 0;
    lmeTree.sort = function() {
        lmeTree.rows.sort((a, b) => {
            if (a.order_id == b.order_id) throw Error()
            return a.order_id == b.order_id ? 0 : a.order_id < b.order_id ? -1 : 1
        })
    }
    return lmeTree;
}
SolutionFacade.addParser(new WebExport())
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\exchange_modules\\presentation\\webexport.js","/lme-core\\exchange_modules\\presentation",undefined)
},{"../../src/PropertiesAssembler":26,"../../src/SolutionFacade":28,"_process":38,"buffer":36}],17:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * user friendly API
 * TODO: Move tuple related work to FESFacade
 */
require("./exchange_modules/ffl/RegisterPlainFFLDecorator");//just let it inject into the FESFacade
const log = require("log6");
const WorkBook = require("./src/JSWorkBook");
const Context = require("./src/Context");

function LMEService() {
}

LMEService.prototype.initializeFFlModelData = function(data, path) {
    var JSWorkBook;
    if (path.indexOf('KSP') > -1) {//KSP is only model with the 18year TimeModel, need 1 more example to generalize.
        JSWorkBook = new WorkBook(new Context());
    } else {
        const TimeAxis = require('./src/TimeAxis');
        const timeAxis = new TimeAxis(require('./resources/CustomImport'));
        JSWorkBook = new WorkBook(new Context(), timeAxis, 'detl');
    }
    JSWorkBook.importSolution(data, "ffl");
    var validate = JSWorkBook.validateImportedSolution();
    JSWorkBook.fixProblemsInImportedSolution();
    var validateFeedback = JSWorkBook.validateImportedSolution();
    if (validateFeedback.valid) {
        //valid
        if (log.DEBUG) log.debug("Initialized model [" + JSWorkBook.getSolutionName() + "]");
    } else {
        if (log.DEBUG) log.error(validateFeedback);
        throw Error("unable to initialize");
    }
    return JSWorkBook;
};
LMEService.prototype.addFunctions = function(plugin) {
    var functions = [];
    for (var functionName in plugin.entries) {
        functions.push(functionName);
        global[functionName] = plugin.entries[functionName];
    }
    if (log.TRACE) log.trace('Added fes-plugin [%s] functions [%s]', plugin.name, functions);
};
/**
 * rowId - VariableName
 * @Optional value - new value
 * TODO: move to tupleDefinition to support multiple tuple definition/tuple in tuple
 */
// Convert tuple index to tuple number

LMEService.prototype.getValue = function(context, rowId, columncontext, value, tupleindex) {
    columncontext = columncontext || 0;
    const fesContext = new Context();
    fesContext.values = context.values;
    const JSWorkBook = new WorkBook(fesContext);
    JSWorkBook.columns = context.columns || 2;
    JSWorkBook.properties = context.properties || JSWorkBook.properties;
    //prepare the workbook and context to match current appscope
    if (!context.isset) {
        JSWorkBook.updateValues();
        context.isset = true;
    }
    if (tupleindex != null) {
        tupleindex = JSWorkBook.tupleIndexForName(rowId, tupleindex);
        if (tupleindex == -1) tupleindex = JSWorkBook.insertTuple(rowId, tupleindex);
    }
    //setvalue
    if (value !== undefined) {
        //choice(select) requests
        JSWorkBook.setSolutionPropertyValue(rowId, value, 'value', columncontext, tupleindex);
        return [];
    } else {
        //getValue
        var values = [];
        var rootNode = JSWorkBook.getSolutionNode(rowId);
        if (rootNode) {
            JSWorkBook.walkProperties(rootNode, function(node, type, depth, yax) {
                values.push(getEntry(JSWorkBook, node.solutionName + '_' + node.rowId, columncontext, yax));
            }, JSWorkBook.resolveY(tupleindex), null, 0);
        } else {
            values.push({
                variable: rowId
            });
        }
        return values;
    }
};

LMEService.prototype.getObjectValues = function(context, rowId, tupleindex) {

    var fesContext = new Context();
    fesContext.values = context.values;
    var JSWorkBook = new WorkBook(fesContext);
    JSWorkBook.columns = context.columns || 2;
    JSWorkBook.properties = context.properties || JSWorkBook.properties;
    const values = [];
    if (!context.isset) {
        JSWorkBook.updateValues();
        context.isset = true;
    }
    if (tupleindex != null) {
        tupleindex = JSWorkBook.tupleIndexForName(rowId, tupleindex);
        if (tupleindex == -1) tupleindex = JSWorkBook.insertTuple(rowId, tupleindex);
    }
    var rootNode = JSWorkBook.getSolutionNode(rowId);
    const flattenValues = {}
    if (rootNode) {
        JSWorkBook.visitProperties(rootNode, function(node, type, innerTreeDepth, yax) {
            const nodeName = node.rowId;
            const parentName = node.parentName.split("_").slice(0, -1).join("_")
            const columns = node.frequency == 'document' ? 0 : context.columns;
            for (var i = 0; i <= columns; i++) {
                const appendix = columns == 0 ? "" : "$" + i
                flattenValues[node.rowId + appendix] = {
                    parent: parentName + appendix,
                    name: nodeName,
                    value: getValueObject(JSWorkBook, node.solutionName + "_" + node.rowId, i, yax),
                    data: []
                }
            }
        }, JSWorkBook.resolveY(0).parent, null, 0)
        //reassemble results
        for (var key in flattenValues) {
            if (flattenValues[flattenValues[key].parent]) {
                flattenValues[flattenValues[key].parent][flattenValues[key].name] = (flattenValues[key].value)
            } else {
                //array variants
                const parentName = flattenValues[key].parent.split("$")[0];
                if (flattenValues[parentName]) {
                    flattenValues[parentName].data.push(flattenValues[key])
                }
            }
        }
        for (var key in flattenValues) {
            delete flattenValues[key].parent
            delete flattenValues[key].name
            if (flattenValues[key].data.length == 0) delete flattenValues[key].data
        }
    } else {
        values.push({
            variable: rowId
        });
    }
    /**
     * Values are not bound.
     */
    return flattenValues[rowId.split("_").slice(1).join("_")];
}

function getValueObject(workbook, rowId, columncontext, yAxis) {
    const dataEnty = {}
    for (var type in workbook.properties) {
        dataEnty[type] = workbook.getSolutionPropertyValue(rowId, type, columncontext, yAxis);
    }
    return dataEnty;
}

/**
 * Given properties in workbook return all values for given columns
 * @param workbook
 * @param rowId
 * @param columncontext
 * @returns {Array}
 */
function getEntry(workbook, rowId, columncontext, yAxis) {
    var outputData = [];
    var columnStart = columncontext;
    var columnEnd = workbook.columns;
    var variable = workbook.getSolutionNode(rowId, 'value');

    if (variable && variable.frequency === 'document') {
        columnEnd = columnStart;
    }
    var tupleStart = 0;
    var tupleEnd = 0;

    // If frequency = column: return multiple columns
    for (var xAxisCounter = columnStart; xAxisCounter <= columnEnd; xAxisCounter++) {
        var dataEnty = {};
        outputData.push(dataEnty);

        // For properties of the variable
        for (var type in workbook.properties) {
            dataEnty[type] = workbook.getSolutionPropertyValue(rowId, type, xAxisCounter, yAxis);

            if (columnStart !== columnEnd || columnStart > 0) {
                dataEnty.column = xAxisCounter;
            }
            dataEnty.variable = variable.rowId;
            if (variable.tuple) {
                dataEnty.tupleIndex = yAxis.index;
            }
            dataEnty.hash = yAxis.hash + xAxisCounter + 0;
        }
    }
    //if there is only one column, the exported value is not presented to be an array
    if (columnStart == columnEnd) {
        outputData = outputData[0];
    }
    return outputData;
}

exports.JSWorkbook = WorkBook;
exports.LMEContext = WorkBook;
exports.CalculationFacade = LMEService.prototype;

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\index.js","/lme-core",undefined)
},{"./exchange_modules/ffl/RegisterPlainFFLDecorator":11,"./resources/CustomImport":18,"./src/Context":20,"./src/JSWorkBook":24,"./src/TimeAxis":29,"_process":38,"buffer":36,"log6":35}],18:[function(require,module,exports){
module.exports={
  "formulasets": [
    {
      "formulasetId": 0,
      "name": "notrend"
    },
    {
      "formulasetId": 1,
      "name": "trend"
    },
    {
      "formulasetId": 2,
      "name": "user"
    },
    {
      "formulasetId": 3,
      "name": "sector"
    },
    {
      "formulasetId": 4,
      "name": "aggregation"
    }
  ],
  "layout": {
    "children": [
      {
        "children": [
          {
            "children": [
              {
                "children": [
                  {
                    "children": [],
                    "name": "detl",
                    "size": 1
                  }
                ],
                "name": "qurt",
                "size": 4
              }
            ],
            "name": "half",
            "size": 9
          }
        ],
        "name": "bkyr",
        "size": 19
      }
    ],
    "children13period": [
      {
        "children": [
          {
            "children": [],
            "name": "detl",
            "size": 1
          }
        ],
        "name": "bkyr",
        "size": 13
      }
    ],
    "idx": 400,
    "name": "all",
    "no": 0,
    "period": [
      {
        "formulasetId": 0,
        "hash": 0,
        "idx": 19
      },
      {
        "formulasetId": 1,
        "hash": 1,
        "idx": 400
      }
    ],
    "size": 400
  },
  "navalue": 1e-10,
  "nestedTupleMultiplier": "undefined",
  "time": {
    "columnMultiplier": 1,
    "columnSize": 400,
    "columns": [
      {
        "index": 0,
        "name": "jan/p1"
      },
      {
        "index": 1,
        "name": "fes/p2"
      },
      {
        "index": 2,
        "name": "mar/p3"
      }
    ],
    "periodMultiplier": 1,
    "periodSize": 2,
    "timelineMultiplier": 256,
    "timelineSize": 1,
    "timelines": [
      {
        "index": 0,
        "name": "ExpertOptie-level5"
      }
    ]
  },
  "tupleMultiplier": 32768
}
},{}],19:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const assert = require("assert")
const log = require('log6')
const AST = require('../../ast-node-utils').ast;
const escodegen = require('escodegen');

// some variables we shall use..
//we want to modify its default behavior
//Before entering a Function..
var caseCount = 0;
var simplified = {
    //gets Sels for the value also
    ExpandLevel: function(formulaInfo, node) {
        node.arguments = [{
            "type": "Identifier",
            "name": "1.1",
            "raw": "1.1"
        }];
    },
    IRR: function(formulaInfo, node) {
        node.arguments[0].name = "[1,2]";
    },
    Min: function(formulaInfo, node) {
        node.callee.name = 'Math.min'
    },
    //we will need this one later to determine + or &&
    EvaluateAsString: function(formulaInfo, node) {
        node.callee.name = 'String'
    },
    Max: function(formulaInfo, node) {
        node.callee.name = 'Math.max'
    },
    Abs: function(formulaInfo, node) {
        node.callee.name = 'Math.abs'
    },
    InvNormal: function(formulaInfo, node) {
        node.callee.name = 'NORMSINV'
    },
    //the format is strange, hard to get a better format in the fin->json parser.
    //Expected format: Case(X_MAP01_Verplicht,[0,0||1,10||2,20||11,30||12,120||13,130])
    Case: function(formulaInfo, node) {
        assert.ok(node.arguments.length === 2, "Only expecting 2 arguments for now");
        var statements = node.arguments[1];
        assert.ok(statements.type === 'ArrayExpression', "Second argument has to be ArrayExpression for now");

        var cs = '__c0s' + caseCount++;
        node.type = "SequenceExpression";
        var elements = statements.elements;
        node.expressions = [
            {
                "type": "AssignmentExpression",
                "operator": "=",
                "left": {
                    "type": "Identifier",
                    "name": cs
                },
                "right": node.arguments[0]
            }
        ];

        if (elements.length === 1) {
            elements.unshift(AST.IDENTIFIER(true));
        }
        //make the first argument have a right member as other ContionalExpression have
        //this way the loop don't need to check it every iteration
        elements[0] = {
            right: elements[0]
        }

        //the the last argument a ContditionalExpression, with default return value NA
        //in the loop this statement is being used to be the alternate
        var lastExpression = elements[elements.length - 1];
        elements[elements.length - 1] = {
            type: "ConditionalExpression",
            test: AST.IDENTIFIER(cs + ' === ' + elements[elements.length - 2].right.value),
            consequent: lastExpression,
            alternate: AST.IDENTIFIER('NA')
        }

        /*right: elements[0]*/
        for (var i = (elements.length - 2); i > 0; i--) {
            var element = elements[i];
            element.type = 'ConditionalExpression';
            element.test = AST.IDENTIFIER(cs + ' === ' + elements[i - 1].right.value);
            element.consequent = element.left;
            element.alternate = elements[i + 1];
            element.operator = undefined;
            element.right = undefined;
            element.left = undefined;
        }
        node.expressions.push(elements[1])
        //look into delete and undefined, we better use undefined since its quicker.
        node.callee = undefined;
        node.arguments = undefined;
        if (log.TRACE) log.trace('[%s] CASE parsed into: [%s]', formulaInfo.name, escodegen.generate(node));
    },
    //convert traditional If(q,a,b) into q?a:b, skip the entire Callee
    If: function(formulaInfo, node) {
        //could be replaced with the default property value..
        if (node.arguments.length === 2) {
            if (log.TRACE) log.trace('Strange formuala setup IF(q,a,b) without b) Using NA as b. [' + formulaInfo.original + ']')
            node.arguments.push(AST.IDENTIFIER('NA'));
        }
        assert.equal(node.arguments.length, 3, formulaInfo.original);
        node.type = "ConditionalExpression";
        node.test = node.arguments[0];
        node.consequent = node.arguments[1];
        node.alternate = node.arguments[2];
        node.arguments.length = 0;
        node.arguments = undefined;
        node.callee = undefined;
    },
    OnER: function(formulaInfo, node) {
        assert.equal(node.arguments.length, 2, formulaInfo.original);
        //TODO: for now we fix in math. but its better to compile this in the JS code
    },
    //wants horizontale aggregation from values in between two given columns
    HSUM: function(formulaInfo, node) {
        node.callee.name = "HSUM";
        if (node.arguments[0].type == 'Identifier') {
            node.arguments[0] = {
                "type": "MemberExpression",
                "computed": true,
                "object": {
                    "type": "Identifier",
                    "name": node.arguments[0].name
                },
                "property": {
                    "type": "Identifier",
                    "name": "all"
                }
            }
        }

        /*  console.info('test')*/
        /* node.arguments = [{
         "type": "Identifier",
         "name": "1"
         }];*/
    },
    HVALUES: function(formulaInfo, node) {
        node.callee.name = "HVALUES";
        if (node.arguments[0].type == 'Identifier') {
            node.arguments[0] = {
                "type": "MemberExpression",
                "computed": true,
                "object": {
                    "type": "Identifier",
                    "name": node.arguments[0].name
                },
                "property": {
                    "type": "Identifier",
                    "name": "all"
                }
            }
        }

        /*  console.info('test')*/
        /* node.arguments = [{
         "type": "Identifier",
         "name": "1"
         }];*/
    },
    /*
     OnZero: function (node)
     {
     node.arguments = [{
     "type": "Identifier",
     "name": "1"
     }];
     },*/
    //returns max value in between two given columns. entered/non-entered
    MaxValueT: function(formulaInfo, node) {
        node.arguments = [{
            "type": "Identifier",
            "name": "1",
            "raw": "1"
        }];
    },
    //ExpandFraction ExpandFraction(VariableCosts,Sales)
    //http://wiki.findesk.com/index.php/ExpandFraction_(numeric_function)
    ExpandFraction: function(formulaInfo, node) {
        node.arguments = [{
            "type": "Identifier",
            "name": "1",
            "raw": "1"
        }, {
            "type": "Identifier",
            "name": "2"
        }];
    },
    ExpandOriginalValue: function(formulaInfo, node) {
        node.arguments = [{
            "type": "Identifier",
            "name": "1"
        }];
    },
    /**
     * Inject the x parameter into the call
     */
    FirstValueT: function(formulaInfo, node) {
        node.arguments.unshift({
            "type": "Identifier",
            "name": "x"
        });
    },
    DateToT: function(formulaInfo, node) {
        node.arguments.unshift({
            "type": "Identifier",
            "name": "x"
        });
    },
    Visible: function(formulaInfo, node) {
        node.type = "MemberExpression";
        node.computed = false;
        node.object = AST.IDENTIFIER(node.arguments[0].name);
        node.property = AST.IDENTIFIER('visible');
        delete node.arguments;
        delete node.callee;
    },
    HINT: function(formulaInfo, node) {
        node.type = "MemberExpression";
        node.computed = false;
        node.object = AST.IDENTIFIER(node.arguments[0].name);
        node.property = AST.IDENTIFIER('hint');
        delete node.arguments;
        delete node.callee;
    },
    //now its provided with (x,SelectDecendents/Array,LambaExpression)
    //we gonna narrow it down until further use of the 'X'. so ForAll(array,property[])
    //now ForAllFunction has no use anymore
    Count: function(formulaInfo, node) {
        //ok remove first argument X
        node.arguments.splice(0, 1);
        //give the lambda expression to the SelectDecendants function
        node.arguments[0].arguments.push(node.arguments[1])
        //remove the lambda expression
        node.arguments.splice(1, 1);
    },
    Self: function(formulaInfo, node) {
        node.arguments = [{
            "type": "Identifier",
            "name": "1"
        }];
    },
    Mut: function(formulaInfo, node) {
        node.arguments = [{
            "type": "Identifier",
            "name": "1"
        }];
    },
    NPV2: function(formulaInfo, node) {
        node.callee.name = 'NPV';
    }
}
simplified.ForAll = simplified.Count
simplified.Exists = simplified.ForAll;
simplified.IF = simplified.If;
simplified.Hsum = simplified.HSUM;
simplified.HSum = simplified.HSUM;
simplified.if = simplified.If;
simplified.MAX = simplified.Max;

simplified.MIN = simplified.Min;
simplified.min = simplified.Min;
simplified.max = simplified.Max;
simplified.ABS = simplified.Abs;
module.exports = simplified;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\ASTPreparser.js","/lme-core\\src",undefined)
},{"../../ast-node-utils":2,"_process":38,"assert":33,"buffer":36,"escodegen":35,"log6":35}],20:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
//app scope context
var ApplicationContext = {
    parsers: []
}
var propertyDefaults = {
    'visible': true,
    'value': 1e-10,
    'required': false,
    'locked': false,
    'choices': undefined,
    'valid': true,
    'validation': false
}

//request scope context
function Context(opts) {
    //reference to the ApplicationContext context
    this.applicationContext = ApplicationContext;
    this.values = {};
    this.audit = [];
    this.calc_count = 0;
    this.columnSize = 6;
    this.columns = ['title', 'value', 'visible', 'entered', 'locked', 'required', 'hint', 'choices', 'original', 'valid'];
    this.saveToken = undefined;//commit hash
    if (opts) for (var key in opts) this[key] = opts[key]
}

Context.prototype.propertyDefaults = propertyDefaults;
Context.prototype.getValues = function() {
    return this.values;
}
Context.prototype.clear = function() {
    for (var key in this.values) {
        this.values[key] = {}
    }
    this.audit.length = 0;
}
Context.prototype.hasChanges = function() {
    return this.audit.length > 0;
}
module.exports = Context

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\Context.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36}],21:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Bootstrap formula's
 * Will convert VARIABLENAME + VARIABLENAME2.validation into a bound FESJS Function
 * example:
 * VARIABLENAME + VARIABLENAME2.validation becomes:
 * this[1234](a,b,c,d) + this[1235](a,b,c,d)
 * @type {exports|module.exports}
 * VariableName[prev] becomes this[1235](f,x.prev,y,z,v)
 *
 * In old style a AST tree would be created, this is nice, very object related.
 * But to make it a Function we need the parsed String and place it in Function(params,body);
 * So in middle of AST tree's we construct Strings that are function calls. Its quicker and simpler
 * As long we don't require the AST tree its self to do look-ups
 * Another approach would be to keep a entire AST tree of the Functions.
 *
 * For now NEW-style = node.name = this[id](f,x,y,z,v),node.type = 'Identifier' and remove all other members of the AST node
 * its way quicker.
 *Instead of testing all, we better of just testing Identifiers
 * TODO: add variable as Self reference
 **/
function FormulaBootstrap() {
}

const log = require('log6');
const assert = require('assert');
const AST = require('../../ast-node-utils').ast;
const esprima = require('esprima')
const escodegen = require('escodegen')
const simplified = require('./ASTPreparser')
var variables;
var functions;
var getOrCreateProperty;
var addFormulaDependency;
var properties;
const propertiesArr = [
    'value',
    'visible',
    'required',
    'locked',
    'entered',
    'validation',
    'title',
    'validateInput',
    'choices',
    'valid',
    'hint'
]
const IDENTIFIER = 'Identifier';
const ARRAYEXPRESSION = 'ArrayExpression'
//this part is essencial to bind variables, extract support Variable types, supported Column types
// these variables will be red from the given JSON asap.
// for now we state them here..

//so it can have a (x,T) parameter
simplified.DataAvailable = function(formulaInfo, node) {
    //If(DataEntered(TaxOnProfitPsayable&&TaxProfitPaymentCalc!==10),TaxOnProfitsPayable-(TaxOnProfitsCum+TaxOnProfitsAssessment-TaxOnProfitsPaidAccumulated),NA)
    //be aware here, DataEntered refences to value,trend,notrend formulasets.
    //idea idea is all formulasets are redirected into one variable ID, so we can use 'notrend,trend,value' to redirect into value
    var refFormula = addFormulaDependency(formulaInfo, node.arguments[0].name, 'value')
    if (refFormula.ref === undefined) {
        log.warn("Can't find a variableReference for " + regenerate(node)) + " " + formulaInfo.name + ":" + formulaInfo.original;
        return;
    }
    node.type = 'Identifier';
    // looks like being extracted as object, while has to be array
    node.name = 'v[' + (refFormula.ref) + '][x.hash + y.hash + z]!=null';
    delete node.refn;
    delete node.arguments;
    delete node.callee;
}

simplified.AnyDataAvailable = function(formulaInfo, node) {
    var refFormula = addFormulaDependency(formulaInfo, node.arguments[0].name, 'value')
    if (refFormula.ref === undefined) return log.warn("Can't find a variableReference for " + regenerate(node)) + " " + formulaInfo.name + ":" + formulaInfo.original;

    node.type = 'Identifier';
    node.name = 'Object.keys(v[' + refFormula.ref + ']).length>0';
    delete node.refn;
    delete node.arguments;
    delete node.callee;
}
simplified.TitleEntered = function(formulaInfo, node) {
    var refFormula = addFormulaDependency(formulaInfo, node.arguments[0].name, 'title')
    if (refFormula.ref === undefined) return log.warn("Can't find a variableReference for " + regenerate(node)) + " " + formulaInfo.name + ":" + formulaInfo.original;
    node.type = 'Identifier';
    node.name = 'Object.keys(v[' + refFormula.ref + ']).length>0';
    delete node.refn;
    delete node.arguments;
    delete node.callee;
}
simplified.DataEntered = simplified.DataAvailable;
//two members, START and END, will return Array<Variable>
//so transform into ArrayExpression
//this is somewhat complex
//first the ForAll, Count etc.. methods push the lamba as additional parameter into this function
//then with the first and additional second parameter we generate a Nested Logical expression of the whole
//leaving the lamba in tact. so everything is allowed there, only replacing the X with the found variables
//so the result of ForAll(x,SelectDecendants(Q_ROOT),Required(x)) will be Required(Q_MAP01) || Required(Q_MAP02) || Required(Q_MAP03 etc...
//Its better to also rename the Callee to Something like Lambda(SequenceExpression), or removing the entire CallExpression
//This must be the most complex seen in a while
simplified.SelectDescendants = function(formulaInfo, node) {
    node.type = ARRAYEXPRESSION;
    var groupName = formulaInfo.name.split('_')[0];
    var foundStartUiModel = getOrCreateProperty(groupName, node.arguments[0].name, propertiesArr[0]);
    var lambda;
    //get the propertyType
    //extract lambda
    if (node.arguments.length === 3) {
        lambda = node.arguments[2];
        node.arguments.length = 2;
    }
    //extract lambda
    //this can also be the propertyType is variableType empty
    var foundEndUiModel;
    if (lambda === undefined) {
        lambda = AST.IDENTIFIER('X')
        node.arguments.length = 1;
    }
    else {
        foundEndUiModel = getOrCreateProperty(groupName, node.arguments[1].name, propertiesArr[0]);
    }
    node.elements = [];
    //nodes may never be undefined
    var nodes = foundStartUiModel.nodes;
    //now lets create the Nested Logical Expression
    //var root = AST.OR(AST.MEMBER(AST.IDENTIFIER(nodes[0].rowId), 'value'), AST.MEMBER(AST.IDENTIFIER(nodes[1].rowId), 'value'));
    /*var ArrayExpression = {
     type: 'ArrayExpression',
     elements: []
     }*/
    //first copy has many functions attached. copying it first will loss them, so next iterations can get use of it
    lambda = AST.cloneAST(lambda, null, null);
    for (var i = 0; i < nodes.length; i++) {
        if (foundEndUiModel && foundEndUiModel.rowId === nodes[i].rowId) {
            break;
        }
        walkRecursive(nodes[i], groupName, propertiesArr[0], function(child) {
            node.elements.push(AST.cloneAST(lambda, 'X', child.rowId));
        })
    }
    delete node.arguments;
    delete node.callee;
}

function walkRecursive(node, groupName, col, callback) {
    callback(node)
    const n = getOrCreateProperty(groupName, node.rowId, col)
    if (n.nodes.length) {
        for (var i = 0; i < n.nodes.length; i++) {
            walkRecursive(n.nodes[i], groupName, col, callback);
        }
    }
}

simplified.InputRequired = function(formulaInfo, node) {
    node.type = "MemberExpression";
    node.computed = false;
    node.object = AST.IDENTIFIER(node.arguments[0].name);
    node.property = AST.IDENTIFIER(propertiesArr[2]);
    delete node.arguments;
    delete node.callee;
    delete node.refn;
}
simplified.GetTitle = function(formulaInfo, node) {
    node.type = "MemberExpression";
    node.computed = false;
    node.object = AST.IDENTIFIER(node.arguments[0].name);
    node.property = AST.IDENTIFIER(propertiesArr[6]);
    delete node.arguments;
    delete node.callee;
    delete node.refn;
}
simplified.TSUM = function(formulaInfo, node) {
    //all calls into a tuple should return a []
    //convert TSUM(variableName) into SUM(TVALUES(a123,'123',x,y,z,v))
    node.callee.name = 'SUM'
    buildFunc(formulaInfo, node.arguments[0], 0, node.arguments[0], node.property ? '.' + node.property.name : '', 'TVALUES');
}
simplified.TupleSum = simplified.TSUM
simplified.TMIN = function(formulaInfo, node) {
    node.callee.name = 'MIN'
    buildFunc(formulaInfo, node.arguments[0], 0, node.arguments[0], node.property ? '.' + node.property.name : '', 'TVALUES');
}
simplified.TupleMin = simplified.TMIN
simplified.TMAX = function(formulaInfo, node) {
    node.callee.name = 'MAX'
    buildFunc(formulaInfo, node.arguments[0], 0, node.arguments[0], node.property ? '.' + node.property.name : '', 'TVALUES');
}
simplified.TupleMax = simplified.TMAX
simplified.TCOUNT = function(formulaInfo, node) {
    node.callee.name = 'PROXY'
    buildFunc(formulaInfo, node.arguments[0], 0, node.arguments[0], node.property ? '.' + node.property.name : '', 'TCOUNT');
}
simplified.TupleCount = simplified.TCOUNT
var escodegenOptions = {
    format: {
        renumber: true,
        hexadecimal: true,
        escapeless: true,
        compact: true,
        semicolons: false,
        parentheses: false
    }
};

/**
 * Two return types of this function, either the a11231(f.x.y.z.v) or v[f](xyz.hash)
 * There is no information which property is calling and cannot be resolved, since multiple sources can share a formula
 * This method is becoming so complex, its fixing a lot of things :)
 */
function buildFunc(formulaInfo, node, property, referenceProperty, xapendix, tupleType) {
    xapendix = xapendix || '';
    var referenceProperty = addFormulaDependency(formulaInfo, referenceProperty.name, propertiesArr[property == 4 ? 0 : property]);
    var yAppendix = 'y';
    if (xapendix == '' && referenceProperty.frequency == 'document') xapendix = '.doc'
    delete referenceProperty.refn;
    var referenceFormulaId = referenceProperty.ref;

    if (!referenceProperty.tuple) {
        //From y(n) -> y(0) we go y.base
        yAppendix += '.base';
    } else {
        //Here we want to do y.parent for y(1,2) -> y(1) functions.
        //Lets be wiser, we can always do a parent-lookup y.one/y.two/y.three
        yAppendix += '.p[' + referenceProperty.nestedTupleDepth + ']';
    }
    if (tupleType) {
        if (referenceProperty) {
            var groupName = formulaInfo.name.split('_')[0];
            var foundStartUiModel = getOrCreateProperty(groupName, referenceProperty.tupleDefinitionName, propertiesArr[0]);
            var allrefIdes = [];
            if (referenceProperty.ref) {
                allrefIdes.push('' + referenceProperty.ref)
            }
            for (var i = 0; i < foundStartUiModel.nodes.length; i++) {
                var tupleChild = foundStartUiModel.nodes[i];
                var items = getOrCreateProperty(groupName, tupleChild.rowId, propertiesArr[0]).ref;
                if (items) {
                    allrefIdes.push('' + items);
                }
            }
            var test = '[' + allrefIdes.join(',') + "]"
            node.name = tupleType + '(' + test + ',m[' + referenceFormulaId + "],'" + referenceFormulaId + "',x" + xapendix + "," + yAppendix + ",z,v,m)"
        } else {
            node.name = '[' + defaultValues[propertiesArr[property]] + ']';
        }
    }
    else {
        if (referenceProperty.ref === undefined) {
            node.name = defaultValues[propertiesArr[property]];
        } else {
            if (property == 4) {
                node.name = 'v[' + (referenceFormulaId) + '][x.hash + y.hash + z] !=null';
            } else {
                if (xapendix == '.all') {
                    //HSUM = function(fId, func, v, x, y, z, start, end) {
                    node.name = "VALUES(m[" + referenceFormulaId + "],'" + referenceFormulaId + "',x" + xapendix + "," + yAppendix + ",z,v,m)"
                } else {
                    node.name = 'm[' + referenceFormulaId + "]('" + referenceFormulaId + "',x" + xapendix + "," + yAppendix + ",z,v,m)";
                }
            }
        }
    }
}

var varproperties = {}

var defaultValues = {
    required: false,
    visible: true,
    locked: false,
    entered: false,
    valid: true
}
var dummy = function(or, parent, node) {
};
var expression = function(or, parent, node) {
    var left = node.left;
    if (left.refn) {
        buildFunc(or, left, 0, left);
    }
    var right = node.right;
    if (right.refn) {
        buildFunc(or, right, 0, right);
    }
};
//the tree, visited Depth First
var traverseTypes = {
    //TODO: make one map directly returning the value, for T or variable
    Identifier: function(formulaInfo, parent, node) {
        //variable reference
        if (variables(node.name)) {
            node.refn = node.name;
        }
        //var properties are .value .coices .visible etc. NOT t.next....
        else if (varproperties[node.name] != undefined) {
            // inject the T as context.
            // allow _ references.. is pretty expensive, also runtime, better just create those buildtime
            node.legacy = node.name.replace(/_/g, '.');
            node.name = node.legacy;
            //node.name = XDimVariableName + node.legacy;
        }
    },
    //Don't check the left side of an AssignmentExpression, it would lead into a102('102',x,y,z,v) = 'something'
    AssignmentExpression: function(formulaInfo, parent, node) {
        if (node.right.refn) {
            buildFunc(formulaInfo, node.right, 0, node.right);
        }
    },
    ThisExpression: dummy,
    SequenceExpression: dummy,
    ObjectExpression: dummy,
    Property: dummy,
    Program: dummy,
    Literal: dummy,
    ArrayExpression: function(or, parent, node) {
        node.elements.forEach(function(el) {
            if (el.refn) {
                //Why is here a new Object created? {}
                buildFunc(or, el, 0, {name: el.refn});
            }
        });
    },
    BinaryExpression: expression,
    LogicalExpression: expression,
    ExpressionStatement: function(orId, parent, node) {
        var expression = node.expression;
        if (expression.refn) {
            buildFunc(orId, expression, 0, expression);
        }
    },
    UnaryExpression: function(orId, parent, node) {
        var argument = node.argument;
        if (argument.refn) {
            buildFunc(orId, argument, 0, argument);
        }
    },
    CallExpression: function(orId, parent, node) {
        for (var i = 0, len = node.arguments.length; i < len; i++) {
            var argument = node.arguments[i];
            if (argument.refn) {
                buildFunc(orId, argument, 0, argument);
            }
        }
    },
    SequenceExpression: function(orId, parent, node) {
        //for now we can discard any SequenceExpression
    },
    ConditionalExpression: function(orId, parent, node) {
        if (node.test.refn) {
            buildFunc(orId, node.test, 0, node.test);
        }
        if (node.alternate.refn) {
            buildFunc(orId, node.alternate, 0, node.alternate);
        }
        if (node.consequent.refn) {
            buildFunc(orId, node.consequent, 0, node.consequent);
        }
    },
    MemberExpression: function(orId, parent, node) {
        var object = node.object;
        if (object.refn) {
            var property = node.property;
            if (property.type === 'Identifier') {
                if (node.computed) {
                    if (parent.type === 'MemberExpression') {
                        throw new Error('Not Supported Yet')
                    }
                    else {
                        //this is presumably were the undefined comes from.
                        //T-1 is a BinaryExpression
                        //node property.name will result in undefined.
                        //its esier to lookAhead the SequenceExpression
                        //variableName[contextReference] , e.g. Balance[prev] or Debit[doc]
                        node.type = 'Identifier';
                        //node.name =
                        buildFunc(orId, node, 0, object, '.' + node.property.name);
                        delete node.object;
                        delete object.refn;
                        delete node.callee
                        delete node.property
                        delete node.computed;
                    }
                }
                else {
                    //not computed = .xxxx..
                    //the .choices,.vsible,required.title etc.
                    //works partially
                    node.type = IDENTIFIER;
                    //this is very stupid to port it triple time. we will fix this later.
                    buildFunc(orId, node, varproperties[node.property.name].f, node.object);
                    delete node.property;
                    delete node.object;
                    delete node.computed;
                }
            }
            //Sequence is XYZ[a,b]...
            else if (property.type === 'SequenceExpression') {
                node.type = IDENTIFIER;
                buildFunc(orId, node, 0, node.object);
                delete node.arguments;
                delete node.object;
                delete node.property;
                delete node.computed;
                //console.info('[x,x] Not implemented this feature yet : ' + orId.original)
            }
            else {
                node.type = IDENTIFIER;
                //this is where VARIABLE[1], VARIABLE[prev] ends up
                //for now we will check if the caller, starts with the being called, to avoid loops
                if (orId.tempnaaam === node.object.name) {
                    //return 1 instead of a Self-reference
                    node.name = '1';
                    log.info('found self reference [%s]', node.object.name)
                }
                else {
                    //else will will what ever just get the onecol value back.
                    buildFunc(orId, node, 0, node.object);
                }
                delete node.object;
                delete node.property;
                delete node.computed;
            }
        }
    }
}
global.ExpandGrowth = function() {
    return 0;
}
//return  var (_cz199 = (call)) >  0?_cz199: zeroNumber
global.Onzero = function() {
    return 0;
}
global.Hm = function() {
    return 0
}
//So firstValueT means:  (FirstValueT(Self,1,MaxT)>0) Give me the First Column Index where the value is not NA
//So the question here is has[variable]AnyValue in time?
//recursive walk the formula ast
const identifier_replace = {
    TSY: 'x.tsy',
    T: 'x',
    MainPeriod: 'z', //zAxis Reference, base period, z.base
    MaxT: 'x.last',
    TupleInstanceIndex: 'y.index',
    TupleIndex: 'y.index',
    TupleLocation: 'y.display',
    Trend: 'x',//x.trend
    IsTrend: 'x.istrend',
    LastTinYear: 'x.lastinbkyear',
    Bookyear: 'x.bkyear',
    Now: 'NOW()',
    TimeAggregated: 'x.aggregated'

}

identifier_replace.Tsy = identifier_replace.TSY;
identifier_replace.TsY = identifier_replace.TSY;
identifier_replace.tsy = identifier_replace.TSY;

function buildFormula(formulaInfo, parent, node) {
    // just simplify some MODEL code, when a CallExpression appears, we might want to modify the structure before
    // looking at the content, this might cause some overhead because we have to parse more, but it simplifies the code
    // Simplified is only Top down
    // its only lookAhead
    if (node.type === 'CallExpression') {
        //register function
        functions[node.callee.name] = true;
        if (log.TRACE) log.trace('Use function [' + node.callee.name + "]")
        if (simplified[node.callee.name]) {
            simplified[node.callee.name](formulaInfo, node);
        } else {
            //be aware since Simplified modifies the Max into Math.max this will be seen as the function Math.max etc..
            const globalFunction = node.callee.name.split('.')[0];
            if (global[globalFunction] == undefined) {
                var groupName = formulaInfo.name.split('_')[0];
                var referenceProperty = getOrCreateProperty(groupName, globalFunction, 'function');
                if (referenceProperty.ref !== undefined) {
                    node.callee.name = 'm[' + referenceProperty.ref + ']'
                    throw Error('??')
                } else {
                    throw Error('invalid call [' + node.callee.name + ']')
                }
            }
        }
    }
    else if (node.type === IDENTIFIER) {
        /**
         * TODO: modify these parameters while parsing regex, directly inject the correct parameters
         */
        if (identifier_replace[node.name]) {
            node.name = identifier_replace[node.name];
        }
        //xAsReference x.notrend
        else if (node.name === 'NoTrend') {
            node.name = 'x';
        }
        //x.trend.lastbkyr
        else if (node.name === 'LastHistYear') {
            node.name = 'x.notrend.first';
        }
        else if (node.name === 'LastTinPeriod') {
            node.name = 'x.lastinperiod';
        }
        //x.trend.lastbkyr
        else if (node.name === 'LastHistYear') {
            node.name = 'x';
        }
        //should return the x.index.
        else if (node.name === 't') {
            log.warn('invalid t parsing [%s]', formulaInfo)
            //return the hash t.hash or t.index?
            node.name = 'hash';
        }
    }
    //now we iterate all members, its not required if just use all types, we can skip things like properties etc..
    //Would be a performance boost, when we need it its going to increase speeds Log(n-1)
    for (var key in node) {
        if (node[key]) {
            var child = node[key];
            if (typeof child === 'object') {
                if (Array.isArray(child)) {
                    for (var i = 0, len = child.length; i < len; i++) {
                        buildFormula(formulaInfo, node, child[i]);
                    }
                }
                else {
                    buildFormula(formulaInfo, node, child);
                }
            }
        }
    }
    if (!traverseTypes[node.type]) {
        log.error('ERROR: [%s] not registered AST expression [%s]', node.type, node.name);
    }
    traverseTypes[node.type](formulaInfo, parent, node);
}

function regenerate(body) {
    return escodegen.generate(body, escodegenOptions);
}

//public function, will return the parsed string
//its getting nasty, with supporting this many options, consider only expecting on valid type either AST or STRING only
FormulaBootstrap.prototype.parseAsFormula = function(formulaInfo) {
    assert(formulaInfo.parsed === undefined)
    var ast;
    if (typeof formulaInfo.body === 'object') {
        formulaInfo.original = regenerate(formulaInfo.body);
        ast = formulaInfo.body;
    }
    else {
        formulaInfo.original = formulaInfo.body;
        ast = esprima.parse(formulaInfo.body);
    }
    // formulaInfo.tempnaaam = formulaInfo.name.replace(/^KSP_/, '').replace(/_value$/g, '');
    buildFormula(formulaInfo, null, ast);
    var generated = regenerate(ast);
    formulaInfo.ast = JSON.stringify(ast);
    formulaInfo.parsed = generated;
    formulaInfo.tempnaaam = undefined;
}
FormulaBootstrap.prototype.initStateBootstrap = function(configs) {
    functions = configs.functions;
    variables = configs.contains;//to distinct FesVariable from references
    properties = configs.properties;//to check if we use this property from the model language
    getOrCreateProperty = configs.getOrCreateProperty;//getOrCreateProperty a PropertyAssembler, to do a variable lookup.  We must have knowledge from the PropertyAssembler. To find corresponding referenceId
    addFormulaDependency = configs.addFormulaDependency;
    for (var property in properties) {
        varproperties[property] = {
            f: properties[property],
            t: {
                "type": 'Identifier',
                "name": properties[property]
            }
        }
    }
};
module.exports = FormulaBootstrap.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\FormulaBootstrap.js","/lme-core\\src",undefined)
},{"../../ast-node-utils":2,"./ASTPreparser":19,"_process":38,"assert":33,"buffer":36,"escodegen":35,"esprima":35,"log6":35}],22:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const log = require('log6');
const AST = require('../../ast-node-utils').ast;
const assert = require('assert')
const escodegen = require('escodegen')
/**
 * * FormulaId '0' is not a valid ID!
 */
const variables = []
//the array index is used to be next formulaId
const formulas = [];
//make 100.000 entries, we start counting here for temporally formula's
formulas[1000] = null;
/**
 * Todo: add formula.frequency into the cache key?
 * the cache is a String based to Formula object cache,
 * One a formula is created, its stored in cache.
 * When another formula with the same modelFormula String is presented its checked with cache
 */
const cache = {};

function FormulaService() {
}

FormulaService.prototype.visitFormulas = function(visitFunctionArg) {
    for (var i = 0; i < formulas.length; i++) {
        var formula = formulas[i];
        if (formula !== null && formula !== undefined) {
            visitFunctionArg(formula);

        }
        else if (i > 1000) {
            visitFunctionArg(formula);
        }
    }
}
FormulaService.prototype.addFormulaDependency = function(formulaInfo, referenceFormulaIndex, referenceName) {
    //we want do know if we can all the value straight away or we have to invoke a function for it
    //in future we want to check here if its a dynamic formula, or plain value.
    //also inherited functions are nice to play around with.
    //if type is not static, we add it as dependency
    var referenceFormulaInfo = formulas[referenceFormulaIndex];
    //ok so we going to allow default values, this could because this formula was the default.
    //there was once an idea to create static formula types
    //we could now reference to the index instead...
    var refName = referenceName;
    var refId;
    if (referenceFormulaInfo === undefined) {
        if (log.TRACE) log.trace('failed to lookup:[' + referenceName + '] but it was in the model, could be in another model. OR it just have default value formula')
        if (log.TRACE) log.trace(formulaInfo.original);
    }
    else {
        refName = referenceFormulaInfo.name;
        refId = referenceFormulaInfo.id || referenceFormulaInfo.index;

        if (referenceFormulaInfo.refs[formulaInfo.name] === undefined) {
            referenceFormulaInfo.refs[formulaInfo.name] = true;
            referenceFormulaInfo.formulaDependencys.push({
                name: formulaInfo.name,
                association: 'refs',
                refId: formulaInfo.id || formulaInfo.index
            });
        }
    }
    if (formulaInfo.deps[refName] === undefined) {
        formulaInfo.deps[refName] = true;
        formulaInfo.formulaDependencys.push({
            name: refName,
            association: 'deps',
            refId: refId
        });
    }
    return referenceFormulaInfo;
}

function addAssociation(index, property, associationType) {
    var formula = formulas[index];
    var otherFormula = formulas[property.ref];
    if (otherFormula.name !== formula.name && formula.refs[otherFormula.name] === undefined) {
        formula.formulaDependencys.push({
            name: otherFormula.name,
            association: associationType
        });
    }
    formula[associationType][property.name] = true;
}

/**
 * TODO: every formula created requires a UNIQUE id, but can re-use a formula.
 * TODO: Now it will reuse the ID when formulastring is found
 * called to parse modelString formula and add to current state
 * if formulaString already parsed, its returned from cache
 */
FormulaService.prototype.addModelFormula = function(property, groupName, row, col, locked, body, frequency) {
    assert(frequency, 'A formula must have a frequency')
    assert(body !== undefined, 'refactored, this function return undefined when body is undefined');
    var formula;
    var key = escodegen.generate(AST.EXPRESSION(body));
    //if not locked and the formula isn't already cached, we can reuse it
    //if not locked, its not possible to re-use since the user to override the value of the formula
    //when running in DEBUG-MODUS, we cannot re-use Formula's since they will result in incorrect method calls
    if (locked && cache[frequency + "_" + key] !== undefined) {
        formula = cache[frequency + "_" + key];
    }
    else {
        //else we have to create a new formula
        formula = newFormula(locked, AST.EXPRESSION(body), formulas.length, property.name);
        cache[key] = formula;
    }
    property.ref = formula.index;
    property.formulaName = formula.name;

    //add the formula Association, so formula 1 knows C12_value uses it.
    addAssociation(formula.index, property, 'refs');
    return formula.id || formula.index;
}
/*
 Class Formula
 {
 ast: String, AST AsString
 body: Object, AST
 deps: Object, containing dependend elements
 formulaDependencys: [],
 index: Number, Temporally ID
 name: String, name of the function
 original: String, User entered String value of given formula
 parsed: String, String body of the function
 refs: Object, revered Dependencies of the Formula. These are used to reset caches from the dependent formulas when this value changes
 type: String, Formula decorator type. e.x. If formula can be user entered, it will wrap lookup in the docValues around it
 }
 */
//create a new Formula
//initiate a new Object, add it to the Array
function newFormula(locked, body, index, propertyName) {
    const original = AST.PROGRAM(body);
    const formula = {
        type: locked ? 'noCacheLocked' : 'noCacheUnlocked',//there are some types, for nor only locked and unlocked are interesting
        refs: {},//map of references
        formulaDependencys: [],//array of associations (deps and refs)
        deps: {},//map of dependencies
        body: original,//AST
        original: original,
        index: index,//index used in formula array
        name: propertyName//default formula name.
    };
    formulas.push(formula);
    return formula;
}

FormulaService.prototype.findFormulaByIndex = function(index) {
    return formulas[index];
}
/**
 * used with javascript models, they are pre-parsed
 */
FormulaService.prototype.bulkInsertFormula = function(formulasArg) {
    for (var i = 0; i < formulasArg.length; i++) {
        var formula = formulasArg[i];
        formulas[formula.id] = formula;
    }
};
FormulaService.prototype.moveFormula = function(old, newFormula) {
    if (old.index !== newFormula.id) {
        formulas[newFormula.id] = formulas[old.index];
        formulas[newFormula.id].id = newFormula.id;
        delete formulas[newFormula.id].index;
        //we can make the ID final.
        delete formulas[old.index];
    }
}
FormulaService.prototype.addVariables = function(variablesArg) {
    for (var i = 0; i < variablesArg.length; i++) {
        var variable = variablesArg[i];
        if (variables[variable.name] !== undefined) {
            throw Error('already declared variable [' + variable.name + ']')
        }
        variables.push({
            name: variable.name,
            expression: variable.expression
        })
    }
}
FormulaService.prototype.getVariables = function(visit) {
    for (var i = 0; i < variables.length; i++) {
        visit(variables[i]);
    }
}
FormulaService.prototype.initVariables = function(variables) {
    for (var i = 0; i < variables.length; i++) {
        const variable = variables[i];
        global[variable.name] = variable.expression;
    }
}
module.exports = FormulaService.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\FormulaService.js","/lme-core\\src",undefined)
},{"../../ast-node-utils":2,"_process":38,"assert":33,"buffer":36,"escodegen":35,"log6":35}],23:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const log = require('log6')

/**
 * The map that contains parsed model-functions
 * * FormulaId '0' is not a valid ID!
 *
 * x = time object
 * y = tuple object
 * z = timeline object
 * value = new value
 * v = entered values
 * m = model
 */
function fm() {
}

const m = []
//don't directly use this method, use JSWorkBook instead.
fm.prototype.apiGet = function(formula, x, y, z, v) {
    //temp fix fallback for ID, index is the Virtual ID, not persisted in the database
    //should be checked outside this function call
    var id = formula.id || formula.index;
    return m[id](id, x, y, z, v, m);
}
fm.prototype.apiSet = function(formula, x, y, z, value, v) {
    var id = formula.id || formula.index;
    if (v[id] !== undefined) {
        var hash = x.hash + y.hash + z;
        var newValue = value;
        v[id][hash] = newValue;
    }
    else if (log.DEBUG) log.debug('[%s] does not exist', id);
}
if (!global.DEBUGMODUS) {
    global.DEBUGMODUS = false
}
fm.prototype.initializeFormula = function(newFormula) {
    const id = newFormula.id || newFormula.index;
    //"debug('" + newFormula.name + "');
    if (log.TRACE) log.trace("Added function %s\n\t\t\t\t\t\t\t\t\t  [%s] %s : %s : [%s]", + id, newFormula.original, newFormula.name, newFormula.type, newFormula.parsed)
    const stringFunction = "return " + newFormula.parsed + " /*  \n" + newFormula.name + ":" + newFormula.original + "  */ ";// : "return " + newFormula.parsed
    const modelFunction = Function(newFormula.params || 'f, x, y, z, v, m', stringFunction).bind(global);
    m[id] = formulaDecorators[newFormula.type](modelFunction, id, newFormula.name);
};
//we do need this functions to be here, so the FormulaBootstrap can directly call the function on its map instead of
//for now we just use static functions and user enterable function that will not cache.
// the ApiGet. we don't need the CacheLocked and the NoCacheUnlocked they are just for further optimalizations.
var formulaDecorators = {
    //nothing to to, just return the inner function
    noCacheLocked: function(innerFunction, formulaName) {
        return innerFunction;
    },
    //Unlocked formula's can be user entered.
    //Encapsulates that part.
    noCacheUnlocked: function(innerFunction, formulaName, varName) {
        //add a user value cache
        //f = formulaId
        //y,x,z dimensions Tuple,Column,Layer
        //v = enteredValues
        return function(f, x, y, z, v, m) {
            if (x.dummy) return NA;
            var hash = x.hash + y.hash + z;
            //check if user entered a value
            if (v[f][hash] == null) {
                return innerFunction(f, x, y, z, v, m);
            }
            return v[f][hash]; //return entered value
        };
    }
}
module.exports = fm.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\FunctionMap.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36,"log6":35}],24:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/*
 This class should have less business logic,
 Its the state wrapper around the stateless ValueFacade
 Remove All dependencies besides ValueFacade,log6. Even XAxis should be inside the Context Object
 */

const SolutionFacade = require('./SolutionFacade');
const PropertiesAssembler = require('./PropertiesAssembler');
const ValueFacade = require('./ValueFacade');
const AST = require('../../ast-node-utils').ast;
const log = require('log6')
const YAxis = require('./YAxis')

//user friendly stable API
//importSolution(data,'type') : Solution          ; See Solution class for definiton
//export('type')        : Object            ; raw type undefined output. When calling this read the header of the parser to get more information
//set(rowId,value <,property> <,context>)   ; value can be anything see "get" function
// --optional property (default='value')
// --optional context  Time/FormulaSet -Matrix (default=0)

//get(rowId <,property> <,context>) : Object; has the range from a char or PDF base64String till any possible Object with functions
// --optional property (default='value')
// --optional context Time/FormulaSet -Matrix (default=0)

function JSWorkBook(context, XAxis, interval, opts) {
    this.indexer = null;//preserved to store the indexer
    this.context = context;
    this.offset = 0;
    //default modelname
    this.modelName = 'NEW';
    //tuple axis
    this.yaxis = YAxis;
    this.y = YAxis[0].parent
    //time axis, we looking at bookyears at the moment
    this.xaxis = (XAxis || require('./XAxis'))[interval || 'bkyr'].columns[0]
    if (opts) for (var key in opts) this[key] = opts[key]
}

JSWorkBook.prototype.setColumnOffset = function(delta) {
    var newOffset = this.offset
    if (delta == 'next') newOffset++
    else if (delta == 'previous') newOffset--
    newOffset = Math.min(this.xaxis.length - 6, Math.max(0, newOffset))
    if (newOffset != this.offset) {
        this.offset = newOffset
        this.context.calc_count++;
    }
}
JSWorkBook.prototype.getTimeViews = function() {
    return this.xaxis;
}
JSWorkBook.prototype.importSolution = function(data, parserType) {
    var solution = SolutionFacade.importSolutionData(data, parserType, this);
    this.solution = solution;
    this.modelName = solution.getName();
    this.updateValues();
}
JSWorkBook.prototype.getSolutionName = function() {
    return this.modelName;
}

/**
 * Try to do: Monte-Carlos simulation
 * https://nl.wikipedia.org/wiki/Monte-Carlosimulatie
 * if it is possible to fix missing functions
 * TRY fix infinite loops in the solution, breaking down chains.
 */
function fixAll() {
    var attempt = 0;
    var workbook = this;
    var feedback = workbook.validateImportedSolution();
    while (!feedback.valid && attempt < 20) {
        feedback.error.forEach(function(item) {
            if (item.canFix) {
                item.fix();
            }
        });
        feedback = workbook.validateImportedSolution();
        attempt++;
    }
    return feedback;
};

/**
 * validateImportedSolution current solution
 * validation is done once they are imported
 * Generic problems can be resolved in the same manner
 * returns a FeedBack object
 * TODO: extract validator.
 */
var mostcommon = {}

function logErrorWithVariableName(variableName, workbook, formulaInfo, e) {
    return function() {
        try {
            log.debug(variableName + " : " + 'Fix for [' + variableName + '] in solution: ' + workbook.getSolutionName() + " : " + formulaInfo.original + ' message:[' + e + ']')
            workbook.createFormula(1, variableName);
        } catch (err) {
            log.error('Fatal error in variable [' + variableName + ']', err);
        }
    }
}

/**
 * TODO: this function only, is enough to extract into Validation.js
 * Try to do: Monte-Carlos simulation
 *  - TODO: add trend-notrend x-input values.
 *
 * https://nl.wikipedia.org/wiki/Monte-Carlosimulatie
 * if it is possible to fix missing functions
 * TRY fix infinite loops in the solution, breaking down chains.
 *  -- When ReferenceError: Create new VARIABLE matching, remove original formula
 *  -- When RangeError:
 *  --- lookup most significant part in loop, disable formula, transform into String formula. try again
 */
function validateImportedSolution() {
    var validateResponse = {
        succes: [],
        error: []
    };
    var context = this.context;
    var workbook = this;

    function formulaFixer(elemId) {
        const formulaInfo = SolutionFacade.fetchFormulaByIndex(elemId)
        try {
            //iterate all formula-sets to test 100%
            ValueFacade.apiGetValue(formulaInfo, workbook.resolveX(0), resolveY(workbook, 0), 0, context.getValues());
            validateResponse.succes.push(formulaInfo.name);
        }
        catch (e) {
            var fix;
            if (e.name === 'ReferenceError') {
                var variableName = e.message.split(' ')[0];
                //it could occur same problem is found multiple times. Strip those errors
                if (!validateResponse.error.lookup('variableName', variableName)) {
                    fix = {
                        canFix: true,
                        variableName: variableName,
                        fixMessage: 'Add',
                        fix: logErrorWithVariableName(variableName, workbook, formulaInfo, e)
                    };
                }
                else {
                    fix = {
                        hide: true
                    }
                }
            }
            else if (e.name === 'RangeError') {
                //we should Isolate the most offending formula here instead of all
                //make a graph of the loops, resolve the deepest one, only add this one.
                fix = {
                    canFix: true,
                    fixMessage: 'Remove formula',
                    fix: function() {
                        var deps = Object.keys(formulaInfo.deps);
                        var refs = Object.keys(formulaInfo.refs);

                        formulaInfo.formulaDependencys.forEach(function(dependency) {
                            const dependencyInfo = SolutionFacade.fetchFormulaByIndex(dependency.refId);
                            try {
                                ValueFacade.apiGetValue(dependencyInfo, workbook.resolveX(0), resolveY(workbook, 0), 0, context.getValues());
                            } catch (e) {
                                // log.error(e)
                                //NOOP
                                mostcommon[formulaInfo.name] = isNaN(mostcommon[formulaInfo.name]) ? 1 : mostcommon[formulaInfo.name] + 1
                            }
                        })
                        if (log.DEBUG) log.debug('Loop detected for [' + formulaInfo.name + '], Making string formula ' + formulaInfo.original + "\n"
                            + "DEPS[" + deps.length + "][" + deps + "]\nREFS[" + refs.length + "]:[" + refs + "]"
                        )
                        formulaInfo.parsed = undefined;
                        formulaInfo.body = AST.STRING(formulaInfo.original);
                        //YES we have to do this two times, known BUG, we have to call rebuild, updateValueMap, rebuild
                        SolutionFacade.initFormulaBootstrap([elemId], false);
                        workbook.updateValues();
                    }
                };
            }
            else {
                //try underlying formulas
                formulaInfo.formulaDependencys.forEach(function(dependency) {
                    if (dependency.association === 'deps') {
                        const dependencyInfo = SolutionFacade.fetchFormulaByIndex(dependency.refId);
                        try {
                            ValueFacade.apiGetValue(dependencyInfo, workbook.resolveX(0), resolveY(workbook, 0), 0, context.getValues());
                        } catch (e) {
                            log.error(e)
                            //NOOP
                        }
                    }
                })
                log.error(e)
                log.warn('unable to fix problem in ' + formulaInfo.original + ' fail:' + e)
                log.warn(formulaInfo);
                fix = {
                    canFix: false
                }
            }
            //filter Exceptions not worth viewing e.g. Duplicates
            if (!fix.hide) {
                fix.formulaName = formulaInfo.name;
                fix.reason = e.message;
                validateResponse.error.push(fix);
            }
        }
    };
    this.visitSolutionFormulas(formulaFixer);
    validateResponse.valid = validateResponse.error.length === 0;
    validateResponse.fixProblemsInImportedSolution = fixAll;
    validateResponse.more = mostcommon;
    return validateResponse;
};
/**
 * Visit imported Formula's
 */
JSWorkBook.prototype.visitSolutionFormulas = function(visitor) {
    return this.solution.formulas.forEach(visitor);
}
JSWorkBook.prototype.export = function(parserType, rowId) {
    return SolutionFacade.exportSolution(parserType, rowId, this);
}
JSWorkBook.prototype.getNode = function(name) {
    return this.getSolutionNode(this.getSolutionName() + "_" + name);
}
JSWorkBook.prototype.getSolutionNode = function(name) {
    return ValueFacade.fetchSolutionNode(name, 'value')
};
JSWorkBook.prototype.findNode = function(name) {
    return ValueFacade.fetchSolutionNode(this.modelName + "_" + name, 'value')
};
JSWorkBook.prototype.fetchSolutionNode = ValueFacade.fetchSolutionNode

JSWorkBook.prototype.resolveX = function(x) {
    return x ? this.xaxis[x + this.offset] : this.xaxis[this.offset];
}
JSWorkBook.prototype.resolveY = function(idx) {
    if (idx == null) return this.y
    return resolveY(this, idx)
}
/**
 * Gets/Creates a named tuple list.
 * Ok so now we have to do this for nested tuples too.
 * Lets make sure the NestedTuple exist with corresponding tupleIndexNames
 */
JSWorkBook.prototype.resolveYas = function(variableName, note) {
    var yas = this.resolveY(undefined);
    if (note) {
        const indexes = note.slice(1, -1).split(',')
        for (var i = 0; i < indexes.length; i++) {
            const tempIndex = this.tupleIndexForName(this.modelName + '_' + variableName, indexes[i], yas, indexes.length - i)
            if (tempIndex == -1) yas = this.addTuple(variableName, indexes[i], yas)
            else yas = yas.deeper[tempIndex]
        }
    }
    return yas;
}

function resolveY(wb, y) {
    var yAxis = y || 0;
    return isNaN(yAxis) ? yAxis : wb.yaxis[yAxis];
}

JSWorkBook.prototype.get = function(row, col, x, y) {
    return this.getSolutionPropertyValue(this.modelName + '_' + row, col, x, y);
};
JSWorkBook.prototype.getSolutionPropertyValue = function(row, col, x, y) {
    var xas = this.resolveX(x);
    var yas = this.resolveY(y)
    return ValueFacade.fetchSolutionPropertyValue(this.context, row, col, xas, yas)
};

JSWorkBook.prototype.set = function(row, value, col, x, y) {
    return this.setSolutionPropertyValue(this.modelName + '_' + row, value, col, x, y);
}
JSWorkBook.prototype.setSolutionPropertyValue = function(row, value, col, x, y) {
    const xas = this.resolveX(x);
    const yas = this.resolveY(y);
    return ValueFacade.putSolutionPropertyValue(this.context, row, value, col, xas, yas);
}
JSWorkBook.prototype.updateValues = function() {
    ValueFacade.updateValueMap(this.context.values);
};
JSWorkBook.prototype.fixProblemsInImportedSolution = fixAll
//should return the solution instead. So its deprecated
JSWorkBook.prototype.getRootSolutionProperty = function() {
    return ValueFacade.fetchRootSolutionProperty(this.getSolutionName());
};
/**
 * Does not fix invalid request doing a 2-tuple node-lookup with a 3/1-tuple yas.
 */
JSWorkBook.prototype.maxTupleCountForRow = function(node, yas) {
    if (!node.tuple) return -1;
    yas = this.resolveY(yas)
    var tupleDefinition = node.tupleDefinition ? node : this.getSolutionNode(node.solutionName + '_' + node.tupleDefinitionName)
    var allrefIdes = [];
    PropertiesAssembler.visitProperty(tupleDefinition, function(child, depth) {
        if (child.ref) allrefIdes.push(String(child.ref))
    }, 0)
    return TINSTANCECOUNT(allrefIdes, this.context.values, yas);
}
/**
 * TODO: enforce unique name per nodeName/yas.
 */
JSWorkBook.prototype.insertTuple = function(nodeName, name, yas) {
    const node = ValueFacade.fetchSolutionNode(nodeName, 'value')
    const tupleDefinition = node.tuple ? node.tupleDefinition ? node : this.getSolutionNode(node.solutionName + '_' + node.tupleDefinitionName) : node
    //THIS IS quick-fix, it should never call insertTuple on a non-tuple
    //if (!tupleDefinition) throw Error('Cannot add tuple of non-existing tuple' + nodeName)
    yas = this.resolveY(yas)//this makes it complex, since parent is used for the 0-tuple.
    const tupleCount = this.maxTupleCountForRow(tupleDefinition, yas)
    const deeperYaxis = yas.deeper[tupleCount + 1];
    this.set(tupleDefinition.rowId, name || ('value' + tupleCount), 'value', undefined, deeperYaxis)
    return deeperYaxis;
}
JSWorkBook.prototype.addTuple = function(nodeName, name, yas) {
    return this.insertTuple(this.modelName + '_' + nodeName, name, yas)
}
/**
 * Creating a tuple-instance is done by placing a name in the TupleDefinition
 * These can be found with this method later on
 * (i) there is no support by duplicate names per Tuple
 */
JSWorkBook.prototype.tupleIndexForName = function(nodeName, name, yas, delta) {
    const node = ValueFacade.fetchSolutionNode(nodeName, 'value')
    if (!node.tuple) return -1;
    yas = this.resolveY(yas)
    var tupleDefinition = node.tupleDefinition ? node : this.getSolutionNode(node.solutionName + '_' + node.tupleDefinitionName)
    if (delta >= 2) tupleDefinition = tupleDefinition.tupleDefinitionName ? this.getSolutionNode(tupleDefinition.solutionName + '_' + tupleDefinition.tupleDefinitionName) : tupleDefinition
    if (delta >= 3) tupleDefinition = tupleDefinition.tupleDefinitionName ? this.getSolutionNode(tupleDefinition.solutionName + '_' + tupleDefinition.tupleDefinitionName) : tupleDefinition
    const values = this.context.values[String(tupleDefinition.ref)];
    for (var key in values) {
        if (name == values[key]) {
            if (log.DEBUG) log.debug('Found ' + key + '' + values[key])
            return REVERSEYAXIS(parseInt(key), yas);
        }
    }
    return -1;
}
/**
 * Copy-paste from walkproperties. (Without [+]tupleD)
 */
JSWorkBook.prototype.visitProperties = function(node, visitor, y, type, treeDepth) {
    const wb = this;
    const itarfunction = function(treeNode, innerTreeDepth) {
        //instance is only for the first call
        //we must be recursive since Tuple in tuple
        if (treeNode.tupleDefinition) {
            if (type !== treeNode.rowId) {
                const maxTupleCountForTupleDefenition = wb.maxTupleCountForRow(treeNode, y);
                for (var t = 0; t <= maxTupleCountForTupleDefenition; t++) {
                    wb.visitProperties(treeNode, visitor, y.deeper[t], treeNode.rowId, innerTreeDepth)
                }
                itarfunction.stop = true;
            } else {
                visitor(treeNode, 'instance', innerTreeDepth, y)
            }
        } else {
            //because of this check, the nested tuple-property will not be displayed.
            visitor(treeNode, 'instance_no_td', innerTreeDepth, y)
        }
    };
    ValueFacade.visit(node, itarfunction, treeDepth);
}
/*
* TupleDefinition[2]
*  TupleProperty_A/TupleDefinition[2]
*   TupleProperty_B
*  =>
*  0_0_TD
*  0_0_TP_A
*  0_0_TP_B
*  0_1_TP_A
*  0_1_TP_B
*  1_0_TD
*  1_0_TP_A
*  1_0_TP_B
*  1_1_TP_A
*  1_1_TP_B
*
*  Because this method is called in relative situations, within treedepths and tuple nesting, these two arguments are required
*
 */
JSWorkBook.prototype.walkProperties = function(node, visitor, y, type, treeDepth) {
    const wb = this;
    const itarfunction = function(treeNode, innerTreeDepth) {
        //instance is only for the first call
        //we must be recursive since Tuple in tuple
        if (treeNode.tupleDefinition) {
            if (type !== treeNode.rowId) {
                const maxTupleCountForTupleDefenition = wb.maxTupleCountForRow(treeNode, y);
                for (var t = 0; t <= maxTupleCountForTupleDefenition; t++) {
                    wb.walkProperties(treeNode, visitor, y.deeper[t], treeNode.rowId, innerTreeDepth)
                }
                visitor(treeNode, 'new', innerTreeDepth, y)    //tuple_add call
                itarfunction.stop = true;
            } else {
                visitor(treeNode, 'instance', innerTreeDepth, y)
            }
        } else {
            //because of this check, the nested tuple-property will not be displayed.
            visitor(treeNode, 'instance_no_td', innerTreeDepth, y)
        }
    };
    ValueFacade.visit(node, itarfunction, treeDepth);
}
JSWorkBook.prototype.validateImportedSolution = validateImportedSolution;
JSWorkBook.prototype.createFormula = function(formulaAsString, rowId, colId, tuple, frequency, displaytype) {
    SolutionFacade.createFormulaAndStructure(this.getSolutionName(), formulaAsString, rowId, colId || 'value', displaytype, frequency || 'none');
    const node = SolutionFacade.getOrCreateProperty(this.getSolutionName(), rowId, colId || 'value');
    if (tuple) {
        node.tuple = tuple;
        node.tupleDefinition = true;
        node.nestedTupleDepth = 0;
        node.tupleDefinitionName = rowId;
    }
    node.frequency = frequency;
    this.updateValues();
}
JSWorkBook.prototype.clearValues = function() {
    this.context.clear()
}
JSWorkBook.prototype.properties = SolutionFacade.properties;
JSWorkBook.prototype.getAllChangedValues = function() {
    const formulaIds = [];
    const formulaIdMap = {}
    for (var i = 0; i < this.context.audit.length; i++) {
        const audit = this.context.audit[i];
        if (audit.saveToken == this.context.saveToken && !formulaIdMap[audit.formulaId]) {
            formulaIdMap[audit.formulaId] = true;
            formulaIds.push(audit.formulaId)
        }
    }
    return ValueFacade.getValuesFromFormulaIds(formulaIds, this.context.values);
}
JSWorkBook.prototype.getAllValues = function() {
    return ValueFacade.getAllValues(this.context.values);
};
module.exports = JSWorkBook;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\JSWorkBook.js","/lme-core\\src",undefined)
},{"../../ast-node-utils":2,"./PropertiesAssembler":26,"./SolutionFacade":28,"./ValueFacade":30,"./XAxis":31,"./YAxis":32,"_process":38,"buffer":36,"log6":35}],25:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/*
 register/resolve echange modules e.g. ffl,screendefinition,presentation
 TODO: rename into exchangeModulesSerivce
 */
var parsers = {};
function ParserService() {
}
ParserService.prototype.addParser = function (parser) {
    parsers[parser.name] = parser;
}
/*Class Parser
 {
 name: String,
 headerName: String,
 parse: Function(Context) : Solution
 deParse: Function() : Export
 }
 */
ParserService.prototype.visitParsers = function (visitFunction) {
    for (var key in parsers) {
        visitFunction(parsers[key]);
    }
}
ParserService.prototype.findParser = function (parserName) {
    return parsers[parserName];
}
module.exports = ParserService.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\ParserService.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36}],26:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
function PropertiesAssembler() {
}

var PropertiesModel = {
    NEW_root_value: {
        rowId: 'root',
        solutionName: 'NEW'
    }
};
/**
 * Model root nodes
 */
var rootNodes = {
    NEW: PropertiesModel.NEW_root_value
};
var rows = new Set();

PropertiesAssembler.prototype.contains = function(name) {
    return rows.has(name);
};
//Don't call this method directly, business logic is within the Solution and JSWorkBook object
//NULL is not valid, nor empty string
function createRootnode(modelName) {
    //when calling with undefined just return a Solution with current modelName
    var newModelName = modelName.toUpperCase();
    //create a root node if not exists
    //Better to keep a list of existing Solution instead of writing over them
    var newRootNodeName = newModelName + '_root_value';
    if (!rootNodes[newModelName]) {
        PropertiesModel[newRootNodeName] = {
            name: newRootNodeName,
            rowId: 'root',
            colId: 'value',
            solutionName: newModelName,
            frequency: 'document',
            displayAs: 'SectionAnswerType',
            nodes: []
        };
        rootNodes[newModelName] = PropertiesModel[newRootNodeName]
    }
    return rootNodes[newModelName];
};
PropertiesAssembler.prototype.createRootNode = createRootnode

function getOrCreateProperty(groupName, row, col) {
    var rowId = groupName + '_' + row;
    var name = rowId + "_" + col;
    var node = PropertiesModel[name];
    if (node == undefined) {
        node = {
            rowId: row,
            solutionName: groupName,
            colId: col,
            name: name,
            nodes: []
        }
        PropertiesModel[name] = node;
        rows.add(row);
    }
    return node;
}

function hasChild(children, name) {
    for (var i = 0; i < children.nodes.length; i++) {
        if (children.nodes[i].name === name) {
            return true;
        }
    }
    return false;
}

//add element to Solution
function addProperty(groupName, row, col, item, parentId) {
    //add to map if it not exists, else re-use the entry
    var property = getOrCreateProperty(groupName, row, col);

    //inherit all properties But new allow extended Objects.
    //Only copy primitive members, and the delegate Object.
    for (key in item) {
        if (property[key] === undefined && (key === 'delegate' || typeof item[key] !== 'object')) {
            property[key] = item[key];
        }
    }
    //add to root if no parent
    if (parentId !== undefined) {
        //else add to PropertiesModel
        var parentUiModel = PropertiesModel[groupName + '_' + parentId];
        if (!hasChild(parentUiModel, property.name)) {
            parentUiModel.nodes.push({
                name: property.name,
                rowId: property.rowId,
                colId: property.colId,
                identifier: groupName + '_' + parentId
            })
        }
    }
}

//add elements from Solution into Map
PropertiesAssembler.prototype.bulkInsert = function(solution) {
    var solutionName = solution.getName();
    if (!rootNodes[solutionName]) {
        createRootnode(solutionName);
    }
    var nodes = solution.nodes;
    var leftOver = [];
    var iteration = 0;

    //inserting Nodes requires a couple of iterations, parents first
    //fail for recursive structures
    while (iteration < 8) {
        for (var i = 0; i < nodes.length; i++) {
            var obj = nodes[i];
            if (!obj.parentName || PropertiesModel[solutionName + '_' + obj.parentName]) {
                obj.ref = obj.formulaId || obj.ref;
                addProperty(solutionName, obj.rowId, obj.colId, obj, obj.parentName == null ? undefined : obj.parentName);
            }
            else {
                leftOver.push(obj);
            }
        }
        if (leftOver.length == 0) {
            nodes = leftOver;
            break;
        }
        nodes = leftOver;
        leftOver = [];
        iteration++;
    }
    if (nodes.length !== 0) {
        throw Error('after ' + iteration + ' still items left, maybe too deeply nested or resursive.');
    }
}

function getRootNode(modelName) {
    return rootNodes[modelName];
}

PropertiesAssembler.prototype.findAllInSolution = function(modelName, visitArg) {
    for (var key in PropertiesModel) {
        var property = PropertiesModel[key];
        if (property.solutionName === modelName) {
            visitArg(property);
        }
    }
};
//fetchByName (can return undefined)
PropertiesAssembler.prototype.fetch = function fetch(name) {
    return PropertiesModel[name];
};
/**
 * Visitor walk the tree
 * if node is null we use root node
 * function is not thread safe, add parent and depth to function call instead of altering PropertyNode
 * As expected, problems while recursive calling this method.
 */
PropertiesAssembler.prototype.visitProperty = function(node, func, startDepth) {
    var startingNode = node || getRootNode('NEW');
    if (startingNode) visitInternal(startingNode, func, startDepth || 0)
}
PropertiesAssembler.prototype.visitModel = function(modelName, func, startDepth) {
    visitInternal(getRootNode(modelName), func, startDepth || 0)
}
/*
 * Complex to explain. See {@webexport.js}
 * Its used to provide a sortable id per row when combined with Tuples
 *  [((variableId|tupleDefinitionId),tupleIndex){maxTupleDepth}]
 */
PropertiesAssembler.prototype.indexProperties = function(modelName) {
    var counter = 0;
    const padder = pad;
    visitInternal(getRootNode(modelName), function(node, depth) {
        counter++;
        node.id = padder(counter, 5);
        if (node.tupleProperty) {
            const tupleDef = PropertiesModel[node.solutionName + "_" + node.tupleDefinitionName + "_value"]
            if (tupleDef.tupleProperty) {
                const nestedTupleDef = PropertiesModel[node.solutionName + "_" + tupleDef.tupleDefinitionName + "_value"]
                if (nestedTupleDef.tupleProperty) {
                    const douleNestedTupleDef = PropertiesModel[node.solutionName + "_" + nestedTupleDef.tupleDefinitionName + "_value"]
                    if (douleNestedTupleDef.tupleProperty) throw Error('only 3levels nested tuples are allowed')
                    node.hash = [douleNestedTupleDef.id, '000', nestedTupleDef.id, '000', tupleDef.id, '000', node.id]
                } else {
                    node.hash = [nestedTupleDef.id, '000', tupleDef.id, '000', node.id, '000', node.id]
                }
            } else {
                node.hash = [tupleDef.id, '000', node.id, '000', node.id, '000', node.id]
            }
        }
        else node.hash = [node.id, '000', node.id, '000', node.id, '000', node.id];
    }, 0)
}

function pad(n, width, z) {
    z = z || '0';
    n = n + '';
    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

function visitInternal(node, func, depth) {
    func(node, depth);
    if (func.stop) return delete func.stop;
    if (node.nodes) {
        for (var i = 0; i < node.nodes.length; i++) {
            var childNode = PropertiesModel[node.nodes[i].name];
            childNode.parentrowId = node.rowId;//TODO: remove this (visitor should not modify state)
            visitInternal(childNode, func, depth + 1);
        }
    }
}

function visitChildren(node, func, depth) {
    if (node.nodes) {
        for (var i = 0; i < node.nodes.length; i++) {
            func(node, depth);
            visitChildren(PropertiesModel[node.nodes[i].name], func, depth + 1);
        }
    }
}

PropertiesAssembler.prototype.visitChildren = visitChildren;
PropertiesAssembler.prototype.getRootProperty = getRootNode;
PropertiesAssembler.prototype.getOrCreateProperty = getOrCreateProperty;
module.exports = PropertiesAssembler.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\PropertiesAssembler.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36}],27:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Parsers/Exchange modules create Solution objects filled with generic metadata (formula's,properties concerning a variable)
 *
 */
//This class also has functions for Property types.
//No instances of Property are made since there will be made a lot of those. (1.000.000) easy
//So we keep them plain.
//Don't allow dependencies to Services occur here
//TODO: we should not twice hold the 'nodes' object.
function Solution(solutionName) {
    this.name = solutionName;
    this.displayTypes = {};
    this.type = solutionName;
    this.properties = {};
    this.nodes = [];
    this.addedRowIds = new Set();
    this.formulas = new Set();
    this.root = {};
}

Solution.prototype.preparser = function(input) {
    return input;
}
Solution.prototype.getFormulas = function(iterator) {
    return this.formulas.forEach(iterator);
}
Solution.prototype.hasNode = function(rowId) {
    var has = this.addedRowIds.has(rowId);
    this.addedRowIds.add(rowId);
    return has;
}
Solution.prototype.setParentName = function(uiNode, parentId) {
    uiNode.parentName = (parentId === undefined ? 'root_value' : parentId + '_value');
}
//just be able to retrieve all data of the original
//delegate can be anything, only the one who created it knows it
Solution.prototype.setDelegate = function(uiNode, node) {
    var originalproperties = {};
    for (var key in node) {
        var property = node[key];
        if (typeof property !== 'object' && key.charAt(0) !== '_') {
            this.properties[key] = this.properties[key] || {};
            this.properties[key][property] = this.properties[key][property] || 0;
            this.properties[key][property] += 1;
            originalproperties[key] = property;
        }
    }
    node.originalproperties = originalproperties;
    uiNode.delegate = node;
}
Solution.prototype.getName = function() {
    return this.name;
}
//should not allow duplicates.
//Save UI- names only
Solution.prototype.createNode = function(rowId, colId, formulaId, displayAs) {
    var uiNode = {
        name: this.name + "_" + rowId + "_" + colId,
        rowId: rowId,
        colId: colId,
        refId: formulaId,
        displayAs: displayAs || 'string'
    };
    if (formulaId !== undefined) {
        uiNode.ref = formulaId;
        this.formulas.add(formulaId);
    }
    this.displayTypes[uiNode.displayAs] = true;
    this.nodes.push(uiNode);
    return uiNode;
}

Solution.prototype.addDisplayType = function(displayType) {
    if (displayType === undefined) {
        throw new Error('undefined displaytype, make sure to use valid displayTypes');
    }
    this.displayTypes[displayType] = true;
}
Solution.prototype.getDisplayTypes = function(displayType) {
    return this.displayTypes;
}
Solution.prototype.stringify = function() {
    return this.preparser(JSON.stringify(this.root, function(key, val) {
            if (key === 'originalproperties') {
                return undefined;
            }
            return val;
        }, 2
    ));
}
//add to global list of found variables
Solution.prototype.addNode = function(rowId, node) {
    this.nodes[rowId] = node
}
Solution.prototype.setPreparser = function(parser) {
    this.preparser = parser;
}
//'uielem' the Object of which the properties need to be set
//'elem' the Object of which the properties can be found
//set all properties of the elem in uielem
Solution.prototype.restoreDelegateProperties = function(newObject, orginalObject) {
    var delegate = orginalObject.delegate;
    if (delegate !== undefined && delegate.originalproperties !== undefined) {
        for (var key in delegate.originalproperties) {
            if (newObject[key] === undefined || newObject[key] === null) {
                if (delegate.originalproperties[key] !== undefined && delegate.originalproperties[key] !== null && delegate.originalproperties[key] !== '') {
                    newObject[key] = delegate.originalproperties[key];
                }
            }
        }
    }
}
//add node to root node if it has no parent
//else add the node to the children of is parent
Solution.prototype.addNodeToCorrespondingPlaceInHierarchie = function(parentrowId, rowId, node) {
    if (parentrowId === undefined) {
        this.root = node;
    }
    else {
        //create children array if it did not exist yet.
        var foundVariable = this.nodes[parentrowId];
        if (foundVariable.children === undefined) {
            foundVariable.children = [];
        }
        foundVariable.children.push(node);
    }
}
Solution.prototype.size = function() {
    return this.nodes.length;
}
module.exports = Solution;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\Solution.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36}],28:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Solution encapsulation
 * FormulaId '0' is not a valid ID!
 */
const log = require('log6')
const Solution = require('./Solution')
const PropertiesAssembler = require('./PropertiesAssembler')
const FunctionMap = require('./FunctionMap')
const FormulaService = require('./FormulaService')
const ParserService = require('./ParserService')
const FormulaBootstrap = require('./FormulaBootstrap');
const esprima = require('esprima')

function SolutionFacade() {
}

SolutionFacade.prototype.createSolution = function(solutionName) {
    return new Solution(PropertiesAssembler.createRootNode(solutionName).solutionName);
}

SolutionFacade.prototype.importSolutionData = function(data, parserType, workbook) {
    var foundParser = ParserService.findParser(parserType);
    var solution = foundParser.parseData(data, workbook);
    PropertiesAssembler.bulkInsert(solution);
    initFormulaBootstrap(solution.formulas, false);
    return solution;
}
SolutionFacade.prototype.exportSolution = function(parserType, rowId, workbook) {
    var parser = ParserService.findParser(parserType);
    if (parser === undefined) {
        throw Error('No such parser found:[' + parserType + ']');
    }
    return parser.deParse(rowId, workbook);
}

function initFormulaBootstrap(formulas, resetParsedFormula) {
    formulas.forEach(function(formulaId) {
        var formulaInfo = FormulaService.findFormulaByIndex(formulaId);
        if (resetParsedFormula) {
            formulaInfo.parsed = undefined;//explicitly reset parsed. (The formula-bootstrap) will skip parsed formulas
        }
        if (formulaInfo.parsed === undefined || formulaInfo.parsed === null) {
            FormulaBootstrap.parseAsFormula(formulaInfo);
        }
        FunctionMap.initializeFormula(formulaInfo);
    });
};
SolutionFacade.prototype.initFormulaBootstrap = initFormulaBootstrap;
/*
 *return given properties from a formula
 */
SolutionFacade.prototype.gatherFormulaProperties = function(modelName, properties, rowId) {
    var formulaProperties = {};
    for (var property in properties) {
        var formula = FormulaService.findFormulaByIndex(PropertiesAssembler.getOrCreateProperty(modelName, rowId, property).ref);
        if (formula !== undefined && formula.original !== undefined && formula.original !== null && formula.original !== '') {
            formulaProperties[property] = formula.original;
        }
    }
    return formulaProperties;
}
/**
 * Called from JSWorkBook
 * Initializes Solution if not exists
 * Creates Formula/Property if not exists
 * Initialize Functionmap
 */
SolutionFacade.prototype.createFormulaAndStructure = function(solutionName, formulaAsString, rowId, colId, displaytype, frequency) {
    //create a formula for the element
    var ast = esprima.parse(formulaAsString);
    //create Solution if not exists.
    var solution = this.createSolution(solutionName);
    //integrate Property with Formula
    this.createUIFormulaLink(solution, rowId, colId, ast.body[0].expression, displaytype, frequency);
    //integrate one formula from just created Solution
    this.initFormulaBootstrap(solution.formulas);
};
/**
 * Called by parsers
 */
SolutionFacade.prototype.createUIFormulaLink = function(solution, rowId, colId, body, displaytype, frequency) {
    //by default only value properties can be user entered
    //in simple (LOCKED = (colId !== 'value'))
    var property = PropertiesAssembler.getOrCreateProperty(solution.name, rowId, colId);
    if (displaytype) property.displaytype = displaytype;
    var formulaId = FormulaService.addModelFormula(property, solution.name, rowId, colId, ['value', 'title'].indexOf(colId) == -1, body, frequency);
    return solution.createNode(rowId, colId, formulaId, displaytype);
};

SolutionFacade.prototype.mergeFormulas = function(formulasArg) {
    //so for all refs in the formula, we will switch the formulaIndex
    var changed = [];
    formulasArg.forEach(function(formula) {
        //not sure where to put this logic
        //get local formula
        //var id = formula.id === undefined ? formula.index : formula.id;
        var localFormula = FormulaService.findFormulaByIndex(formula.index);
        if (localFormula !== undefined && localFormula !== null) {
            changed.push(localFormula.id || localFormula.index);
            //of course this should not live here, its just a bug fix.
            if (localFormula.index !== formula.id) {
                //move formula
                modify(localFormula, formula);
            }
        }
    });
    //rebuild the formulas
    this.initFormulaBootstrap(changed, true);
};

SolutionFacade.prototype.addFormulaDependency = function(formulaInfo, name, propertyName) {
    var property = PropertiesAssembler.getOrCreateProperty(formulaInfo.name.split('_')[0], name, propertyName || 'value');
    FormulaService.addFormulaDependency(formulaInfo, property.ref, property.name);
    return property;
}
SolutionFacade.prototype.getFunctions = function() {
    return this.functions;
}
SolutionFacade.prototype.visitParsers = ParserService.visitParsers;
SolutionFacade.prototype.addParser = ParserService.addParser;
SolutionFacade.prototype.getOrCreateProperty = PropertiesAssembler.getOrCreateProperty;
SolutionFacade.prototype.contains = PropertiesAssembler.contains
//TODO: add locked flag to these properties
SolutionFacade.prototype.properties = {
    value: 0,
    visible: 1,
    required: 2,
    locked: 3,
    entered: 4,
    validation: 5,
    title: 6,
    validateInput: 7,
    choices: 8,
    _testg: 9,
    _testh: 10
};
SolutionFacade.prototype.functions = {}
SolutionFacade.prototype.addFunction = function(solution, functionName, functionBody) {
    var node = this.createUIFormulaLink(solution, functionName, 'function', functionBody, 'number', 'document');
    const findFormulaByIndex = FormulaService.findFormulaByIndex(node.ref);
    findFormulaByIndex.params = "$1,$2"
}
SolutionFacade.prototype.addVariables = FormulaService.addVariables
SolutionFacade.prototype.initVariables = FormulaService.initVariables
SolutionFacade.prototype.fetchFormulaByIndex = FormulaService.findFormulaByIndex;
FormulaBootstrap.initStateBootstrap(SolutionFacade.prototype);
module.exports = SolutionFacade.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\SolutionFacade.js","/lme-core\\src",undefined)
},{"./FormulaBootstrap":21,"./FormulaService":22,"./FunctionMap":23,"./ParserService":25,"./PropertiesAssembler":26,"./Solution":27,"_process":38,"buffer":36,"esprima":35,"log6":35}],29:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const log = require('log6');
const headers = {
    title: {
        title: 'title'
    },
    columns: {
        title: 'timeline'
    },
    period: {
        title: 'period'
    },
    matrix: {
        title: 'matrix'
    },
    none: {
        title: 'none'
    },
    doc: {
        title: 'document'
    }
}

function TimeAxis(data) {
    this.importData = data
    // console.time('initialize_xAxis');
    this.tContext = data;
    var formulasets = data.formulasets;
    var formulasetsCount = data.formulasets.length;
    var viewmodes = {};
    var NA = data.navalue;
    var indexed = [];// holds a indexed reference for quicked lookup for real-column-contexts/ can be used for the
                     // column variable
    var templateindexed = [];// holds a indexed reference for quicked lookup for contexts/ its only for the templates
    // and will only be used during build time
    this.viewmodes = viewmodes;
    // make an array storing the formulaset for all columnentrees, used for quicker lookup later
    var formulasetLookup = [];// used to lookup the
    // we assume they ordered, looping trough the entrees, using the currentPeriod as being used until index had been
    // reached
    var periods = data.layout.period;
    var currentperiod = periods[0];
    var aggregationformulaset = formulasets[formulasets.length - 1];
    currentperiod.formulaset = formulasets[currentperiod.formulasetId];
    for (var i = 0; i < data.layout.idx; i++) {
        if (i >= currentperiod.idx) {
            currentperiod = periods[currentperiod.formulasetId + 1];
            // assign the formulaset, it was stored as reference
            currentperiod.formulaset = formulasets[currentperiod.formulasetId];
        }
        formulasetLookup[i] = currentperiod;
    }
    currentperiod.last = data.layout.idx;
    /*    this.column = function (variable, vars, hIndex, fIndex)
     {
     // var fi = (fIndex * formulasetsCount) + this.f;
     // should pass trough formula to the variable deocorator..
     // he can still swap flipflop T
     // i can pass trough the scope.. // return variable.evaluated[fIndex].call(this, variable, vars, hIndex, this);
     // i will pass trouhg the engine as scope..
     return variable.evaluated[(formulasetsCount * fIndex) + this.f](variable, vars, hIndex, this);
     }*/
    var infinitColumn = {
        hash: 0,
        dummy: true
    };
    infinitColumn.f = 0;
    infinitColumn.prev = infinitColumn;
    var timelineSize = data.time.timelineSize;
    var timelineMultiplier = data.time.timelineMultiplier;
    var columnMultiplier = data.time.columnMultiplier;
    // find out all viewtypes in the document
    var layout = data.layout;

    while (layout != undefined) {
        viewmodes[layout.name] = {
            //these will be reduced to fixednumber and columns, they all share the same algorithms
            doc: [[{hash: 0, f: 0, header: headers.title}, {
                hash: 1,
                f: 1,
                header: headers.doc,
                lastall: {hash: 1},
                firstall: {hash: 1},
                firstnotrend: {hash: 1},
                lastnotrend: {hash: 1},
                firsttrend: {hash: 1, lastbkyr: {hash: 0}},
                lasttrend: {hash: 1}
            }]],
            period: [[{hash: 0, f: 0, header: headers.title}, {hash: 1, f: 1, header: headers.period}, {
                hash: 2,
                header: headers.period
            }]],
            none: [[{hash: 0, f: 0, header: headers.title}]],
            columns: [],
            matrix: [[{hash: 0, f: 0, header: headers.title}, {hash: 1, f: 1, header: headers.matrix}, {
                hash: 2,
                header: headers.matrix
            }, {
                hash: 3,
                header: headers.matrix
            }, {
                hash: 4,
                header: headers.matrix
            }, {hash: 5, header: headers.matrix}
            ]],
            cols: []
        };
        layout = layout.children[0];
    }

    // tricky recursion here, just debug it.. too many to explain
    function nestRecursive(parent, object, offset, func) {
        object.forEach(function(child) {
            child.parent = parent;
            var tempincrease = child.size;
            var no = 0;
            child.parent.sibling = [];
            while (tempincrease <= (parent.size - 1)) {
                child.idx = (offset + tempincrease);
                child.no = no;
                tempincrease += child.size;
                child.parent.sibling.push((offset + (child.size * (no + 1))));
                nestRecursive(child, child.children, offset + (child.size * (no)), func)
                no++;
            }
        });
        func(parent);
    }

    function extractBaseChildren(child, array) {
        child.sibling.forEach(function(innerchild) {
            var foundChild = templateindexed[innerchild];
            if (foundChild.sibling == undefined) {
                array.push(innerchild);
            }
            else {
                extractBaseChildren(foundChild, array);
            }
        });
    }

    // extract data from recursion
    // make new column objects
    // be aware the values from child in here are temporally from transitive nature. U cannot keep references since
    // they will change in future. Presumably to the last one...
    nestRecursive(data.layout, data.layout.children, 0, function(child) {
        // actual element
        var newElement = {
            // type : child.name,
            parenttypes: [],
            hash: child.idx
        };
        // find out all parents and top
        var parent = child.parent;
        while (parent != undefined) {
            // register aggregation type
            // register all types to the new columnIndex object
            var previdx = child.idx - parent.size;
            newElement.parenttypes.push({
                idx: parent.idx,
                type: parent.name,
                prevme: previdx > 0 ? previdx : undefined
            });
            // if the next is undefined, we found top.
            newElement.top = parent.idx;
            parent = parent.parent;
        }
        // could be top, of so, we don't need this information
        if (child.parent != undefined) {
            newElement.agg = child.parent.idx;
            newElement.period = formulasetLookup[child.idx];
        }
        // could be aggregated, we want to know what siblings it had
        if (child.sibling != undefined) {
            newElement.sibling = child.sibling.slice();
            var children = newElement.sibling;
            var tarr = [];
            // add the base children aswell for quicker and eaier lookup later
            extractBaseChildren(child, tarr);
            newElement.allchildren = tarr;
        }
        else {
            // this is smallest we get
            var period = formulasetLookup[child.idx];
            if (period.first == undefined) {
                period.first = child.idx;
            }
            formulasetLookup[child.idx].last = child.idx;
        }
        // add elements to the base cols
        viewmodes[child.name].cols.push(newElement);
        templateindexed[newElement.hash] = newElement;
    });

    // convert template column index into real index
    function calculateIndex(timelineId, columnId) {
        var columnId = (columnId * columnMultiplier);
        // add offset,0 for the titleValue, 1 for dummy cache,we starting from 1 so +1
        columnId++;
        // add timeline
        columnId += (timelineId * timelineMultiplier);
        return columnId;
    }

    // convert meta data in real column object..
    // don't make references. The values are re-used over timelines
    for (var vmode in this.viewmodes) {
        // this loop will be used for all viewmodes when wisely declared.
        for (var tId = 0; tId < timelineSize; tId++) {
            // create new array for the timeline
            this.viewmodes[vmode].columns[tId] = [];
        }
    }
    // creat all real objects for all timeslines first, we use the indexes created to lookup the elements while
    // loooking for references
    for (var tId = 0; tId < timelineSize; tId++) {
        for (var vmode in this.viewmodes) {
            // times multiplier
            // jsut for quick reference place the array in here;
            var currentviewmode = viewmodes[vmode];
            var currentviewmodecolumns = currentviewmode.cols;
            for (var cId = 0; cId < currentviewmodecolumns.length; cId++) {
                var columnEntries = currentviewmode.columns;
                var columnEntriesForTimeline = currentviewmode.columns[tId];
                var metadata = currentviewmode.cols[cId];
                var columnId = calculateIndex(tId, metadata.hash);
                var previousColumn = (cId == 0 ? infinitColumn : columnEntriesForTimeline[columnEntriesForTimeline.length - 1]);
                var previousTimelineColumn = (tId == 0 ? undefined : columnEntries[tId - 1][columnEntriesForTimeline.length]);
                var columnElement = {
                    header: headers.columns,
                    hash: columnId,
                    prev: previousColumn
                };
                indexed[columnId] = columnElement;
                // add to the stack
                columnEntriesForTimeline.push(columnElement);
                // we know the first column from this, while being the first we can references it from here
                columnElement.first = columnEntriesForTimeline[0];
                // we don't knwow the last.. since it could be in the future, we have to add it later
            }
        }
        // now all entree are filled, for its timeline we can reference the last
        // be aware that the the viewmodes walked top,bkyr,half,qurt,detl. No reference can be made for the real column
        // objects,from top->detl. It would require a new loop so u can ask from a detl about a parent type children,
        // but not about information about those children, since they are not determined yet, they exist, but the
        // references are not u can however obtain information about the children from the template. And ofc there
        // should not be a need to ask these kind of information
        for (var vmode in this.viewmodes) {
            // times multiplier
            // jsut for quick reference place the array in here;
            var currentviewmode = viewmodes[vmode];
            var currentviewmodecolumns = currentviewmode.cols;
            var columnslength = currentviewmodecolumns.length;
            for (var cId = 0; cId < columnslength; cId++) {
                // here all references are made
                // bky,doc,period,formula,aggregation, top, children.. all
                var columnEntries = currentviewmode.columns;
                var columnEntriesForTimeline = columnEntries[tId];
                var entree = currentviewmode.columns[tId][cId];
                entree.last = columnEntriesForTimeline[columnEntriesForTimeline.length - 1];
                entree.first = columnEntriesForTimeline[0];
                entree.next = (cId == (columnslength - 1)) ? infinitColumn : columnEntriesForTimeline[cId + 1];
                var metadata = currentviewmode.cols[cId];
                entree.formula = metadata.period;
                if (metadata.agg != undefined) {
                    var aggColumnId = calculateIndex(tId, metadata.agg);
                    entree.agg = indexed[aggColumnId];
                }
                if (metadata.sibling != undefined) {
                    entree.f = aggregationformulaset.formulasetId;
                    entree.header = {
                        title: 'timelineAgg'
                    };
                    entree.aggcols = [];
                    metadata.sibling.forEach(function(childid) {
                        var childColId = calculateIndex(tId, childid);
                        entree.aggcols.push(indexed[childColId]);
                    });
                    entree.firstchild = indexed[calculateIndex(tId, metadata.allchildren[0])];
                    entree.lastchild = indexed[calculateIndex(tId, metadata.allchildren[metadata.allchildren.length - 1])];
                }
                else {
                    entree.f = formulasetLookup[metadata.hash].formulasetId;
                }
                // this will allow document values per timeline, if referring to timeline[0] there will only be one
                // possible..
                entree.doc = columnEntriesForTimeline[0];// there only is one and one only, always correct behavior
                // entree.period = (cId == 0) ? columnEntriesForTimeline[0] : columnEntriesForTimeline[1];// detail
                // should refer to corresponding period add all period information
                if (metadata.period != undefined) {
                    // now it will be able to aggregate
                    // can't do firstchild in this type.
                    entree.period = columnEntriesForTimeline[metadata.period.hash];
                    entree.header = {
                        title: 'timeline ' + metadata.period.formulaset.name
                    };
                    entree.firstinperiod = indexed[calculateIndex(tId, metadata.period.first)];
                    entree.lastinperiod = indexed[calculateIndex(tId, metadata.period.last)];
                    for (var pi = 0; pi < periods.length; pi++) {
                        var period = periods[pi];
                        var tFirst = indexed[calculateIndex(tId, period.first)];
                        var formulaname = period.formulaset.name;
                        entree['first' + formulaname] = tFirst;
                        var tLast = indexed[calculateIndex(tId, period.last)];
                        entree['last' + formulaname] = tLast;
                        entree['isfirst' + formulaname] = (tFirst.hash == entree.hash);
                        entree['islast' + formulaname] = (tLast.hash == entree.hash);
                        entree['is' + formulaname] = (period.formulasetId == formulasetLookup[metadata.hash].formulasetId);
                        entree['isprev' + formulaname] = entree.prev.hash == 0 ? false : entree.prev['is' + formulaname];
                    }
                    entree.isfirstinperiod = (entree.firstinperiod.hash == entree.hash);
                    entree.islastinperiod = (entree.lastinperiod.hash == entree.hash);
                }
                entree.aggregated = (metadata.sibling != undefined);
                entree.tsy = (metadata.sibling == undefined) ? 1 : metadata.allchildren.length;
                entree.texceedtsy = metadata.hash > entree.tsy;// should be infirstbkyr
                // add all information about aggregation types;bkyr,all are available if not top..
                // there is no need yet to give aggregated columns information about bookyear etc.. yet
                if (metadata.sibling == undefined) {
                    for (var aggi = 0; aggi < metadata.parenttypes.length; aggi++) {
                        var agg = metadata.parenttypes[aggi];
                        var aggtype = agg.type;
                        var template = templateindexed[agg.idx];
                        var tempatechilds = template.allchildren;
                        var aggentree = indexed[calculateIndex(tId, template.hash)];
                        entree[aggtype] = aggentree;
                        entree['prev' + aggtype] = aggentree.prev == undefined ? infinitColumn : aggentree.prev;
                        entree['previn' + aggtype] = agg.prevme == undefined ? infinitColumn : indexed[calculateIndex(tId, agg.prevme)];
                        entree['isinfirst' + aggtype] = agg.prevme == undefined;
                        var prevagg = aggentree.prev;
                        entree['lastinprev' + aggtype] = (prevagg.hash == 0) ? infinitColumn : prevagg.lastchild;
                        entree['firstinprev' + aggtype] = (prevagg.hash == 0) ? infinitColumn : prevagg.firstchild;
                        entree['lastin' + aggtype] = prevagg;
                        var firstEntree = indexed[calculateIndex(tId, tempatechilds[0])];
                        entree['first' + aggtype] = firstEntree;
                        entree['isfirst' + aggtype] = (firstEntree.hash == entree.hash);
                        var lastEntree = indexed[calculateIndex(tId, tempatechilds[tempatechilds.length - 1])];
                        entree['last' + aggtype] = lastEntree;
                        entree['islast' + aggtype] = (lastEntree.hash == entree.hash);
                    }
                    entree.mutcalc = entree.infirstbkyr ? 1 : NA;// information not available in aggcolumns,yet...
                }
                // when period or doc variable refer to Detail Variable, which is kind of strange..
                entree.detail = (cId == 0) ? columnEntriesForTimeline[0] : columnEntriesForTimeline[1];// period should
                                                                                                       // refer to
                                                                                                       // first detail
                                                                                                       // from own
                                                                                                       // period
            }
        }
    }
    this.indexed = indexed;
    templateindexed = undefined;
    if (log.DEBUG) log.debug('Created Xaxis for ' + data.time.columnSize + ' columns on ' + timelineSize + ' timelines ');
    /**
     * Assign references to the infinit column
     */
    infinitColumn.doc = entree.doc;
    return viewmodes;
}

module.exports = TimeAxis;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\TimeAxis.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36,"log6":35}],30:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * Bridge between FormulaService,PropertiesAssembler and FunctionMap
 */
const log = require('log6');
const ValueFacade = {}
const PropertiesAssembler = require('./PropertiesAssembler');
const FunctionMap = require('./FunctionMap');
const FormulaService = require('./FormulaService')
/**
 * For small arrays, lets say until 1000, elements. There is no need to map by name.
 * Just iterate the shabang and test the property
 */
Array.prototype.lookup = function(property, name) {
    for (var i = 0; i < this.length; i++) {
        if (this[i][property] === name) {
            return this[i];
        }
    }
    return undefined;
}
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position) {
        position = position || 0;
        return this.substr(position, searchString.length) === searchString;
    };
}
if (!String.prototype.endsWith) {
    String.prototype.endsWith = function(suffix) {
        return this.indexOf(suffix, this.length - suffix.length) !== -1;
    };
}
if (!String.prototype.trim) {
    String.prototype.trim = function() {
        return this.replace(/^\s+|\s+$/g, '');
    };
}

function findFormula(uiModel) {
    if (uiModel === undefined) {
        return undefined;
    }
    return FormulaService.findFormulaByIndex(uiModel.ref);
}

function fetchSolutionNode(row, col) {
    return PropertiesAssembler.fetch(row + '_' + col);
}

ValueFacade.putSolutionPropertyValue = function(context, row, value, col, xas, yas) {
    var rowId = row + '_' + (col || 'value');
    var localFormula = findFormula(PropertiesAssembler.fetch(rowId));
    if (localFormula === undefined) {
        //because only Formula's are known here, we cannot give away variable name here.
        throw Error('Cannot find variable')
    }
    if (log.TRACE) log.trace('Set value row:[%s] x:[%s] y:[%s] value:[%s]', rowId, xas.hash, yas.hash, value);
    context.calc_count++;
    context.audit.push({
        saveToken: context.saveToken,
        hash: xas.hash + yas.hash + 0,
        formulaId: localFormula.id || localFormula.index
    })
    var userValue = value;
    var variable = fetchSolutionNode(row, (col || 'value'));
    if (variable.displayAs == 'radio' || variable.displayAs == 'select') {
        if (userValue != null) {
            const choices = ValueFacade.fetchSolutionPropertyValue(context, row, 'choices');
            userValue = userValue === true ? "1" : userValue === false ? "0" : userValue
            const lookupvalue = (choices.lookup('value', String(userValue)) || choices.lookup('name', String(userValue)));
            if (log.DEBUG && lookupvalue == null) log.warn('Invalid choice-value set for ' + row + ' [' + userValue + ']')
            userValue = lookupvalue ? lookupvalue.name : null;
            if (!isNaN(userValue)) {
                userValue = parseFloat(userValue)
            }
        }
    }
    if (variable.frequency == 'document') {
        xas = xas.doc
    }
    //NULL values are allowed, and should not be parsed into a real data type.
    if (userValue != null) {
        if (variable.datatype == 'number') {
            userValue = Number(userValue)
        } else if (variable.datatype == 'string') {
            userValue = String(userValue)
        } else if (variable.datatype == 'boolean') {
            userValue = Boolean(userValue)
        }
    }
    FunctionMap.apiSet(localFormula, xas, yas, 0, userValue, context.values);
};
/**
 * Generic default values, formatter transformers
 * TODO: introduce data-masks to keep these checks quick
 * - every variable has one mask, this one includes display and data types.
 */
ValueFacade.fetchSolutionPropertyValue = function(context, row, col, xas, yas) {
    const colType = col || 'value';
    if (colType === 'entered') {
        //kinda copy-paste, find way to refactor. there is no real enteredValue formula.
        //retrieve the 'value' formula, check if there is an entered value
        const variable = fetchSolutionNode(row, 'value');
        const localFormula = findFormula(variable);
        if (localFormula === undefined) {
            return false;
        }
        const id = localFormula.id || localFormula.index;
        const hash = xas.hash + yas.hash + 0;
        return context.values[id][hash] != null;
    } else if (colType === 'original') {
        const variable = fetchSolutionNode(row, 'value');
        const localFormula = findFormula(variable);
        return localFormula.original;
    }
    const variable = fetchSolutionNode(row, colType);
    const localFormula = findFormula(variable);
    var returnValue;
    if (localFormula === undefined) {
        returnValue = context.propertyDefaults[colType];
    }
    else {
        if (variable.frequency == 'document') {
            xas = xas.doc
        }
        returnValue = FunctionMap.apiGet(localFormula, xas, yas, 0, context.values);
    }
    if (variable) {
        if (colType === 'value') {
            if (variable.displayAs == 'radio' || variable.displayAs == 'select') {
                if (returnValue != null) {
                    const choices = ValueFacade.fetchSolutionPropertyValue(context, row, 'choices');
                    returnValue = returnValue === true ? "1" : returnValue === false ? "0" : returnValue
                    const choicesLookup = choices.lookup('name', String(returnValue));
                    returnValue = choicesLookup ? choicesLookup.value : returnValue;
                }
            } else {
                if (variable.decimals !== undefined) {
                    if (variable.datatype == 'matrix') {
                        for (var i = 0; i < returnValue.length; i++) {
                            var innerx = returnValue[i];
                            if (!isNaN(innerx)) {
                                var level = Math.pow(10, variable.decimals);
                                returnValue[i] = (Math.round(innerx * level) / level)
                            }
                            for (var y = 0; y < returnValue[i].length; y++) {
                                var innery = returnValue[i][y];
                                if (!isNaN(innery)) {
                                    var level = Math.pow(10, variable.decimals);
                                    returnValue[i][y] = (Math.round(innery * level) / level)
                                }
                            }
                        }
                    }
                    else if (!isNaN(returnValue)) {
                        var level = Math.pow(10, variable.decimals);
                        returnValue = (Math.round(returnValue * level) / level)
                    }
                }
                if (variable.datatype == 'number') {
                    returnValue = OnNA(returnValue, 0)
                }
                if (variable.displayAs == 'piechart') {
                    returnValue = PIECHART(returnValue)
                }
            }
            if (variable.displayAs == 'date') {
                returnValue = new Date(returnValue)
            }
        } else if (colType == 'locked') {
            return Boolean(returnValue)
        } else if (colType == 'visible') {
            return Boolean(returnValue)
        }

    }
    return returnValue;
}
ValueFacade.fetchRootSolutionProperty = PropertiesAssembler.getRootProperty;
ValueFacade.fetchSolutionNode = fetchSolutionNode;
ValueFacade.apiGetValue = FunctionMap.apiGet;
ValueFacade.getAllValues = function(docValues) {
    return this.getValuesFromFormulaIds(Object.keys(docValues), docValues);
}
ValueFacade.getValuesFromFormulaIds = function(keys, docValues) {
    //we cannot just return everything here, Because for now all formula's have a user-entered value cache.
    //Also Functions themSelves are bound to this object.
    //So we have to strip them out here.
    //should be part of the apiGet, to query all *_value functions. or *_validation etc.
    var values = [];
    for (var i = 0; i < keys.length; i++) {
        var formulaId = keys[i];
        var cachevalues = docValues[formulaId];
        if (cachevalues) {
            var formula = FormulaService.findFormulaByIndex(formulaId);
            var formulaName = formula === undefined ? formulaId : formula.name;
            for (var cachedValue in cachevalues)
                values.push({
                    varName: formulaName,
                    colId: cachedValue,
                    value: cachevalues[cachedValue]
                });
        }
    }
    return values;
}
//when new formula's arrive, we have to update the user-entered map so we don't get NPE
ValueFacade.updateValueMap = function(values) {
    FormulaService.visitFormulas(function(formula) {
        //later will add values['_'+key] for the cache
        //for unlocked add values[key] here will user entered values stay
        if (formula.type === 'noCacheUnlocked') {
            var id = formula.id || formula.index;
            if (!values[id]) {
                values[id] = {};
            }
        }
    });
};
ValueFacade.visit = PropertiesAssembler.visitProperty;
ValueFacade.visitChildren = PropertiesAssembler.visitChildren;
ValueFacade.findAllInSolution = PropertiesAssembler.findAllInSolution;
module.exports = ValueFacade;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\ValueFacade.js","/lme-core\\src",undefined)
},{"./FormulaService":22,"./FunctionMap":23,"./PropertiesAssembler":26,"_process":38,"buffer":36,"log6":35}],31:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/*
 * Absolutely remove title from this Dimension
 * Since time has nothing to do with formula formula-sets [trend,notrend]
 * We could index all properties with 8bits...  since there is never a need of 128 different properties
 *  TODO: this also includes the legacy more-complex 'title-prefix-column'. Remove the title column
 *  TODO: Timelines dimension is no longer used within the engine since they are accumulated with the database
 *
 *  Here we will do column/timeline ordering, referencing previous and adjacent columns
 *  
 *  The variable decorator should suply the referenced column to write into
 *  Period[T=12] will be referred to Period[1]
 *  When Period:
 *  variable.columns[12] will be referred to variable.columns[1]
 *  variable.columns[27] will be referred to variable.columns[2] etc..
 *  
 *  When Document 
 *  variable.columns[*] will be referred to variable.columns[1?0]

 *  When Detail 
 *  variable.columns[x] will be referred to variable.columns[x]
 */
//Detail can refer to its Period
//Detail will refer it its own Detail, else [bky] or [prev] has to be supplied
//Detail can refer to Document
//Period will refer to first Detail, else [first] or [last] or [bky] has to be supplied
//Period will refer to its own Period, else [forecast] or [history] has to be supplied
//Period can refer to Document
//Document will refer to first Detail, else [first] or [last] or [bky] has to be supplied
//Document will refer to first Period, else [forecast] or [history] has to be supplied
//Document can only refer to itsself
//can easy be refactored for better performance
var importData = {"formulasets":[{"formulasetId":0,"name":"notrend"},{"formulasetId":1,"name":"trend"},{"formulasetId":2,"name":"user"},{"formulasetId":3,"name":"sector"},{"formulasetId":4,"name":"aggregation"}],"layout":{"children":[{"children":[],"name":"bkyr","size":1}],"idx":20,"name":"all","no":0,"period":[{"formulasetId":0,"hash":0,"idx":19},{"formulasetId":1,"hash":1,"idx":20}],"size":20},"navalue":1e-10,"nestedTupleMultiplier":"undefined","time":{"columnMultiplier":1,"columnSize":20,"columns":[{"index":0,"name":"jan/p1"},{"index":1,"name":"fes/p2"},{"index":2,"name":"mar/p3"}],"periodMultiplier":1,"periodSize":2,"timelineMultiplier":256,"timelineSize":1,"timelines":[{"index":0,"name":"Not_USED"}]},"tupleMultiplier":32768};
var log = require('log6');
var headers = {
    title: {
        title: 'title'
    },
    columns: {
        title: 'timeline'
    },
    period: {
        title: 'period'
    },
    matrix: {
        title: 'matrix'
    },
    none: {
        title: 'none'
    },
    doc: {
        title: 'document'
    }
}

function calculateCalculationDocument(data) {
    // console.time('initialize_xAxis');
    this.tContext = data;
    var formulasets = data.formulasets;
    var formulasetsCount = data.formulasets.length;
    var viewmodes = {};
    var NA = data.navalue;
    var indexed = [];// holds a indexed reference for quicked lookup for real-column-contexts/ can be used for the
                     // column variable
    var templateindexed = [];// holds a indexed reference for quicked lookup for contexts/ its only for the templates
    // and will only be used during build time
    this.viewmodes = viewmodes;
    // make an array storing the formulaset for all columnentrees, used for quicker lookup later
    var formulasetLookup = [];// used to lookup the
    // we assume they ordered, looping trough the entrees, using the currentPeriod as being used until index had been
    // reached
    var periods = data.layout.period;
    var currentperiod = periods[0];
    var aggregationformulaset = formulasets[formulasets.length - 1];
    currentperiod.formulaset = formulasets[currentperiod.formulasetId];
    for (var i = 0; i < data.layout.idx; i++) {
        if (i >= currentperiod.idx) {
            currentperiod = periods[currentperiod.formulasetId + 1];
            // assign the formulaset, it was stored as reference
            currentperiod.formulaset = formulasets[currentperiod.formulasetId];
        }
        formulasetLookup[i] = currentperiod;
    }
    currentperiod.last = data.layout.idx;
    /*    this.column = function (variable, vars, hIndex, fIndex)
     {
     // var fi = (fIndex * formulasetsCount) + this.f;
     // should pass trough formula to the variable deocorator..
     // he can still swap flipflop T
     // i can pass trough the scope.. // return variable.evaluated[fIndex].call(this, variable, vars, hIndex, this);
     // i will pass trouhg the engine as scope..
     return variable.evaluated[(formulasetsCount * fIndex) + this.f](variable, vars, hIndex, this);
     }*/
    var infinitColumn = {
        hash: 0,
        dummy: true
    };
    infinitColumn.f = 0;
    infinitColumn.prev = infinitColumn;
    var timelineSize = data.time.timelineSize;
    var timelineMultiplier = data.time.timelineMultiplier;
    var columnMultiplier = data.time.columnMultiplier;
    // find out all viewtypes in the document
    var layout = data.layout;

    while (layout != undefined) {
        viewmodes[layout.name] = {
            //these will be reduced to fixednumber and columns, they all share the same algorithms
            doc: [[{hash: 0, f: 0, header: headers.title}, {
                hash: 1,
                f: 1,
                header: headers.doc,
                lastall: {hash: 1},
                firstall: {hash: 1},
                firstnotrend: {hash: 1},
                lastnotrend: {hash: 1},
                firsttrend: {hash: 1, lastbkyr: {hash: 0}},
                lasttrend: {hash: 1}
            }]],
            period: [[{hash: 0, f: 0, header: headers.title}, {hash: 1, f: 1, header: headers.period}, {
                hash: 2,
                header: headers.period
            }]],
            none: [[{hash: 0, f: 0, header: headers.title}]],
            columns: [],
            matrix: [[{hash: 0, f: 0, header: headers.title}, {hash: 1, f: 1, header: headers.matrix}, {
                hash: 2,
                header: headers.matrix
            }, {
                hash: 3,
                header: headers.matrix
            }, {
                hash: 4,
                header: headers.matrix
            }, {hash: 5, header: headers.matrix}
            ]],
            cols: []
        };
        layout = layout.children[0];
    }

    // tricky recursion here, just debug it.. too many to explain
    function nestRecursive(parent, object, offset, func) {
        object.forEach(function(child) {
            child.parent = parent;
            var tempincrease = child.size;
            var no = 0;
            child.parent.sibling = [];
            while (tempincrease <= (parent.size - 1)) {
                child.idx = (offset + tempincrease);
                child.no = no;
                tempincrease += child.size;
                child.parent.sibling.push((offset + (child.size * (no + 1))));
                nestRecursive(child, child.children, offset + (child.size * (no)), func)
                no++;
            }
        });
        func(parent);
    }

    function extractBaseChildren(child, array) {
        child.sibling.forEach(function(innerchild) {
            var foundChild = templateindexed[innerchild];
            if (foundChild.sibling == undefined) {
                array.push(innerchild);
            }
            else {
                extractBaseChildren(foundChild, array);
            }
        });
    }

    // extract data from recursion
    // make new column objects
    // be aware the values from child in here are temporally from transitive nature. U cannot keep references since
    // they will change in future. Presumably to the last one...
    nestRecursive(data.layout, data.layout.children, 0, function(child) {
        // actual element
        var newElement = {
            // type : child.name,
            parenttypes: [],
            hash: child.idx
        };
        // find out all parents and top
        var parent = child.parent;
        while (parent != undefined) {
            // register aggregation type
            // register all types to the new columnIndex object
            var previdx = child.idx - parent.size;
            newElement.parenttypes.push({
                idx: parent.idx,
                type: parent.name,
                prevme: previdx > 0 ? previdx : undefined
            });
            // if the next is undefined, we found top.
            newElement.top = parent.idx;
            parent = parent.parent;
        }
        // could be top, of so, we don't need this information
        if (child.parent != undefined) {
            newElement.agg = child.parent.idx;
            newElement.period = formulasetLookup[child.idx];
        }
        // could be aggregated, we want to know what siblings it had
        if (child.sibling != undefined) {
            newElement.sibling = child.sibling.slice();
            var children = newElement.sibling;
            var tarr = [];
            // add the base children aswell for quicker and eaier lookup later
            extractBaseChildren(child, tarr);
            newElement.allchildren = tarr;
        }
        else {
            // this is smallest we get
            var period = formulasetLookup[child.idx];
            if (period.first == undefined) {
                period.first = child.idx;
            }
            formulasetLookup[child.idx].last = child.idx;
        }
        // add elements to the base cols
        viewmodes[child.name].cols.push(newElement);
        templateindexed[newElement.hash] = newElement;
    });

    // convert template column index into real index
    function calculateIndex(timelineId, columnId) {
        var columnId = (columnId * columnMultiplier);
        // add offset,0 for the titleValue, 1 for dummy cache,we starting from 1 so +1
        columnId++;
        // add timeline
        columnId += (timelineId * timelineMultiplier);
        return columnId;
    }

    // convert meta data in real column object..
    // don't make references. The values are re-used over timelines
    for (var vmode in this.viewmodes) {
        // this loop will be used for all viewmodes when wisely declared.
        for (var tId = 0; tId < timelineSize; tId++) {
            // create new array for the timeline
            this.viewmodes[vmode].columns[tId] = [];
        }
    }
    // creat all real objects for all timeslines first, we use the indexes created to lookup the elements while
    // loooking for references
    for (var tId = 0; tId < timelineSize; tId++) {
        for (var vmode in this.viewmodes) {
            // times multiplier
            // jsut for quick reference place the array in here;
            var currentviewmode = viewmodes[vmode];
            var currentviewmodecolumns = currentviewmode.cols;
            for (var cId = 0; cId < currentviewmodecolumns.length; cId++) {
                var columnEntries = currentviewmode.columns;
                var columnEntriesForTimeline = currentviewmode.columns[tId];
                var metadata = currentviewmode.cols[cId];
                var columnId = calculateIndex(tId, metadata.hash);
                var previousColumn = (cId == 0 ? infinitColumn : columnEntriesForTimeline[columnEntriesForTimeline.length - 1]);
                var columnElement = {
                    header: headers.columns,
                    hash: columnId,
                    prev: previousColumn
                };
                indexed[columnId] = columnElement;
                // add to the stack
                columnEntriesForTimeline.push(columnElement);
                // we know the first column from this, while being the first we can references it from here
                columnElement.first = columnEntriesForTimeline[0];
                // we don't knwow the last.. since it could be in the future, we have to add it later
            }
        }
        // now all entree are filled, for its timeline we can reference the last
        // be aware that the the viewmodes walked top,bkyr,half,qurt,detl. No reference can be made for the real column
        // objects,from top->detl. It would require a new loop so u can ask from a detl about a parent type children,
        // but not about information about those children, since they are not determined yet, they exist, but the
        // references are not u can however obtain information about the children from the template. And ofc there
        // should not be a need to ask these kind of information
        for (var vmode in this.viewmodes) {
            // times multiplier
            // jsut for quick reference place the array in here;
            var currentviewmode = viewmodes[vmode];
            var currentviewmodecolumns = currentviewmode.cols;
            var columnslength = currentviewmodecolumns.length;
            for (var cId = 0; cId < columnslength; cId++) {
                // here all references are made
                // bky,doc,period,formula,aggregation, top, children.. all
                var columnEntries = currentviewmode.columns;
                var columnEntriesForTimeline = columnEntries[tId];
                var entree = currentviewmode.columns[tId][cId];
                entree.last = columnEntriesForTimeline[columnEntriesForTimeline.length - 1];
                entree.first = columnEntriesForTimeline[0];
                entree.next = (cId == (columnslength - 1)) ? infinitColumn : columnEntriesForTimeline[cId + 1];
                var metadata = currentviewmode.cols[cId];
                entree.formula = metadata.period;
                if (metadata.agg != undefined) {
                    var aggColumnId = calculateIndex(tId, metadata.agg);
                    entree.agg = indexed[aggColumnId];
                }
                if (metadata.sibling != undefined) {
                    entree.f = aggregationformulaset.formulasetId;
                    entree.header = {
                        title: 'timelineAgg'
                    };
                    entree.aggcols = [];
                    metadata.sibling.forEach(function(childid) {
                        var childColId = calculateIndex(tId, childid);
                        entree.aggcols.push(indexed[childColId]);
                    });
                    entree.firstchild = indexed[calculateIndex(tId, metadata.allchildren[0])];
                    entree.lastchild = indexed[calculateIndex(tId, metadata.allchildren[metadata.allchildren.length - 1])];
                }
                else {
                    entree.f = formulasetLookup[metadata.hash].formulasetId;
                }
                // this will allow document values per timeline, if referring to timeline[0] there will only be one
                // possible..
                entree.doc = columnEntriesForTimeline[0];// there only is one and one only, always correct behavior
                // entree.period = (cId == 0) ? columnEntriesForTimeline[0] : columnEntriesForTimeline[1];// detail
                // should refer to corresponding period add all period information
                if (metadata.period != undefined) {
                    // now it will be able to aggregate
                    // can't do firstchild in this type.
                    entree.period = columnEntriesForTimeline[metadata.period.hash];
                    entree.header = {
                        title: 'timeline ' + metadata.period.formulaset.name
                    };
                    entree.firstinperiod = indexed[calculateIndex(tId, metadata.period.first)];
                    entree.lastinperiod = indexed[calculateIndex(tId, metadata.period.last)];
                    for (var pi = 0; pi < periods.length; pi++) {
                        var period = periods[pi];
                        var tFirst = indexed[calculateIndex(tId, period.first)];
                        var formulaname = period.formulaset.name;
                        entree['first' + formulaname] = tFirst;
                        var tLast = indexed[calculateIndex(tId, period.last)];
                        entree['last' + formulaname] = tLast;
                        entree['isfirst' + formulaname] = (tFirst.hash == entree.hash);
                        entree['islast' + formulaname] = (tLast.hash == entree.hash);
                        entree['is' + formulaname] = (period.formulasetId == formulasetLookup[metadata.hash].formulasetId);
                        entree['isprev' + formulaname] = entree.prev.hash == 0 ? false : entree.prev['is' + formulaname];
                    }
                    entree.isfirstinperiod = (entree.firstinperiod.hash == entree.hash);
                    entree.islastinperiod = (entree.lastinperiod.hash == entree.hash);
                }
                entree.aggregated = (metadata.sibling != undefined);
                entree.tsy = (metadata.sibling == undefined) ? 1 : metadata.allchildren.length;
                entree.texceedtsy = metadata.hash > entree.tsy;// should be infirstbkyr
                // add all information about aggregation types;bkyr,all are available if not top..
                // there is no need yet to give aggregated columns information about bookyear etc.. yet
                if (metadata.sibling == undefined) {
                    for (var aggi = 0; aggi < metadata.parenttypes.length; aggi++) {
                        var agg = metadata.parenttypes[aggi];
                        var aggtype = agg.type;
                        var template = templateindexed[agg.idx];
                        var tempatechilds = template.allchildren;
                        var aggentree = indexed[calculateIndex(tId, template.hash)];
                        entree[aggtype] = aggentree;
                        entree['prev' + aggtype] = aggentree.prev == undefined ? infinitColumn : aggentree.prev;
                        entree['previn' + aggtype] = agg.prevme == undefined ? infinitColumn : indexed[calculateIndex(tId, agg.prevme)];
                        entree['isinfirst' + aggtype] = agg.prevme == undefined;
                        var prevagg = aggentree.prev;
                        entree['lastinprev' + aggtype] = (prevagg.hash == 0) ? infinitColumn : prevagg.lastchild;
                        entree['firstinprev' + aggtype] = (prevagg.hash == 0) ? infinitColumn : prevagg.firstchild;
                        entree['lastin' + aggtype] = prevagg;
                        var firstEntree = indexed[calculateIndex(tId, tempatechilds[0])];
                        entree['first' + aggtype] = firstEntree;
                        entree['isfirst' + aggtype] = (firstEntree.hash == entree.hash);
                        var lastEntree = indexed[calculateIndex(tId, tempatechilds[tempatechilds.length - 1])];
                        entree['last' + aggtype] = lastEntree;
                        entree['islast' + aggtype] = (lastEntree.hash == entree.hash);
                    }
                    entree.mutcalc = entree.infirstbkyr ? 1 : NA;// information not available in aggcolumns,yet...
                }
                // when period or doc variable refer to Detail Variable, which is kind of strange..
                entree.detail = (cId == 0) ? columnEntriesForTimeline[0] : columnEntriesForTimeline[1];// period should
                                                                                                       // refer to
                                                                                                       // first detail
                                                                                                       // from own
                                                                                                       // period
            }
        }
    }
    this.indexed = indexed;
    templateindexed = undefined;
    if (log.DEBUG) log.debug('Created Xaxis for ' + data.time.columnSize + ' columns on ' + timelineSize + ' timelines ');
    /**
     * Assign references to the infinit column
     */
    infinitColumn.doc = entree.doc;
    return viewmodes;
}

function CalculationDocument() {
}

CalculationDocument.prototype = calculateCalculationDocument(importData);
// NodeJS support..
// 25ms for 134col/5timelines
// 199ms for 134col/40timelines
// what is expected to be happen.. lineair result. 1ms boiler plate 5ms*timeline for 134cols
// 280ms for 234cols 40timelines. Very acceptable 12year 40timelines 280ms..
// columns can also be mixed in tsy. so 5x1d and then (7*12)bkyr.tsy. Allow 100year forecast., would require some nice
// tricks here.. but possible from here only prevbkyear, might consider removing *[agg*], only keep the *[top*]
// currently we have max7 year 10timelines
module.exports = CalculationDocument.prototype;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\XAxis.js","/lme-core\\src",undefined)
},{"_process":38,"buffer":36,"log6":35}],32:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/**
 * TUPLES
 *
 * In mathematics a tuple is a finite ordered list (sequence) of elements.
 * An n-tuple is a sequence (or ordered list) of n elements, where n is a non-negative integer.
 * There is only one 0-tuple, an empty sequence.
 * An n-tuple is defined inductively using the construction of an ordered pair.
 * Mathematicians usually write tuples by listing the elements within parentheses and separated by commas; for example,(2, 7, 4, 1, 7) denotes a 5-tuple.
 * Sometimes other symbols are used to surround the elements, such as square brackets "[ ]" or angle brackets "< >". Braces "{ }" are only used in defining arrays in some programming languages such as Java and Visual Basic,
 * but not in mathematical expressions, as they are the standard notation for sets. The term tuplecan often occur when discussing other mathematical objects, such as vectors.
 * In computer science, tuples come in many forms. In dynamically typed languages, such as Lisp,
 * lists are commonly used as tuples.[citation needed] Most typed functional programming languages implement tuples directly as product types, tightly associated with algebraic data types,
 * pattern matching, and destructuring assignment.[2] Many programming languages offer an alternative to tuples, known as record types, featuring unordered elements accessed by label.
 * A few programming languages combine ordered tuple product types and unordered record types into a single construct, as in C structs and Haskell records.
 * Relational databases may formally identify their rows (records) as tuples.
 * Tuples also occur in relational algebra; when programming the semantic web with the Resource Description Framework (RDF); in linguistics; and in philosophy.
 *
 * Bit shifting is only possible for 32bit 2complement int in JavaScript
 * Other trailing indexes are used for Time dimension.
 *   10bit 512cols /20 = aprox 25bookyear
 *
 * We always start on level 0.0.0.0.* meaning we are always living in a TupleContext. The first TupleInstance of the First Tuple Definition node
 *  Tuple instances and Definitions have ONLY! td/tp relations towards the existing Tree-structure based FFL, not regular tree-nodes
 *  In abstract creating a TupleInstance of the First Tuple Definition within the model uses the same stateless object yet another TupleDefinition should use.
 *  So don't confuse these concepts with existing parent-child relations in FFL nodes.
 */

/**
 * Gedachten bij het implementeren van tuples:
 * Van tuple naar tuple *binnen eigen tupleDefinition* word de TupleLocatie gebruikt om berekeningen te doen
 * Van Niet tuple naar tuple worden alle values van alle tupleinstanties terug gegeven
 * van tuple naar niet tuple word de tuple naar 0 gezet (mits anders aangeven) (FirstTuple,LastTuple,MaxTuple,FirstTupleIn....)
 * Formules worden geparsed, daarin is de target(referenceFormula) een propertyReferentie.
 * Dit betekend dat er vantui deze manier gedacht moet worden met het parsen
 * De TargetProperty kan een tuple/niet tuple zijn, en daar moet rekening mee gehouden worden.
 * De YAxis word meegeven van de formule, als er naar een tuple variable referenced word, kan de geparsde formula vanuit een tuple
 * een andere uitwerking hebben dan vanuit een niet-tuple
 *
 * tuple    A: 1
 * tuple    X: A+1 -> a(x,y,z) + 1 = 2
 * variable L: A+1 -> a(x,y,z) + 1 = [1] + 1
 *
 * Een wrapper om de uitvragende Property?
 * TSUM herstellen en de logica verplaatsen naar de uitvragende formule
 * TSUM(tupleNaam) => TSUM(tupleDefinitionCount,propertyNaam,x,y,z)
 *
 * Bij het inlezen van een FFL model, tuple markeren als TupleDefinition
 * Alle kinderen daaronder totaan nieuwe tuple markeren als TupleProperty
 *
 * Bij het uitvragen van een TupleDefinition itereren over alle instanties
 */
const assert = require('assert')
const log = require('log6')
const INSTANCES_PER_TUPLE = 32;
const BITS_PER_TUPLE = 6;
const FIRST__TUPLE_START_BIT = 10;
const SECOND_TUPLE_START_BIT = FIRST__TUPLE_START_BIT + (1 * BITS_PER_TUPLE);
const THIRD__TUPLE_START_BIT = FIRST__TUPLE_START_BIT + (2 * BITS_PER_TUPLE);

const FIRST__LEVEL_TUPLE = 1 << FIRST__TUPLE_START_BIT;
const SECOND_LEVEL_TUPLE = 1 << SECOND_TUPLE_START_BIT;
const THIRD__LEVEL_TUPLE = 1 << THIRD__TUPLE_START_BIT;

/*
 * These bitmasks are used to extract the bits for a given n-Tuple (0011***)
 * e.g.
 *  0011000 & 001001 = 001000
 * after extracted 001000 bitshift result with corresponding tuple bit offset 001000 >> 3 = (BIN)001 = (HEX) 1
 *
 * so: (0011000 & 011001) >> 3 = (HEX)3
 */
const FIRST__LEVEL_BITMASK = parseInt("0000000000001111110000000000", 2);    //000129024
assert(parseInt("0000000000001111110000000000", 2) == 64512)
const SECOND_LEVEL_BITMASK = parseInt("0000001111110000000000000000", 2);    //008257536
assert(parseInt("0000001111110000000000000000", 2) == 4128768)
const THIRD__LEVEL_BITMASK = parseInt("1111110000000000000000000000", 2);    //528482304
assert(parseInt("1111110000000000000000000000", 2) == 264241152)
const FOURTH_LEVEL_BITMASK = parseInt("1111110000000000000000000000000000", 2);    //528482304
//assert(parseInt("1111110000000000000000000000000000", 2) == 264241152)

const indexes = []
for (var first = 0; first < INSTANCES_PER_TUPLE; first++) {
    indexes[first] = []
    for (var second = 0; second < INSTANCES_PER_TUPLE; second++) {
        indexes[first][second] = []
        for (var third = 0; third < INSTANCES_PER_TUPLE; third++) {
            indexes[first][second][third] = (FIRST__LEVEL_TUPLE * first) + (SECOND_LEVEL_TUPLE * second) + (THIRD__LEVEL_TUPLE * third)
        }
    }
}
/*
 * Check if values are valid
 */
for (var i = 0; i < INSTANCES_PER_TUPLE; i++) {
    for (var j = 0; j < INSTANCES_PER_TUPLE; j++) {
        for (var k = 0; k < INSTANCES_PER_TUPLE; k++) {
            const index = indexes[i][j][k];
            // log.info(((index & FIRST__LEVEL_BITMASK) >> FIRST__TUPLE_START_BIT) + ',' + ((index & SECOND_LEVEL_BITMASK) >> SECOND_TUPLE_START_BIT) + ',' + (index >> THIRD__TUPLE_START_BIT))
            assert.equal((index >> SECOND_TUPLE_START_BIT >> BITS_PER_TUPLE), (index >> THIRD__TUPLE_START_BIT))
            assert.equal((index >> SECOND_TUPLE_START_BIT >> BITS_PER_TUPLE), index >> FIRST__TUPLE_START_BIT >> BITS_PER_TUPLE >> BITS_PER_TUPLE)
        }
    }
}
//Nu de check voor corresponderende context. (matching bits.)
/*
 * bits that are used to check if a value is in there.
 * These are the bit masks used by the tuples 11-17,17-23,23-29 bits from the number
 *
 * So:(index)   00001000001101 belongs to
 *               0  1    *****
 *   (bitmask)  00001000000000
 *
 * So:(index)   01001000032321 does not belong to
 *               1  1    *****
 *   (bitmask)  00001000000000
 *
 * om te achterhalen of een index op interessant is voor een bepaalde tuple
 * voor 0,0,1 is matching 1,1,0 nodig. omdat  0,0,0 niet werkt met de & operator, dus inverse van zichzelf
 */
const matchings = []
const MAX_INVERSE_INT32 = ((1 << 20) - 1) << FIRST__TUPLE_START_BIT;//2147481600 , 111111111111111111100000000000
assert(parseInt("111111111111111111110000000000", 2) == ((1 << 20) - 1) << FIRST__TUPLE_START_BIT)

for (var first = 0; first < INSTANCES_PER_TUPLE; first++) {
    matchings[first] = []
    for (var second = 0; second < INSTANCES_PER_TUPLE; second++) {
        matchings[first][second] = []
        for (var third = 0; third < INSTANCES_PER_TUPLE; third++) {
            matchings[first][second][third] = MAX_INVERSE_INT32 - indexes[first][second][third]
        }
    }
}
/*
 * Test if the inverse masks result in 0.
 *0010 : 2
 *1101 :13
 *maar zou 121311xxx,
*/
for (var i = 0; i < INSTANCES_PER_TUPLE; i++) {
    for (var j = 0; j < INSTANCES_PER_TUPLE; j++) {
        for (var k = 0; k < INSTANCES_PER_TUPLE; k++) {
            const index = indexes[i][j][k];
            const m = matchings[i][j][k];
            assert.equal((index + Math.round(Math.random() * 100)) & MAX_INVERSE_INT32, index, 'index: ' + index.toString(2) + ' does not match ' + m.toString(2) + '::' + [i, j, k].toString())
        }
    }
}

function pad(n, width, z) {
    z = z || '0';
    n = n + '';
    return n.length >= width ? n : new Array(width - n.length + 1).join(z) + n;
}

const start = {
    bitmask: FIRST__LEVEL_BITMASK,
    start_bit: FIRST__TUPLE_START_BIT,
    hash: 0,
    bin: (matchings[0][0][0]).toString(2),
    f: parseInt('11111111111110000000000000000', 2),
    f_bin: '111111111111110000000000000000',
    m: parseInt('0000000000000000000000000000000000', 2),
    m_bin: '0000000000000000000000000000000000',
    index: 0,
    uihash: pad(0, 3),
    display: '0000',
    depth: 0,
    deeper: []
}
start.base = start;
//p is the Jump from Tuple to Tuple
start.p = [start, start, start];

for (var first = 0; first < INSTANCES_PER_TUPLE; first++) {
    start.deeper[first] = {
        bitmask: SECOND_LEVEL_BITMASK,
        start_bit: SECOND_TUPLE_START_BIT,
        f: parseInt('11111110000001111110000000000', 2),
        m: parseInt('0000000000000000000000000000000000', 2) + parseInt('00000000000000000000000010000000000', 2) * first,
        bin: (matchings[first][0][0]).toString(2).substring(0, (matchings[first][0][0]).toString(2).length - 10),
        display: first + '000',
        base: start,
        depth: 1,
        index: first,
        uihash: pad(first, 3),
        hash: (FIRST__LEVEL_TUPLE * first),
        deeper: [],
        parent: start
    }
    //p is the Jump from Tuple to Tuple
    start.deeper[first].p = [start, start.deeper[first], start.deeper[first], start.deeper[first]];
    if (first > 0) start.deeper[first].previous = start.deeper[first - 1]
    if (first > 0) start.deeper[first - 1].next = start.deeper[first]

    for (var second = 0; second < INSTANCES_PER_TUPLE; second++) {
        start.deeper[first].deeper[second] = {
            base: start,
            f: (parseInt('0000001111111111110000000000', 2)),
            m: (parseInt('0000000000010000000000000000', 2) * second) + (parseInt('0000000000000000000010000000000', 2) * first),
            bin: (matchings[first][second][0]).toString(2),
            bitmask: THIRD__LEVEL_BITMASK,
            display: first + '' + second + '00',
            start_bit: THIRD__TUPLE_START_BIT,
            index: second,
            uihash: pad(second, 3),
            depth: 2,
            hash: (first * FIRST__LEVEL_TUPLE) + (SECOND_LEVEL_TUPLE * second),
            deeper: [],
            parent: start.deeper[first]
        }
        //p is the Jump from Tuple to Tuple
        start.deeper[first].deeper[second].p = [start, start.deeper[first], start.deeper[first].deeper[second], start.deeper[first].deeper[second]];
        if (second > 0) start.deeper[first].deeper[second].previous = start.deeper[first].deeper[second - 1]
        if (second > 0) start.deeper[first].deeper[second - 1].next = start.deeper[first].deeper[second]

        //this level is only used to set values, not to resolve them,
        for (var third = 0; third < INSTANCES_PER_TUPLE; third++) {
            start.deeper[first].deeper[second].deeper[third] = {
                base: start,
                /* f: (parseInt('0001111111111111111110000000000', 2)),*/
                /*  m: (parseInt('00000000000000000010000000000000000', 2) * second) + (parseInt('00000000000000000000000010000000000', 2) * first),
               bin: (matchings[first][second][third]).toString(2),*/
                bitmask: FOURTH_LEVEL_BITMASK,
                display: first + '' + second + '' + third + '0',
                start_bit: THIRD__TUPLE_START_BIT,
                index: third,
                depth: 3,
                uihash: pad(third, 3),
                hash: (first * FIRST__LEVEL_TUPLE) + (SECOND_LEVEL_TUPLE * second) + (THIRD__LEVEL_TUPLE * third),
                deeper: [],
                parent: start.deeper[first].deeper[second]
            }
            //p is the Jump from Tuple to Tuple
            start.deeper[first].deeper[second].deeper[third].p = [start, start.deeper[first], start.deeper[first].deeper[second], start.deeper[first].deeper[second].deeper[third]];

            if (third > 0) start.deeper[first].deeper[second].deeper[third].previous = start.deeper[first].deeper[second].deeper[third - 1]
            if (third > 0) start.deeper[first].deeper[second].deeper[third - 1].next = start.deeper[first].deeper[second].deeper[third]
        }
    }
}

/**
 *
 * return start values in given tuple
 * It would be nice to use the null-tuple(0instance) T(0,{*,}) as base
 * Since else we could only query 0,..* in this method.
 */
TVALUES = function(fIds, func, fId, x, y, z, v, m) {
    var current = y, returnValue = [];
    var tinstancecount = TINSTANCECOUNT(fIds, v, y);
    for (var i = 0; i <= tinstancecount; i++) {
        returnValue.push(func(fId, x, y.deeper[i], z, v, m));
    }
    /*   while (current && tinstancecount >= current.index) {
           var tempValue = func(fId, x, current, z, v);
           returnValue.push(tempValue);
           current = current.next;
       }*/
    return returnValue;
}
/**
 * TINSTANCECOUNT is 0 based. TCOUNT is the friendly 1based version
 */
TCOUNT = function(fIds, func, fId, x, y, z, v) {
    return TINSTANCECOUNT(fIds, v, y) + 1;
}
REVERSEYAXIS = function(index, y) {
    return (y.bitmask & index) >> y.start_bit
}

function indexToArray(index, y) {
    const repre = [(index & THIRD__LEVEL_BITMASK) >> THIRD__TUPLE_START_BIT, (index & SECOND_LEVEL_BITMASK) >> SECOND_TUPLE_START_BIT, (index & FIRST__LEVEL_BITMASK) >> FIRST__TUPLE_START_BIT];
    const match = [(y.m & THIRD__LEVEL_BITMASK) >> THIRD__TUPLE_START_BIT, (y.m & SECOND_LEVEL_BITMASK) >> SECOND_TUPLE_START_BIT, (y.m & FIRST__LEVEL_BITMASK) >> FIRST__TUPLE_START_BIT];
    log.info('input:' + repre + ' filter with : ' + (y.f >> 10).toString(2) + ' {' + match + "(" + y.depth + ',' + y.index + ")}" + ' gives:' + ((y.bitmask & index) >> y.start_bit))
}

//return tuplecount, get max tuple index given a (y) context.
//Conceptually, if a value exists in a given range. There is an Tuple-Instance
//Nested tuples start hash 0,0,0  So there is a Tuple instance on start three dimensions when a value is entered in the deepest level.
TINSTANCECOUNT = function(fIds, v, y) {
    var max = -1;
    //consider transforming into a bin-tree
    //Since the dimensions are Infinite, indexing becomes complex.
    for (var fid = 0; fid < fIds.length; fid++) {
        var fId = fIds[fid];
        const tempkeys = []
        var keys = Object.keys(v[fId]);
        //quick-fix remove NULL values..
        //when looking for the instance-count with Y provided we also have to filter keys that are in other contexts.
        //TODO: step1 ake key filter, with the bit-mask on y. context. rest keys are not interesting.
        //TODO: start make unit testIndex, testing this function only.
        //The Tuple-Dimension is 0based, All values are placed within the first Tulpe (or non-exsistant)
        //Meaning that Any value in the Tuple Instance implies a Tuple-Instance is created.
        //index: 0000001 makes TupleCount=0
        //no index: makes TupleCount=-1
        //index: 0100001: makes TupleCount=1
        //this y.root is too cheap. It is possible to have a nested tuple instance abc2 but not have abc0
        //So 0 is allowed when a Key has this prefix.
        //the .root affix is strange there just should be a value on the corresponding tuple range to confirm its existence

        for (var i = 0; i < keys.length; i++) {
            var obj = keys[i];
            const userKey = parseInt(obj);
            // the found value should have a meaning, should have a value in the tuple-range and should match parent mask
            //Why should it have a value in the Tuple-Range?
            //Is this the same as living in the Parent-Context..
            /*
             *   00000009
             *   00001101
             *   Oke inverse bitmask van me parent.
             *   ~0000 maakt 1111 die & ik met me eigen hash. Als die niet null opleverd. Dan hoort hij er niet thuis
             *
             */
            //this should match any tuple bits and validate it with the hash,
            //most important mistake is to math with the HASH, since it should match parent.hash
            //011        001
            //010 match  010 no match
            //first level just matching everything that does not have 2-tuple or 3-tuple keys
            //second level match everything on 1-tuple index. But should not have anything on the 3-tuple
            if ((v[fId][obj] != null) && (userKey & y.f) == y.m) {
                if (log.DEBUG) indexToArray(userKey, y)
                tempkeys.push(userKey)
            }
        }

        if (tempkeys.length == 0) {
            continue;
        }
        else if (tempkeys.length == 1) {
            max = Math.max(max, (y.bitmask & tempkeys[0]) >> y.start_bit);
        } else {
            max = Math.max(max, tempkeys.reduce(function(a1, b1) {
                //filter bits  y.start_bit find highest tuple count identified with y.bitmask
                //look for start values and obtain tuple instance value
                //we don't have to y.bitmask? its just >> y.start_bit
                return Math.max((y.bitmask & a1) >> y.start_bit, (y.bitmask & b1) >> y.start_bit);
            }))
        }
    }
    return max;
}
/*
 * Conceptually checks:
 * From here we will build the concept
 * 1-(2-tuple)
 * 2-(1-tuple)
 * 3-(0-tuple)
 * 4-(column10)
 * 5-(column01)
 * [1][2][3][4][5]
 *
 * The filter means the ** wildcard
 * The match means the tuple context
 */
//er is geen wens om 1*1 te testen, er word nooit gevraagd van hoeveeel tuples bijvoorbeeld 3tuples hebben.
const combine = [{
    reg: '000**', match: '00000', filter: '11100',
    fit: ['00010', '00011', '00001', '00000'],
    nofit: ['00110', '01110', '11110', '10110', '10010']
}, {
    reg: '001**', match: '00100', filter: '11100',
    fit: ['00110', '00111'],
    nofit: ['00010', '01010', '11010', '11110']
}, {
    reg: '011**', match: '01100', filter: '11100',
    fit: ['01100', '01101'], nofit: ['10100', '11100', '00100', '11000']
}, {
    reg: '010**', match: '01000', filter: '11100',
    fit: ['01010'],
    nofit: ['00010', '00000']
}, {
    reg: '11***', match: '11000', filter: '11000',
    fit: ['11000', '11100'],
    nofit: ['01100', '00000', '01100']
}, {//the first check, how many instances on root?
    reg: '00***', match: '00000', filter: '11000',
    fit: ['00000', '00001'],
    nofit: ['01100', '10000', '01100']
}, {
    reg: '01***', match: '01000', filter: '11000',
    fit: ['01000'], nofit: ['00000']
}, {
    reg: '1****', match: '10000', filter: '10000',
    fit: ['10101'], nofit: ['01000']
}]
for (var testIndex = 0; testIndex < combine.length; testIndex++) {
    const test = combine[testIndex];
    for (var i = 0; i < test.fit.length; i++) assert(((parseInt(test.fit[i], 2) & parseInt(test.filter, 2)) == parseInt(test.match, 2)))
    for (var i = 0; i < test.nofit.length; i++) assert(((parseInt(test.nofit[i], 2) & parseInt(test.filter, 2)) != parseInt(test.match, 2)))
}
/*
 * oke hoe maak ik nou zo'n object?
 * de sterretjes betekenen op beide filter als match een 0
 * de 0/1 betekend in match een kopie
 * de 0/1 betekend in filter een 1
 * De reg betekend T(0,0,0)
 *
 * De vragen die worden gesteld zijn: wat is YCount, gegeven index[] en Y
 * dus: Y heeft
 * t(R) = f(t*<R?1:0)
 * dus uit [t1,t2,t3] = filter: t1(R)+t2(R)+t3(R)+,00  e.g. hoeveel t2 in [1,0,*]? 110,00
 * dus uit [t1,t2,t3] =  match: t1t2t3+,00             e.g.               [1,0,*]? 100,00
 * uit gegeven [*,*,*] moet ik die twee dingen halen.
 *
 * Dus als ik wil weten hoeveel Y in [a,b,c]
 * Dan '1'.repeat(bits), voor 0,0,0 wil ik  111 filter en match 000, maar die bestaat dus niet
 * Dan '1'.repeat(bits), voor 0,1,0 wil ik  110 filter en match 110
 *
 * filter: 111111,111111,111111,0000000000 voor 0,0,0
 *  match: 000000,000000,000000,0000000000 voor 0,0,0 (word niet gebruikt, impliceert 0,0,0,*)
 * filter: 111111,111111,111111,0000000000 voor 0,0,1
 *  match: 000000,111111,000001,0000000000 voor 0,0,1 (word niet gebruikt, impliceert 0,0,0,*)
 * filter: 111111,111111,000000,0000000000 voor 0,0,*
 *  match: 000000,000000,000000,0000000000 voor 0,0,*
 * filter: 111111,000000,111111,0000000000 voor 0,*,1
 *  match: 000000,000000,000001,0000000000 voor 0,*,1
 *
 *  Filter geeft alleen aan in welke sector de max-waarde gezocht word. dat kan slot1,slot2,of slot3 zijn
 *  De Match geeft aan in welke context de vraag moet passen.
 *  011 & f(0,*,1) = m(0,1,1)
 *  001 & f(0,*,1) = m(0,1,1)
 *
 *  filter kan op het moment alleen *,*,* of *,0,* of 0,*,* zijn.
 *
 *  filter op level 0 = **. = 110
 *  filter op level 1 = *.* = 101
 *  filter op level 2 = .** = 011
 *
 *  Dus dat gaan we toevoegen aan het geheel
 */

//columns we need aprox 512 10bit
//53 total bits to use, 43bit for tuples, 8*8*8*8 (32bit) 8bit represent 128 instances. 4dimensions 128 instances. takes 32 bit
/*
 * It can grow into 5dimensions having 128instances each using 40bit, leaving 10bits for columns. We have to figure out operations without binair operators
 * A binair operator in javascript works until 32bits (4*8) So we have to calculate the index in a different way when exceeding these limits.
*/
module.exports = start.deeper;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-core\\src\\YAxis.js","/lme-core\\src",undefined)
},{"_process":38,"assert":33,"buffer":36,"log6":35}],33:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
'use strict';

// compare and isBuffer taken from https://github.com/feross/buffer/blob/680e9e5e488f22aac27599a57dc844a6315928dd/index.js
// original notice:

/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
function compare(a, b) {
  if (a === b) {
    return 0;
  }

  var x = a.length;
  var y = b.length;

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i];
      y = b[i];
      break;
    }
  }

  if (x < y) {
    return -1;
  }
  if (y < x) {
    return 1;
  }
  return 0;
}
function isBuffer(b) {
  if (global.Buffer && typeof global.Buffer.isBuffer === 'function') {
    return global.Buffer.isBuffer(b);
  }
  return !!(b != null && b._isBuffer);
}

// based on node assert, original notice:

// http://wiki.commonjs.org/wiki/Unit_Testing/1.0
//
// THIS IS NOT TESTED NOR LIKELY TO WORK OUTSIDE V8!
//
// Originally from narwhal.js (http://narwhaljs.org)
// Copyright (c) 2009 Thomas Robinson <280north.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the 'Software'), to
// deal in the Software without restriction, including without limitation the
// rights to use, copy, modify, merge, publish, distribute, sublicense, and/or
// sell copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN
// ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
// WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

var util = require('util/');
var hasOwn = Object.prototype.hasOwnProperty;
var pSlice = Array.prototype.slice;
var functionsHaveNames = (function () {
  return function foo() {}.name === 'foo';
}());
function pToString (obj) {
  return Object.prototype.toString.call(obj);
}
function isView(arrbuf) {
  if (isBuffer(arrbuf)) {
    return false;
  }
  if (typeof global.ArrayBuffer !== 'function') {
    return false;
  }
  if (typeof ArrayBuffer.isView === 'function') {
    return ArrayBuffer.isView(arrbuf);
  }
  if (!arrbuf) {
    return false;
  }
  if (arrbuf instanceof DataView) {
    return true;
  }
  if (arrbuf.buffer && arrbuf.buffer instanceof ArrayBuffer) {
    return true;
  }
  return false;
}
// 1. The assert module provides functions that throw
// AssertionError's when particular conditions are not met. The
// assert module must conform to the following interface.

var assert = module.exports = ok;

// 2. The AssertionError is defined in assert.
// new assert.AssertionError({ message: message,
//                             actual: actual,
//                             expected: expected })

var regex = /\s*function\s+([^\(\s]*)\s*/;
// based on https://github.com/ljharb/function.prototype.name/blob/adeeeec8bfcc6068b187d7d9fb3d5bb1d3a30899/implementation.js
function getName(func) {
  if (!util.isFunction(func)) {
    return;
  }
  if (functionsHaveNames) {
    return func.name;
  }
  var str = func.toString();
  var match = str.match(regex);
  return match && match[1];
}
assert.AssertionError = function AssertionError(options) {
  this.name = 'AssertionError';
  this.actual = options.actual;
  this.expected = options.expected;
  this.operator = options.operator;
  if (options.message) {
    this.message = options.message;
    this.generatedMessage = false;
  } else {
    this.message = getMessage(this);
    this.generatedMessage = true;
  }
  var stackStartFunction = options.stackStartFunction || fail;
  if (Error.captureStackTrace) {
    Error.captureStackTrace(this, stackStartFunction);
  } else {
    // non v8 browsers so we can have a stacktrace
    var err = new Error();
    if (err.stack) {
      var out = err.stack;

      // try to strip useless frames
      var fn_name = getName(stackStartFunction);
      var idx = out.indexOf('\n' + fn_name);
      if (idx >= 0) {
        // once we have located the function frame
        // we need to strip out everything before it (and its line)
        var next_line = out.indexOf('\n', idx + 1);
        out = out.substring(next_line + 1);
      }

      this.stack = out;
    }
  }
};

// assert.AssertionError instanceof Error
util.inherits(assert.AssertionError, Error);

function truncate(s, n) {
  if (typeof s === 'string') {
    return s.length < n ? s : s.slice(0, n);
  } else {
    return s;
  }
}
function inspect(something) {
  if (functionsHaveNames || !util.isFunction(something)) {
    return util.inspect(something);
  }
  var rawname = getName(something);
  var name = rawname ? ': ' + rawname : '';
  return '[Function' +  name + ']';
}
function getMessage(self) {
  return truncate(inspect(self.actual), 128) + ' ' +
         self.operator + ' ' +
         truncate(inspect(self.expected), 128);
}

// At present only the three keys mentioned above are used and
// understood by the spec. Implementations or sub modules can pass
// other keys to the AssertionError's constructor - they will be
// ignored.

// 3. All of the following functions must throw an AssertionError
// when a corresponding condition is not met, with a message that
// may be undefined if not provided.  All assertion methods provide
// both the actual and expected values to the assertion error for
// display purposes.

function fail(actual, expected, message, operator, stackStartFunction) {
  throw new assert.AssertionError({
    message: message,
    actual: actual,
    expected: expected,
    operator: operator,
    stackStartFunction: stackStartFunction
  });
}

// EXTENSION! allows for well behaved errors defined elsewhere.
assert.fail = fail;

// 4. Pure assertion tests whether a value is truthy, as determined
// by !!guard.
// assert.ok(guard, message_opt);
// This statement is equivalent to assert.equal(true, !!guard,
// message_opt);. To test strictly for the value true, use
// assert.strictEqual(true, guard, message_opt);.

function ok(value, message) {
  if (!value) fail(value, true, message, '==', assert.ok);
}
assert.ok = ok;

// 5. The equality assertion tests shallow, coercive equality with
// ==.
// assert.equal(actual, expected, message_opt);

assert.equal = function equal(actual, expected, message) {
  if (actual != expected) fail(actual, expected, message, '==', assert.equal);
};

// 6. The non-equality assertion tests for whether two objects are not equal
// with != assert.notEqual(actual, expected, message_opt);

assert.notEqual = function notEqual(actual, expected, message) {
  if (actual == expected) {
    fail(actual, expected, message, '!=', assert.notEqual);
  }
};

// 7. The equivalence assertion tests a deep equality relation.
// assert.deepEqual(actual, expected, message_opt);

assert.deepEqual = function deepEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'deepEqual', assert.deepEqual);
  }
};

assert.deepStrictEqual = function deepStrictEqual(actual, expected, message) {
  if (!_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'deepStrictEqual', assert.deepStrictEqual);
  }
};

function _deepEqual(actual, expected, strict, memos) {
  // 7.1. All identical values are equivalent, as determined by ===.
  if (actual === expected) {
    return true;
  } else if (isBuffer(actual) && isBuffer(expected)) {
    return compare(actual, expected) === 0;

  // 7.2. If the expected value is a Date object, the actual value is
  // equivalent if it is also a Date object that refers to the same time.
  } else if (util.isDate(actual) && util.isDate(expected)) {
    return actual.getTime() === expected.getTime();

  // 7.3 If the expected value is a RegExp object, the actual value is
  // equivalent if it is also a RegExp object with the same source and
  // properties (`global`, `multiline`, `lastIndex`, `ignoreCase`).
  } else if (util.isRegExp(actual) && util.isRegExp(expected)) {
    return actual.source === expected.source &&
           actual.global === expected.global &&
           actual.multiline === expected.multiline &&
           actual.lastIndex === expected.lastIndex &&
           actual.ignoreCase === expected.ignoreCase;

  // 7.4. Other pairs that do not both pass typeof value == 'object',
  // equivalence is determined by ==.
  } else if ((actual === null || typeof actual !== 'object') &&
             (expected === null || typeof expected !== 'object')) {
    return strict ? actual === expected : actual == expected;

  // If both values are instances of typed arrays, wrap their underlying
  // ArrayBuffers in a Buffer each to increase performance
  // This optimization requires the arrays to have the same type as checked by
  // Object.prototype.toString (aka pToString). Never perform binary
  // comparisons for Float*Arrays, though, since e.g. +0 === -0 but their
  // bit patterns are not identical.
  } else if (isView(actual) && isView(expected) &&
             pToString(actual) === pToString(expected) &&
             !(actual instanceof Float32Array ||
               actual instanceof Float64Array)) {
    return compare(new Uint8Array(actual.buffer),
                   new Uint8Array(expected.buffer)) === 0;

  // 7.5 For all other Object pairs, including Array objects, equivalence is
  // determined by having the same number of owned properties (as verified
  // with Object.prototype.hasOwnProperty.call), the same set of keys
  // (although not necessarily the same order), equivalent values for every
  // corresponding key, and an identical 'prototype' property. Note: this
  // accounts for both named and indexed properties on Arrays.
  } else if (isBuffer(actual) !== isBuffer(expected)) {
    return false;
  } else {
    memos = memos || {actual: [], expected: []};

    var actualIndex = memos.actual.indexOf(actual);
    if (actualIndex !== -1) {
      if (actualIndex === memos.expected.indexOf(expected)) {
        return true;
      }
    }

    memos.actual.push(actual);
    memos.expected.push(expected);

    return objEquiv(actual, expected, strict, memos);
  }
}

function isArguments(object) {
  return Object.prototype.toString.call(object) == '[object Arguments]';
}

function objEquiv(a, b, strict, actualVisitedObjects) {
  if (a === null || a === undefined || b === null || b === undefined)
    return false;
  // if one is a primitive, the other must be same
  if (util.isPrimitive(a) || util.isPrimitive(b))
    return a === b;
  if (strict && Object.getPrototypeOf(a) !== Object.getPrototypeOf(b))
    return false;
  var aIsArgs = isArguments(a);
  var bIsArgs = isArguments(b);
  if ((aIsArgs && !bIsArgs) || (!aIsArgs && bIsArgs))
    return false;
  if (aIsArgs) {
    a = pSlice.call(a);
    b = pSlice.call(b);
    return _deepEqual(a, b, strict);
  }
  var ka = objectKeys(a);
  var kb = objectKeys(b);
  var key, i;
  // having the same number of owned properties (keys incorporates
  // hasOwnProperty)
  if (ka.length !== kb.length)
    return false;
  //the same set of keys (although not necessarily the same order),
  ka.sort();
  kb.sort();
  //~~~cheap key test
  for (i = ka.length - 1; i >= 0; i--) {
    if (ka[i] !== kb[i])
      return false;
  }
  //equivalent values for every corresponding key, and
  //~~~possibly expensive deep test
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!_deepEqual(a[key], b[key], strict, actualVisitedObjects))
      return false;
  }
  return true;
}

// 8. The non-equivalence assertion tests for any deep inequality.
// assert.notDeepEqual(actual, expected, message_opt);

assert.notDeepEqual = function notDeepEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, false)) {
    fail(actual, expected, message, 'notDeepEqual', assert.notDeepEqual);
  }
};

assert.notDeepStrictEqual = notDeepStrictEqual;
function notDeepStrictEqual(actual, expected, message) {
  if (_deepEqual(actual, expected, true)) {
    fail(actual, expected, message, 'notDeepStrictEqual', notDeepStrictEqual);
  }
}


// 9. The strict equality assertion tests strict equality, as determined by ===.
// assert.strictEqual(actual, expected, message_opt);

assert.strictEqual = function strictEqual(actual, expected, message) {
  if (actual !== expected) {
    fail(actual, expected, message, '===', assert.strictEqual);
  }
};

// 10. The strict non-equality assertion tests for strict inequality, as
// determined by !==.  assert.notStrictEqual(actual, expected, message_opt);

assert.notStrictEqual = function notStrictEqual(actual, expected, message) {
  if (actual === expected) {
    fail(actual, expected, message, '!==', assert.notStrictEqual);
  }
};

function expectedException(actual, expected) {
  if (!actual || !expected) {
    return false;
  }

  if (Object.prototype.toString.call(expected) == '[object RegExp]') {
    return expected.test(actual);
  }

  try {
    if (actual instanceof expected) {
      return true;
    }
  } catch (e) {
    // Ignore.  The instanceof check doesn't work for arrow functions.
  }

  if (Error.isPrototypeOf(expected)) {
    return false;
  }

  return expected.call({}, actual) === true;
}

function _tryBlock(block) {
  var error;
  try {
    block();
  } catch (e) {
    error = e;
  }
  return error;
}

function _throws(shouldThrow, block, expected, message) {
  var actual;

  if (typeof block !== 'function') {
    throw new TypeError('"block" argument must be a function');
  }

  if (typeof expected === 'string') {
    message = expected;
    expected = null;
  }

  actual = _tryBlock(block);

  message = (expected && expected.name ? ' (' + expected.name + ').' : '.') +
            (message ? ' ' + message : '.');

  if (shouldThrow && !actual) {
    fail(actual, expected, 'Missing expected exception' + message);
  }

  var userProvidedMessage = typeof message === 'string';
  var isUnwantedException = !shouldThrow && util.isError(actual);
  var isUnexpectedException = !shouldThrow && actual && !expected;

  if ((isUnwantedException &&
      userProvidedMessage &&
      expectedException(actual, expected)) ||
      isUnexpectedException) {
    fail(actual, expected, 'Got unwanted exception' + message);
  }

  if ((shouldThrow && actual && expected &&
      !expectedException(actual, expected)) || (!shouldThrow && actual)) {
    throw actual;
  }
}

// 11. Expected to throw an error:
// assert.throws(block, Error_opt, message_opt);

assert.throws = function(block, /*optional*/error, /*optional*/message) {
  _throws(true, block, error, message);
};

// EXTENSION! This is annoying to write outside this module.
assert.doesNotThrow = function(block, /*optional*/error, /*optional*/message) {
  _throws(false, block, error, message);
};

assert.ifError = function(err) { if (err) throw err; };

var objectKeys = Object.keys || function (obj) {
  var keys = [];
  for (var key in obj) {
    if (hasOwn.call(obj, key)) keys.push(key);
  }
  return keys;
};

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\assert\\assert.js","/lme-model-api\\node_modules\\assert",undefined)
},{"_process":38,"buffer":36,"util/":41}],34:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
'use strict'

exports.byteLength = byteLength
exports.toByteArray = toByteArray
exports.fromByteArray = fromByteArray

var lookup = []
var revLookup = []
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array

var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'
for (var i = 0, len = code.length; i < len; ++i) {
  lookup[i] = code[i]
  revLookup[code.charCodeAt(i)] = i
}

revLookup['-'.charCodeAt(0)] = 62
revLookup['_'.charCodeAt(0)] = 63

function placeHoldersCount (b64) {
  var len = b64.length
  if (len % 4 > 0) {
    throw new Error('Invalid string. Length must be a multiple of 4')
  }

  // the number of equal signs (place holders)
  // if there are two placeholders, than the two characters before it
  // represent one byte
  // if there is only one, then the three characters before it represent 2 bytes
  // this is just a cheap hack to not do indexOf twice
  return b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0
}

function byteLength (b64) {
  // base64 is 4/3 + up to two characters of the original data
  return (b64.length * 3 / 4) - placeHoldersCount(b64)
}

function toByteArray (b64) {
  var i, l, tmp, placeHolders, arr
  var len = b64.length
  placeHolders = placeHoldersCount(b64)

  arr = new Arr((len * 3 / 4) - placeHolders)

  // if there are placeholders, only get up to the last complete 4 chars
  l = placeHolders > 0 ? len - 4 : len

  var L = 0

  for (i = 0; i < l; i += 4) {
    tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)]
    arr[L++] = (tmp >> 16) & 0xFF
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  if (placeHolders === 2) {
    tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4)
    arr[L++] = tmp & 0xFF
  } else if (placeHolders === 1) {
    tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2)
    arr[L++] = (tmp >> 8) & 0xFF
    arr[L++] = tmp & 0xFF
  }

  return arr
}

function tripletToBase64 (num) {
  return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
}

function encodeChunk (uint8, start, end) {
  var tmp
  var output = []
  for (var i = start; i < end; i += 3) {
    tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
    output.push(tripletToBase64(tmp))
  }
  return output.join('')
}

function fromByteArray (uint8) {
  var tmp
  var len = uint8.length
  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes
  var output = ''
  var parts = []
  var maxChunkLength = 16383 // must be multiple of 3

  // go through the array every three bytes, we'll deal with trailing stuff later
  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
    parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)))
  }

  // pad the end with zeros, but make sure to not forget the extra bytes
  if (extraBytes === 1) {
    tmp = uint8[len - 1]
    output += lookup[tmp >> 2]
    output += lookup[(tmp << 4) & 0x3F]
    output += '=='
  } else if (extraBytes === 2) {
    tmp = (uint8[len - 2] << 8) + (uint8[len - 1])
    output += lookup[tmp >> 10]
    output += lookup[(tmp >> 4) & 0x3F]
    output += lookup[(tmp << 2) & 0x3F]
    output += '='
  }

  parts.push(output)

  return parts.join('')
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\base64-js\\index.js","/lme-model-api\\node_modules\\base64-js",undefined)
},{"_process":38,"buffer":36}],35:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\browserify\\lib\\_empty.js","/lme-model-api\\node_modules\\browserify\\lib",undefined)
},{"_process":38,"buffer":36}],36:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */
/* eslint-disable no-proto */

'use strict'

var base64 = require('base64-js')
var ieee754 = require('ieee754')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50

var K_MAX_LENGTH = 0x7fffffff
exports.kMaxLength = K_MAX_LENGTH

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */
Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport()

if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' &&
    typeof console.error === 'function') {
  console.error(
    'This browser lacks typed array (Uint8Array) support which is required by ' +
    '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.'
  )
}

function typedArraySupport () {
  // Can typed array instances can be augmented?
  try {
    var arr = new Uint8Array(1)
    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}
    return arr.foo() === 42
  } catch (e) {
    return false
  }
}

function createBuffer (length) {
  if (length > K_MAX_LENGTH) {
    throw new RangeError('Invalid typed array length')
  }
  // Return an augmented `Uint8Array` instance
  var buf = new Uint8Array(length)
  buf.__proto__ = Buffer.prototype
  return buf
}

/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */

function Buffer (arg, encodingOrOffset, length) {
  // Common case.
  if (typeof arg === 'number') {
    if (typeof encodingOrOffset === 'string') {
      throw new Error(
        'If encoding is specified then the first argument must be a string'
      )
    }
    return allocUnsafe(arg)
  }
  return from(arg, encodingOrOffset, length)
}

// Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97
if (typeof Symbol !== 'undefined' && Symbol.species &&
    Buffer[Symbol.species] === Buffer) {
  Object.defineProperty(Buffer, Symbol.species, {
    value: null,
    configurable: true,
    enumerable: false,
    writable: false
  })
}

Buffer.poolSize = 8192 // not used by this implementation

function from (value, encodingOrOffset, length) {
  if (typeof value === 'number') {
    throw new TypeError('"value" argument must not be a number')
  }

  if (isArrayBuffer(value)) {
    return fromArrayBuffer(value, encodingOrOffset, length)
  }

  if (typeof value === 'string') {
    return fromString(value, encodingOrOffset)
  }

  return fromObject(value)
}

/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/
Buffer.from = function (value, encodingOrOffset, length) {
  return from(value, encodingOrOffset, length)
}

// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Buffer.prototype.__proto__ = Uint8Array.prototype
Buffer.__proto__ = Uint8Array

function assertSize (size) {
  if (typeof size !== 'number') {
    throw new TypeError('"size" argument must be a number')
  } else if (size < 0) {
    throw new RangeError('"size" argument must not be negative')
  }
}

function alloc (size, fill, encoding) {
  assertSize(size)
  if (size <= 0) {
    return createBuffer(size)
  }
  if (fill !== undefined) {
    // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpretted as a start offset.
    return typeof encoding === 'string'
      ? createBuffer(size).fill(fill, encoding)
      : createBuffer(size).fill(fill)
  }
  return createBuffer(size)
}

/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/
Buffer.alloc = function (size, fill, encoding) {
  return alloc(size, fill, encoding)
}

function allocUnsafe (size) {
  assertSize(size)
  return createBuffer(size < 0 ? 0 : checked(size) | 0)
}

/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */
Buffer.allocUnsafe = function (size) {
  return allocUnsafe(size)
}
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */
Buffer.allocUnsafeSlow = function (size) {
  return allocUnsafe(size)
}

function fromString (string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') {
    encoding = 'utf8'
  }

  if (!Buffer.isEncoding(encoding)) {
    throw new TypeError('"encoding" must be a valid string encoding')
  }

  var length = byteLength(string, encoding) | 0
  var buf = createBuffer(length)

  var actual = buf.write(string, encoding)

  if (actual !== length) {
    // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual)
  }

  return buf
}

function fromArrayLike (array) {
  var length = array.length < 0 ? 0 : checked(array.length) | 0
  var buf = createBuffer(length)
  for (var i = 0; i < length; i += 1) {
    buf[i] = array[i] & 255
  }
  return buf
}

function fromArrayBuffer (array, byteOffset, length) {
  if (byteOffset < 0 || array.byteLength < byteOffset) {
    throw new RangeError('\'offset\' is out of bounds')
  }

  if (array.byteLength < byteOffset + (length || 0)) {
    throw new RangeError('\'length\' is out of bounds')
  }

  var buf
  if (byteOffset === undefined && length === undefined) {
    buf = new Uint8Array(array)
  } else if (length === undefined) {
    buf = new Uint8Array(array, byteOffset)
  } else {
    buf = new Uint8Array(array, byteOffset, length)
  }

  // Return an augmented `Uint8Array` instance
  buf.__proto__ = Buffer.prototype
  return buf
}

function fromObject (obj) {
  if (Buffer.isBuffer(obj)) {
    var len = checked(obj.length) | 0
    var buf = createBuffer(len)

    if (buf.length === 0) {
      return buf
    }

    obj.copy(buf, 0, 0, len)
    return buf
  }

  if (obj) {
    if (isArrayBufferView(obj) || 'length' in obj) {
      if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {
        return createBuffer(0)
      }
      return fromArrayLike(obj)
    }

    if (obj.type === 'Buffer' && Array.isArray(obj.data)) {
      return fromArrayLike(obj.data)
    }
  }

  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
}

function checked (length) {
  // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= K_MAX_LENGTH) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (length) {
  if (+length != length) { // eslint-disable-line eqeqeq
    length = 0
  }
  return Buffer.alloc(+length)
}

Buffer.isBuffer = function isBuffer (b) {
  return b != null && b._isBuffer === true
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  for (var i = 0, len = Math.min(x, y); i < len; ++i) {
    if (a[i] !== b[i]) {
      x = a[i]
      y = b[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'latin1':
    case 'binary':
    case 'base64':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!Array.isArray(list)) {
    throw new TypeError('"list" argument must be an Array of Buffers')
  }

  if (list.length === 0) {
    return Buffer.alloc(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; ++i) {
      length += list[i].length
    }
  }

  var buffer = Buffer.allocUnsafe(length)
  var pos = 0
  for (i = 0; i < list.length; ++i) {
    var buf = list[i]
    if (!Buffer.isBuffer(buf)) {
      throw new TypeError('"list" argument must be an Array of Buffers')
    }
    buf.copy(buffer, pos)
    pos += buf.length
  }
  return buffer
}

function byteLength (string, encoding) {
  if (Buffer.isBuffer(string)) {
    return string.length
  }
  if (isArrayBufferView(string) || isArrayBuffer(string)) {
    return string.byteLength
  }
  if (typeof string !== 'string') {
    string = '' + string
  }

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'latin1':
      case 'binary':
        return len
      case 'utf8':
      case 'utf-8':
      case undefined:
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

function slowToString (encoding, start, end) {
  var loweredCase = false

  // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
  // property of a typed array.

  // This behaves neither like String nor Uint8Array in that we set start/end
  // to their upper/lower bounds if the value passed is out of range.
  // undefined is handled specially as per ECMA-262 6th Edition,
  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
  if (start === undefined || start < 0) {
    start = 0
  }
  // Return early if start > this.length. Done here to prevent potential uint32
  // coercion fail below.
  if (start > this.length) {
    return ''
  }

  if (end === undefined || end > this.length) {
    end = this.length
  }

  if (end <= 0) {
    return ''
  }

  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
  end >>>= 0
  start >>>= 0

  if (end <= start) {
    return ''
  }

  if (!encoding) encoding = 'utf8'

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'latin1':
      case 'binary':
        return latin1Slice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true

function swap (b, n, m) {
  var i = b[n]
  b[n] = b[m]
  b[m] = i
}

Buffer.prototype.swap16 = function swap16 () {
  var len = this.length
  if (len % 2 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 16-bits')
  }
  for (var i = 0; i < len; i += 2) {
    swap(this, i, i + 1)
  }
  return this
}

Buffer.prototype.swap32 = function swap32 () {
  var len = this.length
  if (len % 4 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 32-bits')
  }
  for (var i = 0; i < len; i += 4) {
    swap(this, i, i + 3)
    swap(this, i + 1, i + 2)
  }
  return this
}

Buffer.prototype.swap64 = function swap64 () {
  var len = this.length
  if (len % 8 !== 0) {
    throw new RangeError('Buffer size must be a multiple of 64-bits')
  }
  for (var i = 0; i < len; i += 8) {
    swap(this, i, i + 7)
    swap(this, i + 1, i + 6)
    swap(this, i + 2, i + 5)
    swap(this, i + 3, i + 4)
  }
  return this
}

Buffer.prototype.toString = function toString () {
  var length = this.length
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
  if (!Buffer.isBuffer(target)) {
    throw new TypeError('Argument must be a Buffer')
  }

  if (start === undefined) {
    start = 0
  }
  if (end === undefined) {
    end = target ? target.length : 0
  }
  if (thisStart === undefined) {
    thisStart = 0
  }
  if (thisEnd === undefined) {
    thisEnd = this.length
  }

  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
    throw new RangeError('out of range index')
  }

  if (thisStart >= thisEnd && start >= end) {
    return 0
  }
  if (thisStart >= thisEnd) {
    return -1
  }
  if (start >= end) {
    return 1
  }

  start >>>= 0
  end >>>= 0
  thisStart >>>= 0
  thisEnd >>>= 0

  if (this === target) return 0

  var x = thisEnd - thisStart
  var y = end - start
  var len = Math.min(x, y)

  var thisCopy = this.slice(thisStart, thisEnd)
  var targetCopy = target.slice(start, end)

  for (var i = 0; i < len; ++i) {
    if (thisCopy[i] !== targetCopy[i]) {
      x = thisCopy[i]
      y = targetCopy[i]
      break
    }
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
  // Empty buffer means no match
  if (buffer.length === 0) return -1

  // Normalize byteOffset
  if (typeof byteOffset === 'string') {
    encoding = byteOffset
    byteOffset = 0
  } else if (byteOffset > 0x7fffffff) {
    byteOffset = 0x7fffffff
  } else if (byteOffset < -0x80000000) {
    byteOffset = -0x80000000
  }
  byteOffset = +byteOffset  // Coerce to Number.
  if (numberIsNaN(byteOffset)) {
    // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : (buffer.length - 1)
  }

  // Normalize byteOffset: negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = buffer.length + byteOffset
  if (byteOffset >= buffer.length) {
    if (dir) return -1
    else byteOffset = buffer.length - 1
  } else if (byteOffset < 0) {
    if (dir) byteOffset = 0
    else return -1
  }

  // Normalize val
  if (typeof val === 'string') {
    val = Buffer.from(val, encoding)
  }

  // Finally, search either indexOf (if dir is true) or lastIndexOf
  if (Buffer.isBuffer(val)) {
    // Special case: looking for empty string/buffer always fails
    if (val.length === 0) {
      return -1
    }
    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
  } else if (typeof val === 'number') {
    val = val & 0xFF // Search for a byte value [0-255]
    if (typeof Uint8Array.prototype.indexOf === 'function') {
      if (dir) {
        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
      } else {
        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
      }
    }
    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
  }

  throw new TypeError('val must be string, number or Buffer')
}

function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
  var indexSize = 1
  var arrLength = arr.length
  var valLength = val.length

  if (encoding !== undefined) {
    encoding = String(encoding).toLowerCase()
    if (encoding === 'ucs2' || encoding === 'ucs-2' ||
        encoding === 'utf16le' || encoding === 'utf-16le') {
      if (arr.length < 2 || val.length < 2) {
        return -1
      }
      indexSize = 2
      arrLength /= 2
      valLength /= 2
      byteOffset /= 2
    }
  }

  function read (buf, i) {
    if (indexSize === 1) {
      return buf[i]
    } else {
      return buf.readUInt16BE(i * indexSize)
    }
  }

  var i
  if (dir) {
    var foundIndex = -1
    for (i = byteOffset; i < arrLength; i++) {
      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
      } else {
        if (foundIndex !== -1) i -= i - foundIndex
        foundIndex = -1
      }
    }
  } else {
    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength
    for (i = byteOffset; i >= 0; i--) {
      var found = true
      for (var j = 0; j < valLength; j++) {
        if (read(arr, i + j) !== read(val, j)) {
          found = false
          break
        }
      }
      if (found) return i
    }
  }

  return -1
}

Buffer.prototype.includes = function includes (val, byteOffset, encoding) {
  return this.indexOf(val, byteOffset, encoding) !== -1
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
}

Buffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; ++i) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (numberIsNaN(parsed)) return i
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function latin1Write (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset >>> 0
    if (isFinite(length)) {
      length = length >>> 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  } else {
    throw new Error(
      'Buffer.write(string, encoding, offset[, length]) is no longer supported'
    )
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('Attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'latin1':
      case 'binary':
        return latin1Write(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function latin1Slice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; ++i) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; ++i) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + (bytes[i + 1] * 256))
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf = this.subarray(start, end)
  // Return an augmented `Uint8Array` instance
  newBuf.__proto__ = Buffer.prototype
  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  offset = offset >>> 0
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  byteLength = byteLength >>> 0
  if (!noAssert) {
    var maxBytes = Math.pow(2, 8 * byteLength) - 1
    checkInt(this, value, offset, byteLength, maxBytes, 0)
  }

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset + 3] = (value >>> 24)
  this[offset + 2] = (value >>> 16)
  this[offset + 1] = (value >>> 8)
  this[offset] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    var limit = Math.pow(2, (8 * byteLength) - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
      sub = 1
    }
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (value < 0) value = 0xff + value + 1
  this[offset] = (value & 0xff)
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  this[offset] = (value >>> 8)
  this[offset + 1] = (value & 0xff)
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  this[offset] = (value & 0xff)
  this[offset + 1] = (value >>> 8)
  this[offset + 2] = (value >>> 16)
  this[offset + 3] = (value >>> 24)
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  this[offset] = (value >>> 24)
  this[offset + 1] = (value >>> 16)
  this[offset + 2] = (value >>> 8)
  this[offset + 3] = (value & 0xff)
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (offset + ext > buf.length) throw new RangeError('Index out of range')
  if (offset < 0) throw new RangeError('Index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  value = +value
  offset = offset >>> 0
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; --i) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000) {
    // ascending copy from start
    for (i = 0; i < len; ++i) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    Uint8Array.prototype.set.call(
      target,
      this.subarray(start, start + len),
      targetStart
    )
  }

  return len
}

// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill (val, start, end, encoding) {
  // Handle string cases:
  if (typeof val === 'string') {
    if (typeof start === 'string') {
      encoding = start
      start = 0
      end = this.length
    } else if (typeof end === 'string') {
      encoding = end
      end = this.length
    }
    if (val.length === 1) {
      var code = val.charCodeAt(0)
      if (code < 256) {
        val = code
      }
    }
    if (encoding !== undefined && typeof encoding !== 'string') {
      throw new TypeError('encoding must be a string')
    }
    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {
      throw new TypeError('Unknown encoding: ' + encoding)
    }
  } else if (typeof val === 'number') {
    val = val & 255
  }

  // Invalid ranges are not set to a default, so can range check early.
  if (start < 0 || this.length < start || this.length < end) {
    throw new RangeError('Out of range index')
  }

  if (end <= start) {
    return this
  }

  start = start >>> 0
  end = end === undefined ? this.length : end >>> 0

  if (!val) val = 0

  var i
  if (typeof val === 'number') {
    for (i = start; i < end; ++i) {
      this[i] = val
    }
  } else {
    var bytes = Buffer.isBuffer(val)
      ? val
      : new Buffer(val, encoding)
    var len = bytes.length
    for (i = 0; i < end - start; ++i) {
      this[i + start] = bytes[i % len]
    }
  }

  return this
}

// HELPER FUNCTIONS
// ================

var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = str.trim().replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; ++i) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; ++i) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; ++i) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

// ArrayBuffers from another context (i.e. an iframe) do not pass the `instanceof` check
// but they should be treated as valid. See: https://github.com/feross/buffer/issues/166
function isArrayBuffer (obj) {
  return obj instanceof ArrayBuffer ||
    (obj != null && obj.constructor != null && obj.constructor.name === 'ArrayBuffer' &&
      typeof obj.byteLength === 'number')
}

// Node 0.10 supports `ArrayBuffer` but lacks `ArrayBuffer.isView`
function isArrayBufferView (obj) {
  return (typeof ArrayBuffer.isView === 'function') && ArrayBuffer.isView(obj)
}

function numberIsNaN (obj) {
  return obj !== obj // eslint-disable-line no-self-compare
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\buffer\\index.js","/lme-model-api\\node_modules\\buffer",undefined)
},{"_process":38,"base64-js":34,"buffer":36,"ieee754":37}],37:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\ieee754\\index.js","/lme-model-api\\node_modules\\ieee754",undefined)
},{"_process":38,"buffer":36}],38:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\process\\browser.js","/lme-model-api\\node_modules\\process",undefined)
},{"_process":38,"buffer":36}],39:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\util\\node_modules\\inherits\\inherits_browser.js","/lme-model-api\\node_modules\\util\\node_modules\\inherits",undefined)
},{"_process":38,"buffer":36}],40:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\util\\support\\isBufferBrowser.js","/lme-model-api\\node_modules\\util\\support",undefined)
},{"_process":38,"buffer":36}],41:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\node_modules\\util\\util.js","/lme-model-api\\node_modules\\util",undefined)
},{"./support/isBuffer":40,"_process":38,"buffer":36,"inherits":39}],42:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
Error.prototype.stack = Error.prototype.stack || "";

require('../../lme-core/exchange_modules/lme/lmeparser');
require('../../formulajs-connect');
require('../../lme-core/exchange_modules/jsonvalues/jsonvalues');
require('../../lme-core/exchange_modules/ffl/RegisterPlainFFLDecorator');
require('../../math');
const CustomTimeModel = require('../../lme-core/src/TimeAxis');
const DEFAULT_MODELNAME = "SCORECARDTESTMODEL";
const CalculationFacade = require('../../lme-core').CalculationFacade;
CalculationFacade.addFunctions(require("../../formulajs-connect").formulajs);

function LmeAPI(TimeModel, Ctx, interval) {
    const Context = require('../../lme-core/src/Context');
    const WorkBook = require('../../lme-core/src/JSWorkBook');

    //TODO: the TimeModel is probably part of the Context object.
    this.lme = new WorkBook(Ctx || new Context(), TimeModel ? new CustomTimeModel(TimeModel) : require('../../lme-core/src/XAxis'), interval);
    this.modelName = undefined;
    this.urlPrefix = '';
}

LmeAPI.prototype.hasChanges = function() {
    return this.lme.context.hasChanges();
}
LmeAPI.prototype.getTimeViews = function() {
    return this.lme.getTimeViews();
}
LmeAPI.prototype.addFunctions = CalculationFacade.addFunctions;
LmeAPI.prototype.exportLME = function() {
    return this.lme.export('lme')
}
LmeAPI.prototype.importLME = function(json) {
    this.lme.importSolution(json, 'lme')
}
LmeAPI.prototype.exportJavaScript = function() {
    return this.lme.export('js')
}
/**
 * Not used in Client UI input rendering
 */
LmeAPI.prototype.importFFL = function(ffl) {
    this.lme.importSolution(ffl, 'ffl')
}
LmeAPI.prototype.importFFL2 = function(ffl) {
    this.lme.importSolution(ffl, 'ffl')
}
LmeAPI.prototype.setColumnOffset = function(delta) {
    this.lme.setColumnOffset(delta)
}
LmeAPI.prototype.exportFFL = function() {
    return this.lme.export('ffl')
}
LmeAPI.prototype.exportPresentation = function() {
    return this.lme.export('presentation')
}
LmeAPI.prototype.exportWebModel = function(rootNode) {
    return this.lme.export('webexport', rootNode)
}
LmeAPI.prototype.importWebModel = function(webDesign) {
    return this.lme.importSolution(webDesign, 'webexport')
}
LmeAPI.prototype.exportData = function() {
    return this.lme.export('jsonvalues')
}
LmeAPI.prototype.exportScreenDefinition = function(nodeId) {
    const rootNode = this.lme.getRootSolutionProperty()
    return this.lme.export('screendefinition', rootNode)
}
LmeAPI.prototype.importData = function(valueAsJSON) {
    this.lme.importSolution(valueAsJSON, 'jsonvalues')
}
/**
 * use modelName from this.lme.modelName
 * use token form this.lme.context.uuid
 */
LmeAPI.prototype.loadData = function(callBack, id) {
    var self = this;
    var params = window.location.href.split('#')
    if (params.length == 1) window.location.href = '#' + DEFAULT_MODELNAME + '&DEMO'
    var params = window.location.href.split('#')[1].split('&')
    self.modelName = params[0] || DEFAULT_MODELNAME;
    var userID = (params[1] || 'DEMO')

    self.lme.context.saveToken = userID;
    var http = new XMLHttpRequest();
    var url = self.urlPrefix + 'data/' + (id || userID);
    http.open("GET", url, true);
    http.setRequestHeader("Content-type", "application/json");
    http.onreadystatechange = function() {//Call a function when the state changes.
        if (http.readyState == 4 && http.status == 200) {
            var returnData = JSON.parse(http.responseText);
            self.lme.context.saveToken = returnData.id.indexOf(',') > 0 ? userID : returnData.id;
            self.importData(returnData)
            window.location.href = '#' + self.modelName + '&' + self.lme.context.saveToken
        }
    }
    http.onload = function() {
        self.lme.context.audit = []
        self.lme.context.calc_count++;
        callBack(http.responseText)
    };
    http.send();
    return http;
}

LmeAPI.prototype.persistData = function(callBack) {
    const self = this;
    //send data to server to store
    var params = window.location.href.split('#')
    if (params.length == 1) window.location.href = '#' + DEFAULT_MODELNAME + '&DEMO'
    var params = window.location.href.split('#')[1].split('&')
    self.modelName = params[0] || DEFAULT_MODELNAME;
    var userID = params[1] || 'DEMO'
    self.lme.context.saveToken = userID;
    var http = new XMLHttpRequest();
    http.open("POST", 'saveUserData/' + self.lme.context.saveToken, true);
    http.setRequestHeader('Content-Type', 'application/json');
    http.onreadystatechange = function() {//Call a function when the state changes.
        if (http.readyState == 4 && http.status == 200) {
            const returnData = JSON.parse(http.responseText);
            self.lme.context.saveToken = returnData.saveToken;
            window.location.href = '#' + self.modelName + '&' + self.lme.context.saveToken
        }
    };
    http.onload = function() {
        self.lme.context.audit = []
        self.lme.context.calc_count++;
        callBack(http.responseText)
    };

    http.send(JSON.stringify({
        data: self.exportData()
    }));
    return http;
}
module.exports = LmeAPI;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\src\\lme.js","/lme-model-api\\src",undefined)
},{"../../formulajs-connect":3,"../../lme-core":17,"../../lme-core/exchange_modules/ffl/RegisterPlainFFLDecorator":11,"../../lme-core/exchange_modules/jsonvalues/jsonvalues":14,"../../lme-core/exchange_modules/lme/lmeparser":15,"../../lme-core/src/Context":20,"../../lme-core/src/JSWorkBook":24,"../../lme-core/src/TimeAxis":29,"../../lme-core/src/XAxis":31,"../../math":44,"_process":38,"buffer":36}],43:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
var model = require('./lme')
log = {}
LMEMETA = new model()
LMEMETA.importLME(JSON_MODEL);//JSON_MODEL is injected by browserify
LME = LMEMETA.exportWebModel();
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/lme-model-api\\src\\lmeAPIWrapper.js","/lme-model-api\\src",{"formulas":[{"type":"noCacheUnlocked","refs":{"URA_root_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1001,"name":"URA_root_value","parsed":"null","id":1001,"fflname":"root_value"},{"type":"noCacheUnlocked","refs":{"URA_root_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1002,"name":"URA_root_value","parsed":"null","id":1002,"fflname":"root_value"},{"type":"noCacheUnlocked","refs":{"URA_Q_ROOT_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1003,"name":"URA_Q_ROOT_value","parsed":"null","id":1003,"fflname":"Q_ROOT_value"},{"type":"noCacheUnlocked","refs":{"URA_SimpleEntryFolder_value":true,"URA_SimpleEntryFolder_valid":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_valid","association":"refs","refId":1005}],"deps":{},"original":"null","index":1004,"name":"URA_SimpleEntryFolder_value","parsed":"null","id":1004,"fflname":"SimpleEntryFolder_value"},{"type":"noCacheLocked","refs":{"URA_SimpleEntryFolder_valid":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_value","association":"deps","refId":1004}],"deps":{"URA_SimpleEntryFolder_value":true},"original":"If(!isNaN(OnNA(SimpleEntryFolder,null)),'','Enter valid input.')","index":1005,"name":"URA_SimpleEntryFolder_valid","parsed":"!isNaN(OnNA(m[1004]('1004',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1005,"fflname":"SimpleEntryFolder_valid"},{"type":"noCacheUnlocked","refs":{"URA_SimpleEntryFolder_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzes Eingabeformular<$'","index":1006,"name":"URA_SimpleEntryFolder_title","parsed":"'$>Kurzes Eingabeformular<$'","id":1006,"fflname":"SimpleEntryFolder_title"},{"type":"noCacheLocked","refs":{"URA_SimpleEntryFolder_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1007,"name":"URA_SimpleEntryFolder_locked","parsed":"1","id":1007,"fflname":"SimpleEntryFolder_locked"},{"type":"noCacheLocked","refs":{"URA_SimpleEntryFolder_visible":true,"URA_sdeGoodWill_visible":true,"URA_sdeReceivablesShareholders_visible":true,"URA_sdeDeferredTaxesAssets_visible":true,"URA_sdeEquity_visible":true,"URA_sdeResultForTheYear_visible":true,"URA_sdeVarCapLimitedPartners_visible":true,"URA_sdeProvisions_visible":true,"URA_sdeLiabilitiesLong_visible":true,"URA_sdeLiabilitiesBankLong_visible":true,"URA_sdeLongTradePayables_visible":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_visible":true,"URA_sdeLiabilitiesToShareholdersOver5Y_visible":true,"URA_sdeLiabilitiesShort_visible":true,"URA_sdeLiabilitiesBankShort_visible":true,"URA_sdeTradePayables_visible":true,"URA_sdeReceivedAdvanceOrdersCurrent_visible":true,"URA_sdeShortShareholderPayables_visible":true,"URA_sdeBalanceSheetTotal_visible":true,"URA_sdeSales_visible":true,"URA_sdeDepreciation_visible":true,"URA_sdeResultCorrections_visible":true,"URA_sdeEBIT_visible":true,"URA_sdeInterestEarnings_visible":true,"URA_sdeInterestExpenses_visible":true,"URA_sdeParticipationEarnings_visible":true,"URA_sdeEntrepreneurFeeOutsideResult_visible":true,"URA_sdePD_visible":true,"URA_sdeURARatingKlasse_visible":true},"formulaDependencys":[{"name":"URA_Q_ROOT_visible","association":"deps"},{"name":"URA_sdeGoodWill_visible","association":"refs","refId":1012},{"name":"URA_sdeReceivablesShareholders_visible","association":"refs","refId":1016},{"name":"URA_sdeDeferredTaxesAssets_visible","association":"refs","refId":1020},{"name":"URA_sdeEquity_visible","association":"refs","refId":1024},{"name":"URA_sdeResultForTheYear_visible","association":"refs","refId":1028},{"name":"URA_sdeVarCapLimitedPartners_visible","association":"refs","refId":1032},{"name":"URA_sdeProvisions_visible","association":"refs","refId":1036},{"name":"URA_sdeLiabilitiesLong_visible","association":"refs","refId":1040},{"name":"URA_sdeLiabilitiesBankLong_visible","association":"refs","refId":1044},{"name":"URA_sdeLongTradePayables_visible","association":"refs","refId":1048},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_visible","association":"refs","refId":1052},{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_visible","association":"refs","refId":1056},{"name":"URA_sdeLiabilitiesShort_visible","association":"refs","refId":1060},{"name":"URA_sdeLiabilitiesBankShort_visible","association":"refs","refId":1064},{"name":"URA_sdeTradePayables_visible","association":"refs","refId":1068},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_visible","association":"refs","refId":1072},{"name":"URA_sdeShortShareholderPayables_visible","association":"refs","refId":1076},{"name":"URA_sdeBalanceSheetTotal_visible","association":"refs","refId":1081},{"name":"URA_sdeSales_visible","association":"refs","refId":1085},{"name":"URA_sdeDepreciation_visible","association":"refs","refId":1089},{"name":"URA_sdeResultCorrections_visible","association":"refs","refId":1093},{"name":"URA_sdeEBIT_visible","association":"refs","refId":1097},{"name":"URA_sdeInterestEarnings_visible","association":"refs","refId":1101},{"name":"URA_sdeInterestExpenses_visible","association":"refs","refId":1105},{"name":"URA_sdeParticipationEarnings_visible","association":"refs","refId":1109},{"name":"URA_sdeEntrepreneurFeeOutsideResult_visible","association":"refs","refId":1113},{"name":"URA_sdePD_visible","association":"refs","refId":1118},{"name":"URA_sdeURARatingKlasse_visible","association":"refs","refId":1122}],"deps":{"URA_Q_ROOT_visible":true},"original":"Q_ROOT.visible&&1","index":1008,"name":"URA_SimpleEntryFolder_visible","parsed":"true&&1","id":1008,"fflname":"SimpleEntryFolder_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeGoodWill_value":true,"URA_sdeGoodWill_valid":true,"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub6_valid":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_value":true,"URA_krRatingorientierteBilanzsumme_value":true,"URA_krRatingorientierteBilanzsummeSub2_valid":true,"URA_krRatingorientierteBilanzsummeSub5_value":true},"formulaDependencys":[{"name":"URA_sdeGoodWill_valid","association":"refs","refId":1010},{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"refs","refId":1413},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_valid","association":"refs","refId":1444},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","association":"refs","refId":1463},{"name":"URA_krRatingorientierteBilanzsumme_value","association":"refs","refId":1468},{"name":"URA_krRatingorientierteBilanzsummeSub2_valid","association":"refs","refId":1479},{"name":"URA_krRatingorientierteBilanzsummeSub5_value","association":"refs","refId":1493}],"deps":{},"original":"null","index":1009,"name":"URA_sdeGoodWill_value","parsed":"null","id":1009,"fflname":"sdeGoodWill_value"},{"type":"noCacheLocked","refs":{"URA_sdeGoodWill_valid":true},"formulaDependencys":[{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009}],"deps":{"URA_sdeGoodWill_value":true},"original":"If(!isNaN(OnNA(sdeGoodWill,null)),'','Enter valid input.')","index":1010,"name":"URA_sdeGoodWill_valid","parsed":"!isNaN(OnNA(m[1009]('1009',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1010,"fflname":"sdeGoodWill_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeGoodWill_title":true},"formulaDependencys":[],"deps":{},"original":"'$>GoodWill und selbst geschaffene Schutzrechte<$'","index":1011,"name":"URA_sdeGoodWill_title","parsed":"'$>GoodWill und selbst geschaffene Schutzrechte<$'","id":1011,"fflname":"sdeGoodWill_title"},{"type":"noCacheLocked","refs":{"URA_sdeGoodWill_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1012,"name":"URA_sdeGoodWill_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1012,"fflname":"sdeGoodWill_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeReceivablesShareholders_value":true,"URA_sdeReceivablesShareholders_valid":true,"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub7_valid":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_value":true,"URA_krRatingorientierteBilanzsumme_value":true,"URA_krRatingorientierteBilanzsummeSub3_valid":true,"URA_krRatingorientierteBilanzsummeSub5_value":true},"formulaDependencys":[{"name":"URA_sdeReceivablesShareholders_valid","association":"refs","refId":1014},{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"refs","refId":1413},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_valid","association":"refs","refId":1449},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","association":"refs","refId":1463},{"name":"URA_krRatingorientierteBilanzsumme_value","association":"refs","refId":1468},{"name":"URA_krRatingorientierteBilanzsummeSub3_valid","association":"refs","refId":1484},{"name":"URA_krRatingorientierteBilanzsummeSub5_value","association":"refs","refId":1493}],"deps":{},"original":"null","index":1013,"name":"URA_sdeReceivablesShareholders_value","parsed":"null","id":1013,"fflname":"sdeReceivablesShareholders_value"},{"type":"noCacheLocked","refs":{"URA_sdeReceivablesShareholders_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013}],"deps":{"URA_sdeReceivablesShareholders_value":true},"original":"If(!isNaN(OnNA(sdeReceivablesShareholders,null)),'','Enter valid input.')","index":1014,"name":"URA_sdeReceivablesShareholders_valid","parsed":"!isNaN(OnNA(m[1013]('1013',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1014,"fflname":"sdeReceivablesShareholders_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeReceivablesShareholders_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Forderungen gegen?ber Gesellschaftern, Gesellschaftsorganen usw.<$'","index":1015,"name":"URA_sdeReceivablesShareholders_title","parsed":"'$>Forderungen gegen?ber Gesellschaftern, Gesellschaftsorganen usw.<$'","id":1015,"fflname":"sdeReceivablesShareholders_title"},{"type":"noCacheLocked","refs":{"URA_sdeReceivablesShareholders_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1016,"name":"URA_sdeReceivablesShareholders_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1016,"fflname":"sdeReceivablesShareholders_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeDeferredTaxesAssets_value":true,"URA_sdeDeferredTaxesAssets_valid":true,"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub8_valid":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_value":true,"URA_krRatingorientierteBilanzsumme_value":true,"URA_krRatingorientierteBilanzsummeSub4_valid":true,"URA_krRatingorientierteBilanzsummeSub5_value":true},"formulaDependencys":[{"name":"URA_sdeDeferredTaxesAssets_valid","association":"refs","refId":1018},{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"refs","refId":1413},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_valid","association":"refs","refId":1454},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","association":"refs","refId":1463},{"name":"URA_krRatingorientierteBilanzsumme_value","association":"refs","refId":1468},{"name":"URA_krRatingorientierteBilanzsummeSub4_valid","association":"refs","refId":1489},{"name":"URA_krRatingorientierteBilanzsummeSub5_value","association":"refs","refId":1493}],"deps":{},"original":"null","index":1017,"name":"URA_sdeDeferredTaxesAssets_value","parsed":"null","id":1017,"fflname":"sdeDeferredTaxesAssets_value"},{"type":"noCacheLocked","refs":{"URA_sdeDeferredTaxesAssets_valid":true},"formulaDependencys":[{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017}],"deps":{"URA_sdeDeferredTaxesAssets_value":true},"original":"If(!isNaN(OnNA(sdeDeferredTaxesAssets,null)),'','Enter valid input.')","index":1018,"name":"URA_sdeDeferredTaxesAssets_valid","parsed":"!isNaN(OnNA(m[1017]('1017',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1018,"fflname":"sdeDeferredTaxesAssets_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeDeferredTaxesAssets_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Aktive latente Steuern<$'","index":1019,"name":"URA_sdeDeferredTaxesAssets_title","parsed":"'$>Aktive latente Steuern<$'","id":1019,"fflname":"sdeDeferredTaxesAssets_title"},{"type":"noCacheLocked","refs":{"URA_sdeDeferredTaxesAssets_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1020,"name":"URA_sdeDeferredTaxesAssets_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1020,"fflname":"sdeDeferredTaxesAssets_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeEquity_value":true,"URA_sdeEquity_valid":true,"URA_sdeBalanceSheetTotal_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub1_valid":true,"URA_krBilanziellesEigenkapitalBrutto_value":true},"formulaDependencys":[{"name":"URA_sdeEquity_valid","association":"refs","refId":1022},{"name":"URA_sdeBalanceSheetTotal_value","association":"refs","refId":1077},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_valid","association":"refs","refId":1419},{"name":"URA_krBilanziellesEigenkapitalBrutto_value","association":"refs","refId":1423}],"deps":{},"original":"null","index":1021,"name":"URA_sdeEquity_value","parsed":"null","id":1021,"fflname":"sdeEquity_value"},{"type":"noCacheLocked","refs":{"URA_sdeEquity_valid":true},"formulaDependencys":[{"name":"URA_sdeEquity_value","association":"deps","refId":1021}],"deps":{"URA_sdeEquity_value":true},"original":"If(!isNaN(OnNA(sdeEquity,null)),'','Enter valid input.')","index":1022,"name":"URA_sdeEquity_valid","parsed":"!isNaN(OnNA(m[1021]('1021',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1022,"fflname":"sdeEquity_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeEquity_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Eigenkapital ohne den nicht durch Eigenkapital gedeckten Fehlbetrag<$'","index":1023,"name":"URA_sdeEquity_title","parsed":"'$>Eigenkapital ohne den nicht durch Eigenkapital gedeckten Fehlbetrag<$'","id":1023,"fflname":"sdeEquity_title"},{"type":"noCacheLocked","refs":{"URA_sdeEquity_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1024,"name":"URA_sdeEquity_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1024,"fflname":"sdeEquity_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeResultForTheYear_value":true,"URA_sdeResultForTheYear_valid":true,"URA_krNettoBilanzsummeRatingSub1_value":true,"URA_krNettoBilanzsummeRatingSub2_valid":true,"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_krVerbindlichkeiten_value":true,"URA_krVerbindlichkeitenSub3_valid":true,"URA_krVerbindlichkeitenSub7_value":true,"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krKurzfristigeVerbindlichkeitenSub1_valid":true,"URA_krKurzfristigeVerbindlichkeitenSub6_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub3_valid":true,"URA_krWirtschaftlichesEigenkapital_value":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_valid","association":"refs","refId":1026},{"name":"URA_krNettoBilanzsummeRatingSub1_value","association":"refs","refId":1183},{"name":"URA_krNettoBilanzsummeRatingSub2_valid","association":"refs","refId":1189},{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"refs","refId":1213},{"name":"URA_krVerbindlichkeiten_value","association":"refs","refId":1303},{"name":"URA_krVerbindlichkeitenSub3_valid","association":"refs","refId":1319},{"name":"URA_krVerbindlichkeitenSub7_value","association":"refs","refId":1338},{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1353},{"name":"URA_krKurzfristigeVerbindlichkeitenSub1_valid","association":"refs","refId":1359},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","association":"refs","refId":1383},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_valid","association":"refs","refId":1429},{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"refs","refId":1438}],"deps":{},"original":"null","index":1025,"name":"URA_sdeResultForTheYear_value","parsed":"null","id":1025,"fflname":"sdeResultForTheYear_value"},{"type":"noCacheLocked","refs":{"URA_sdeResultForTheYear_valid":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025}],"deps":{"URA_sdeResultForTheYear_value":true},"original":"If(!isNaN(OnNA(sdeResultForTheYear,null)),'','Enter valid input.')","index":1026,"name":"URA_sdeResultForTheYear_valid","parsed":"!isNaN(OnNA(m[1025]('1025',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1026,"fflname":"sdeResultForTheYear_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeResultForTheYear_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","index":1027,"name":"URA_sdeResultForTheYear_title","parsed":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","id":1027,"fflname":"sdeResultForTheYear_title"},{"type":"noCacheLocked","refs":{"URA_sdeResultForTheYear_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1028,"name":"URA_sdeResultForTheYear_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1028,"fflname":"sdeResultForTheYear_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeVarCapLimitedPartners_value":true,"URA_sdeVarCapLimitedPartners_valid":true,"URA_krNettoBilanzsummeRatingSub1_value":true,"URA_krNettoBilanzsummeRatingSub3_valid":true,"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_krVerbindlichkeiten_value":true,"URA_krVerbindlichkeitenSub4_valid":true,"URA_krVerbindlichkeitenSub7_value":true,"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krKurzfristigeVerbindlichkeitenSub2_valid":true,"URA_krKurzfristigeVerbindlichkeitenSub6_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub4_valid":true,"URA_krWirtschaftlichesEigenkapital_value":true},"formulaDependencys":[{"name":"URA_sdeVarCapLimitedPartners_valid","association":"refs","refId":1030},{"name":"URA_krNettoBilanzsummeRatingSub1_value","association":"refs","refId":1183},{"name":"URA_krNettoBilanzsummeRatingSub3_valid","association":"refs","refId":1194},{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"refs","refId":1213},{"name":"URA_krVerbindlichkeiten_value","association":"refs","refId":1303},{"name":"URA_krVerbindlichkeitenSub4_valid","association":"refs","refId":1324},{"name":"URA_krVerbindlichkeitenSub7_value","association":"refs","refId":1338},{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1353},{"name":"URA_krKurzfristigeVerbindlichkeitenSub2_valid","association":"refs","refId":1364},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","association":"refs","refId":1383},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_valid","association":"refs","refId":1434},{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"refs","refId":1438}],"deps":{},"original":"null","index":1029,"name":"URA_sdeVarCapLimitedPartners_value","parsed":"null","id":1029,"fflname":"sdeVarCapLimitedPartners_value"},{"type":"noCacheLocked","refs":{"URA_sdeVarCapLimitedPartners_valid":true},"formulaDependencys":[{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029}],"deps":{"URA_sdeVarCapLimitedPartners_value":true},"original":"If(!isNaN(OnNA(sdeVarCapLimitedPartners,null)),'','Enter valid input.')","index":1030,"name":"URA_sdeVarCapLimitedPartners_valid","parsed":"!isNaN(OnNA(m[1029]('1029',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1030,"fflname":"sdeVarCapLimitedPartners_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeVarCapLimitedPartners_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","index":1031,"name":"URA_sdeVarCapLimitedPartners_title","parsed":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","id":1031,"fflname":"sdeVarCapLimitedPartners_title"},{"type":"noCacheLocked","refs":{"URA_sdeVarCapLimitedPartners_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1032,"name":"URA_sdeVarCapLimitedPartners_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1032,"fflname":"sdeVarCapLimitedPartners_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeProvisions_value":true,"URA_sdeProvisions_valid":true,"URA_sdeBalanceSheetTotal_value":true,"URA_krNettoBilanzsummeRatingSub4_valid":true,"URA_krNettoBilanzsummeRatingSub7_value":true},"formulaDependencys":[{"name":"URA_sdeProvisions_valid","association":"refs","refId":1034},{"name":"URA_sdeBalanceSheetTotal_value","association":"refs","refId":1077},{"name":"URA_krNettoBilanzsummeRatingSub4_valid","association":"refs","refId":1199},{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"refs","refId":1213}],"deps":{},"original":"null","index":1033,"name":"URA_sdeProvisions_value","parsed":"null","id":1033,"fflname":"sdeProvisions_value"},{"type":"noCacheLocked","refs":{"URA_sdeProvisions_valid":true},"formulaDependencys":[{"name":"URA_sdeProvisions_value","association":"deps","refId":1033}],"deps":{"URA_sdeProvisions_value":true},"original":"If(!isNaN(OnNA(sdeProvisions,null)),'','Enter valid input.')","index":1034,"name":"URA_sdeProvisions_valid","parsed":"!isNaN(OnNA(m[1033]('1033',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1034,"fflname":"sdeProvisions_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeProvisions_title":true},"formulaDependencys":[],"deps":{},"original":"'$>R?ckstellungen, passive latente Steuern und passive Abgrenzungsposten<$'","index":1035,"name":"URA_sdeProvisions_title","parsed":"'$>R?ckstellungen, passive latente Steuern und passive Abgrenzungsposten<$'","id":1035,"fflname":"sdeProvisions_title"},{"type":"noCacheLocked","refs":{"URA_sdeProvisions_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1036,"name":"URA_sdeProvisions_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1036,"fflname":"sdeProvisions_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesLong_value":true,"URA_sdeLiabilitiesLong_valid":true,"URA_sdeBalanceSheetTotal_value":true,"URA_krNettoBilanzsummeRatingSub5_valid":true,"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_krVerbindlichkeiten_value":true,"URA_krVerbindlichkeitenSub1_valid":true,"URA_krVerbindlichkeitenSub7_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesLong_valid","association":"refs","refId":1038},{"name":"URA_sdeBalanceSheetTotal_value","association":"refs","refId":1077},{"name":"URA_krNettoBilanzsummeRatingSub5_valid","association":"refs","refId":1204},{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"refs","refId":1213},{"name":"URA_krVerbindlichkeiten_value","association":"refs","refId":1303},{"name":"URA_krVerbindlichkeitenSub1_valid","association":"refs","refId":1309},{"name":"URA_krVerbindlichkeitenSub7_value","association":"refs","refId":1338}],"deps":{},"original":"null","index":1037,"name":"URA_sdeLiabilitiesLong_value","parsed":"null","id":1037,"fflname":"sdeLiabilitiesLong_value"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesLong_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037}],"deps":{"URA_sdeLiabilitiesLong_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesLong,null)),'','Enter valid input.')","index":1038,"name":"URA_sdeLiabilitiesLong_valid","parsed":"!isNaN(OnNA(m[1037]('1037',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1038,"fflname":"sdeLiabilitiesLong_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesLong_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Verbindlichkeiten >1 Jahr<$'","index":1039,"name":"URA_sdeLiabilitiesLong_title","parsed":"'$>Verbindlichkeiten >1 Jahr<$'","id":1039,"fflname":"sdeLiabilitiesLong_title"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesLong_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1040,"name":"URA_sdeLiabilitiesLong_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1040,"fflname":"sdeLiabilitiesLong_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesBankLong_value":true,"URA_sdeLiabilitiesBankLong_valid":true,"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krBankUndLieferantenverbindlichkeitenSub1_valid":true,"URA_krBankUndLieferantenverbindlichkeitenSub5_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankLong_valid","association":"refs","refId":1042},{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"refs","refId":1243},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_valid","association":"refs","refId":1249},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","association":"refs","refId":1268}],"deps":{},"original":"null","index":1041,"name":"URA_sdeLiabilitiesBankLong_value","parsed":"null","id":1041,"fflname":"sdeLiabilitiesBankLong_value"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesBankLong_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankLong_value","association":"deps","refId":1041}],"deps":{"URA_sdeLiabilitiesBankLong_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesBankLong,null)),'','Enter valid input.')","index":1042,"name":"URA_sdeLiabilitiesBankLong_valid","parsed":"!isNaN(OnNA(m[1041]('1041',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1042,"fflname":"sdeLiabilitiesBankLong_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesBankLong_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","index":1043,"name":"URA_sdeLiabilitiesBankLong_title","parsed":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","id":1043,"fflname":"sdeLiabilitiesBankLong_title"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesBankLong_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1044,"name":"URA_sdeLiabilitiesBankLong_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1044,"fflname":"sdeLiabilitiesBankLong_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLongTradePayables_value":true,"URA_sdeLongTradePayables_valid":true,"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krBankUndLieferantenverbindlichkeitenSub2_valid":true,"URA_krBankUndLieferantenverbindlichkeitenSub5_value":true},"formulaDependencys":[{"name":"URA_sdeLongTradePayables_valid","association":"refs","refId":1046},{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"refs","refId":1243},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_valid","association":"refs","refId":1254},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","association":"refs","refId":1268}],"deps":{},"original":"null","index":1045,"name":"URA_sdeLongTradePayables_value","parsed":"null","id":1045,"fflname":"sdeLongTradePayables_value"},{"type":"noCacheLocked","refs":{"URA_sdeLongTradePayables_valid":true},"formulaDependencys":[{"name":"URA_sdeLongTradePayables_value","association":"deps","refId":1045}],"deps":{"URA_sdeLongTradePayables_value":true},"original":"If(!isNaN(OnNA(sdeLongTradePayables,null)),'','Enter valid input.')","index":1046,"name":"URA_sdeLongTradePayables_valid","parsed":"!isNaN(OnNA(m[1045]('1045',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1046,"fflname":"sdeLongTradePayables_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLongTradePayables_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon aus Lieferungen und Leistungen<$'","index":1047,"name":"URA_sdeLongTradePayables_title","parsed":"'$>>> davon aus Lieferungen und Leistungen<$'","id":1047,"fflname":"sdeLongTradePayables_title"},{"type":"noCacheLocked","refs":{"URA_sdeLongTradePayables_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1048,"name":"URA_sdeLongTradePayables_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1048,"fflname":"sdeLongTradePayables_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_valid":true,"URA_krNettoBilanzsummeRating_value":true,"URA_krNettoBilanzsummeRatingSub8_valid":true,"URA_krNettoBilanzsummeRatingSub10_value":true,"URA_krBankUndLieferantenanteilSub2_value":true,"URA_krVerbindlichkeiten_value":true,"URA_krVerbindlichkeitenSub5_valid":true,"URA_krVerbindlichkeitenSub7_value":true,"URA_krRatingorientierteBilanzsummeSub1_value":true},"formulaDependencys":[{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_valid","association":"refs","refId":1050},{"name":"URA_krNettoBilanzsummeRating_value","association":"refs","refId":1178},{"name":"URA_krNettoBilanzsummeRatingSub8_valid","association":"refs","refId":1219},{"name":"URA_krNettoBilanzsummeRatingSub10_value","association":"refs","refId":1228},{"name":"URA_krBankUndLieferantenanteilSub2_value","association":"refs","refId":1273},{"name":"URA_krVerbindlichkeiten_value","association":"refs","refId":1303},{"name":"URA_krVerbindlichkeitenSub5_valid","association":"refs","refId":1329},{"name":"URA_krVerbindlichkeitenSub7_value","association":"refs","refId":1338},{"name":"URA_krRatingorientierteBilanzsummeSub1_value","association":"refs","refId":1473}],"deps":{},"original":"null","index":1049,"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","parsed":"null","id":1049,"fflname":"sdeLongReceivedAdvanceOrdersCurrent_value"},{"type":"noCacheLocked","refs":{"URA_sdeLongReceivedAdvanceOrdersCurrent_valid":true},"formulaDependencys":[{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049}],"deps":{"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeLongReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1050,"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_valid","parsed":"!isNaN(OnNA(m[1049]('1049',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1050,"fflname":"sdeLongReceivedAdvanceOrdersCurrent_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLongReceivedAdvanceOrdersCurrent_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1051,"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1051,"fflname":"sdeLongReceivedAdvanceOrdersCurrent_title"},{"type":"noCacheLocked","refs":{"URA_sdeLongReceivedAdvanceOrdersCurrent_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1052,"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1052,"fflname":"sdeLongReceivedAdvanceOrdersCurrent_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesToShareholdersOver5Y_value":true,"URA_sdeLiabilitiesToShareholdersOver5Y_valid":true,"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krWirtschaftlichesEigenKapitalRatingSub9_valid":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_valid","association":"refs","refId":1054},{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"refs","refId":1413},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_valid","association":"refs","refId":1459},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","association":"refs","refId":1463}],"deps":{},"original":"null","index":1053,"name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","parsed":"null","id":1053,"fflname":"sdeLiabilitiesToShareholdersOver5Y_value"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesToShareholdersOver5Y_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","association":"deps","refId":1053}],"deps":{"URA_sdeLiabilitiesToShareholdersOver5Y_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesToShareholdersOver5Y,null)),'','Enter valid input.')","index":1054,"name":"URA_sdeLiabilitiesToShareholdersOver5Y_valid","parsed":"!isNaN(OnNA(m[1053]('1053',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1054,"fflname":"sdeLiabilitiesToShareholdersOver5Y_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesToShareholdersOver5Y_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Gesellschaftern und verbundenen Unternehmen >5 Jahre<$'","index":1055,"name":"URA_sdeLiabilitiesToShareholdersOver5Y_title","parsed":"'$>>> davon gegen?ber Gesellschaftern und verbundenen Unternehmen >5 Jahre<$'","id":1055,"fflname":"sdeLiabilitiesToShareholdersOver5Y_title"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesToShareholdersOver5Y_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1056,"name":"URA_sdeLiabilitiesToShareholdersOver5Y_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1056,"fflname":"sdeLiabilitiesToShareholdersOver5Y_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesShort_value":true,"URA_sdeLiabilitiesShort_valid":true,"URA_sdeBalanceSheetTotal_value":true,"URA_krNettoBilanzsummeRatingSub6_valid":true,"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_krVerbindlichkeiten_value":true,"URA_krVerbindlichkeitenSub2_valid":true,"URA_krVerbindlichkeitenSub7_value":true,"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krKurzfristigeVerbindlichkeitenSub3_valid":true,"URA_krKurzfristigeVerbindlichkeitenSub6_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesShort_valid","association":"refs","refId":1058},{"name":"URA_sdeBalanceSheetTotal_value","association":"refs","refId":1077},{"name":"URA_krNettoBilanzsummeRatingSub6_valid","association":"refs","refId":1209},{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"refs","refId":1213},{"name":"URA_krVerbindlichkeiten_value","association":"refs","refId":1303},{"name":"URA_krVerbindlichkeitenSub2_valid","association":"refs","refId":1314},{"name":"URA_krVerbindlichkeitenSub7_value","association":"refs","refId":1338},{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1353},{"name":"URA_krKurzfristigeVerbindlichkeitenSub3_valid","association":"refs","refId":1369},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","association":"refs","refId":1383}],"deps":{},"original":"null","index":1057,"name":"URA_sdeLiabilitiesShort_value","parsed":"null","id":1057,"fflname":"sdeLiabilitiesShort_value"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesShort_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057}],"deps":{"URA_sdeLiabilitiesShort_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesShort,null)),'','Enter valid input.')","index":1058,"name":"URA_sdeLiabilitiesShort_valid","parsed":"!isNaN(OnNA(m[1057]('1057',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1058,"fflname":"sdeLiabilitiesShort_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesShort_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzfristige Verbindlichkeiten<$'","index":1059,"name":"URA_sdeLiabilitiesShort_title","parsed":"'$>Kurzfristige Verbindlichkeiten<$'","id":1059,"fflname":"sdeLiabilitiesShort_title"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesShort_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1060,"name":"URA_sdeLiabilitiesShort_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1060,"fflname":"sdeLiabilitiesShort_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesBankShort_value":true,"URA_sdeLiabilitiesBankShort_valid":true,"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krBankUndLieferantenverbindlichkeitenSub3_valid":true,"URA_krBankUndLieferantenverbindlichkeitenSub5_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankShort_valid","association":"refs","refId":1062},{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"refs","refId":1243},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_valid","association":"refs","refId":1259},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","association":"refs","refId":1268}],"deps":{},"original":"null","index":1061,"name":"URA_sdeLiabilitiesBankShort_value","parsed":"null","id":1061,"fflname":"sdeLiabilitiesBankShort_value"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesBankShort_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankShort_value","association":"deps","refId":1061}],"deps":{"URA_sdeLiabilitiesBankShort_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesBankShort,null)),'','Enter valid input.')","index":1062,"name":"URA_sdeLiabilitiesBankShort_valid","parsed":"!isNaN(OnNA(m[1061]('1061',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1062,"fflname":"sdeLiabilitiesBankShort_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeLiabilitiesBankShort_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","index":1063,"name":"URA_sdeLiabilitiesBankShort_title","parsed":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","id":1063,"fflname":"sdeLiabilitiesBankShort_title"},{"type":"noCacheLocked","refs":{"URA_sdeLiabilitiesBankShort_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1064,"name":"URA_sdeLiabilitiesBankShort_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1064,"fflname":"sdeLiabilitiesBankShort_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeTradePayables_value":true,"URA_sdeTradePayables_valid":true,"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krBankUndLieferantenverbindlichkeitenSub4_valid":true,"URA_krBankUndLieferantenverbindlichkeitenSub5_value":true},"formulaDependencys":[{"name":"URA_sdeTradePayables_valid","association":"refs","refId":1066},{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"refs","refId":1243},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_valid","association":"refs","refId":1264},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","association":"refs","refId":1268}],"deps":{},"original":"null","index":1065,"name":"URA_sdeTradePayables_value","parsed":"null","id":1065,"fflname":"sdeTradePayables_value"},{"type":"noCacheLocked","refs":{"URA_sdeTradePayables_valid":true},"formulaDependencys":[{"name":"URA_sdeTradePayables_value","association":"deps","refId":1065}],"deps":{"URA_sdeTradePayables_value":true},"original":"If(!isNaN(OnNA(sdeTradePayables,null)),'','Enter valid input.')","index":1066,"name":"URA_sdeTradePayables_valid","parsed":"!isNaN(OnNA(m[1065]('1065',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1066,"fflname":"sdeTradePayables_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeTradePayables_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon aus Lieferungen und Leistungen<$'","index":1067,"name":"URA_sdeTradePayables_title","parsed":"'$>>> davon aus Lieferungen und Leistungen<$'","id":1067,"fflname":"sdeTradePayables_title"},{"type":"noCacheLocked","refs":{"URA_sdeTradePayables_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1068,"name":"URA_sdeTradePayables_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1068,"fflname":"sdeTradePayables_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_valid":true,"URA_krNettoBilanzsummeRating_value":true,"URA_krNettoBilanzsummeRatingSub9_valid":true,"URA_krNettoBilanzsummeRatingSub10_value":true,"URA_krBankUndLieferantenanteilSub2_value":true,"URA_krVerbindlichkeiten_value":true,"URA_krVerbindlichkeitenSub6_valid":true,"URA_krVerbindlichkeitenSub7_value":true,"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krKurzfristigeVerbindlichkeitenSub4_valid":true,"URA_krKurzfristigeVerbindlichkeitenSub6_value":true,"URA_krRatingorientierteBilanzsummeSub1_value":true},"formulaDependencys":[{"name":"URA_sdeReceivedAdvanceOrdersCurrent_valid","association":"refs","refId":1070},{"name":"URA_krNettoBilanzsummeRating_value","association":"refs","refId":1178},{"name":"URA_krNettoBilanzsummeRatingSub9_valid","association":"refs","refId":1224},{"name":"URA_krNettoBilanzsummeRatingSub10_value","association":"refs","refId":1228},{"name":"URA_krBankUndLieferantenanteilSub2_value","association":"refs","refId":1273},{"name":"URA_krVerbindlichkeiten_value","association":"refs","refId":1303},{"name":"URA_krVerbindlichkeitenSub6_valid","association":"refs","refId":1334},{"name":"URA_krVerbindlichkeitenSub7_value","association":"refs","refId":1338},{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1353},{"name":"URA_krKurzfristigeVerbindlichkeitenSub4_valid","association":"refs","refId":1374},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","association":"refs","refId":1383},{"name":"URA_krRatingorientierteBilanzsummeSub1_value","association":"refs","refId":1473}],"deps":{},"original":"null","index":1069,"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","parsed":"null","id":1069,"fflname":"sdeReceivedAdvanceOrdersCurrent_value"},{"type":"noCacheLocked","refs":{"URA_sdeReceivedAdvanceOrdersCurrent_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1070,"name":"URA_sdeReceivedAdvanceOrdersCurrent_valid","parsed":"!isNaN(OnNA(m[1069]('1069',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1070,"fflname":"sdeReceivedAdvanceOrdersCurrent_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeReceivedAdvanceOrdersCurrent_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1071,"name":"URA_sdeReceivedAdvanceOrdersCurrent_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1071,"fflname":"sdeReceivedAdvanceOrdersCurrent_title"},{"type":"noCacheLocked","refs":{"URA_sdeReceivedAdvanceOrdersCurrent_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1072,"name":"URA_sdeReceivedAdvanceOrdersCurrent_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1072,"fflname":"sdeReceivedAdvanceOrdersCurrent_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeShortShareholderPayables_value":true,"URA_sdeShortShareholderPayables_valid":true,"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krKurzfristigeVerbindlichkeitenSub5_valid":true,"URA_krKurzfristigeVerbindlichkeitenSub6_value":true},"formulaDependencys":[{"name":"URA_sdeShortShareholderPayables_valid","association":"refs","refId":1074},{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1353},{"name":"URA_krKurzfristigeVerbindlichkeitenSub5_valid","association":"refs","refId":1379},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","association":"refs","refId":1383}],"deps":{},"original":"null","index":1073,"name":"URA_sdeShortShareholderPayables_value","parsed":"null","id":1073,"fflname":"sdeShortShareholderPayables_value"},{"type":"noCacheLocked","refs":{"URA_sdeShortShareholderPayables_valid":true},"formulaDependencys":[{"name":"URA_sdeShortShareholderPayables_value","association":"deps","refId":1073}],"deps":{"URA_sdeShortShareholderPayables_value":true},"original":"If(!isNaN(OnNA(sdeShortShareholderPayables,null)),'','Enter valid input.')","index":1074,"name":"URA_sdeShortShareholderPayables_valid","parsed":"!isNaN(OnNA(m[1073]('1073',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1074,"fflname":"sdeShortShareholderPayables_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeShortShareholderPayables_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Gesellschaftern, verbundenen Unternehmen, Beteiligungen<$'","index":1075,"name":"URA_sdeShortShareholderPayables_title","parsed":"'$>>> davon gegen?ber Gesellschaftern, verbundenen Unternehmen, Beteiligungen<$'","id":1075,"fflname":"sdeShortShareholderPayables_title"},{"type":"noCacheLocked","refs":{"URA_sdeShortShareholderPayables_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1076,"name":"URA_sdeShortShareholderPayables_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1076,"fflname":"sdeShortShareholderPayables_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeBalanceSheetTotal_value":true,"URA_sdeBalanceSheetTotal_valid":true},"formulaDependencys":[{"name":"URA_sdeEquity_value","association":"deps","refId":1021},{"name":"URA_sdeProvisions_value","association":"deps","refId":1033},{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037},{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057},{"name":"URA_sdeBalanceSheetTotal_valid","association":"refs","refId":1078}],"deps":{"URA_sdeEquity_value":true,"URA_sdeProvisions_value":true,"URA_sdeLiabilitiesLong_value":true,"URA_sdeLiabilitiesShort_value":true},"original":"sdeEquity+sdeProvisions+sdeLiabilitiesLong+sdeLiabilitiesShort","index":1077,"name":"URA_sdeBalanceSheetTotal_value","parsed":"m[1021]('1021',x,y.base,z,v,m)+m[1033]('1033',x,y.base,z,v,m)+m[1037]('1037',x,y.base,z,v,m)+m[1057]('1057',x,y.base,z,v,m)","id":1077,"fflname":"sdeBalanceSheetTotal_value"},{"type":"noCacheLocked","refs":{"URA_sdeBalanceSheetTotal_valid":true},"formulaDependencys":[{"name":"URA_sdeBalanceSheetTotal_value","association":"deps","refId":1077}],"deps":{"URA_sdeBalanceSheetTotal_value":true},"original":"If(!isNaN(OnNA(sdeBalanceSheetTotal,null)),'','Enter valid input.')","index":1078,"name":"URA_sdeBalanceSheetTotal_valid","parsed":"!isNaN(OnNA(m[1077]('1077',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1078,"fflname":"sdeBalanceSheetTotal_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeBalanceSheetTotal_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Bilanzsumme<$'","index":1079,"name":"URA_sdeBalanceSheetTotal_title","parsed":"'$>Bilanzsumme<$'","id":1079,"fflname":"sdeBalanceSheetTotal_title"},{"type":"noCacheLocked","refs":{"URA_sdeBalanceSheetTotal_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1080,"name":"URA_sdeBalanceSheetTotal_locked","parsed":"1","id":1080,"fflname":"sdeBalanceSheetTotal_locked"},{"type":"noCacheLocked","refs":{"URA_sdeBalanceSheetTotal_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1081,"name":"URA_sdeBalanceSheetTotal_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1081,"fflname":"sdeBalanceSheetTotal_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeSales_value":true,"URA_sdeSales_valid":true,"URA_krUmsatzerloese_value":true,"URA_krUmsatzerloeseSub1_valid":true,"URA_krUmsatzerloeseSub2_value":true},"formulaDependencys":[{"name":"URA_sdeSales_valid","association":"refs","refId":1083},{"name":"URA_krUmsatzerloese_value","association":"refs","refId":1388},{"name":"URA_krUmsatzerloeseSub1_valid","association":"refs","refId":1394},{"name":"URA_krUmsatzerloeseSub2_value","association":"refs","refId":1398}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1082,"name":"URA_sdeSales_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1082,"fflname":"sdeSales_value"},{"type":"noCacheLocked","refs":{"URA_sdeSales_valid":true},"formulaDependencys":[{"name":"URA_sdeSales_value","association":"deps","refId":1082}],"deps":{"URA_sdeSales_value":true},"original":"If(!isNaN(OnNA(sdeSales,null)),'','Enter valid input.')","index":1083,"name":"URA_sdeSales_valid","parsed":"!isNaN(OnNA(m[1082]('1082',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1083,"fflname":"sdeSales_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeSales_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Umsatz<$'","index":1084,"name":"URA_sdeSales_title","parsed":"'$>Umsatz<$'","id":1084,"fflname":"sdeSales_title"},{"type":"noCacheLocked","refs":{"URA_sdeSales_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1085,"name":"URA_sdeSales_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1085,"fflname":"sdeSales_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeDepreciation_value":true,"URA_sdeDepreciation_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub5_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeDepreciation_valid","association":"refs","refId":1087},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub5_valid","association":"refs","refId":1159},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1086,"name":"URA_sdeDepreciation_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1086,"fflname":"sdeDepreciation_value"},{"type":"noCacheLocked","refs":{"URA_sdeDepreciation_valid":true},"formulaDependencys":[{"name":"URA_sdeDepreciation_value","association":"deps","refId":1086}],"deps":{"URA_sdeDepreciation_value":true},"original":"If(!isNaN(OnNA(sdeDepreciation,null)),'','Enter valid input.')","index":1087,"name":"URA_sdeDepreciation_valid","parsed":"!isNaN(OnNA(m[1086]('1086',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1087,"fflname":"sdeDepreciation_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeDepreciation_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Abschreibungen auf immaterielles Verm?gen und Sachanlagen<$'","index":1088,"name":"URA_sdeDepreciation_title","parsed":"'$>Abschreibungen auf immaterielles Verm?gen und Sachanlagen<$'","id":1088,"fflname":"sdeDepreciation_title"},{"type":"noCacheLocked","refs":{"URA_sdeDepreciation_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1089,"name":"URA_sdeDepreciation_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1089,"fflname":"sdeDepreciation_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeResultCorrections_value":true,"URA_sdeResultCorrections_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub6_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeResultCorrections_valid","association":"refs","refId":1091},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub6_valid","association":"refs","refId":1164},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1090,"name":"URA_sdeResultCorrections_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1090,"fflname":"sdeResultCorrections_value"},{"type":"noCacheLocked","refs":{"URA_sdeResultCorrections_valid":true},"formulaDependencys":[{"name":"URA_sdeResultCorrections_value","association":"deps","refId":1090}],"deps":{"URA_sdeResultCorrections_value":true},"original":"If(!isNaN(OnNA(sdeResultCorrections,null)),'','Enter valid input.')","index":1091,"name":"URA_sdeResultCorrections_valid","parsed":"!isNaN(OnNA(m[1090]('1090',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1091,"fflname":"sdeResultCorrections_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeResultCorrections_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Einmalertrag / -aufwand<$'","index":1092,"name":"URA_sdeResultCorrections_title","parsed":"'$>Einmalertrag / -aufwand<$'","id":1092,"fflname":"sdeResultCorrections_title"},{"type":"noCacheLocked","refs":{"URA_sdeResultCorrections_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1093,"name":"URA_sdeResultCorrections_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1093,"fflname":"sdeResultCorrections_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeEBIT_value":true,"URA_sdeEBIT_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub1_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeEBIT_valid","association":"refs","refId":1095},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub1_valid","association":"refs","refId":1139},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1094,"name":"URA_sdeEBIT_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1094,"fflname":"sdeEBIT_value"},{"type":"noCacheLocked","refs":{"URA_sdeEBIT_valid":true},"formulaDependencys":[{"name":"URA_sdeEBIT_value","association":"deps","refId":1094}],"deps":{"URA_sdeEBIT_value":true},"original":"If(!isNaN(OnNA(sdeEBIT,null)),'','Enter valid input.')","index":1095,"name":"URA_sdeEBIT_valid","parsed":"!isNaN(OnNA(m[1094]('1094',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1095,"fflname":"sdeEBIT_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeEBIT_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Betriebsergebnis nach sonstigen Steuern<$'","index":1096,"name":"URA_sdeEBIT_title","parsed":"'$>Betriebsergebnis nach sonstigen Steuern<$'","id":1096,"fflname":"sdeEBIT_title"},{"type":"noCacheLocked","refs":{"URA_sdeEBIT_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1097,"name":"URA_sdeEBIT_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1097,"fflname":"sdeEBIT_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeInterestEarnings_value":true,"URA_sdeInterestEarnings_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub3_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeInterestEarnings_valid","association":"refs","refId":1099},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub3_valid","association":"refs","refId":1149},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1098,"name":"URA_sdeInterestEarnings_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1098,"fflname":"sdeInterestEarnings_value"},{"type":"noCacheLocked","refs":{"URA_sdeInterestEarnings_valid":true},"formulaDependencys":[{"name":"URA_sdeInterestEarnings_value","association":"deps","refId":1098}],"deps":{"URA_sdeInterestEarnings_value":true},"original":"If(!isNaN(OnNA(sdeInterestEarnings,null)),'','Enter valid input.')","index":1099,"name":"URA_sdeInterestEarnings_valid","parsed":"!isNaN(OnNA(m[1098]('1098',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1099,"fflname":"sdeInterestEarnings_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeInterestEarnings_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsertrag<$'","index":1100,"name":"URA_sdeInterestEarnings_title","parsed":"'$>Zinsertrag<$'","id":1100,"fflname":"sdeInterestEarnings_title"},{"type":"noCacheLocked","refs":{"URA_sdeInterestEarnings_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1101,"name":"URA_sdeInterestEarnings_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1101,"fflname":"sdeInterestEarnings_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeInterestExpenses_value":true,"URA_sdeInterestExpenses_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub4_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true,"URA_krZinsen_value":true,"URA_krZinsenSub1_valid":true,"URA_krZinsenSub2_value":true},"formulaDependencys":[{"name":"URA_sdeInterestExpenses_valid","association":"refs","refId":1103},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub4_valid","association":"refs","refId":1154},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173},{"name":"URA_krZinsen_value","association":"refs","refId":1288},{"name":"URA_krZinsenSub1_valid","association":"refs","refId":1294},{"name":"URA_krZinsenSub2_value","association":"refs","refId":1298}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1102,"name":"URA_sdeInterestExpenses_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1102,"fflname":"sdeInterestExpenses_value"},{"type":"noCacheLocked","refs":{"URA_sdeInterestExpenses_valid":true},"formulaDependencys":[{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102}],"deps":{"URA_sdeInterestExpenses_value":true},"original":"If(!isNaN(OnNA(sdeInterestExpenses,null)),'','Enter valid input.')","index":1103,"name":"URA_sdeInterestExpenses_valid","parsed":"!isNaN(OnNA(m[1102]('1102',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1103,"fflname":"sdeInterestExpenses_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeInterestExpenses_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","index":1104,"name":"URA_sdeInterestExpenses_title","parsed":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","id":1104,"fflname":"sdeInterestExpenses_title"},{"type":"noCacheLocked","refs":{"URA_sdeInterestExpenses_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1105,"name":"URA_sdeInterestExpenses_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1105,"fflname":"sdeInterestExpenses_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeParticipationEarnings_value":true,"URA_sdeParticipationEarnings_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub2_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeParticipationEarnings_valid","association":"refs","refId":1107},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub2_valid","association":"refs","refId":1144},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1106,"name":"URA_sdeParticipationEarnings_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1106,"fflname":"sdeParticipationEarnings_value"},{"type":"noCacheLocked","refs":{"URA_sdeParticipationEarnings_valid":true},"formulaDependencys":[{"name":"URA_sdeParticipationEarnings_value","association":"deps","refId":1106}],"deps":{"URA_sdeParticipationEarnings_value":true},"original":"If(!isNaN(OnNA(sdeParticipationEarnings,null)),'','Enter valid input.')","index":1107,"name":"URA_sdeParticipationEarnings_valid","parsed":"!isNaN(OnNA(m[1106]('1106',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1107,"fflname":"sdeParticipationEarnings_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeParticipationEarnings_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Sonstiges Finanz- und Beteiligungsergebnis ohne Abschreibung auf Finanzanlagen<$'","index":1108,"name":"URA_sdeParticipationEarnings_title","parsed":"'$>Sonstiges Finanz- und Beteiligungsergebnis ohne Abschreibung auf Finanzanlagen<$'","id":1108,"fflname":"sdeParticipationEarnings_title"},{"type":"noCacheLocked","refs":{"URA_sdeParticipationEarnings_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1109,"name":"URA_sdeParticipationEarnings_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1109,"fflname":"sdeParticipationEarnings_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeEntrepreneurFeeOutsideResult_value":true,"URA_sdeEntrepreneurFeeOutsideResult_valid":true,"URA_krOrdentlichesErgebnis_value":true,"URA_krOrdentlichesErgebnisSub7_valid":true,"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeEntrepreneurFeeOutsideResult_valid","association":"refs","refId":1111},{"name":"URA_krOrdentlichesErgebnis_value","association":"refs","refId":1133},{"name":"URA_krOrdentlichesErgebnisSub7_valid","association":"refs","refId":1169},{"name":"URA_krOrdentlichesErgebnisSub8_value","association":"refs","refId":1173}],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1110,"name":"URA_sdeEntrepreneurFeeOutsideResult_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1110,"fflname":"sdeEntrepreneurFeeOutsideResult_value"},{"type":"noCacheLocked","refs":{"URA_sdeEntrepreneurFeeOutsideResult_valid":true},"formulaDependencys":[{"name":"URA_sdeEntrepreneurFeeOutsideResult_value","association":"deps","refId":1110}],"deps":{"URA_sdeEntrepreneurFeeOutsideResult_value":true},"original":"If(!isNaN(OnNA(sdeEntrepreneurFeeOutsideResult,null)),'','Enter valid input.')","index":1111,"name":"URA_sdeEntrepreneurFeeOutsideResult_valid","parsed":"!isNaN(OnNA(m[1110]('1110',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1111,"fflname":"sdeEntrepreneurFeeOutsideResult_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdeEntrepreneurFeeOutsideResult_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Unternehmerlohn au?erhalb des Betriebsergebnisses<$'","index":1112,"name":"URA_sdeEntrepreneurFeeOutsideResult_title","parsed":"'$>Unternehmerlohn au?erhalb des Betriebsergebnisses<$'","id":1112,"fflname":"sdeEntrepreneurFeeOutsideResult_title"},{"type":"noCacheLocked","refs":{"URA_sdeEntrepreneurFeeOutsideResult_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1113,"name":"URA_sdeEntrepreneurFeeOutsideResult_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1113,"fflname":"sdeEntrepreneurFeeOutsideResult_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdePD_value":true,"URA_sdePD_valid":true},"formulaDependencys":[{"name":"URA_sdePD_valid","association":"refs","refId":1115}],"deps":{},"original":"'if(krZValue==NA,NA,OnER(1/(1+Exp(krZValue)*krRDFsample*(1-krInsolvenzquote)/krInsolvenzquote),NA))'","index":1114,"name":"URA_sdePD_value","parsed":"'if(krZValue==NA,NA,OnER(1/(1+Exp(krZValue)*krRDFsample*(1-krInsolvenzquote)/krInsolvenzquote),NA))'","id":1114,"fflname":"sdePD_value"},{"type":"noCacheLocked","refs":{"URA_sdePD_valid":true},"formulaDependencys":[{"name":"URA_sdePD_value","association":"deps","refId":1114}],"deps":{"URA_sdePD_value":true},"original":"If(!isNaN(OnNA(sdePD,null)),'','Enter valid input.')","index":1115,"name":"URA_sdePD_valid","parsed":"!isNaN(OnNA(m[1114]('1114',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1115,"fflname":"sdePD_valid"},{"type":"noCacheUnlocked","refs":{"URA_sdePD_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ausfallwahrscheinlichkeit<$'","index":1116,"name":"URA_sdePD_title","parsed":"'$>Ausfallwahrscheinlichkeit<$'","id":1116,"fflname":"sdePD_title"},{"type":"noCacheLocked","refs":{"URA_sdePD_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1117,"name":"URA_sdePD_locked","parsed":"1","id":1117,"fflname":"sdePD_locked"},{"type":"noCacheLocked","refs":{"URA_sdePD_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1118,"name":"URA_sdePD_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1118,"fflname":"sdePD_visible"},{"type":"noCacheUnlocked","refs":{"URA_sdeURARatingKlasse_value":true},"formulaDependencys":[{"name":"URA_krPD_value","association":"deps","refId":1527}],"deps":{"URA_krPD_value":true},"original":"If(IsTrend,String(If(krPD==NA,' ',Case(krPD,[1e-5,'AAA'||2e-5,'AA+'||4e-5,'AA'||8e-5,'AA-'||1e-4,'A+'||2e-4,'A'||4e-4,'A-'||9e-4,'BBB+'||.0017,'BBB'||.0042,'BBB-'||.0087,'BB+'||.0156,'BB'||.0281,'BB-'||.0468,'B+'||.0716,'B'||.1162,'B-'||.154,'CCC+'||.1738,'CCC'||.215,'CCC-'||.26,'CC'||.26,'D']))),String(If(krPD==NA,' ',Case(krPD,[1e-5,'AAA'||2e-5,'AA+'||4e-5,'AA'||8e-5,'AA-'||1e-4,'A+'||2e-4,'A'||4e-4,'A-'||9e-4,'BBB+'||.0017,'BBB'||.0042,'BBB-'||.0087,'BB+'||.0156,'BB'||.0281,'BB-'||.0468,'B+'||.0716,'B'||.1162,'B-'||.154,'CCC+'||.1738,'CCC'||.215,'CCC-'||.26,'CC'||.26,'D']))))","index":1119,"name":"URA_sdeURARatingKlasse_value","parsed":"x.istrend?String(m[1527]('1527',x,y.base,z,v,m)==NA?' ':(__c0s0=m[1527]('1527',x,y.base,z,v,m),__c0s0 === 0.00001?'AAA':__c0s0 === 0.00002?'AA+':__c0s0 === 0.00004?'AA':__c0s0 === 0.00008?'AA-':__c0s0 === 0.0001?'A+':__c0s0 === 0.0002?'A':__c0s0 === 0.0004?'A-':__c0s0 === 0.0009?'BBB+':__c0s0 === 0.0017?'BBB':__c0s0 === 0.0042?'BBB-':__c0s0 === 0.0087?'BB+':__c0s0 === 0.0156?'BB':__c0s0 === 0.0281?'BB-':__c0s0 === 0.0468?'B+':__c0s0 === 0.0716?'B':__c0s0 === 0.1162?'B-':__c0s0 === 0.154?'CCC+':__c0s0 === 0.1738?'CCC':__c0s0 === 0.215?'CCC-':__c0s0 === 0.26?'CC':__c0s0 === 0.26?'D':NA)):String(m[1527]('1527',x,y.base,z,v,m)==NA?' ':(__c0s1=m[1527]('1527',x,y.base,z,v,m),__c0s1 === 0.00001?'AAA':__c0s1 === 0.00002?'AA+':__c0s1 === 0.00004?'AA':__c0s1 === 0.00008?'AA-':__c0s1 === 0.0001?'A+':__c0s1 === 0.0002?'A':__c0s1 === 0.0004?'A-':__c0s1 === 0.0009?'BBB+':__c0s1 === 0.0017?'BBB':__c0s1 === 0.0042?'BBB-':__c0s1 === 0.0087?'BB+':__c0s1 === 0.0156?'BB':__c0s1 === 0.0281?'BB-':__c0s1 === 0.0468?'B+':__c0s1 === 0.0716?'B':__c0s1 === 0.1162?'B-':__c0s1 === 0.154?'CCC+':__c0s1 === 0.1738?'CCC':__c0s1 === 0.215?'CCC-':__c0s1 === 0.26?'CC':__c0s1 === 0.26?'D':NA))","id":1119,"fflname":"sdeURARatingKlasse_value"},{"type":"noCacheUnlocked","refs":{"URA_sdeURARatingKlasse_title":true},"formulaDependencys":[],"deps":{},"original":"'URA $>Ratingklasse<$'","index":1120,"name":"URA_sdeURARatingKlasse_title","parsed":"'URA $>Ratingklasse<$'","id":1120,"fflname":"sdeURARatingKlasse_title"},{"type":"noCacheLocked","refs":{"URA_sdeURARatingKlasse_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1121,"name":"URA_sdeURARatingKlasse_locked","parsed":"1","id":1121,"fflname":"sdeURARatingKlasse_locked"},{"type":"noCacheLocked","refs":{"URA_sdeURARatingKlasse_visible":true},"formulaDependencys":[{"name":"URA_SimpleEntryFolder_visible","association":"deps","refId":1008}],"deps":{"URA_SimpleEntryFolder_visible":true},"original":"SimpleEntryFolder.visible&&1","index":1122,"name":"URA_sdeURARatingKlasse_visible","parsed":"m[1008]('1008',x,y.base,z,v,m)&&1","id":1122,"fflname":"sdeURARatingKlasse_visible"},{"type":"noCacheUnlocked","refs":{"URA_RatioFolder_value":true,"URA_RatioFolder_valid":true},"formulaDependencys":[{"name":"URA_RatioFolder_valid","association":"refs","refId":1124}],"deps":{},"original":"null","index":1123,"name":"URA_RatioFolder_value","parsed":"null","id":1123,"fflname":"RatioFolder_value"},{"type":"noCacheLocked","refs":{"URA_RatioFolder_valid":true},"formulaDependencys":[{"name":"URA_RatioFolder_value","association":"deps","refId":1123}],"deps":{"URA_RatioFolder_value":true},"original":"If(!isNaN(OnNA(RatioFolder,null)),'','Enter valid input.')","index":1124,"name":"URA_RatioFolder_valid","parsed":"!isNaN(OnNA(m[1123]('1123',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1124,"fflname":"RatioFolder_valid"},{"type":"noCacheUnlocked","refs":{"URA_RatioFolder_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Rating Kennzahlen<$'","index":1125,"name":"URA_RatioFolder_title","parsed":"'$>Rating Kennzahlen<$'","id":1125,"fflname":"RatioFolder_title"},{"type":"noCacheLocked","refs":{"URA_RatioFolder_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1126,"name":"URA_RatioFolder_locked","parsed":"1","id":1126,"fflname":"RatioFolder_locked"},{"type":"noCacheLocked","refs":{"URA_RatioFolder_visible":true,"URA_krAnteilOrdentlichenErgebnisses_visible":true,"URA_krBankUndLieferantenanteil_visible":true,"URA_krFremdKapitalzinslast_visible":true,"URA_krAnteilKurzfristigeVerbindlichkeiten_visible":true,"URA_krAnteilEigenmittel_visible":true},"formulaDependencys":[{"name":"URA_Q_ROOT_visible","association":"deps"},{"name":"URA_krAnteilOrdentlichenErgebnisses_visible","association":"refs","refId":1132},{"name":"URA_krBankUndLieferantenanteil_visible","association":"refs","refId":1242},{"name":"URA_krFremdKapitalzinslast_visible","association":"refs","refId":1287},{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","association":"refs","refId":1352},{"name":"URA_krAnteilEigenmittel_visible","association":"refs","refId":1412}],"deps":{"URA_Q_ROOT_visible":true},"original":"Q_ROOT.visible&&1","index":1127,"name":"URA_RatioFolder_visible","parsed":"true&&1","id":1127,"fflname":"RatioFolder_visible"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilOrdentlichenErgebnisses_value":true,"URA_krAnteilOrdentlichenErgebnisses_valid":true,"URA_krAnteilOrdentlichenErgebnissesSub3_valid":true,"URA_krZValue_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178},{"name":"URA_krOrdentlichesErgebnis_value","association":"deps","refId":1133},{"name":"URA_krAnteilOrdentlichenErgebnisses_valid","association":"refs","refId":1129},{"name":"URA_krAnteilOrdentlichenErgebnissesSub3_valid","association":"refs","refId":1234},{"name":"URA_krZValue_value","association":"refs","refId":1517}],"deps":{"URA_krNettoBilanzsummeRating_value":true,"URA_krOrdentlichesErgebnis_value":true},"original":"OnER(If(krNettoBilanzsummeRating<0,NA,GetValue(krOrdentlichesErgebnis,T,1)/krNettoBilanzsummeRating),NA)","index":1128,"name":"URA_krAnteilOrdentlichenErgebnisses_value","parsed":"OnER(m[1178]('1178',x,y.base,z,v,m)<0?NA:GetValue(m[1133]('1133',x,y.base,z,v,m),x,1)/m[1178]('1178',x,y.base,z,v,m),NA)","id":1128,"fflname":"krAnteilOrdentlichenErgebnisses_value"},{"type":"noCacheLocked","refs":{"URA_krAnteilOrdentlichenErgebnisses_valid":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_value","association":"deps","refId":1128}],"deps":{"URA_krAnteilOrdentlichenErgebnisses_value":true},"original":"If(!isNaN(OnNA(krAnteilOrdentlichenErgebnisses,null)),'','Enter valid input.')","index":1129,"name":"URA_krAnteilOrdentlichenErgebnisses_valid","parsed":"!isNaN(OnNA(m[1128]('1128',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1129,"fflname":"krAnteilOrdentlichenErgebnisses_valid"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilOrdentlichenErgebnisses_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Anteil des ordentlichen Ergebnisses<$'","index":1130,"name":"URA_krAnteilOrdentlichenErgebnisses_title","parsed":"'$>Anteil des ordentlichen Ergebnisses<$'","id":1130,"fflname":"krAnteilOrdentlichenErgebnisses_title"},{"type":"noCacheLocked","refs":{"URA_krAnteilOrdentlichenErgebnisses_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1131,"name":"URA_krAnteilOrdentlichenErgebnisses_locked","parsed":"1","id":1131,"fflname":"krAnteilOrdentlichenErgebnisses_locked"},{"type":"noCacheLocked","refs":{"URA_krAnteilOrdentlichenErgebnisses_visible":true,"URA_krOrdentlichesErgebnis_visible":true,"URA_krNettoBilanzsummeRating_visible":true,"URA_krAnteilOrdentlichenErgebnissesSub3_visible":true},"formulaDependencys":[{"name":"URA_RatioFolder_visible","association":"deps","refId":1127},{"name":"URA_krOrdentlichesErgebnis_visible","association":"refs","refId":1137},{"name":"URA_krNettoBilanzsummeRating_visible","association":"refs","refId":1182},{"name":"URA_krAnteilOrdentlichenErgebnissesSub3_visible","association":"refs","refId":1237}],"deps":{"URA_RatioFolder_visible":true},"original":"RatioFolder.visible&&1","index":1132,"name":"URA_krAnteilOrdentlichenErgebnisses_visible","parsed":"m[1127]('1127',x,y.base,z,v,m)&&1","id":1132,"fflname":"krAnteilOrdentlichenErgebnisses_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnis_value":true,"URA_krAnteilOrdentlichenErgebnisses_value":true,"URA_krOrdentlichesErgebnis_valid":true,"URA_krOrdentlichesErgebnisSub8_valid":true,"URA_krAnteilOrdentlichenErgebnissesSub3_value":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_value","association":"refs","refId":1128},{"name":"URA_sdeEBIT_value","association":"deps","refId":1094},{"name":"URA_sdeParticipationEarnings_value","association":"deps","refId":1106},{"name":"URA_sdeInterestEarnings_value","association":"deps","refId":1098},{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102},{"name":"URA_sdeDepreciation_value","association":"deps","refId":1086},{"name":"URA_sdeResultCorrections_value","association":"deps","refId":1090},{"name":"URA_sdeEntrepreneurFeeOutsideResult_value","association":"deps","refId":1110},{"name":"URA_krOrdentlichesErgebnis_valid","association":"refs","refId":1134},{"name":"URA_krOrdentlichesErgebnisSub8_valid","association":"refs","refId":1174},{"name":"URA_krAnteilOrdentlichenErgebnissesSub3_value","association":"refs","refId":1233}],"deps":{"URA_sdeEBIT_value":true,"URA_sdeParticipationEarnings_value":true,"URA_sdeInterestEarnings_value":true,"URA_sdeInterestExpenses_value":true,"URA_sdeDepreciation_value":true,"URA_sdeResultCorrections_value":true,"URA_sdeEntrepreneurFeeOutsideResult_value":true},"original":"If(TimeAggregated,Aggregate(Self,x),sdeEBIT+sdeParticipationEarnings+sdeInterestEarnings-sdeInterestExpenses+sdeDepreciation-sdeResultCorrections-sdeEntrepreneurFeeOutsideResult)","index":1133,"name":"URA_krOrdentlichesErgebnis_value","parsed":"x.aggregated?Aggregate(Self,x):m[1094]('1094',x,y.base,z,v,m)+m[1106]('1106',x,y.base,z,v,m)+m[1098]('1098',x,y.base,z,v,m)-m[1102]('1102',x,y.base,z,v,m)+m[1086]('1086',x,y.base,z,v,m)-m[1090]('1090',x,y.base,z,v,m)-m[1110]('1110',x,y.base,z,v,m)","id":1133,"fflname":"krOrdentlichesErgebnis_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnis_valid":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_value","association":"deps","refId":1133}],"deps":{"URA_krOrdentlichesErgebnis_value":true},"original":"If(!isNaN(OnNA(krOrdentlichesErgebnis,null)),'','Enter valid input.')","index":1134,"name":"URA_krOrdentlichesErgebnis_valid","parsed":"!isNaN(OnNA(m[1133]('1133',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1134,"fflname":"krOrdentlichesErgebnis_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnis_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ordentliches Ergebnis<$'","index":1135,"name":"URA_krOrdentlichesErgebnis_title","parsed":"'$>Ordentliches Ergebnis<$'","id":1135,"fflname":"krOrdentlichesErgebnis_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnis_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1136,"name":"URA_krOrdentlichesErgebnis_locked","parsed":"1","id":1136,"fflname":"krOrdentlichesErgebnis_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnis_visible":true,"URA_krOrdentlichesErgebnisSub1_visible":true,"URA_krOrdentlichesErgebnisSub2_visible":true,"URA_krOrdentlichesErgebnisSub3_visible":true,"URA_krOrdentlichesErgebnisSub4_visible":true,"URA_krOrdentlichesErgebnisSub5_visible":true,"URA_krOrdentlichesErgebnisSub6_visible":true,"URA_krOrdentlichesErgebnisSub7_visible":true,"URA_krOrdentlichesErgebnisSub8_visible":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_visible","association":"deps","refId":1132},{"name":"URA_krOrdentlichesErgebnisSub1_visible","association":"refs","refId":1142},{"name":"URA_krOrdentlichesErgebnisSub2_visible","association":"refs","refId":1147},{"name":"URA_krOrdentlichesErgebnisSub3_visible","association":"refs","refId":1152},{"name":"URA_krOrdentlichesErgebnisSub4_visible","association":"refs","refId":1157},{"name":"URA_krOrdentlichesErgebnisSub5_visible","association":"refs","refId":1162},{"name":"URA_krOrdentlichesErgebnisSub6_visible","association":"refs","refId":1167},{"name":"URA_krOrdentlichesErgebnisSub7_visible","association":"refs","refId":1172},{"name":"URA_krOrdentlichesErgebnisSub8_visible","association":"refs","refId":1177}],"deps":{"URA_krAnteilOrdentlichenErgebnisses_visible":true},"original":"krAnteilOrdentlichenErgebnisses.visible&&1","index":1137,"name":"URA_krOrdentlichesErgebnis_visible","parsed":"m[1132]('1132',x,y.base,z,v,m)&&1","id":1137,"fflname":"krOrdentlichesErgebnis_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub1_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1138,"name":"URA_krOrdentlichesErgebnisSub1_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1138,"fflname":"krOrdentlichesErgebnisSub1_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeEBIT_value","association":"deps","refId":1094}],"deps":{"URA_sdeEBIT_value":true},"original":"If(!isNaN(OnNA(sdeEBIT,null)),'','Enter valid input.')","index":1139,"name":"URA_krOrdentlichesErgebnisSub1_valid","parsed":"!isNaN(OnNA(m[1094]('1094',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1139,"fflname":"krOrdentlichesErgebnisSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Betriebsergebnis nach sonstigen Steuern<$'","index":1140,"name":"URA_krOrdentlichesErgebnisSub1_title","parsed":"'$>Betriebsergebnis nach sonstigen Steuern<$'","id":1140,"fflname":"krOrdentlichesErgebnisSub1_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1141,"name":"URA_krOrdentlichesErgebnisSub1_locked","parsed":"1","id":1141,"fflname":"krOrdentlichesErgebnisSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub1_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1142,"name":"URA_krOrdentlichesErgebnisSub1_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1142,"fflname":"krOrdentlichesErgebnisSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub2_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1143,"name":"URA_krOrdentlichesErgebnisSub2_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1143,"fflname":"krOrdentlichesErgebnisSub2_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub2_valid":true},"formulaDependencys":[{"name":"URA_sdeParticipationEarnings_value","association":"deps","refId":1106}],"deps":{"URA_sdeParticipationEarnings_value":true},"original":"If(!isNaN(OnNA(sdeParticipationEarnings,null)),'','Enter valid input.')","index":1144,"name":"URA_krOrdentlichesErgebnisSub2_valid","parsed":"!isNaN(OnNA(m[1106]('1106',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1144,"fflname":"krOrdentlichesErgebnisSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Sonstiges Finanz- und Beteiligungsergebnis ohne Abschreibung auf Finanzanlagen<$'","index":1145,"name":"URA_krOrdentlichesErgebnisSub2_title","parsed":"'$>Sonstiges Finanz- und Beteiligungsergebnis ohne Abschreibung auf Finanzanlagen<$'","id":1145,"fflname":"krOrdentlichesErgebnisSub2_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1146,"name":"URA_krOrdentlichesErgebnisSub2_locked","parsed":"1","id":1146,"fflname":"krOrdentlichesErgebnisSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub2_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1147,"name":"URA_krOrdentlichesErgebnisSub2_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1147,"fflname":"krOrdentlichesErgebnisSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub3_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1148,"name":"URA_krOrdentlichesErgebnisSub3_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1148,"fflname":"krOrdentlichesErgebnisSub3_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeInterestEarnings_value","association":"deps","refId":1098}],"deps":{"URA_sdeInterestEarnings_value":true},"original":"If(!isNaN(OnNA(sdeInterestEarnings,null)),'','Enter valid input.')","index":1149,"name":"URA_krOrdentlichesErgebnisSub3_valid","parsed":"!isNaN(OnNA(m[1098]('1098',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1149,"fflname":"krOrdentlichesErgebnisSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsertrag<$'","index":1150,"name":"URA_krOrdentlichesErgebnisSub3_title","parsed":"'$>Zinsertrag<$'","id":1150,"fflname":"krOrdentlichesErgebnisSub3_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1151,"name":"URA_krOrdentlichesErgebnisSub3_locked","parsed":"1","id":1151,"fflname":"krOrdentlichesErgebnisSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub3_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1152,"name":"URA_krOrdentlichesErgebnisSub3_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1152,"fflname":"krOrdentlichesErgebnisSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub4_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1153,"name":"URA_krOrdentlichesErgebnisSub4_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1153,"fflname":"krOrdentlichesErgebnisSub4_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102}],"deps":{"URA_sdeInterestExpenses_value":true},"original":"If(!isNaN(OnNA(sdeInterestExpenses,null)),'','Enter valid input.')","index":1154,"name":"URA_krOrdentlichesErgebnisSub4_valid","parsed":"!isNaN(OnNA(m[1102]('1102',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1154,"fflname":"krOrdentlichesErgebnisSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","index":1155,"name":"URA_krOrdentlichesErgebnisSub4_title","parsed":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","id":1155,"fflname":"krOrdentlichesErgebnisSub4_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1156,"name":"URA_krOrdentlichesErgebnisSub4_locked","parsed":"1","id":1156,"fflname":"krOrdentlichesErgebnisSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub4_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1157,"name":"URA_krOrdentlichesErgebnisSub4_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1157,"fflname":"krOrdentlichesErgebnisSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub5_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1158,"name":"URA_krOrdentlichesErgebnisSub5_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1158,"fflname":"krOrdentlichesErgebnisSub5_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub5_valid":true},"formulaDependencys":[{"name":"URA_sdeDepreciation_value","association":"deps","refId":1086}],"deps":{"URA_sdeDepreciation_value":true},"original":"If(!isNaN(OnNA(sdeDepreciation,null)),'','Enter valid input.')","index":1159,"name":"URA_krOrdentlichesErgebnisSub5_valid","parsed":"!isNaN(OnNA(m[1086]('1086',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1159,"fflname":"krOrdentlichesErgebnisSub5_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub5_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Abschreibungen auf immaterielles Verm?gen und Sachanlagen<$'","index":1160,"name":"URA_krOrdentlichesErgebnisSub5_title","parsed":"'$>Abschreibungen auf immaterielles Verm?gen und Sachanlagen<$'","id":1160,"fflname":"krOrdentlichesErgebnisSub5_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub5_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1161,"name":"URA_krOrdentlichesErgebnisSub5_locked","parsed":"1","id":1161,"fflname":"krOrdentlichesErgebnisSub5_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub5_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1162,"name":"URA_krOrdentlichesErgebnisSub5_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1162,"fflname":"krOrdentlichesErgebnisSub5_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub6_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1163,"name":"URA_krOrdentlichesErgebnisSub6_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1163,"fflname":"krOrdentlichesErgebnisSub6_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub6_valid":true},"formulaDependencys":[{"name":"URA_sdeResultCorrections_value","association":"deps","refId":1090}],"deps":{"URA_sdeResultCorrections_value":true},"original":"If(!isNaN(OnNA(sdeResultCorrections,null)),'','Enter valid input.')","index":1164,"name":"URA_krOrdentlichesErgebnisSub6_valid","parsed":"!isNaN(OnNA(m[1090]('1090',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1164,"fflname":"krOrdentlichesErgebnisSub6_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub6_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Einmalertrag / -aufwand<$'","index":1165,"name":"URA_krOrdentlichesErgebnisSub6_title","parsed":"'$>Einmalertrag / -aufwand<$'","id":1165,"fflname":"krOrdentlichesErgebnisSub6_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub6_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1166,"name":"URA_krOrdentlichesErgebnisSub6_locked","parsed":"1","id":1166,"fflname":"krOrdentlichesErgebnisSub6_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub6_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1167,"name":"URA_krOrdentlichesErgebnisSub6_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1167,"fflname":"krOrdentlichesErgebnisSub6_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub7_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1168,"name":"URA_krOrdentlichesErgebnisSub7_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1168,"fflname":"krOrdentlichesErgebnisSub7_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub7_valid":true},"formulaDependencys":[{"name":"URA_sdeEntrepreneurFeeOutsideResult_value","association":"deps","refId":1110}],"deps":{"URA_sdeEntrepreneurFeeOutsideResult_value":true},"original":"If(!isNaN(OnNA(sdeEntrepreneurFeeOutsideResult,null)),'','Enter valid input.')","index":1169,"name":"URA_krOrdentlichesErgebnisSub7_valid","parsed":"!isNaN(OnNA(m[1110]('1110',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1169,"fflname":"krOrdentlichesErgebnisSub7_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub7_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Unternehmerlohn au?erhalb des Betriebsergebnisses<$'","index":1170,"name":"URA_krOrdentlichesErgebnisSub7_title","parsed":"'$>Unternehmerlohn au?erhalb des Betriebsergebnisses<$'","id":1170,"fflname":"krOrdentlichesErgebnisSub7_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub7_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1171,"name":"URA_krOrdentlichesErgebnisSub7_locked","parsed":"1","id":1171,"fflname":"krOrdentlichesErgebnisSub7_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub7_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1172,"name":"URA_krOrdentlichesErgebnisSub7_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1172,"fflname":"krOrdentlichesErgebnisSub7_visible"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub8_value":true},"formulaDependencys":[{"name":"URA_sdeEBIT_value","association":"deps","refId":1094},{"name":"URA_sdeParticipationEarnings_value","association":"deps","refId":1106},{"name":"URA_sdeInterestEarnings_value","association":"deps","refId":1098},{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102},{"name":"URA_sdeDepreciation_value","association":"deps","refId":1086},{"name":"URA_sdeResultCorrections_value","association":"deps","refId":1090},{"name":"URA_sdeEntrepreneurFeeOutsideResult_value","association":"deps","refId":1110}],"deps":{"URA_sdeEBIT_value":true,"URA_sdeParticipationEarnings_value":true,"URA_sdeInterestEarnings_value":true,"URA_sdeInterestExpenses_value":true,"URA_sdeDepreciation_value":true,"URA_sdeResultCorrections_value":true,"URA_sdeEntrepreneurFeeOutsideResult_value":true},"original":"If(TimeAggregated,Aggregate(Self,x),sdeEBIT+sdeParticipationEarnings+sdeInterestEarnings-sdeInterestExpenses+sdeDepreciation-sdeResultCorrections-sdeEntrepreneurFeeOutsideResult)","index":1173,"name":"URA_krOrdentlichesErgebnisSub8_value","parsed":"x.aggregated?Aggregate(Self,x):m[1094]('1094',x,y.base,z,v,m)+m[1106]('1106',x,y.base,z,v,m)+m[1098]('1098',x,y.base,z,v,m)-m[1102]('1102',x,y.base,z,v,m)+m[1086]('1086',x,y.base,z,v,m)-m[1090]('1090',x,y.base,z,v,m)-m[1110]('1110',x,y.base,z,v,m)","id":1173,"fflname":"krOrdentlichesErgebnisSub8_value"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub8_valid":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_value","association":"deps","refId":1133}],"deps":{"URA_krOrdentlichesErgebnis_value":true},"original":"If(!isNaN(OnNA(krOrdentlichesErgebnis,null)),'','Enter valid input.')","index":1174,"name":"URA_krOrdentlichesErgebnisSub8_valid","parsed":"!isNaN(OnNA(m[1133]('1133',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1174,"fflname":"krOrdentlichesErgebnisSub8_valid"},{"type":"noCacheUnlocked","refs":{"URA_krOrdentlichesErgebnisSub8_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ordentliches Ergebnis<$'","index":1175,"name":"URA_krOrdentlichesErgebnisSub8_title","parsed":"'$>Ordentliches Ergebnis<$'","id":1175,"fflname":"krOrdentlichesErgebnisSub8_title"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub8_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1176,"name":"URA_krOrdentlichesErgebnisSub8_locked","parsed":"1","id":1176,"fflname":"krOrdentlichesErgebnisSub8_locked"},{"type":"noCacheLocked","refs":{"URA_krOrdentlichesErgebnisSub8_visible":true},"formulaDependencys":[{"name":"URA_krOrdentlichesErgebnis_visible","association":"deps","refId":1137}],"deps":{"URA_krOrdentlichesErgebnis_visible":true},"original":"krOrdentlichesErgebnis.visible&&1","index":1177,"name":"URA_krOrdentlichesErgebnisSub8_visible","parsed":"m[1137]('1137',x,y.base,z,v,m)&&1","id":1177,"fflname":"krOrdentlichesErgebnisSub8_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRating_value":true,"URA_krAnteilOrdentlichenErgebnisses_value":true,"URA_krNettoBilanzsummeRating_valid":true,"URA_krNettoBilanzsummeRatingSub10_valid":true,"URA_krAnteilOrdentlichenErgebnissesSub3_value":true,"URA_krBankUndLieferantenanteil_value":true,"URA_krBankUndLieferantenanteilSub2_valid":true,"URA_krBankUndLieferantenanteilSub3_value":true,"URA_krRatingorientierteBilanzsumme_value":true,"URA_krRatingorientierteBilanzsummeSub1_valid":true,"URA_krRatingorientierteBilanzsummeSub5_value":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_value","association":"refs","refId":1128},{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"deps","refId":1213},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069},{"name":"URA_krNettoBilanzsummeRating_valid","association":"refs","refId":1179},{"name":"URA_krNettoBilanzsummeRatingSub10_valid","association":"refs","refId":1229},{"name":"URA_krAnteilOrdentlichenErgebnissesSub3_value","association":"refs","refId":1233},{"name":"URA_krBankUndLieferantenanteil_value","association":"refs","refId":1238},{"name":"URA_krBankUndLieferantenanteilSub2_valid","association":"refs","refId":1274},{"name":"URA_krBankUndLieferantenanteilSub3_value","association":"refs","refId":1278},{"name":"URA_krRatingorientierteBilanzsumme_value","association":"refs","refId":1468},{"name":"URA_krRatingorientierteBilanzsummeSub1_valid","association":"refs","refId":1474},{"name":"URA_krRatingorientierteBilanzsummeSub5_value","association":"refs","refId":1493}],"deps":{"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"krNettoBilanzsummeRatingSub7-sdeLongReceivedAdvanceOrdersCurrent-sdeReceivedAdvanceOrdersCurrent","index":1178,"name":"URA_krNettoBilanzsummeRating_value","parsed":"m[1213]('1213',x,y.base,z,v,m)-m[1049]('1049',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)","id":1178,"fflname":"krNettoBilanzsummeRating_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRating_valid":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178}],"deps":{"URA_krNettoBilanzsummeRating_value":true},"original":"If(!isNaN(OnNA(krNettoBilanzsummeRating,null)),'','Enter valid input.')","index":1179,"name":"URA_krNettoBilanzsummeRating_valid","parsed":"!isNaN(OnNA(m[1178]('1178',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1179,"fflname":"krNettoBilanzsummeRating_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRating_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Netto Bilanzsumme f?r das Rating<$'","index":1180,"name":"URA_krNettoBilanzsummeRating_title","parsed":"'$>Netto Bilanzsumme f?r das Rating<$'","id":1180,"fflname":"krNettoBilanzsummeRating_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRating_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1181,"name":"URA_krNettoBilanzsummeRating_locked","parsed":"1","id":1181,"fflname":"krNettoBilanzsummeRating_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRating_visible":true,"URA_krNettoBilanzsummeRatingSub1_visible":true,"URA_krNettoBilanzsummeRatingSub2_visible":true,"URA_krNettoBilanzsummeRatingSub3_visible":true,"URA_krNettoBilanzsummeRatingSub4_visible":true,"URA_krNettoBilanzsummeRatingSub5_visible":true,"URA_krNettoBilanzsummeRatingSub6_visible":true,"URA_krNettoBilanzsummeRatingSub7_visible":true,"URA_krNettoBilanzsummeRatingSub8_visible":true,"URA_krNettoBilanzsummeRatingSub9_visible":true,"URA_krNettoBilanzsummeRatingSub10_visible":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_visible","association":"deps","refId":1132},{"name":"URA_krNettoBilanzsummeRatingSub1_visible","association":"refs","refId":1187},{"name":"URA_krNettoBilanzsummeRatingSub2_visible","association":"refs","refId":1192},{"name":"URA_krNettoBilanzsummeRatingSub3_visible","association":"refs","refId":1197},{"name":"URA_krNettoBilanzsummeRatingSub4_visible","association":"refs","refId":1202},{"name":"URA_krNettoBilanzsummeRatingSub5_visible","association":"refs","refId":1207},{"name":"URA_krNettoBilanzsummeRatingSub6_visible","association":"refs","refId":1212},{"name":"URA_krNettoBilanzsummeRatingSub7_visible","association":"refs","refId":1217},{"name":"URA_krNettoBilanzsummeRatingSub8_visible","association":"refs","refId":1222},{"name":"URA_krNettoBilanzsummeRatingSub9_visible","association":"refs","refId":1227},{"name":"URA_krNettoBilanzsummeRatingSub10_visible","association":"refs","refId":1232}],"deps":{"URA_krAnteilOrdentlichenErgebnisses_visible":true},"original":"krAnteilOrdentlichenErgebnisses.visible&&1","index":1182,"name":"URA_krNettoBilanzsummeRating_visible","parsed":"m[1132]('1132',x,y.base,z,v,m)&&1","id":1182,"fflname":"krNettoBilanzsummeRating_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub1_value":true,"URA_krNettoBilanzsummeRatingSub1_valid":true},"formulaDependencys":[{"name":"URA_krBilanziellesEigenkapitalBrutto_value","association":"deps","refId":1423},{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_krNettoBilanzsummeRatingSub1_valid","association":"refs","refId":1184}],"deps":{"URA_krBilanziellesEigenkapitalBrutto_value":true,"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true},"original":"krBilanziellesEigenkapitalBrutto-sdeResultForTheYear-sdeVarCapLimitedPartners","index":1183,"name":"URA_krNettoBilanzsummeRatingSub1_value","parsed":"m[1423]('1423',x,y.base,z,v,m)-m[1025]('1025',x,y.base,z,v,m)-m[1029]('1029',x,y.base,z,v,m)","id":1183,"fflname":"krNettoBilanzsummeRatingSub1_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub1_valid":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub1_value","association":"deps","refId":1183}],"deps":{"URA_krNettoBilanzsummeRatingSub1_value":true},"original":"If(!isNaN(OnNA(krNettoBilanzsummeRatingSub1,null)),'','Enter valid input.')","index":1184,"name":"URA_krNettoBilanzsummeRatingSub1_valid","parsed":"!isNaN(OnNA(m[1183]('1183',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1184,"fflname":"krNettoBilanzsummeRatingSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Wirtschaftliches Eigenkapital<$'","index":1185,"name":"URA_krNettoBilanzsummeRatingSub1_title","parsed":"'$>Wirtschaftliches Eigenkapital<$'","id":1185,"fflname":"krNettoBilanzsummeRatingSub1_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1186,"name":"URA_krNettoBilanzsummeRatingSub1_locked","parsed":"1","id":1186,"fflname":"krNettoBilanzsummeRatingSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub1_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1187,"name":"URA_krNettoBilanzsummeRatingSub1_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1187,"fflname":"krNettoBilanzsummeRatingSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub2_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1188,"name":"URA_krNettoBilanzsummeRatingSub2_value","parsed":"null","id":1188,"fflname":"krNettoBilanzsummeRatingSub2_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub2_valid":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025}],"deps":{"URA_sdeResultForTheYear_value":true},"original":"If(!isNaN(OnNA(sdeResultForTheYear,null)),'','Enter valid input.')","index":1189,"name":"URA_krNettoBilanzsummeRatingSub2_valid","parsed":"!isNaN(OnNA(m[1025]('1025',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1189,"fflname":"krNettoBilanzsummeRatingSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","index":1190,"name":"URA_krNettoBilanzsummeRatingSub2_title","parsed":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","id":1190,"fflname":"krNettoBilanzsummeRatingSub2_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1191,"name":"URA_krNettoBilanzsummeRatingSub2_locked","parsed":"1","id":1191,"fflname":"krNettoBilanzsummeRatingSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub2_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1192,"name":"URA_krNettoBilanzsummeRatingSub2_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1192,"fflname":"krNettoBilanzsummeRatingSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub3_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1193,"name":"URA_krNettoBilanzsummeRatingSub3_value","parsed":"null","id":1193,"fflname":"krNettoBilanzsummeRatingSub3_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029}],"deps":{"URA_sdeVarCapLimitedPartners_value":true},"original":"If(!isNaN(OnNA(sdeVarCapLimitedPartners,null)),'','Enter valid input.')","index":1194,"name":"URA_krNettoBilanzsummeRatingSub3_valid","parsed":"!isNaN(OnNA(m[1029]('1029',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1194,"fflname":"krNettoBilanzsummeRatingSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","index":1195,"name":"URA_krNettoBilanzsummeRatingSub3_title","parsed":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","id":1195,"fflname":"krNettoBilanzsummeRatingSub3_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1196,"name":"URA_krNettoBilanzsummeRatingSub3_locked","parsed":"1","id":1196,"fflname":"krNettoBilanzsummeRatingSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub3_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1197,"name":"URA_krNettoBilanzsummeRatingSub3_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1197,"fflname":"krNettoBilanzsummeRatingSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub4_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1198,"name":"URA_krNettoBilanzsummeRatingSub4_value","parsed":"null","id":1198,"fflname":"krNettoBilanzsummeRatingSub4_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeProvisions_value","association":"deps","refId":1033}],"deps":{"URA_sdeProvisions_value":true},"original":"If(!isNaN(OnNA(sdeProvisions,null)),'','Enter valid input.')","index":1199,"name":"URA_krNettoBilanzsummeRatingSub4_valid","parsed":"!isNaN(OnNA(m[1033]('1033',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1199,"fflname":"krNettoBilanzsummeRatingSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>R?ckstellungen, passive latente Steuern und passive Abgrenzungsposten<$'","index":1200,"name":"URA_krNettoBilanzsummeRatingSub4_title","parsed":"'$>R?ckstellungen, passive latente Steuern und passive Abgrenzungsposten<$'","id":1200,"fflname":"krNettoBilanzsummeRatingSub4_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1201,"name":"URA_krNettoBilanzsummeRatingSub4_locked","parsed":"1","id":1201,"fflname":"krNettoBilanzsummeRatingSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub4_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1202,"name":"URA_krNettoBilanzsummeRatingSub4_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1202,"fflname":"krNettoBilanzsummeRatingSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub5_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1203,"name":"URA_krNettoBilanzsummeRatingSub5_value","parsed":"null","id":1203,"fflname":"krNettoBilanzsummeRatingSub5_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub5_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037}],"deps":{"URA_sdeLiabilitiesLong_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesLong,null)),'','Enter valid input.')","index":1204,"name":"URA_krNettoBilanzsummeRatingSub5_valid","parsed":"!isNaN(OnNA(m[1037]('1037',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1204,"fflname":"krNettoBilanzsummeRatingSub5_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub5_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Verbindlichkeiten >1 Jahr<$'","index":1205,"name":"URA_krNettoBilanzsummeRatingSub5_title","parsed":"'$>Verbindlichkeiten >1 Jahr<$'","id":1205,"fflname":"krNettoBilanzsummeRatingSub5_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub5_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1206,"name":"URA_krNettoBilanzsummeRatingSub5_locked","parsed":"1","id":1206,"fflname":"krNettoBilanzsummeRatingSub5_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub5_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1207,"name":"URA_krNettoBilanzsummeRatingSub5_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1207,"fflname":"krNettoBilanzsummeRatingSub5_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub6_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1208,"name":"URA_krNettoBilanzsummeRatingSub6_value","parsed":"null","id":1208,"fflname":"krNettoBilanzsummeRatingSub6_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub6_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057}],"deps":{"URA_sdeLiabilitiesShort_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesShort,null)),'','Enter valid input.')","index":1209,"name":"URA_krNettoBilanzsummeRatingSub6_valid","parsed":"!isNaN(OnNA(m[1057]('1057',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1209,"fflname":"krNettoBilanzsummeRatingSub6_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub6_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzfristige Verbindlichkeiten<$'","index":1210,"name":"URA_krNettoBilanzsummeRatingSub6_title","parsed":"'$>Kurzfristige Verbindlichkeiten<$'","id":1210,"fflname":"krNettoBilanzsummeRatingSub6_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub6_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1211,"name":"URA_krNettoBilanzsummeRatingSub6_locked","parsed":"1","id":1211,"fflname":"krNettoBilanzsummeRatingSub6_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub6_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1212,"name":"URA_krNettoBilanzsummeRatingSub6_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1212,"fflname":"krNettoBilanzsummeRatingSub6_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_krNettoBilanzsummeRating_value":true,"URA_krNettoBilanzsummeRatingSub7_valid":true,"URA_krNettoBilanzsummeRatingSub10_value":true,"URA_krBankUndLieferantenanteilSub2_value":true,"URA_krRatingorientierteBilanzsummeSub1_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"refs","refId":1178},{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"deps","refId":1438},{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_sdeProvisions_value","association":"deps","refId":1033},{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037},{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057},{"name":"URA_krNettoBilanzsummeRatingSub7_valid","association":"refs","refId":1214},{"name":"URA_krNettoBilanzsummeRatingSub10_value","association":"refs","refId":1228},{"name":"URA_krBankUndLieferantenanteilSub2_value","association":"refs","refId":1273},{"name":"URA_krRatingorientierteBilanzsummeSub1_value","association":"refs","refId":1473}],"deps":{"URA_krWirtschaftlichesEigenkapital_value":true,"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true,"URA_sdeProvisions_value":true,"URA_sdeLiabilitiesLong_value":true,"URA_sdeLiabilitiesShort_value":true},"original":"krWirtschaftlichesEigenkapital+sdeResultForTheYear+sdeVarCapLimitedPartners+sdeProvisions+sdeLiabilitiesLong+sdeLiabilitiesShort","index":1213,"name":"URA_krNettoBilanzsummeRatingSub7_value","parsed":"m[1438]('1438',x,y.base,z,v,m)+m[1025]('1025',x,y.base,z,v,m)+m[1029]('1029',x,y.base,z,v,m)+m[1033]('1033',x,y.base,z,v,m)+m[1037]('1037',x,y.base,z,v,m)+m[1057]('1057',x,y.base,z,v,m)","id":1213,"fflname":"krNettoBilanzsummeRatingSub7_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub7_valid":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"deps","refId":1213}],"deps":{"URA_krNettoBilanzsummeRatingSub7_value":true},"original":"If(!isNaN(OnNA(krNettoBilanzsummeRatingSub7,null)),'','Enter valid input.')","index":1214,"name":"URA_krNettoBilanzsummeRatingSub7_valid","parsed":"!isNaN(OnNA(m[1213]('1213',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1214,"fflname":"krNettoBilanzsummeRatingSub7_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub7_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Netto Bilanzsumme<$'","index":1215,"name":"URA_krNettoBilanzsummeRatingSub7_title","parsed":"'$>Netto Bilanzsumme<$'","id":1215,"fflname":"krNettoBilanzsummeRatingSub7_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub7_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1216,"name":"URA_krNettoBilanzsummeRatingSub7_locked","parsed":"1","id":1216,"fflname":"krNettoBilanzsummeRatingSub7_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub7_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1217,"name":"URA_krNettoBilanzsummeRatingSub7_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1217,"fflname":"krNettoBilanzsummeRatingSub7_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub8_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1218,"name":"URA_krNettoBilanzsummeRatingSub8_value","parsed":"null","id":1218,"fflname":"krNettoBilanzsummeRatingSub8_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub8_valid":true},"formulaDependencys":[{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049}],"deps":{"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeLongReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1219,"name":"URA_krNettoBilanzsummeRatingSub8_valid","parsed":"!isNaN(OnNA(m[1049]('1049',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1219,"fflname":"krNettoBilanzsummeRatingSub8_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub8_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1220,"name":"URA_krNettoBilanzsummeRatingSub8_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1220,"fflname":"krNettoBilanzsummeRatingSub8_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub8_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1221,"name":"URA_krNettoBilanzsummeRatingSub8_locked","parsed":"1","id":1221,"fflname":"krNettoBilanzsummeRatingSub8_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub8_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1222,"name":"URA_krNettoBilanzsummeRatingSub8_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1222,"fflname":"krNettoBilanzsummeRatingSub8_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub9_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1223,"name":"URA_krNettoBilanzsummeRatingSub9_value","parsed":"null","id":1223,"fflname":"krNettoBilanzsummeRatingSub9_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub9_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1224,"name":"URA_krNettoBilanzsummeRatingSub9_valid","parsed":"!isNaN(OnNA(m[1069]('1069',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1224,"fflname":"krNettoBilanzsummeRatingSub9_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub9_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1225,"name":"URA_krNettoBilanzsummeRatingSub9_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1225,"fflname":"krNettoBilanzsummeRatingSub9_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub9_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1226,"name":"URA_krNettoBilanzsummeRatingSub9_locked","parsed":"1","id":1226,"fflname":"krNettoBilanzsummeRatingSub9_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub9_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1227,"name":"URA_krNettoBilanzsummeRatingSub9_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1227,"fflname":"krNettoBilanzsummeRatingSub9_visible"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub10_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"deps","refId":1213},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"krNettoBilanzsummeRatingSub7-sdeLongReceivedAdvanceOrdersCurrent-sdeReceivedAdvanceOrdersCurrent","index":1228,"name":"URA_krNettoBilanzsummeRatingSub10_value","parsed":"m[1213]('1213',x,y.base,z,v,m)-m[1049]('1049',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)","id":1228,"fflname":"krNettoBilanzsummeRatingSub10_value"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub10_valid":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178}],"deps":{"URA_krNettoBilanzsummeRating_value":true},"original":"If(!isNaN(OnNA(krNettoBilanzsummeRating,null)),'','Enter valid input.')","index":1229,"name":"URA_krNettoBilanzsummeRatingSub10_valid","parsed":"!isNaN(OnNA(m[1178]('1178',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1229,"fflname":"krNettoBilanzsummeRatingSub10_valid"},{"type":"noCacheUnlocked","refs":{"URA_krNettoBilanzsummeRatingSub10_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Netto Bilanzsumme f?r das Rating<$'","index":1230,"name":"URA_krNettoBilanzsummeRatingSub10_title","parsed":"'$>Netto Bilanzsumme f?r das Rating<$'","id":1230,"fflname":"krNettoBilanzsummeRatingSub10_title"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub10_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1231,"name":"URA_krNettoBilanzsummeRatingSub10_locked","parsed":"1","id":1231,"fflname":"krNettoBilanzsummeRatingSub10_locked"},{"type":"noCacheLocked","refs":{"URA_krNettoBilanzsummeRatingSub10_visible":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_visible","association":"deps","refId":1182}],"deps":{"URA_krNettoBilanzsummeRating_visible":true},"original":"krNettoBilanzsummeRating.visible&&1","index":1232,"name":"URA_krNettoBilanzsummeRatingSub10_visible","parsed":"m[1182]('1182',x,y.base,z,v,m)&&1","id":1232,"fflname":"krNettoBilanzsummeRatingSub10_visible"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilOrdentlichenErgebnissesSub3_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178},{"name":"URA_krOrdentlichesErgebnis_value","association":"deps","refId":1133}],"deps":{"URA_krNettoBilanzsummeRating_value":true,"URA_krOrdentlichesErgebnis_value":true},"original":"OnER(If(krNettoBilanzsummeRating<0,NA,GetValue(krOrdentlichesErgebnis,T,1)/krNettoBilanzsummeRating),NA)","index":1233,"name":"URA_krAnteilOrdentlichenErgebnissesSub3_value","parsed":"OnER(m[1178]('1178',x,y.base,z,v,m)<0?NA:GetValue(m[1133]('1133',x,y.base,z,v,m),x,1)/m[1178]('1178',x,y.base,z,v,m),NA)","id":1233,"fflname":"krAnteilOrdentlichenErgebnissesSub3_value"},{"type":"noCacheLocked","refs":{"URA_krAnteilOrdentlichenErgebnissesSub3_valid":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_value","association":"deps","refId":1128}],"deps":{"URA_krAnteilOrdentlichenErgebnisses_value":true},"original":"If(!isNaN(OnNA(krAnteilOrdentlichenErgebnisses,null)),'','Enter valid input.')","index":1234,"name":"URA_krAnteilOrdentlichenErgebnissesSub3_valid","parsed":"!isNaN(OnNA(m[1128]('1128',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1234,"fflname":"krAnteilOrdentlichenErgebnissesSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilOrdentlichenErgebnissesSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Anteil des ordentlichen Ergebnisses<$'","index":1235,"name":"URA_krAnteilOrdentlichenErgebnissesSub3_title","parsed":"'$>Anteil des ordentlichen Ergebnisses<$'","id":1235,"fflname":"krAnteilOrdentlichenErgebnissesSub3_title"},{"type":"noCacheLocked","refs":{"URA_krAnteilOrdentlichenErgebnissesSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1236,"name":"URA_krAnteilOrdentlichenErgebnissesSub3_locked","parsed":"1","id":1236,"fflname":"krAnteilOrdentlichenErgebnissesSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krAnteilOrdentlichenErgebnissesSub3_visible":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_visible","association":"deps","refId":1132}],"deps":{"URA_krAnteilOrdentlichenErgebnisses_visible":true},"original":"krAnteilOrdentlichenErgebnisses.visible&&1","index":1237,"name":"URA_krAnteilOrdentlichenErgebnissesSub3_visible","parsed":"m[1132]('1132',x,y.base,z,v,m)&&1","id":1237,"fflname":"krAnteilOrdentlichenErgebnissesSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenanteil_value":true,"URA_krBankUndLieferantenanteil_valid":true,"URA_krBankUndLieferantenanteilSub3_valid":true,"URA_krZValue_value":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"deps","refId":1243},{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178},{"name":"URA_krBankUndLieferantenanteil_valid","association":"refs","refId":1239},{"name":"URA_krBankUndLieferantenanteilSub3_valid","association":"refs","refId":1279},{"name":"URA_krZValue_value","association":"refs","refId":1517}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krNettoBilanzsummeRating_value":true},"original":"OnER(OnNA(krBankUndLieferantenverbindlichkeiten,0)/krNettoBilanzsummeRating,NA)","index":1238,"name":"URA_krBankUndLieferantenanteil_value","parsed":"OnER(OnNA(m[1243]('1243',x,y.base,z,v,m),0)/m[1178]('1178',x,y.base,z,v,m),NA)","id":1238,"fflname":"krBankUndLieferantenanteil_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteil_valid":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenanteil_value","association":"deps","refId":1238}],"deps":{"URA_krBankUndLieferantenanteil_value":true},"original":"If(!isNaN(OnNA(krBankUndLieferantenanteil,null)),'','Enter valid input.')","index":1239,"name":"URA_krBankUndLieferantenanteil_valid","parsed":"!isNaN(OnNA(m[1238]('1238',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1239,"fflname":"krBankUndLieferantenanteil_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenanteil_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Bank- und Lieferantenanteil<$'","index":1240,"name":"URA_krBankUndLieferantenanteil_title","parsed":"'$>Bank- und Lieferantenanteil<$'","id":1240,"fflname":"krBankUndLieferantenanteil_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteil_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1241,"name":"URA_krBankUndLieferantenanteil_locked","parsed":"1","id":1241,"fflname":"krBankUndLieferantenanteil_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteil_visible":true,"URA_krBankUndLieferantenverbindlichkeiten_visible":true,"URA_krBankUndLieferantenanteilSub2_visible":true,"URA_krBankUndLieferantenanteilSub3_visible":true},"formulaDependencys":[{"name":"URA_RatioFolder_visible","association":"deps","refId":1127},{"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","association":"refs","refId":1247},{"name":"URA_krBankUndLieferantenanteilSub2_visible","association":"refs","refId":1277},{"name":"URA_krBankUndLieferantenanteilSub3_visible","association":"refs","refId":1282}],"deps":{"URA_RatioFolder_visible":true},"original":"RatioFolder.visible&&1","index":1242,"name":"URA_krBankUndLieferantenanteil_visible","parsed":"m[1127]('1127',x,y.base,z,v,m)&&1","id":1242,"fflname":"krBankUndLieferantenanteil_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krBankUndLieferantenanteil_value":true,"URA_krBankUndLieferantenverbindlichkeiten_valid":true,"URA_krBankUndLieferantenverbindlichkeitenSub5_valid":true,"URA_krBankUndLieferantenanteilSub3_value":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenanteil_value","association":"refs","refId":1238},{"name":"URA_sdeLiabilitiesBankLong_value","association":"deps","refId":1041},{"name":"URA_sdeLongTradePayables_value","association":"deps","refId":1045},{"name":"URA_sdeLiabilitiesBankShort_value","association":"deps","refId":1061},{"name":"URA_sdeTradePayables_value","association":"deps","refId":1065},{"name":"URA_krBankUndLieferantenverbindlichkeiten_valid","association":"refs","refId":1244},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_valid","association":"refs","refId":1269},{"name":"URA_krBankUndLieferantenanteilSub3_value","association":"refs","refId":1278}],"deps":{"URA_sdeLiabilitiesBankLong_value":true,"URA_sdeLongTradePayables_value":true,"URA_sdeLiabilitiesBankShort_value":true,"URA_sdeTradePayables_value":true},"original":"sdeLiabilitiesBankLong+sdeLongTradePayables+sdeLiabilitiesBankShort+sdeTradePayables","index":1243,"name":"URA_krBankUndLieferantenverbindlichkeiten_value","parsed":"m[1041]('1041',x,y.base,z,v,m)+m[1045]('1045',x,y.base,z,v,m)+m[1061]('1061',x,y.base,z,v,m)+m[1065]('1065',x,y.base,z,v,m)","id":1243,"fflname":"krBankUndLieferantenverbindlichkeiten_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeiten_valid":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"deps","refId":1243}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krBankUndLieferantenverbindlichkeiten,null)),'','Enter valid input.')","index":1244,"name":"URA_krBankUndLieferantenverbindlichkeiten_valid","parsed":"!isNaN(OnNA(m[1243]('1243',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1244,"fflname":"krBankUndLieferantenverbindlichkeiten_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeiten_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Bank- und Lieferantenverbindlichkeiten<$'","index":1245,"name":"URA_krBankUndLieferantenverbindlichkeiten_title","parsed":"'$>Bank- und Lieferantenverbindlichkeiten<$'","id":1245,"fflname":"krBankUndLieferantenverbindlichkeiten_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeiten_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1246,"name":"URA_krBankUndLieferantenverbindlichkeiten_locked","parsed":"1","id":1246,"fflname":"krBankUndLieferantenverbindlichkeiten_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeiten_visible":true,"URA_krBankUndLieferantenverbindlichkeitenSub1_visible":true,"URA_krBankUndLieferantenverbindlichkeitenSub2_visible":true,"URA_krBankUndLieferantenverbindlichkeitenSub3_visible":true,"URA_krBankUndLieferantenverbindlichkeitenSub4_visible":true,"URA_krBankUndLieferantenverbindlichkeitenSub5_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenanteil_visible","association":"deps","refId":1242},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_visible","association":"refs","refId":1252},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_visible","association":"refs","refId":1257},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_visible","association":"refs","refId":1262},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_visible","association":"refs","refId":1267},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_visible","association":"refs","refId":1272}],"deps":{"URA_krBankUndLieferantenanteil_visible":true},"original":"krBankUndLieferantenanteil.visible&&1","index":1247,"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","parsed":"m[1242]('1242',x,y.base,z,v,m)&&1","id":1247,"fflname":"krBankUndLieferantenverbindlichkeiten_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub1_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1248,"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_value","parsed":"null","id":1248,"fflname":"krBankUndLieferantenverbindlichkeitenSub1_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankLong_value","association":"deps","refId":1041}],"deps":{"URA_sdeLiabilitiesBankLong_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesBankLong,null)),'','Enter valid input.')","index":1249,"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_valid","parsed":"!isNaN(OnNA(m[1041]('1041',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1249,"fflname":"krBankUndLieferantenverbindlichkeitenSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","index":1250,"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_title","parsed":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","id":1250,"fflname":"krBankUndLieferantenverbindlichkeitenSub1_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1251,"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_locked","parsed":"1","id":1251,"fflname":"krBankUndLieferantenverbindlichkeitenSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub1_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","association":"deps","refId":1247}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_visible":true},"original":"krBankUndLieferantenverbindlichkeiten.visible&&1","index":1252,"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_visible","parsed":"m[1247]('1247',x,y.base,z,v,m)&&1","id":1252,"fflname":"krBankUndLieferantenverbindlichkeitenSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub2_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1253,"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_value","parsed":"null","id":1253,"fflname":"krBankUndLieferantenverbindlichkeitenSub2_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub2_valid":true},"formulaDependencys":[{"name":"URA_sdeLongTradePayables_value","association":"deps","refId":1045}],"deps":{"URA_sdeLongTradePayables_value":true},"original":"If(!isNaN(OnNA(sdeLongTradePayables,null)),'','Enter valid input.')","index":1254,"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_valid","parsed":"!isNaN(OnNA(m[1045]('1045',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1254,"fflname":"krBankUndLieferantenverbindlichkeitenSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon aus Lieferungen und Leistungen<$'","index":1255,"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_title","parsed":"'$>>> davon aus Lieferungen und Leistungen<$'","id":1255,"fflname":"krBankUndLieferantenverbindlichkeitenSub2_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1256,"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_locked","parsed":"1","id":1256,"fflname":"krBankUndLieferantenverbindlichkeitenSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub2_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","association":"deps","refId":1247}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_visible":true},"original":"krBankUndLieferantenverbindlichkeiten.visible&&1","index":1257,"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_visible","parsed":"m[1247]('1247',x,y.base,z,v,m)&&1","id":1257,"fflname":"krBankUndLieferantenverbindlichkeitenSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub3_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1258,"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_value","parsed":"null","id":1258,"fflname":"krBankUndLieferantenverbindlichkeitenSub3_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankShort_value","association":"deps","refId":1061}],"deps":{"URA_sdeLiabilitiesBankShort_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesBankShort,null)),'','Enter valid input.')","index":1259,"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_valid","parsed":"!isNaN(OnNA(m[1061]('1061',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1259,"fflname":"krBankUndLieferantenverbindlichkeitenSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","index":1260,"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_title","parsed":"'$>>> davon gegen?ber Kreditinstituten und aus Anleihen<$'","id":1260,"fflname":"krBankUndLieferantenverbindlichkeitenSub3_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1261,"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_locked","parsed":"1","id":1261,"fflname":"krBankUndLieferantenverbindlichkeitenSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub3_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","association":"deps","refId":1247}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_visible":true},"original":"krBankUndLieferantenverbindlichkeiten.visible&&1","index":1262,"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_visible","parsed":"m[1247]('1247',x,y.base,z,v,m)&&1","id":1262,"fflname":"krBankUndLieferantenverbindlichkeitenSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub4_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1263,"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_value","parsed":"null","id":1263,"fflname":"krBankUndLieferantenverbindlichkeitenSub4_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeTradePayables_value","association":"deps","refId":1065}],"deps":{"URA_sdeTradePayables_value":true},"original":"If(!isNaN(OnNA(sdeTradePayables,null)),'','Enter valid input.')","index":1264,"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_valid","parsed":"!isNaN(OnNA(m[1065]('1065',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1264,"fflname":"krBankUndLieferantenverbindlichkeitenSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon aus Lieferungen und Leistungen<$'","index":1265,"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_title","parsed":"'$>>> davon aus Lieferungen und Leistungen<$'","id":1265,"fflname":"krBankUndLieferantenverbindlichkeitenSub4_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1266,"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_locked","parsed":"1","id":1266,"fflname":"krBankUndLieferantenverbindlichkeitenSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub4_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","association":"deps","refId":1247}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_visible":true},"original":"krBankUndLieferantenverbindlichkeiten.visible&&1","index":1267,"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_visible","parsed":"m[1247]('1247',x,y.base,z,v,m)&&1","id":1267,"fflname":"krBankUndLieferantenverbindlichkeitenSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub5_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesBankLong_value","association":"deps","refId":1041},{"name":"URA_sdeLongTradePayables_value","association":"deps","refId":1045},{"name":"URA_sdeLiabilitiesBankShort_value","association":"deps","refId":1061},{"name":"URA_sdeTradePayables_value","association":"deps","refId":1065}],"deps":{"URA_sdeLiabilitiesBankLong_value":true,"URA_sdeLongTradePayables_value":true,"URA_sdeLiabilitiesBankShort_value":true,"URA_sdeTradePayables_value":true},"original":"sdeLiabilitiesBankLong+sdeLongTradePayables+sdeLiabilitiesBankShort+sdeTradePayables","index":1268,"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","parsed":"m[1041]('1041',x,y.base,z,v,m)+m[1045]('1045',x,y.base,z,v,m)+m[1061]('1061',x,y.base,z,v,m)+m[1065]('1065',x,y.base,z,v,m)","id":1268,"fflname":"krBankUndLieferantenverbindlichkeitenSub5_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub5_valid":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"deps","refId":1243}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krBankUndLieferantenverbindlichkeiten,null)),'','Enter valid input.')","index":1269,"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_valid","parsed":"!isNaN(OnNA(m[1243]('1243',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1269,"fflname":"krBankUndLieferantenverbindlichkeitenSub5_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub5_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Bank- und Lieferantenverbindlichkeiten<$'","index":1270,"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_title","parsed":"'$>Bank- und Lieferantenverbindlichkeiten<$'","id":1270,"fflname":"krBankUndLieferantenverbindlichkeitenSub5_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub5_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1271,"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_locked","parsed":"1","id":1271,"fflname":"krBankUndLieferantenverbindlichkeitenSub5_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenverbindlichkeitenSub5_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_visible","association":"deps","refId":1247}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_visible":true},"original":"krBankUndLieferantenverbindlichkeiten.visible&&1","index":1272,"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_visible","parsed":"m[1247]('1247',x,y.base,z,v,m)&&1","id":1272,"fflname":"krBankUndLieferantenverbindlichkeitenSub5_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenanteilSub2_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"deps","refId":1213},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"krNettoBilanzsummeRatingSub7-sdeLongReceivedAdvanceOrdersCurrent-sdeReceivedAdvanceOrdersCurrent","index":1273,"name":"URA_krBankUndLieferantenanteilSub2_value","parsed":"m[1213]('1213',x,y.base,z,v,m)-m[1049]('1049',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)","id":1273,"fflname":"krBankUndLieferantenanteilSub2_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteilSub2_valid":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178}],"deps":{"URA_krNettoBilanzsummeRating_value":true},"original":"If(!isNaN(OnNA(krNettoBilanzsummeRating,null)),'','Enter valid input.')","index":1274,"name":"URA_krBankUndLieferantenanteilSub2_valid","parsed":"!isNaN(OnNA(m[1178]('1178',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1274,"fflname":"krBankUndLieferantenanteilSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenanteilSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Netto Bilanzsumme f?r das Rating<$'","index":1275,"name":"URA_krBankUndLieferantenanteilSub2_title","parsed":"'$>Netto Bilanzsumme f?r das Rating<$'","id":1275,"fflname":"krBankUndLieferantenanteilSub2_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteilSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1276,"name":"URA_krBankUndLieferantenanteilSub2_locked","parsed":"1","id":1276,"fflname":"krBankUndLieferantenanteilSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteilSub2_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenanteil_visible","association":"deps","refId":1242}],"deps":{"URA_krBankUndLieferantenanteil_visible":true},"original":"krBankUndLieferantenanteil.visible&&1","index":1277,"name":"URA_krBankUndLieferantenanteilSub2_visible","parsed":"m[1242]('1242',x,y.base,z,v,m)&&1","id":1277,"fflname":"krBankUndLieferantenanteilSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenanteilSub3_value":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","association":"deps","refId":1243},{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178}],"deps":{"URA_krBankUndLieferantenverbindlichkeiten_value":true,"URA_krNettoBilanzsummeRating_value":true},"original":"OnER(OnNA(krBankUndLieferantenverbindlichkeiten,0)/krNettoBilanzsummeRating,NA)","index":1278,"name":"URA_krBankUndLieferantenanteilSub3_value","parsed":"OnER(OnNA(m[1243]('1243',x,y.base,z,v,m),0)/m[1178]('1178',x,y.base,z,v,m),NA)","id":1278,"fflname":"krBankUndLieferantenanteilSub3_value"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteilSub3_valid":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenanteil_value","association":"deps","refId":1238}],"deps":{"URA_krBankUndLieferantenanteil_value":true},"original":"If(!isNaN(OnNA(krBankUndLieferantenanteil,null)),'','Enter valid input.')","index":1279,"name":"URA_krBankUndLieferantenanteilSub3_valid","parsed":"!isNaN(OnNA(m[1238]('1238',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1279,"fflname":"krBankUndLieferantenanteilSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBankUndLieferantenanteilSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Bank- und Lieferantenanteil<$'","index":1280,"name":"URA_krBankUndLieferantenanteilSub3_title","parsed":"'$>Bank- und Lieferantenanteil<$'","id":1280,"fflname":"krBankUndLieferantenanteilSub3_title"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteilSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1281,"name":"URA_krBankUndLieferantenanteilSub3_locked","parsed":"1","id":1281,"fflname":"krBankUndLieferantenanteilSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krBankUndLieferantenanteilSub3_visible":true},"formulaDependencys":[{"name":"URA_krBankUndLieferantenanteil_visible","association":"deps","refId":1242}],"deps":{"URA_krBankUndLieferantenanteil_visible":true},"original":"krBankUndLieferantenanteil.visible&&1","index":1282,"name":"URA_krBankUndLieferantenanteilSub3_visible","parsed":"m[1242]('1242',x,y.base,z,v,m)&&1","id":1282,"fflname":"krBankUndLieferantenanteilSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krFremdKapitalzinslast_value":true,"URA_krFremdKapitalzinslast_valid":true,"URA_krFremdKapitalzinslastSub3_valid":true,"URA_krZValue_value":true},"formulaDependencys":[{"name":"URA_krZinsen_value","association":"deps","refId":1288},{"name":"URA_krVerbindlichkeiten_value","association":"deps","refId":1303},{"name":"URA_krFremdKapitalzinslast_valid","association":"refs","refId":1284},{"name":"URA_krFremdKapitalzinslastSub3_valid","association":"refs","refId":1344},{"name":"URA_krZValue_value","association":"refs","refId":1517}],"deps":{"URA_krZinsen_value":true,"URA_krVerbindlichkeiten_value":true},"original":"OnER(Max(OnNA(GetValue(krZinsen,T,1),0),0)/Max(krVerbindlichkeiten,0),0)","index":1283,"name":"URA_krFremdKapitalzinslast_value","parsed":"OnER(Math.max(OnNA(GetValue(m[1288]('1288',x,y.base,z,v,m),x,1),0),0)/Math.max(m[1303]('1303',x,y.base,z,v,m),0),0)","id":1283,"fflname":"krFremdKapitalzinslast_value"},{"type":"noCacheLocked","refs":{"URA_krFremdKapitalzinslast_valid":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_value","association":"deps","refId":1283}],"deps":{"URA_krFremdKapitalzinslast_value":true},"original":"If(!isNaN(OnNA(krFremdKapitalzinslast,null)),'','Enter valid input.')","index":1284,"name":"URA_krFremdKapitalzinslast_valid","parsed":"!isNaN(OnNA(m[1283]('1283',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1284,"fflname":"krFremdKapitalzinslast_valid"},{"type":"noCacheUnlocked","refs":{"URA_krFremdKapitalzinslast_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Fremdkapitalzinslast<$'","index":1285,"name":"URA_krFremdKapitalzinslast_title","parsed":"'$>Fremdkapitalzinslast<$'","id":1285,"fflname":"krFremdKapitalzinslast_title"},{"type":"noCacheLocked","refs":{"URA_krFremdKapitalzinslast_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1286,"name":"URA_krFremdKapitalzinslast_locked","parsed":"1","id":1286,"fflname":"krFremdKapitalzinslast_locked"},{"type":"noCacheLocked","refs":{"URA_krFremdKapitalzinslast_visible":true,"URA_krZinsen_visible":true,"URA_krVerbindlichkeiten_visible":true,"URA_krFremdKapitalzinslastSub3_visible":true},"formulaDependencys":[{"name":"URA_RatioFolder_visible","association":"deps","refId":1127},{"name":"URA_krZinsen_visible","association":"refs","refId":1292},{"name":"URA_krVerbindlichkeiten_visible","association":"refs","refId":1307},{"name":"URA_krFremdKapitalzinslastSub3_visible","association":"refs","refId":1347}],"deps":{"URA_RatioFolder_visible":true},"original":"RatioFolder.visible&&1","index":1287,"name":"URA_krFremdKapitalzinslast_visible","parsed":"m[1127]('1127',x,y.base,z,v,m)&&1","id":1287,"fflname":"krFremdKapitalzinslast_visible"},{"type":"noCacheUnlocked","refs":{"URA_krZinsen_value":true,"URA_krFremdKapitalzinslast_value":true,"URA_krZinsen_valid":true,"URA_krZinsenSub2_valid":true,"URA_krFremdKapitalzinslastSub3_value":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_value","association":"refs","refId":1283},{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102},{"name":"URA_krZinsen_valid","association":"refs","refId":1289},{"name":"URA_krZinsenSub2_valid","association":"refs","refId":1299},{"name":"URA_krFremdKapitalzinslastSub3_value","association":"refs","refId":1343}],"deps":{"URA_sdeInterestExpenses_value":true},"original":"If(TimeAggregated,Aggregate(Self,x),sdeInterestExpenses)","index":1288,"name":"URA_krZinsen_value","parsed":"x.aggregated?Aggregate(Self,x):m[1102]('1102',x,y.base,z,v,m)","id":1288,"fflname":"krZinsen_value"},{"type":"noCacheLocked","refs":{"URA_krZinsen_valid":true},"formulaDependencys":[{"name":"URA_krZinsen_value","association":"deps","refId":1288}],"deps":{"URA_krZinsen_value":true},"original":"If(!isNaN(OnNA(krZinsen,null)),'','Enter valid input.')","index":1289,"name":"URA_krZinsen_valid","parsed":"!isNaN(OnNA(m[1288]('1288',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1289,"fflname":"krZinsen_valid"},{"type":"noCacheUnlocked","refs":{"URA_krZinsen_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","index":1290,"name":"URA_krZinsen_title","parsed":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","id":1290,"fflname":"krZinsen_title"},{"type":"noCacheLocked","refs":{"URA_krZinsen_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1291,"name":"URA_krZinsen_locked","parsed":"1","id":1291,"fflname":"krZinsen_locked"},{"type":"noCacheLocked","refs":{"URA_krZinsen_visible":true,"URA_krZinsenSub1_visible":true,"URA_krZinsenSub2_visible":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_visible","association":"deps","refId":1287},{"name":"URA_krZinsenSub1_visible","association":"refs","refId":1297},{"name":"URA_krZinsenSub2_visible","association":"refs","refId":1302}],"deps":{"URA_krFremdKapitalzinslast_visible":true},"original":"krFremdKapitalzinslast.visible&&1","index":1292,"name":"URA_krZinsen_visible","parsed":"m[1287]('1287',x,y.base,z,v,m)&&1","id":1292,"fflname":"krZinsen_visible"},{"type":"noCacheUnlocked","refs":{"URA_krZinsenSub1_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1293,"name":"URA_krZinsenSub1_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1293,"fflname":"krZinsenSub1_value"},{"type":"noCacheLocked","refs":{"URA_krZinsenSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102}],"deps":{"URA_sdeInterestExpenses_value":true},"original":"If(!isNaN(OnNA(sdeInterestExpenses,null)),'','Enter valid input.')","index":1294,"name":"URA_krZinsenSub1_valid","parsed":"!isNaN(OnNA(m[1102]('1102',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1294,"fflname":"krZinsenSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krZinsenSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","index":1295,"name":"URA_krZinsenSub1_title","parsed":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","id":1295,"fflname":"krZinsenSub1_title"},{"type":"noCacheLocked","refs":{"URA_krZinsenSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1296,"name":"URA_krZinsenSub1_locked","parsed":"1","id":1296,"fflname":"krZinsenSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krZinsenSub1_visible":true},"formulaDependencys":[{"name":"URA_krZinsen_visible","association":"deps","refId":1292}],"deps":{"URA_krZinsen_visible":true},"original":"krZinsen.visible&&1","index":1297,"name":"URA_krZinsenSub1_visible","parsed":"m[1292]('1292',x,y.base,z,v,m)&&1","id":1297,"fflname":"krZinsenSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krZinsenSub2_value":true},"formulaDependencys":[{"name":"URA_sdeInterestExpenses_value","association":"deps","refId":1102}],"deps":{"URA_sdeInterestExpenses_value":true},"original":"If(TimeAggregated,Aggregate(Self,x),sdeInterestExpenses)","index":1298,"name":"URA_krZinsenSub2_value","parsed":"x.aggregated?Aggregate(Self,x):m[1102]('1102',x,y.base,z,v,m)","id":1298,"fflname":"krZinsenSub2_value"},{"type":"noCacheLocked","refs":{"URA_krZinsenSub2_valid":true},"formulaDependencys":[{"name":"URA_krZinsen_value","association":"deps","refId":1288}],"deps":{"URA_krZinsen_value":true},"original":"If(!isNaN(OnNA(krZinsen,null)),'','Enter valid input.')","index":1299,"name":"URA_krZinsenSub2_valid","parsed":"!isNaN(OnNA(m[1288]('1288',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1299,"fflname":"krZinsenSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krZinsenSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","index":1300,"name":"URA_krZinsenSub2_title","parsed":"'$>Zinsaufwand ohne Abzinsung von R?ckstellungen<$'","id":1300,"fflname":"krZinsenSub2_title"},{"type":"noCacheLocked","refs":{"URA_krZinsenSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1301,"name":"URA_krZinsenSub2_locked","parsed":"1","id":1301,"fflname":"krZinsenSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krZinsenSub2_visible":true},"formulaDependencys":[{"name":"URA_krZinsen_visible","association":"deps","refId":1292}],"deps":{"URA_krZinsen_visible":true},"original":"krZinsen.visible&&1","index":1302,"name":"URA_krZinsenSub2_visible","parsed":"m[1292]('1292',x,y.base,z,v,m)&&1","id":1302,"fflname":"krZinsenSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeiten_value":true,"URA_krFremdKapitalzinslast_value":true,"URA_krVerbindlichkeiten_valid":true,"URA_krVerbindlichkeitenSub7_valid":true,"URA_krFremdKapitalzinslastSub3_value":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_value","association":"refs","refId":1283},{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037},{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057},{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069},{"name":"URA_krVerbindlichkeiten_valid","association":"refs","refId":1304},{"name":"URA_krVerbindlichkeitenSub7_valid","association":"refs","refId":1339},{"name":"URA_krFremdKapitalzinslastSub3_value","association":"refs","refId":1343}],"deps":{"URA_sdeLiabilitiesLong_value":true,"URA_sdeLiabilitiesShort_value":true,"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"sdeLiabilitiesLong+sdeLiabilitiesShort+sdeResultForTheYear+sdeVarCapLimitedPartners-sdeLongReceivedAdvanceOrdersCurrent-sdeReceivedAdvanceOrdersCurrent","index":1303,"name":"URA_krVerbindlichkeiten_value","parsed":"m[1037]('1037',x,y.base,z,v,m)+m[1057]('1057',x,y.base,z,v,m)+m[1025]('1025',x,y.base,z,v,m)+m[1029]('1029',x,y.base,z,v,m)-m[1049]('1049',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)","id":1303,"fflname":"krVerbindlichkeiten_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeiten_valid":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_value","association":"deps","refId":1303}],"deps":{"URA_krVerbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krVerbindlichkeiten,null)),'','Enter valid input.')","index":1304,"name":"URA_krVerbindlichkeiten_valid","parsed":"!isNaN(OnNA(m[1303]('1303',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1304,"fflname":"krVerbindlichkeiten_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeiten_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Verbindlichkeiten<$'","index":1305,"name":"URA_krVerbindlichkeiten_title","parsed":"'$>Verbindlichkeiten<$'","id":1305,"fflname":"krVerbindlichkeiten_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeiten_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1306,"name":"URA_krVerbindlichkeiten_locked","parsed":"1","id":1306,"fflname":"krVerbindlichkeiten_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeiten_visible":true,"URA_krVerbindlichkeitenSub1_visible":true,"URA_krVerbindlichkeitenSub2_visible":true,"URA_krVerbindlichkeitenSub3_visible":true,"URA_krVerbindlichkeitenSub4_visible":true,"URA_krVerbindlichkeitenSub5_visible":true,"URA_krVerbindlichkeitenSub6_visible":true,"URA_krVerbindlichkeitenSub7_visible":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_visible","association":"deps","refId":1287},{"name":"URA_krVerbindlichkeitenSub1_visible","association":"refs","refId":1312},{"name":"URA_krVerbindlichkeitenSub2_visible","association":"refs","refId":1317},{"name":"URA_krVerbindlichkeitenSub3_visible","association":"refs","refId":1322},{"name":"URA_krVerbindlichkeitenSub4_visible","association":"refs","refId":1327},{"name":"URA_krVerbindlichkeitenSub5_visible","association":"refs","refId":1332},{"name":"URA_krVerbindlichkeitenSub6_visible","association":"refs","refId":1337},{"name":"URA_krVerbindlichkeitenSub7_visible","association":"refs","refId":1342}],"deps":{"URA_krFremdKapitalzinslast_visible":true},"original":"krFremdKapitalzinslast.visible&&1","index":1307,"name":"URA_krVerbindlichkeiten_visible","parsed":"m[1287]('1287',x,y.base,z,v,m)&&1","id":1307,"fflname":"krVerbindlichkeiten_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub1_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1308,"name":"URA_krVerbindlichkeitenSub1_value","parsed":"null","id":1308,"fflname":"krVerbindlichkeitenSub1_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037}],"deps":{"URA_sdeLiabilitiesLong_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesLong,null)),'','Enter valid input.')","index":1309,"name":"URA_krVerbindlichkeitenSub1_valid","parsed":"!isNaN(OnNA(m[1037]('1037',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1309,"fflname":"krVerbindlichkeitenSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Verbindlichkeiten >1 Jahr<$'","index":1310,"name":"URA_krVerbindlichkeitenSub1_title","parsed":"'$>Verbindlichkeiten >1 Jahr<$'","id":1310,"fflname":"krVerbindlichkeitenSub1_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1311,"name":"URA_krVerbindlichkeitenSub1_locked","parsed":"1","id":1311,"fflname":"krVerbindlichkeitenSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub1_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1312,"name":"URA_krVerbindlichkeitenSub1_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1312,"fflname":"krVerbindlichkeitenSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub2_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1313,"name":"URA_krVerbindlichkeitenSub2_value","parsed":"null","id":1313,"fflname":"krVerbindlichkeitenSub2_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub2_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057}],"deps":{"URA_sdeLiabilitiesShort_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesShort,null)),'','Enter valid input.')","index":1314,"name":"URA_krVerbindlichkeitenSub2_valid","parsed":"!isNaN(OnNA(m[1057]('1057',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1314,"fflname":"krVerbindlichkeitenSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzfristige Verbindlichkeiten<$'","index":1315,"name":"URA_krVerbindlichkeitenSub2_title","parsed":"'$>Kurzfristige Verbindlichkeiten<$'","id":1315,"fflname":"krVerbindlichkeitenSub2_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1316,"name":"URA_krVerbindlichkeitenSub2_locked","parsed":"1","id":1316,"fflname":"krVerbindlichkeitenSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub2_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1317,"name":"URA_krVerbindlichkeitenSub2_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1317,"fflname":"krVerbindlichkeitenSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub3_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1318,"name":"URA_krVerbindlichkeitenSub3_value","parsed":"null","id":1318,"fflname":"krVerbindlichkeitenSub3_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025}],"deps":{"URA_sdeResultForTheYear_value":true},"original":"If(!isNaN(OnNA(sdeResultForTheYear,null)),'','Enter valid input.')","index":1319,"name":"URA_krVerbindlichkeitenSub3_valid","parsed":"!isNaN(OnNA(m[1025]('1025',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1319,"fflname":"krVerbindlichkeitenSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","index":1320,"name":"URA_krVerbindlichkeitenSub3_title","parsed":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","id":1320,"fflname":"krVerbindlichkeitenSub3_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1321,"name":"URA_krVerbindlichkeitenSub3_locked","parsed":"1","id":1321,"fflname":"krVerbindlichkeitenSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub3_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1322,"name":"URA_krVerbindlichkeitenSub3_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1322,"fflname":"krVerbindlichkeitenSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub4_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1323,"name":"URA_krVerbindlichkeitenSub4_value","parsed":"null","id":1323,"fflname":"krVerbindlichkeitenSub4_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029}],"deps":{"URA_sdeVarCapLimitedPartners_value":true},"original":"If(!isNaN(OnNA(sdeVarCapLimitedPartners,null)),'','Enter valid input.')","index":1324,"name":"URA_krVerbindlichkeitenSub4_valid","parsed":"!isNaN(OnNA(m[1029]('1029',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1324,"fflname":"krVerbindlichkeitenSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","index":1325,"name":"URA_krVerbindlichkeitenSub4_title","parsed":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","id":1325,"fflname":"krVerbindlichkeitenSub4_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1326,"name":"URA_krVerbindlichkeitenSub4_locked","parsed":"1","id":1326,"fflname":"krVerbindlichkeitenSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub4_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1327,"name":"URA_krVerbindlichkeitenSub4_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1327,"fflname":"krVerbindlichkeitenSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub5_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1328,"name":"URA_krVerbindlichkeitenSub5_value","parsed":"null","id":1328,"fflname":"krVerbindlichkeitenSub5_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub5_valid":true},"formulaDependencys":[{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049}],"deps":{"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeLongReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1329,"name":"URA_krVerbindlichkeitenSub5_valid","parsed":"!isNaN(OnNA(m[1049]('1049',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1329,"fflname":"krVerbindlichkeitenSub5_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub5_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1330,"name":"URA_krVerbindlichkeitenSub5_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1330,"fflname":"krVerbindlichkeitenSub5_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub5_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1331,"name":"URA_krVerbindlichkeitenSub5_locked","parsed":"1","id":1331,"fflname":"krVerbindlichkeitenSub5_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub5_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1332,"name":"URA_krVerbindlichkeitenSub5_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1332,"fflname":"krVerbindlichkeitenSub5_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub6_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1333,"name":"URA_krVerbindlichkeitenSub6_value","parsed":"null","id":1333,"fflname":"krVerbindlichkeitenSub6_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub6_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1334,"name":"URA_krVerbindlichkeitenSub6_valid","parsed":"!isNaN(OnNA(m[1069]('1069',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1334,"fflname":"krVerbindlichkeitenSub6_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub6_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1335,"name":"URA_krVerbindlichkeitenSub6_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1335,"fflname":"krVerbindlichkeitenSub6_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub6_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1336,"name":"URA_krVerbindlichkeitenSub6_locked","parsed":"1","id":1336,"fflname":"krVerbindlichkeitenSub6_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub6_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1337,"name":"URA_krVerbindlichkeitenSub6_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1337,"fflname":"krVerbindlichkeitenSub6_visible"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub7_value":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesLong_value","association":"deps","refId":1037},{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057},{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_sdeLiabilitiesLong_value":true,"URA_sdeLiabilitiesShort_value":true,"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"sdeLiabilitiesLong+sdeLiabilitiesShort+sdeResultForTheYear+sdeVarCapLimitedPartners-sdeLongReceivedAdvanceOrdersCurrent-sdeReceivedAdvanceOrdersCurrent","index":1338,"name":"URA_krVerbindlichkeitenSub7_value","parsed":"m[1037]('1037',x,y.base,z,v,m)+m[1057]('1057',x,y.base,z,v,m)+m[1025]('1025',x,y.base,z,v,m)+m[1029]('1029',x,y.base,z,v,m)-m[1049]('1049',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)","id":1338,"fflname":"krVerbindlichkeitenSub7_value"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub7_valid":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_value","association":"deps","refId":1303}],"deps":{"URA_krVerbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krVerbindlichkeiten,null)),'','Enter valid input.')","index":1339,"name":"URA_krVerbindlichkeitenSub7_valid","parsed":"!isNaN(OnNA(m[1303]('1303',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1339,"fflname":"krVerbindlichkeitenSub7_valid"},{"type":"noCacheUnlocked","refs":{"URA_krVerbindlichkeitenSub7_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Verbindlichkeiten<$'","index":1340,"name":"URA_krVerbindlichkeitenSub7_title","parsed":"'$>Verbindlichkeiten<$'","id":1340,"fflname":"krVerbindlichkeitenSub7_title"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub7_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1341,"name":"URA_krVerbindlichkeitenSub7_locked","parsed":"1","id":1341,"fflname":"krVerbindlichkeitenSub7_locked"},{"type":"noCacheLocked","refs":{"URA_krVerbindlichkeitenSub7_visible":true},"formulaDependencys":[{"name":"URA_krVerbindlichkeiten_visible","association":"deps","refId":1307}],"deps":{"URA_krVerbindlichkeiten_visible":true},"original":"krVerbindlichkeiten.visible&&1","index":1342,"name":"URA_krVerbindlichkeitenSub7_visible","parsed":"m[1307]('1307',x,y.base,z,v,m)&&1","id":1342,"fflname":"krVerbindlichkeitenSub7_visible"},{"type":"noCacheUnlocked","refs":{"URA_krFremdKapitalzinslastSub3_value":true},"formulaDependencys":[{"name":"URA_krZinsen_value","association":"deps","refId":1288},{"name":"URA_krVerbindlichkeiten_value","association":"deps","refId":1303}],"deps":{"URA_krZinsen_value":true,"URA_krVerbindlichkeiten_value":true},"original":"OnER(Max(OnNA(GetValue(krZinsen,T,1),0),0)/Max(krVerbindlichkeiten,0),0)","index":1343,"name":"URA_krFremdKapitalzinslastSub3_value","parsed":"OnER(Math.max(OnNA(GetValue(m[1288]('1288',x,y.base,z,v,m),x,1),0),0)/Math.max(m[1303]('1303',x,y.base,z,v,m),0),0)","id":1343,"fflname":"krFremdKapitalzinslastSub3_value"},{"type":"noCacheLocked","refs":{"URA_krFremdKapitalzinslastSub3_valid":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_value","association":"deps","refId":1283}],"deps":{"URA_krFremdKapitalzinslast_value":true},"original":"If(!isNaN(OnNA(krFremdKapitalzinslast,null)),'','Enter valid input.')","index":1344,"name":"URA_krFremdKapitalzinslastSub3_valid","parsed":"!isNaN(OnNA(m[1283]('1283',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1344,"fflname":"krFremdKapitalzinslastSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krFremdKapitalzinslastSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Fremdkapitalzinslast<$'","index":1345,"name":"URA_krFremdKapitalzinslastSub3_title","parsed":"'$>Fremdkapitalzinslast<$'","id":1345,"fflname":"krFremdKapitalzinslastSub3_title"},{"type":"noCacheLocked","refs":{"URA_krFremdKapitalzinslastSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1346,"name":"URA_krFremdKapitalzinslastSub3_locked","parsed":"1","id":1346,"fflname":"krFremdKapitalzinslastSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krFremdKapitalzinslastSub3_visible":true},"formulaDependencys":[{"name":"URA_krFremdKapitalzinslast_visible","association":"deps","refId":1287}],"deps":{"URA_krFremdKapitalzinslast_visible":true},"original":"krFremdKapitalzinslast.visible&&1","index":1347,"name":"URA_krFremdKapitalzinslastSub3_visible","parsed":"m[1287]('1287',x,y.base,z,v,m)&&1","id":1347,"fflname":"krFremdKapitalzinslastSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeiten_value":true,"URA_krAnteilKurzfristigeVerbindlichkeiten_valid":true,"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_valid":true,"URA_krZValue_value":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1353},{"name":"URA_krUmsatzerloese_value","association":"deps","refId":1388},{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_valid","association":"refs","refId":1349},{"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_valid","association":"refs","refId":1404},{"name":"URA_krZValue_value","association":"refs","refId":1517}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krUmsatzerloese_value":true},"original":"OnER(OnNA(krKurzfristigeVerbindlichkeiten,0)/GetValue(krUmsatzerloese,T,1),0)","index":1348,"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","parsed":"OnER(OnNA(m[1353]('1353',x,y.base,z,v,m),0)/GetValue(m[1388]('1388',x,y.base,z,v,m),x,1),0)","id":1348,"fflname":"krAnteilKurzfristigeVerbindlichkeiten_value"},{"type":"noCacheLocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeiten_valid":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1348}],"deps":{"URA_krAnteilKurzfristigeVerbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krAnteilKurzfristigeVerbindlichkeiten,null)),'','Enter valid input.')","index":1349,"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_valid","parsed":"!isNaN(OnNA(m[1348]('1348',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1349,"fflname":"krAnteilKurzfristigeVerbindlichkeiten_valid"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeiten_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Anteil kurzfristige Verbindlichkeiten<$'","index":1350,"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_title","parsed":"'$>Anteil kurzfristige Verbindlichkeiten<$'","id":1350,"fflname":"krAnteilKurzfristigeVerbindlichkeiten_title"},{"type":"noCacheLocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeiten_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1351,"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_locked","parsed":"1","id":1351,"fflname":"krAnteilKurzfristigeVerbindlichkeiten_locked"},{"type":"noCacheLocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeiten_visible":true,"URA_krKurzfristigeVerbindlichkeiten_visible":true,"URA_krUmsatzerloese_visible":true,"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_visible":true},"formulaDependencys":[{"name":"URA_RatioFolder_visible","association":"deps","refId":1127},{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"refs","refId":1357},{"name":"URA_krUmsatzerloese_visible","association":"refs","refId":1392},{"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_visible","association":"refs","refId":1407}],"deps":{"URA_RatioFolder_visible":true},"original":"RatioFolder.visible&&1","index":1352,"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","parsed":"m[1127]('1127',x,y.base,z,v,m)&&1","id":1352,"fflname":"krAnteilKurzfristigeVerbindlichkeiten_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krAnteilKurzfristigeVerbindlichkeiten_value":true,"URA_krKurzfristigeVerbindlichkeiten_valid":true,"URA_krKurzfristigeVerbindlichkeitenSub6_valid":true,"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1348},{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069},{"name":"URA_sdeShortShareholderPayables_value","association":"deps","refId":1073},{"name":"URA_krKurzfristigeVerbindlichkeiten_valid","association":"refs","refId":1354},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_valid","association":"refs","refId":1384},{"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value","association":"refs","refId":1403}],"deps":{"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true,"URA_sdeLiabilitiesShort_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true,"URA_sdeShortShareholderPayables_value":true},"original":"sdeResultForTheYear+sdeVarCapLimitedPartners+sdeLiabilitiesShort-sdeReceivedAdvanceOrdersCurrent-sdeShortShareholderPayables","index":1353,"name":"URA_krKurzfristigeVerbindlichkeiten_value","parsed":"m[1025]('1025',x,y.base,z,v,m)+m[1029]('1029',x,y.base,z,v,m)+m[1057]('1057',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)-m[1073]('1073',x,y.base,z,v,m)","id":1353,"fflname":"krKurzfristigeVerbindlichkeiten_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeiten_valid":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1353}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krKurzfristigeVerbindlichkeiten,null)),'','Enter valid input.')","index":1354,"name":"URA_krKurzfristigeVerbindlichkeiten_valid","parsed":"!isNaN(OnNA(m[1353]('1353',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1354,"fflname":"krKurzfristigeVerbindlichkeiten_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeiten_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzfristige Verbindlichkeiten<$'","index":1355,"name":"URA_krKurzfristigeVerbindlichkeiten_title","parsed":"'$>Kurzfristige Verbindlichkeiten<$'","id":1355,"fflname":"krKurzfristigeVerbindlichkeiten_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeiten_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1356,"name":"URA_krKurzfristigeVerbindlichkeiten_locked","parsed":"1","id":1356,"fflname":"krKurzfristigeVerbindlichkeiten_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeiten_visible":true,"URA_krKurzfristigeVerbindlichkeitenSub1_visible":true,"URA_krKurzfristigeVerbindlichkeitenSub2_visible":true,"URA_krKurzfristigeVerbindlichkeitenSub3_visible":true,"URA_krKurzfristigeVerbindlichkeitenSub4_visible":true,"URA_krKurzfristigeVerbindlichkeitenSub5_visible":true,"URA_krKurzfristigeVerbindlichkeitenSub6_visible":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1352},{"name":"URA_krKurzfristigeVerbindlichkeitenSub1_visible","association":"refs","refId":1362},{"name":"URA_krKurzfristigeVerbindlichkeitenSub2_visible","association":"refs","refId":1367},{"name":"URA_krKurzfristigeVerbindlichkeitenSub3_visible","association":"refs","refId":1372},{"name":"URA_krKurzfristigeVerbindlichkeitenSub4_visible","association":"refs","refId":1377},{"name":"URA_krKurzfristigeVerbindlichkeitenSub5_visible","association":"refs","refId":1382},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_visible","association":"refs","refId":1387}],"deps":{"URA_krAnteilKurzfristigeVerbindlichkeiten_visible":true},"original":"krAnteilKurzfristigeVerbindlichkeiten.visible&&1","index":1357,"name":"URA_krKurzfristigeVerbindlichkeiten_visible","parsed":"m[1352]('1352',x,y.base,z,v,m)&&1","id":1357,"fflname":"krKurzfristigeVerbindlichkeiten_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub1_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1358,"name":"URA_krKurzfristigeVerbindlichkeitenSub1_value","parsed":"null","id":1358,"fflname":"krKurzfristigeVerbindlichkeitenSub1_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025}],"deps":{"URA_sdeResultForTheYear_value":true},"original":"If(!isNaN(OnNA(sdeResultForTheYear,null)),'','Enter valid input.')","index":1359,"name":"URA_krKurzfristigeVerbindlichkeitenSub1_valid","parsed":"!isNaN(OnNA(m[1025]('1025',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1359,"fflname":"krKurzfristigeVerbindlichkeitenSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","index":1360,"name":"URA_krKurzfristigeVerbindlichkeitenSub1_title","parsed":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","id":1360,"fflname":"krKurzfristigeVerbindlichkeitenSub1_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1361,"name":"URA_krKurzfristigeVerbindlichkeitenSub1_locked","parsed":"1","id":1361,"fflname":"krKurzfristigeVerbindlichkeitenSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub1_visible":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1357}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_visible":true},"original":"krKurzfristigeVerbindlichkeiten.visible&&1","index":1362,"name":"URA_krKurzfristigeVerbindlichkeitenSub1_visible","parsed":"m[1357]('1357',x,y.base,z,v,m)&&1","id":1362,"fflname":"krKurzfristigeVerbindlichkeitenSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub2_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1363,"name":"URA_krKurzfristigeVerbindlichkeitenSub2_value","parsed":"null","id":1363,"fflname":"krKurzfristigeVerbindlichkeitenSub2_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub2_valid":true},"formulaDependencys":[{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029}],"deps":{"URA_sdeVarCapLimitedPartners_value":true},"original":"If(!isNaN(OnNA(sdeVarCapLimitedPartners,null)),'','Enter valid input.')","index":1364,"name":"URA_krKurzfristigeVerbindlichkeitenSub2_valid","parsed":"!isNaN(OnNA(m[1029]('1029',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1364,"fflname":"krKurzfristigeVerbindlichkeitenSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","index":1365,"name":"URA_krKurzfristigeVerbindlichkeitenSub2_title","parsed":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","id":1365,"fflname":"krKurzfristigeVerbindlichkeitenSub2_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1366,"name":"URA_krKurzfristigeVerbindlichkeitenSub2_locked","parsed":"1","id":1366,"fflname":"krKurzfristigeVerbindlichkeitenSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub2_visible":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1357}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_visible":true},"original":"krKurzfristigeVerbindlichkeiten.visible&&1","index":1367,"name":"URA_krKurzfristigeVerbindlichkeitenSub2_visible","parsed":"m[1357]('1357',x,y.base,z,v,m)&&1","id":1367,"fflname":"krKurzfristigeVerbindlichkeitenSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub3_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1368,"name":"URA_krKurzfristigeVerbindlichkeitenSub3_value","parsed":"null","id":1368,"fflname":"krKurzfristigeVerbindlichkeitenSub3_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057}],"deps":{"URA_sdeLiabilitiesShort_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesShort,null)),'','Enter valid input.')","index":1369,"name":"URA_krKurzfristigeVerbindlichkeitenSub3_valid","parsed":"!isNaN(OnNA(m[1057]('1057',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1369,"fflname":"krKurzfristigeVerbindlichkeitenSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzfristige Verbindlichkeiten<$'","index":1370,"name":"URA_krKurzfristigeVerbindlichkeitenSub3_title","parsed":"'$>Kurzfristige Verbindlichkeiten<$'","id":1370,"fflname":"krKurzfristigeVerbindlichkeitenSub3_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1371,"name":"URA_krKurzfristigeVerbindlichkeitenSub3_locked","parsed":"1","id":1371,"fflname":"krKurzfristigeVerbindlichkeitenSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub3_visible":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1357}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_visible":true},"original":"krKurzfristigeVerbindlichkeiten.visible&&1","index":1372,"name":"URA_krKurzfristigeVerbindlichkeitenSub3_visible","parsed":"m[1357]('1357',x,y.base,z,v,m)&&1","id":1372,"fflname":"krKurzfristigeVerbindlichkeitenSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub4_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1373,"name":"URA_krKurzfristigeVerbindlichkeitenSub4_value","parsed":"null","id":1373,"fflname":"krKurzfristigeVerbindlichkeitenSub4_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"If(!isNaN(OnNA(sdeReceivedAdvanceOrdersCurrent,null)),'','Enter valid input.')","index":1374,"name":"URA_krKurzfristigeVerbindlichkeitenSub4_valid","parsed":"!isNaN(OnNA(m[1069]('1069',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1374,"fflname":"krKurzfristigeVerbindlichkeitenSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","index":1375,"name":"URA_krKurzfristigeVerbindlichkeitenSub4_title","parsed":"'$>>> davon erhaltene Anzahlungen auf Bestellungen<$'","id":1375,"fflname":"krKurzfristigeVerbindlichkeitenSub4_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1376,"name":"URA_krKurzfristigeVerbindlichkeitenSub4_locked","parsed":"1","id":1376,"fflname":"krKurzfristigeVerbindlichkeitenSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub4_visible":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1357}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_visible":true},"original":"krKurzfristigeVerbindlichkeiten.visible&&1","index":1377,"name":"URA_krKurzfristigeVerbindlichkeitenSub4_visible","parsed":"m[1357]('1357',x,y.base,z,v,m)&&1","id":1377,"fflname":"krKurzfristigeVerbindlichkeitenSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub5_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1378,"name":"URA_krKurzfristigeVerbindlichkeitenSub5_value","parsed":"null","id":1378,"fflname":"krKurzfristigeVerbindlichkeitenSub5_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub5_valid":true},"formulaDependencys":[{"name":"URA_sdeShortShareholderPayables_value","association":"deps","refId":1073}],"deps":{"URA_sdeShortShareholderPayables_value":true},"original":"If(!isNaN(OnNA(sdeShortShareholderPayables,null)),'','Enter valid input.')","index":1379,"name":"URA_krKurzfristigeVerbindlichkeitenSub5_valid","parsed":"!isNaN(OnNA(m[1073]('1073',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1379,"fflname":"krKurzfristigeVerbindlichkeitenSub5_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub5_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Gesellschaftern, verbundenen Unternehmen, Beteiligungen<$'","index":1380,"name":"URA_krKurzfristigeVerbindlichkeitenSub5_title","parsed":"'$>>> davon gegen?ber Gesellschaftern, verbundenen Unternehmen, Beteiligungen<$'","id":1380,"fflname":"krKurzfristigeVerbindlichkeitenSub5_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub5_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1381,"name":"URA_krKurzfristigeVerbindlichkeitenSub5_locked","parsed":"1","id":1381,"fflname":"krKurzfristigeVerbindlichkeitenSub5_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub5_visible":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1357}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_visible":true},"original":"krKurzfristigeVerbindlichkeiten.visible&&1","index":1382,"name":"URA_krKurzfristigeVerbindlichkeitenSub5_visible","parsed":"m[1357]('1357',x,y.base,z,v,m)&&1","id":1382,"fflname":"krKurzfristigeVerbindlichkeitenSub5_visible"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub6_value":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_sdeLiabilitiesShort_value","association":"deps","refId":1057},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069},{"name":"URA_sdeShortShareholderPayables_value","association":"deps","refId":1073}],"deps":{"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true,"URA_sdeLiabilitiesShort_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true,"URA_sdeShortShareholderPayables_value":true},"original":"sdeResultForTheYear+sdeVarCapLimitedPartners+sdeLiabilitiesShort-sdeReceivedAdvanceOrdersCurrent-sdeShortShareholderPayables","index":1383,"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","parsed":"m[1025]('1025',x,y.base,z,v,m)+m[1029]('1029',x,y.base,z,v,m)+m[1057]('1057',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)-m[1073]('1073',x,y.base,z,v,m)","id":1383,"fflname":"krKurzfristigeVerbindlichkeitenSub6_value"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub6_valid":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1353}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krKurzfristigeVerbindlichkeiten,null)),'','Enter valid input.')","index":1384,"name":"URA_krKurzfristigeVerbindlichkeitenSub6_valid","parsed":"!isNaN(OnNA(m[1353]('1353',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1384,"fflname":"krKurzfristigeVerbindlichkeitenSub6_valid"},{"type":"noCacheUnlocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub6_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Kurzfristige Verbindlichkeiten<$'","index":1385,"name":"URA_krKurzfristigeVerbindlichkeitenSub6_title","parsed":"'$>Kurzfristige Verbindlichkeiten<$'","id":1385,"fflname":"krKurzfristigeVerbindlichkeitenSub6_title"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub6_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1386,"name":"URA_krKurzfristigeVerbindlichkeitenSub6_locked","parsed":"1","id":1386,"fflname":"krKurzfristigeVerbindlichkeitenSub6_locked"},{"type":"noCacheLocked","refs":{"URA_krKurzfristigeVerbindlichkeitenSub6_visible":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1357}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_visible":true},"original":"krKurzfristigeVerbindlichkeiten.visible&&1","index":1387,"name":"URA_krKurzfristigeVerbindlichkeitenSub6_visible","parsed":"m[1357]('1357',x,y.base,z,v,m)&&1","id":1387,"fflname":"krKurzfristigeVerbindlichkeitenSub6_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUmsatzerloese_value":true,"URA_krAnteilKurzfristigeVerbindlichkeiten_value":true,"URA_krUmsatzerloese_valid":true,"URA_krUmsatzerloeseSub2_valid":true,"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","association":"refs","refId":1348},{"name":"URA_sdeSales_value","association":"deps","refId":1082},{"name":"URA_krUmsatzerloese_valid","association":"refs","refId":1389},{"name":"URA_krUmsatzerloeseSub2_valid","association":"refs","refId":1399},{"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value","association":"refs","refId":1403}],"deps":{"URA_sdeSales_value":true},"original":"If(TimeAggregated,Aggregate(Self,x),sdeSales)","index":1388,"name":"URA_krUmsatzerloese_value","parsed":"x.aggregated?Aggregate(Self,x):m[1082]('1082',x,y.base,z,v,m)","id":1388,"fflname":"krUmsatzerloese_value"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloese_valid":true},"formulaDependencys":[{"name":"URA_krUmsatzerloese_value","association":"deps","refId":1388}],"deps":{"URA_krUmsatzerloese_value":true},"original":"If(!isNaN(OnNA(krUmsatzerloese,null)),'','Enter valid input.')","index":1389,"name":"URA_krUmsatzerloese_valid","parsed":"!isNaN(OnNA(m[1388]('1388',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1389,"fflname":"krUmsatzerloese_valid"},{"type":"noCacheUnlocked","refs":{"URA_krUmsatzerloese_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Umsatzerl?se / Ertr?ge<$'","index":1390,"name":"URA_krUmsatzerloese_title","parsed":"'$>Umsatzerl?se / Ertr?ge<$'","id":1390,"fflname":"krUmsatzerloese_title"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloese_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1391,"name":"URA_krUmsatzerloese_locked","parsed":"1","id":1391,"fflname":"krUmsatzerloese_locked"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloese_visible":true,"URA_krUmsatzerloeseSub1_visible":true,"URA_krUmsatzerloeseSub2_visible":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1352},{"name":"URA_krUmsatzerloeseSub1_visible","association":"refs","refId":1397},{"name":"URA_krUmsatzerloeseSub2_visible","association":"refs","refId":1402}],"deps":{"URA_krAnteilKurzfristigeVerbindlichkeiten_visible":true},"original":"krAnteilKurzfristigeVerbindlichkeiten.visible&&1","index":1392,"name":"URA_krUmsatzerloese_visible","parsed":"m[1352]('1352',x,y.base,z,v,m)&&1","id":1392,"fflname":"krUmsatzerloese_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUmsatzerloeseSub1_value":true},"formulaDependencys":[],"deps":{},"original":"If(TimeAggregated,Aggregate(Self,x),undefined)","index":1393,"name":"URA_krUmsatzerloeseSub1_value","parsed":"x.aggregated?Aggregate(Self,x):undefined","id":1393,"fflname":"krUmsatzerloeseSub1_value"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloeseSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeSales_value","association":"deps","refId":1082}],"deps":{"URA_sdeSales_value":true},"original":"If(!isNaN(OnNA(sdeSales,null)),'','Enter valid input.')","index":1394,"name":"URA_krUmsatzerloeseSub1_valid","parsed":"!isNaN(OnNA(m[1082]('1082',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1394,"fflname":"krUmsatzerloeseSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krUmsatzerloeseSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Umsatz<$'","index":1395,"name":"URA_krUmsatzerloeseSub1_title","parsed":"'$>Umsatz<$'","id":1395,"fflname":"krUmsatzerloeseSub1_title"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloeseSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1396,"name":"URA_krUmsatzerloeseSub1_locked","parsed":"1","id":1396,"fflname":"krUmsatzerloeseSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloeseSub1_visible":true},"formulaDependencys":[{"name":"URA_krUmsatzerloese_visible","association":"deps","refId":1392}],"deps":{"URA_krUmsatzerloese_visible":true},"original":"krUmsatzerloese.visible&&1","index":1397,"name":"URA_krUmsatzerloeseSub1_visible","parsed":"m[1392]('1392',x,y.base,z,v,m)&&1","id":1397,"fflname":"krUmsatzerloeseSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUmsatzerloeseSub2_value":true},"formulaDependencys":[{"name":"URA_sdeSales_value","association":"deps","refId":1082}],"deps":{"URA_sdeSales_value":true},"original":"If(TimeAggregated,Aggregate(Self,x),sdeSales)","index":1398,"name":"URA_krUmsatzerloeseSub2_value","parsed":"x.aggregated?Aggregate(Self,x):m[1082]('1082',x,y.base,z,v,m)","id":1398,"fflname":"krUmsatzerloeseSub2_value"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloeseSub2_valid":true},"formulaDependencys":[{"name":"URA_krUmsatzerloese_value","association":"deps","refId":1388}],"deps":{"URA_krUmsatzerloese_value":true},"original":"If(!isNaN(OnNA(krUmsatzerloese,null)),'','Enter valid input.')","index":1399,"name":"URA_krUmsatzerloeseSub2_valid","parsed":"!isNaN(OnNA(m[1388]('1388',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1399,"fflname":"krUmsatzerloeseSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krUmsatzerloeseSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Umsatzerl?se / Ertr?ge<$'","index":1400,"name":"URA_krUmsatzerloeseSub2_title","parsed":"'$>Umsatzerl?se / Ertr?ge<$'","id":1400,"fflname":"krUmsatzerloeseSub2_title"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloeseSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1401,"name":"URA_krUmsatzerloeseSub2_locked","parsed":"1","id":1401,"fflname":"krUmsatzerloeseSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krUmsatzerloeseSub2_visible":true},"formulaDependencys":[{"name":"URA_krUmsatzerloese_visible","association":"deps","refId":1392}],"deps":{"URA_krUmsatzerloese_visible":true},"original":"krUmsatzerloese.visible&&1","index":1402,"name":"URA_krUmsatzerloeseSub2_visible","parsed":"m[1392]('1392',x,y.base,z,v,m)&&1","id":1402,"fflname":"krUmsatzerloeseSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value":true},"formulaDependencys":[{"name":"URA_krKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1353},{"name":"URA_krUmsatzerloese_value","association":"deps","refId":1388}],"deps":{"URA_krKurzfristigeVerbindlichkeiten_value":true,"URA_krUmsatzerloese_value":true},"original":"OnER(OnNA(krKurzfristigeVerbindlichkeiten,0)/GetValue(krUmsatzerloese,T,1),0)","index":1403,"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value","parsed":"OnER(OnNA(m[1353]('1353',x,y.base,z,v,m),0)/GetValue(m[1388]('1388',x,y.base,z,v,m),x,1),0)","id":1403,"fflname":"krAnteilKurzfristigeVerbindlichkeitenSub3_value"},{"type":"noCacheLocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_valid":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1348}],"deps":{"URA_krAnteilKurzfristigeVerbindlichkeiten_value":true},"original":"If(!isNaN(OnNA(krAnteilKurzfristigeVerbindlichkeiten,null)),'','Enter valid input.')","index":1404,"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_valid","parsed":"!isNaN(OnNA(m[1348]('1348',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1404,"fflname":"krAnteilKurzfristigeVerbindlichkeitenSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Anteil kurzfristige Verbindlichkeiten<$'","index":1405,"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_title","parsed":"'$>Anteil kurzfristige Verbindlichkeiten<$'","id":1405,"fflname":"krAnteilKurzfristigeVerbindlichkeitenSub3_title"},{"type":"noCacheLocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1406,"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_locked","parsed":"1","id":1406,"fflname":"krAnteilKurzfristigeVerbindlichkeitenSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_visible":true},"formulaDependencys":[{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","association":"deps","refId":1352}],"deps":{"URA_krAnteilKurzfristigeVerbindlichkeiten_visible":true},"original":"krAnteilKurzfristigeVerbindlichkeiten.visible&&1","index":1407,"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_visible","parsed":"m[1352]('1352',x,y.base,z,v,m)&&1","id":1407,"fflname":"krAnteilKurzfristigeVerbindlichkeitenSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilEigenmittel_value":true,"URA_krAnteilEigenmittel_valid":true,"URA_krAnteilEigenmittelSub3_valid":true,"URA_krZValue_value":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"deps","refId":1413},{"name":"URA_krRatingorientierteBilanzsumme_value","association":"deps","refId":1468},{"name":"URA_krAnteilEigenmittel_valid","association":"refs","refId":1409},{"name":"URA_krAnteilEigenmittelSub3_valid","association":"refs","refId":1499},{"name":"URA_krZValue_value","association":"refs","refId":1517}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krRatingorientierteBilanzsumme_value":true},"original":"OnER(If(krWirtschaftlichesEigenKapitalRating<0&&krRatingorientierteBilanzsumme<0,-krWirtschaftlichesEigenKapitalRating/krRatingorientierteBilanzsumme,krWirtschaftlichesEigenKapitalRating/krRatingorientierteBilanzsumme),NA)","index":1408,"name":"URA_krAnteilEigenmittel_value","parsed":"OnER(m[1413]('1413',x,y.base,z,v,m)<0&&m[1468]('1468',x,y.base,z,v,m)<0?-m[1413]('1413',x,y.base,z,v,m)/m[1468]('1468',x,y.base,z,v,m):m[1413]('1413',x,y.base,z,v,m)/m[1468]('1468',x,y.base,z,v,m),NA)","id":1408,"fflname":"krAnteilEigenmittel_value"},{"type":"noCacheLocked","refs":{"URA_krAnteilEigenmittel_valid":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_value","association":"deps","refId":1408}],"deps":{"URA_krAnteilEigenmittel_value":true},"original":"If(!isNaN(OnNA(krAnteilEigenmittel,null)),'','Enter valid input.')","index":1409,"name":"URA_krAnteilEigenmittel_valid","parsed":"!isNaN(OnNA(m[1408]('1408',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1409,"fflname":"krAnteilEigenmittel_valid"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilEigenmittel_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Anteil Eigenmittel<$'","index":1410,"name":"URA_krAnteilEigenmittel_title","parsed":"'$>Anteil Eigenmittel<$'","id":1410,"fflname":"krAnteilEigenmittel_title"},{"type":"noCacheLocked","refs":{"URA_krAnteilEigenmittel_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1411,"name":"URA_krAnteilEigenmittel_locked","parsed":"1","id":1411,"fflname":"krAnteilEigenmittel_locked"},{"type":"noCacheLocked","refs":{"URA_krAnteilEigenmittel_visible":true,"URA_krWirtschaftlichesEigenKapitalRating_visible":true,"URA_krRatingorientierteBilanzsumme_visible":true,"URA_krAnteilEigenmittelSub3_visible":true},"formulaDependencys":[{"name":"URA_RatioFolder_visible","association":"deps","refId":1127},{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"refs","refId":1417},{"name":"URA_krRatingorientierteBilanzsumme_visible","association":"refs","refId":1472},{"name":"URA_krAnteilEigenmittelSub3_visible","association":"refs","refId":1502}],"deps":{"URA_RatioFolder_visible":true},"original":"RatioFolder.visible&&1","index":1412,"name":"URA_krAnteilEigenmittel_visible","parsed":"m[1127]('1127',x,y.base,z,v,m)&&1","id":1412,"fflname":"krAnteilEigenmittel_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krAnteilEigenmittel_value":true,"URA_krWirtschaftlichesEigenKapitalRating_valid":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_valid":true,"URA_krAnteilEigenmittelSub3_value":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_value","association":"refs","refId":1408},{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"deps","refId":1438},{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009},{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013},{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017},{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","association":"deps","refId":1053},{"name":"URA_krWirtschaftlichesEigenKapitalRating_valid","association":"refs","refId":1414},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_valid","association":"refs","refId":1464},{"name":"URA_krAnteilEigenmittelSub3_value","association":"refs","refId":1498}],"deps":{"URA_krWirtschaftlichesEigenkapital_value":true,"URA_sdeGoodWill_value":true,"URA_sdeReceivablesShareholders_value":true,"URA_sdeDeferredTaxesAssets_value":true,"URA_sdeLiabilitiesToShareholdersOver5Y_value":true},"original":"krWirtschaftlichesEigenkapital-sdeGoodWill-sdeReceivablesShareholders-sdeDeferredTaxesAssets+sdeLiabilitiesToShareholdersOver5Y","index":1413,"name":"URA_krWirtschaftlichesEigenKapitalRating_value","parsed":"m[1438]('1438',x,y.base,z,v,m)-m[1009]('1009',x,y.base,z,v,m)-m[1013]('1013',x,y.base,z,v,m)-m[1017]('1017',x,y.base,z,v,m)+m[1053]('1053',x,y.base,z,v,m)","id":1413,"fflname":"krWirtschaftlichesEigenKapitalRating_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRating_valid":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"deps","refId":1413}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_value":true},"original":"If(!isNaN(OnNA(krWirtschaftlichesEigenKapitalRating,null)),'','Enter valid input.')","index":1414,"name":"URA_krWirtschaftlichesEigenKapitalRating_valid","parsed":"!isNaN(OnNA(m[1413]('1413',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1414,"fflname":"krWirtschaftlichesEigenKapitalRating_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRating_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ratingorientiertes, wirtschaftliches Eigenkapital<$'","index":1415,"name":"URA_krWirtschaftlichesEigenKapitalRating_title","parsed":"'$>Ratingorientiertes, wirtschaftliches Eigenkapital<$'","id":1415,"fflname":"krWirtschaftlichesEigenKapitalRating_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRating_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1416,"name":"URA_krWirtschaftlichesEigenKapitalRating_locked","parsed":"1","id":1416,"fflname":"krWirtschaftlichesEigenKapitalRating_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub1_visible":true,"URA_krBilanziellesEigenkapitalBrutto_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub3_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub4_visible":true,"URA_krWirtschaftlichesEigenkapital_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub6_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub7_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub8_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub9_visible":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_visible":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_visible","association":"deps","refId":1412},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_visible","association":"refs","refId":1422},{"name":"URA_krBilanziellesEigenkapitalBrutto_visible","association":"refs","refId":1427},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_visible","association":"refs","refId":1432},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_visible","association":"refs","refId":1437},{"name":"URA_krWirtschaftlichesEigenkapital_visible","association":"refs","refId":1442},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_visible","association":"refs","refId":1447},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_visible","association":"refs","refId":1452},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_visible","association":"refs","refId":1457},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_visible","association":"refs","refId":1462},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_visible","association":"refs","refId":1467}],"deps":{"URA_krAnteilEigenmittel_visible":true},"original":"krAnteilEigenmittel.visible&&1","index":1417,"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","parsed":"m[1412]('1412',x,y.base,z,v,m)&&1","id":1417,"fflname":"krWirtschaftlichesEigenKapitalRating_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub1_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1418,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_value","parsed":"null","id":1418,"fflname":"krWirtschaftlichesEigenKapitalRatingSub1_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub1_valid":true},"formulaDependencys":[{"name":"URA_sdeEquity_value","association":"deps","refId":1021}],"deps":{"URA_sdeEquity_value":true},"original":"If(!isNaN(OnNA(sdeEquity,null)),'','Enter valid input.')","index":1419,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_valid","parsed":"!isNaN(OnNA(m[1021]('1021',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1419,"fflname":"krWirtschaftlichesEigenKapitalRatingSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Eigenkapital ohne den nicht durch Eigenkapital gedeckten Fehlbetrag<$'","index":1420,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_title","parsed":"'$>Eigenkapital ohne den nicht durch Eigenkapital gedeckten Fehlbetrag<$'","id":1420,"fflname":"krWirtschaftlichesEigenKapitalRatingSub1_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1421,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_locked","parsed":"1","id":1421,"fflname":"krWirtschaftlichesEigenKapitalRatingSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub1_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1422,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1422,"fflname":"krWirtschaftlichesEigenKapitalRatingSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krBilanziellesEigenkapitalBrutto_value":true,"URA_krNettoBilanzsummeRatingSub1_value":true,"URA_krBilanziellesEigenkapitalBrutto_valid":true,"URA_krWirtschaftlichesEigenkapital_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub1_value","association":"refs","refId":1183},{"name":"URA_sdeEquity_value","association":"deps","refId":1021},{"name":"URA_krBilanziellesEigenkapitalBrutto_valid","association":"refs","refId":1424},{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"refs","refId":1438}],"deps":{"URA_sdeEquity_value":true},"original":"sdeEquity","index":1423,"name":"URA_krBilanziellesEigenkapitalBrutto_value","parsed":"m[1021]('1021',x,y.base,z,v,m)","id":1423,"fflname":"krBilanziellesEigenkapitalBrutto_value"},{"type":"noCacheLocked","refs":{"URA_krBilanziellesEigenkapitalBrutto_valid":true},"formulaDependencys":[{"name":"URA_krBilanziellesEigenkapitalBrutto_value","association":"deps","refId":1423}],"deps":{"URA_krBilanziellesEigenkapitalBrutto_value":true},"original":"If(!isNaN(OnNA(krBilanziellesEigenkapitalBrutto,null)),'','Enter valid input.')","index":1424,"name":"URA_krBilanziellesEigenkapitalBrutto_valid","parsed":"!isNaN(OnNA(m[1423]('1423',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1424,"fflname":"krBilanziellesEigenkapitalBrutto_valid"},{"type":"noCacheUnlocked","refs":{"URA_krBilanziellesEigenkapitalBrutto_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Bilanzielles Eigenkapital Brutto (ohne Abzug Sonderposten f?r Verluste etc)<$'","index":1425,"name":"URA_krBilanziellesEigenkapitalBrutto_title","parsed":"'$>Bilanzielles Eigenkapital Brutto (ohne Abzug Sonderposten f?r Verluste etc)<$'","id":1425,"fflname":"krBilanziellesEigenkapitalBrutto_title"},{"type":"noCacheLocked","refs":{"URA_krBilanziellesEigenkapitalBrutto_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1426,"name":"URA_krBilanziellesEigenkapitalBrutto_locked","parsed":"1","id":1426,"fflname":"krBilanziellesEigenkapitalBrutto_locked"},{"type":"noCacheLocked","refs":{"URA_krBilanziellesEigenkapitalBrutto_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1427,"name":"URA_krBilanziellesEigenkapitalBrutto_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1427,"fflname":"krBilanziellesEigenkapitalBrutto_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub3_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1428,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_value","parsed":"null","id":1428,"fflname":"krWirtschaftlichesEigenKapitalRatingSub3_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025}],"deps":{"URA_sdeResultForTheYear_value":true},"original":"If(!isNaN(OnNA(sdeResultForTheYear,null)),'','Enter valid input.')","index":1429,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_valid","parsed":"!isNaN(OnNA(m[1025]('1025',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1429,"fflname":"krWirtschaftlichesEigenKapitalRatingSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","index":1430,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_title","parsed":"'$>>> davon Bilanzgewinn, soweit auszusch?tten<$'","id":1430,"fflname":"krWirtschaftlichesEigenKapitalRatingSub3_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1431,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_locked","parsed":"1","id":1431,"fflname":"krWirtschaftlichesEigenKapitalRatingSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub3_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1432,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1432,"fflname":"krWirtschaftlichesEigenKapitalRatingSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub4_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1433,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_value","parsed":"null","id":1433,"fflname":"krWirtschaftlichesEigenKapitalRatingSub4_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029}],"deps":{"URA_sdeVarCapLimitedPartners_value":true},"original":"If(!isNaN(OnNA(sdeVarCapLimitedPartners,null)),'','Enter valid input.')","index":1434,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_valid","parsed":"!isNaN(OnNA(m[1029]('1029',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1434,"fflname":"krWirtschaftlichesEigenKapitalRatingSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","index":1435,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_title","parsed":"'$>>> davon variables Kapital Kommanditisten, soweit auszusch?tten<$'","id":1435,"fflname":"krWirtschaftlichesEigenKapitalRatingSub4_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1436,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_locked","parsed":"1","id":1436,"fflname":"krWirtschaftlichesEigenKapitalRatingSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub4_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1437,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1437,"fflname":"krWirtschaftlichesEigenKapitalRatingSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenkapital_value":true,"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krWirtschaftlichesEigenkapital_valid":true,"URA_krWirtschaftlichesEigenKapitalRatingSub10_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"refs","refId":1213},{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"refs","refId":1413},{"name":"URA_krBilanziellesEigenkapitalBrutto_value","association":"deps","refId":1423},{"name":"URA_sdeResultForTheYear_value","association":"deps","refId":1025},{"name":"URA_sdeVarCapLimitedPartners_value","association":"deps","refId":1029},{"name":"URA_krWirtschaftlichesEigenkapital_valid","association":"refs","refId":1439},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","association":"refs","refId":1463}],"deps":{"URA_krBilanziellesEigenkapitalBrutto_value":true,"URA_sdeResultForTheYear_value":true,"URA_sdeVarCapLimitedPartners_value":true},"original":"krBilanziellesEigenkapitalBrutto-sdeResultForTheYear-sdeVarCapLimitedPartners","index":1438,"name":"URA_krWirtschaftlichesEigenkapital_value","parsed":"m[1423]('1423',x,y.base,z,v,m)-m[1025]('1025',x,y.base,z,v,m)-m[1029]('1029',x,y.base,z,v,m)","id":1438,"fflname":"krWirtschaftlichesEigenkapital_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenkapital_valid":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"deps","refId":1438}],"deps":{"URA_krWirtschaftlichesEigenkapital_value":true},"original":"If(!isNaN(OnNA(krWirtschaftlichesEigenkapital,null)),'','Enter valid input.')","index":1439,"name":"URA_krWirtschaftlichesEigenkapital_valid","parsed":"!isNaN(OnNA(m[1438]('1438',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1439,"fflname":"krWirtschaftlichesEigenkapital_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenkapital_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Wirtschaftliches Eigenkapital<$'","index":1440,"name":"URA_krWirtschaftlichesEigenkapital_title","parsed":"'$>Wirtschaftliches Eigenkapital<$'","id":1440,"fflname":"krWirtschaftlichesEigenkapital_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenkapital_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1441,"name":"URA_krWirtschaftlichesEigenkapital_locked","parsed":"1","id":1441,"fflname":"krWirtschaftlichesEigenkapital_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenkapital_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1442,"name":"URA_krWirtschaftlichesEigenkapital_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1442,"fflname":"krWirtschaftlichesEigenkapital_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub6_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1443,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_value","parsed":"null","id":1443,"fflname":"krWirtschaftlichesEigenKapitalRatingSub6_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub6_valid":true},"formulaDependencys":[{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009}],"deps":{"URA_sdeGoodWill_value":true},"original":"If(!isNaN(OnNA(sdeGoodWill,null)),'','Enter valid input.')","index":1444,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_valid","parsed":"!isNaN(OnNA(m[1009]('1009',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1444,"fflname":"krWirtschaftlichesEigenKapitalRatingSub6_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub6_title":true},"formulaDependencys":[],"deps":{},"original":"'$>GoodWill und selbst geschaffene Schutzrechte<$'","index":1445,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_title","parsed":"'$>GoodWill und selbst geschaffene Schutzrechte<$'","id":1445,"fflname":"krWirtschaftlichesEigenKapitalRatingSub6_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub6_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1446,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_locked","parsed":"1","id":1446,"fflname":"krWirtschaftlichesEigenKapitalRatingSub6_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub6_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1447,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1447,"fflname":"krWirtschaftlichesEigenKapitalRatingSub6_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub7_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1448,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_value","parsed":"null","id":1448,"fflname":"krWirtschaftlichesEigenKapitalRatingSub7_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub7_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013}],"deps":{"URA_sdeReceivablesShareholders_value":true},"original":"If(!isNaN(OnNA(sdeReceivablesShareholders,null)),'','Enter valid input.')","index":1449,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_valid","parsed":"!isNaN(OnNA(m[1013]('1013',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1449,"fflname":"krWirtschaftlichesEigenKapitalRatingSub7_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub7_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Forderungen gegen?ber Gesellschaftern, Gesellschaftsorganen usw.<$'","index":1450,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_title","parsed":"'$>Forderungen gegen?ber Gesellschaftern, Gesellschaftsorganen usw.<$'","id":1450,"fflname":"krWirtschaftlichesEigenKapitalRatingSub7_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub7_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1451,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_locked","parsed":"1","id":1451,"fflname":"krWirtschaftlichesEigenKapitalRatingSub7_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub7_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1452,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1452,"fflname":"krWirtschaftlichesEigenKapitalRatingSub7_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub8_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1453,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_value","parsed":"null","id":1453,"fflname":"krWirtschaftlichesEigenKapitalRatingSub8_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub8_valid":true},"formulaDependencys":[{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017}],"deps":{"URA_sdeDeferredTaxesAssets_value":true},"original":"If(!isNaN(OnNA(sdeDeferredTaxesAssets,null)),'','Enter valid input.')","index":1454,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_valid","parsed":"!isNaN(OnNA(m[1017]('1017',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1454,"fflname":"krWirtschaftlichesEigenKapitalRatingSub8_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub8_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Aktive latente Steuern<$'","index":1455,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_title","parsed":"'$>Aktive latente Steuern<$'","id":1455,"fflname":"krWirtschaftlichesEigenKapitalRatingSub8_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub8_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1456,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_locked","parsed":"1","id":1456,"fflname":"krWirtschaftlichesEigenKapitalRatingSub8_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub8_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1457,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1457,"fflname":"krWirtschaftlichesEigenKapitalRatingSub8_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub9_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1458,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_value","parsed":"null","id":1458,"fflname":"krWirtschaftlichesEigenKapitalRatingSub9_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub9_valid":true},"formulaDependencys":[{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","association":"deps","refId":1053}],"deps":{"URA_sdeLiabilitiesToShareholdersOver5Y_value":true},"original":"If(!isNaN(OnNA(sdeLiabilitiesToShareholdersOver5Y,null)),'','Enter valid input.')","index":1459,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_valid","parsed":"!isNaN(OnNA(m[1053]('1053',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1459,"fflname":"krWirtschaftlichesEigenKapitalRatingSub9_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub9_title":true},"formulaDependencys":[],"deps":{},"original":"'$>>> davon gegen?ber Gesellschaftern und verbundenen Unternehmen >5 Jahre<$'","index":1460,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_title","parsed":"'$>>> davon gegen?ber Gesellschaftern und verbundenen Unternehmen >5 Jahre<$'","id":1460,"fflname":"krWirtschaftlichesEigenKapitalRatingSub9_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub9_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1461,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_locked","parsed":"1","id":1461,"fflname":"krWirtschaftlichesEigenKapitalRatingSub9_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub9_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1462,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1462,"fflname":"krWirtschaftlichesEigenKapitalRatingSub9_visible"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub10_value":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenkapital_value","association":"deps","refId":1438},{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009},{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013},{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017},{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","association":"deps","refId":1053}],"deps":{"URA_krWirtschaftlichesEigenkapital_value":true,"URA_sdeGoodWill_value":true,"URA_sdeReceivablesShareholders_value":true,"URA_sdeDeferredTaxesAssets_value":true,"URA_sdeLiabilitiesToShareholdersOver5Y_value":true},"original":"krWirtschaftlichesEigenkapital-sdeGoodWill-sdeReceivablesShareholders-sdeDeferredTaxesAssets+sdeLiabilitiesToShareholdersOver5Y","index":1463,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","parsed":"m[1438]('1438',x,y.base,z,v,m)-m[1009]('1009',x,y.base,z,v,m)-m[1013]('1013',x,y.base,z,v,m)-m[1017]('1017',x,y.base,z,v,m)+m[1053]('1053',x,y.base,z,v,m)","id":1463,"fflname":"krWirtschaftlichesEigenKapitalRatingSub10_value"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub10_valid":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"deps","refId":1413}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_value":true},"original":"If(!isNaN(OnNA(krWirtschaftlichesEigenKapitalRating,null)),'','Enter valid input.')","index":1464,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_valid","parsed":"!isNaN(OnNA(m[1413]('1413',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1464,"fflname":"krWirtschaftlichesEigenKapitalRatingSub10_valid"},{"type":"noCacheUnlocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub10_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ratingorientiertes, wirtschaftliches Eigenkapital<$'","index":1465,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_title","parsed":"'$>Ratingorientiertes, wirtschaftliches Eigenkapital<$'","id":1465,"fflname":"krWirtschaftlichesEigenKapitalRatingSub10_title"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub10_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1466,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_locked","parsed":"1","id":1466,"fflname":"krWirtschaftlichesEigenKapitalRatingSub10_locked"},{"type":"noCacheLocked","refs":{"URA_krWirtschaftlichesEigenKapitalRatingSub10_visible":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_visible","association":"deps","refId":1417}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_visible":true},"original":"krWirtschaftlichesEigenKapitalRating.visible&&1","index":1467,"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_visible","parsed":"m[1417]('1417',x,y.base,z,v,m)&&1","id":1467,"fflname":"krWirtschaftlichesEigenKapitalRatingSub10_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsumme_value":true,"URA_krAnteilEigenmittel_value":true,"URA_krRatingorientierteBilanzsumme_valid":true,"URA_krRatingorientierteBilanzsummeSub5_valid":true,"URA_krAnteilEigenmittelSub3_value":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_value","association":"refs","refId":1408},{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178},{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009},{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013},{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017},{"name":"URA_krRatingorientierteBilanzsumme_valid","association":"refs","refId":1469},{"name":"URA_krRatingorientierteBilanzsummeSub5_valid","association":"refs","refId":1494},{"name":"URA_krAnteilEigenmittelSub3_value","association":"refs","refId":1498}],"deps":{"URA_krNettoBilanzsummeRating_value":true,"URA_sdeGoodWill_value":true,"URA_sdeReceivablesShareholders_value":true,"URA_sdeDeferredTaxesAssets_value":true},"original":"krNettoBilanzsummeRating-sdeGoodWill-sdeReceivablesShareholders-sdeDeferredTaxesAssets","index":1468,"name":"URA_krRatingorientierteBilanzsumme_value","parsed":"m[1178]('1178',x,y.base,z,v,m)-m[1009]('1009',x,y.base,z,v,m)-m[1013]('1013',x,y.base,z,v,m)-m[1017]('1017',x,y.base,z,v,m)","id":1468,"fflname":"krRatingorientierteBilanzsumme_value"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsumme_valid":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_value","association":"deps","refId":1468}],"deps":{"URA_krRatingorientierteBilanzsumme_value":true},"original":"If(!isNaN(OnNA(krRatingorientierteBilanzsumme,null)),'','Enter valid input.')","index":1469,"name":"URA_krRatingorientierteBilanzsumme_valid","parsed":"!isNaN(OnNA(m[1468]('1468',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1469,"fflname":"krRatingorientierteBilanzsumme_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsumme_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ratingorientierte Bilanzsumme<$'","index":1470,"name":"URA_krRatingorientierteBilanzsumme_title","parsed":"'$>Ratingorientierte Bilanzsumme<$'","id":1470,"fflname":"krRatingorientierteBilanzsumme_title"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsumme_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1471,"name":"URA_krRatingorientierteBilanzsumme_locked","parsed":"1","id":1471,"fflname":"krRatingorientierteBilanzsumme_locked"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsumme_visible":true,"URA_krRatingorientierteBilanzsummeSub1_visible":true,"URA_krRatingorientierteBilanzsummeSub2_visible":true,"URA_krRatingorientierteBilanzsummeSub3_visible":true,"URA_krRatingorientierteBilanzsummeSub4_visible":true,"URA_krRatingorientierteBilanzsummeSub5_visible":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_visible","association":"deps","refId":1412},{"name":"URA_krRatingorientierteBilanzsummeSub1_visible","association":"refs","refId":1477},{"name":"URA_krRatingorientierteBilanzsummeSub2_visible","association":"refs","refId":1482},{"name":"URA_krRatingorientierteBilanzsummeSub3_visible","association":"refs","refId":1487},{"name":"URA_krRatingorientierteBilanzsummeSub4_visible","association":"refs","refId":1492},{"name":"URA_krRatingorientierteBilanzsummeSub5_visible","association":"refs","refId":1497}],"deps":{"URA_krAnteilEigenmittel_visible":true},"original":"krAnteilEigenmittel.visible&&1","index":1472,"name":"URA_krRatingorientierteBilanzsumme_visible","parsed":"m[1412]('1412',x,y.base,z,v,m)&&1","id":1472,"fflname":"krRatingorientierteBilanzsumme_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub1_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRatingSub7_value","association":"deps","refId":1213},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1049},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","association":"deps","refId":1069}],"deps":{"URA_krNettoBilanzsummeRatingSub7_value":true,"URA_sdeLongReceivedAdvanceOrdersCurrent_value":true,"URA_sdeReceivedAdvanceOrdersCurrent_value":true},"original":"krNettoBilanzsummeRatingSub7-sdeLongReceivedAdvanceOrdersCurrent-sdeReceivedAdvanceOrdersCurrent","index":1473,"name":"URA_krRatingorientierteBilanzsummeSub1_value","parsed":"m[1213]('1213',x,y.base,z,v,m)-m[1049]('1049',x,y.base,z,v,m)-m[1069]('1069',x,y.base,z,v,m)","id":1473,"fflname":"krRatingorientierteBilanzsummeSub1_value"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub1_valid":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178}],"deps":{"URA_krNettoBilanzsummeRating_value":true},"original":"If(!isNaN(OnNA(krNettoBilanzsummeRating,null)),'','Enter valid input.')","index":1474,"name":"URA_krRatingorientierteBilanzsummeSub1_valid","parsed":"!isNaN(OnNA(m[1178]('1178',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1474,"fflname":"krRatingorientierteBilanzsummeSub1_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub1_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Netto Bilanzsumme f?r das Rating<$'","index":1475,"name":"URA_krRatingorientierteBilanzsummeSub1_title","parsed":"'$>Netto Bilanzsumme f?r das Rating<$'","id":1475,"fflname":"krRatingorientierteBilanzsummeSub1_title"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub1_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1476,"name":"URA_krRatingorientierteBilanzsummeSub1_locked","parsed":"1","id":1476,"fflname":"krRatingorientierteBilanzsummeSub1_locked"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub1_visible":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_visible","association":"deps","refId":1472}],"deps":{"URA_krRatingorientierteBilanzsumme_visible":true},"original":"krRatingorientierteBilanzsumme.visible&&1","index":1477,"name":"URA_krRatingorientierteBilanzsummeSub1_visible","parsed":"m[1472]('1472',x,y.base,z,v,m)&&1","id":1477,"fflname":"krRatingorientierteBilanzsummeSub1_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub2_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1478,"name":"URA_krRatingorientierteBilanzsummeSub2_value","parsed":"null","id":1478,"fflname":"krRatingorientierteBilanzsummeSub2_value"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub2_valid":true},"formulaDependencys":[{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009}],"deps":{"URA_sdeGoodWill_value":true},"original":"If(!isNaN(OnNA(sdeGoodWill,null)),'','Enter valid input.')","index":1479,"name":"URA_krRatingorientierteBilanzsummeSub2_valid","parsed":"!isNaN(OnNA(m[1009]('1009',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1479,"fflname":"krRatingorientierteBilanzsummeSub2_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub2_title":true},"formulaDependencys":[],"deps":{},"original":"'$>GoodWill und selbst geschaffene Schutzrechte<$'","index":1480,"name":"URA_krRatingorientierteBilanzsummeSub2_title","parsed":"'$>GoodWill und selbst geschaffene Schutzrechte<$'","id":1480,"fflname":"krRatingorientierteBilanzsummeSub2_title"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub2_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1481,"name":"URA_krRatingorientierteBilanzsummeSub2_locked","parsed":"1","id":1481,"fflname":"krRatingorientierteBilanzsummeSub2_locked"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub2_visible":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_visible","association":"deps","refId":1472}],"deps":{"URA_krRatingorientierteBilanzsumme_visible":true},"original":"krRatingorientierteBilanzsumme.visible&&1","index":1482,"name":"URA_krRatingorientierteBilanzsummeSub2_visible","parsed":"m[1472]('1472',x,y.base,z,v,m)&&1","id":1482,"fflname":"krRatingorientierteBilanzsummeSub2_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub3_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1483,"name":"URA_krRatingorientierteBilanzsummeSub3_value","parsed":"null","id":1483,"fflname":"krRatingorientierteBilanzsummeSub3_value"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub3_valid":true},"formulaDependencys":[{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013}],"deps":{"URA_sdeReceivablesShareholders_value":true},"original":"If(!isNaN(OnNA(sdeReceivablesShareholders,null)),'','Enter valid input.')","index":1484,"name":"URA_krRatingorientierteBilanzsummeSub3_valid","parsed":"!isNaN(OnNA(m[1013]('1013',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1484,"fflname":"krRatingorientierteBilanzsummeSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Forderungen gegen?ber Gesellschaftern, Gesellschaftsorganen usw.<$'","index":1485,"name":"URA_krRatingorientierteBilanzsummeSub3_title","parsed":"'$>Forderungen gegen?ber Gesellschaftern, Gesellschaftsorganen usw.<$'","id":1485,"fflname":"krRatingorientierteBilanzsummeSub3_title"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1486,"name":"URA_krRatingorientierteBilanzsummeSub3_locked","parsed":"1","id":1486,"fflname":"krRatingorientierteBilanzsummeSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub3_visible":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_visible","association":"deps","refId":1472}],"deps":{"URA_krRatingorientierteBilanzsumme_visible":true},"original":"krRatingorientierteBilanzsumme.visible&&1","index":1487,"name":"URA_krRatingorientierteBilanzsummeSub3_visible","parsed":"m[1472]('1472',x,y.base,z,v,m)&&1","id":1487,"fflname":"krRatingorientierteBilanzsummeSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub4_value":true},"formulaDependencys":[],"deps":{},"original":"null","index":1488,"name":"URA_krRatingorientierteBilanzsummeSub4_value","parsed":"null","id":1488,"fflname":"krRatingorientierteBilanzsummeSub4_value"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub4_valid":true},"formulaDependencys":[{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017}],"deps":{"URA_sdeDeferredTaxesAssets_value":true},"original":"If(!isNaN(OnNA(sdeDeferredTaxesAssets,null)),'','Enter valid input.')","index":1489,"name":"URA_krRatingorientierteBilanzsummeSub4_valid","parsed":"!isNaN(OnNA(m[1017]('1017',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1489,"fflname":"krRatingorientierteBilanzsummeSub4_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub4_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Aktive latente Steuern<$'","index":1490,"name":"URA_krRatingorientierteBilanzsummeSub4_title","parsed":"'$>Aktive latente Steuern<$'","id":1490,"fflname":"krRatingorientierteBilanzsummeSub4_title"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub4_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1491,"name":"URA_krRatingorientierteBilanzsummeSub4_locked","parsed":"1","id":1491,"fflname":"krRatingorientierteBilanzsummeSub4_locked"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub4_visible":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_visible","association":"deps","refId":1472}],"deps":{"URA_krRatingorientierteBilanzsumme_visible":true},"original":"krRatingorientierteBilanzsumme.visible&&1","index":1492,"name":"URA_krRatingorientierteBilanzsummeSub4_visible","parsed":"m[1472]('1472',x,y.base,z,v,m)&&1","id":1492,"fflname":"krRatingorientierteBilanzsummeSub4_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub5_value":true},"formulaDependencys":[{"name":"URA_krNettoBilanzsummeRating_value","association":"deps","refId":1178},{"name":"URA_sdeGoodWill_value","association":"deps","refId":1009},{"name":"URA_sdeReceivablesShareholders_value","association":"deps","refId":1013},{"name":"URA_sdeDeferredTaxesAssets_value","association":"deps","refId":1017}],"deps":{"URA_krNettoBilanzsummeRating_value":true,"URA_sdeGoodWill_value":true,"URA_sdeReceivablesShareholders_value":true,"URA_sdeDeferredTaxesAssets_value":true},"original":"krNettoBilanzsummeRating-sdeGoodWill-sdeReceivablesShareholders-sdeDeferredTaxesAssets","index":1493,"name":"URA_krRatingorientierteBilanzsummeSub5_value","parsed":"m[1178]('1178',x,y.base,z,v,m)-m[1009]('1009',x,y.base,z,v,m)-m[1013]('1013',x,y.base,z,v,m)-m[1017]('1017',x,y.base,z,v,m)","id":1493,"fflname":"krRatingorientierteBilanzsummeSub5_value"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub5_valid":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_value","association":"deps","refId":1468}],"deps":{"URA_krRatingorientierteBilanzsumme_value":true},"original":"If(!isNaN(OnNA(krRatingorientierteBilanzsumme,null)),'','Enter valid input.')","index":1494,"name":"URA_krRatingorientierteBilanzsummeSub5_valid","parsed":"!isNaN(OnNA(m[1468]('1468',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1494,"fflname":"krRatingorientierteBilanzsummeSub5_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRatingorientierteBilanzsummeSub5_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ratingorientierte Bilanzsumme<$'","index":1495,"name":"URA_krRatingorientierteBilanzsummeSub5_title","parsed":"'$>Ratingorientierte Bilanzsumme<$'","id":1495,"fflname":"krRatingorientierteBilanzsummeSub5_title"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub5_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1496,"name":"URA_krRatingorientierteBilanzsummeSub5_locked","parsed":"1","id":1496,"fflname":"krRatingorientierteBilanzsummeSub5_locked"},{"type":"noCacheLocked","refs":{"URA_krRatingorientierteBilanzsummeSub5_visible":true},"formulaDependencys":[{"name":"URA_krRatingorientierteBilanzsumme_visible","association":"deps","refId":1472}],"deps":{"URA_krRatingorientierteBilanzsumme_visible":true},"original":"krRatingorientierteBilanzsumme.visible&&1","index":1497,"name":"URA_krRatingorientierteBilanzsummeSub5_visible","parsed":"m[1472]('1472',x,y.base,z,v,m)&&1","id":1497,"fflname":"krRatingorientierteBilanzsummeSub5_visible"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilEigenmittelSub3_value":true},"formulaDependencys":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","association":"deps","refId":1413},{"name":"URA_krRatingorientierteBilanzsumme_value","association":"deps","refId":1468}],"deps":{"URA_krWirtschaftlichesEigenKapitalRating_value":true,"URA_krRatingorientierteBilanzsumme_value":true},"original":"OnER(If(krWirtschaftlichesEigenKapitalRating<0&&krRatingorientierteBilanzsumme<0,-krWirtschaftlichesEigenKapitalRating/krRatingorientierteBilanzsumme,krWirtschaftlichesEigenKapitalRating/krRatingorientierteBilanzsumme),NA)","index":1498,"name":"URA_krAnteilEigenmittelSub3_value","parsed":"OnER(m[1413]('1413',x,y.base,z,v,m)<0&&m[1468]('1468',x,y.base,z,v,m)<0?-m[1413]('1413',x,y.base,z,v,m)/m[1468]('1468',x,y.base,z,v,m):m[1413]('1413',x,y.base,z,v,m)/m[1468]('1468',x,y.base,z,v,m),NA)","id":1498,"fflname":"krAnteilEigenmittelSub3_value"},{"type":"noCacheLocked","refs":{"URA_krAnteilEigenmittelSub3_valid":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_value","association":"deps","refId":1408}],"deps":{"URA_krAnteilEigenmittel_value":true},"original":"If(!isNaN(OnNA(krAnteilEigenmittel,null)),'','Enter valid input.')","index":1499,"name":"URA_krAnteilEigenmittelSub3_valid","parsed":"!isNaN(OnNA(m[1408]('1408',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1499,"fflname":"krAnteilEigenmittelSub3_valid"},{"type":"noCacheUnlocked","refs":{"URA_krAnteilEigenmittelSub3_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Anteil Eigenmittel<$'","index":1500,"name":"URA_krAnteilEigenmittelSub3_title","parsed":"'$>Anteil Eigenmittel<$'","id":1500,"fflname":"krAnteilEigenmittelSub3_title"},{"type":"noCacheLocked","refs":{"URA_krAnteilEigenmittelSub3_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1501,"name":"URA_krAnteilEigenmittelSub3_locked","parsed":"1","id":1501,"fflname":"krAnteilEigenmittelSub3_locked"},{"type":"noCacheLocked","refs":{"URA_krAnteilEigenmittelSub3_visible":true},"formulaDependencys":[{"name":"URA_krAnteilEigenmittel_visible","association":"deps","refId":1412}],"deps":{"URA_krAnteilEigenmittel_visible":true},"original":"krAnteilEigenmittel.visible&&1","index":1502,"name":"URA_krAnteilEigenmittelSub3_visible","parsed":"m[1412]('1412',x,y.base,z,v,m)&&1","id":1502,"fflname":"krAnteilEigenmittelSub3_visible"},{"type":"noCacheUnlocked","refs":{"URA_RatingFolder_value":true,"URA_RatingFolder_valid":true},"formulaDependencys":[{"name":"URA_RatingFolder_valid","association":"refs","refId":1504}],"deps":{},"original":"null","index":1503,"name":"URA_RatingFolder_value","parsed":"null","id":1503,"fflname":"RatingFolder_value"},{"type":"noCacheLocked","refs":{"URA_RatingFolder_valid":true},"formulaDependencys":[{"name":"URA_RatingFolder_value","association":"deps","refId":1503}],"deps":{"URA_RatingFolder_value":true},"original":"If(!isNaN(OnNA(RatingFolder,null)),'','Enter valid input.')","index":1504,"name":"URA_RatingFolder_valid","parsed":"!isNaN(OnNA(m[1503]('1503',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1504,"fflname":"RatingFolder_valid"},{"type":"noCacheUnlocked","refs":{"URA_RatingFolder_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Rating<$'","index":1505,"name":"URA_RatingFolder_title","parsed":"'$>Rating<$'","id":1505,"fflname":"RatingFolder_title"},{"type":"noCacheLocked","refs":{"URA_RatingFolder_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1506,"name":"URA_RatingFolder_locked","parsed":"1","id":1506,"fflname":"RatingFolder_locked"},{"type":"noCacheLocked","refs":{"URA_RatingFolder_visible":true,"URA_ModelConfiguration_visible":true,"URA_krInsolvenzquote_visible":true,"URA_krZValue_visible":true,"URA_krRDFsample_visible":true,"URA_krPD_visible":true,"URA_krUraRatingKlasse_visible":true,"URA_krUraAmpel_visible":true,"URA_krUraAmpelD_visible":true,"URA_krUraAmpelDNL_visible":true,"URA_krIfdRatingKlasse_visible":true,"URA_krIfdRatingKlasseD_visible":true},"formulaDependencys":[{"name":"URA_Q_ROOT_visible","association":"deps"},{"name":"URA_ModelConfiguration_visible","association":"refs","refId":1511},{"name":"URA_krInsolvenzquote_visible","association":"refs","refId":1516},{"name":"URA_krZValue_visible","association":"refs","refId":1521},{"name":"URA_krRDFsample_visible","association":"refs","refId":1526},{"name":"URA_krPD_visible","association":"refs","refId":1531},{"name":"URA_krUraRatingKlasse_visible","association":"refs","refId":1535},{"name":"URA_krUraAmpel_visible","association":"refs","refId":1540},{"name":"URA_krUraAmpelD_visible","association":"refs","refId":1544},{"name":"URA_krUraAmpelDNL_visible","association":"refs","refId":1548},{"name":"URA_krIfdRatingKlasse_visible","association":"refs","refId":1553},{"name":"URA_krIfdRatingKlasseD_visible","association":"refs","refId":1557}],"deps":{"URA_Q_ROOT_visible":true},"original":"Q_ROOT.visible&&0","index":1507,"name":"URA_RatingFolder_visible","parsed":"true&&0","id":1507,"fflname":"RatingFolder_visible"},{"type":"noCacheUnlocked","refs":{"URA_ModelConfiguration_value":true,"URA_ModelConfiguration_valid":true},"formulaDependencys":[{"name":"URA_ModelConfiguration_valid","association":"refs","refId":1509}],"deps":{},"original":"1","index":1508,"name":"URA_ModelConfiguration_value","parsed":"1","id":1508,"fflname":"ModelConfiguration_value"},{"type":"noCacheLocked","refs":{"URA_ModelConfiguration_valid":true},"formulaDependencys":[{"name":"URA_ModelConfiguration_value","association":"deps","refId":1508}],"deps":{"URA_ModelConfiguration_value":true},"original":"If(!isNaN(OnNA(ModelConfiguration,null)),'','Enter valid input.')","index":1509,"name":"URA_ModelConfiguration_valid","parsed":"!isNaN(OnNA(m[1508]('1508',x.doc,y.base,z,v,m),null))?'':'Enter valid input.'","id":1509,"fflname":"ModelConfiguration_valid"},{"type":"noCacheUnlocked","refs":{"URA_ModelConfiguration_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Modellkonfiguration<$'","index":1510,"name":"URA_ModelConfiguration_title","parsed":"'$>Modellkonfiguration<$'","id":1510,"fflname":"ModelConfiguration_title"},{"type":"noCacheLocked","refs":{"URA_ModelConfiguration_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1511,"name":"URA_ModelConfiguration_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1511,"fflname":"ModelConfiguration_visible"},{"type":"noCacheLocked","refs":{"URA_ModelConfiguration_choices":true},"formulaDependencys":[],"deps":{},"original":"[{'name':'0','value':'$>Deutsch<$'},{'name':'1','value':'$>Niederl?ndisch<$'}]","index":1512,"name":"URA_ModelConfiguration_choices","parsed":"[{'name':'0','value':'$>Deutsch<$'},{'name':'1','value':'$>Niederl?ndisch<$'}]","id":1512,"fflname":"ModelConfiguration_choices"},{"type":"noCacheUnlocked","refs":{"URA_krInsolvenzquote_value":true,"URA_krInsolvenzquote_valid":true},"formulaDependencys":[{"name":"URA_krInsolvenzquote_valid","association":"refs","refId":1514}],"deps":{},"original":"'if(ModelConfiguration==0,0.018,Case(YearInT,[2004, 0.016 || 2005, 0.015 || 2006, 0.009 || 2007, 0.009 || 2008, 0.009 || 2009, 0.013 || 2010, 0.016 || 2011, 0.017 || 2012, 0.021 || 2013, 0.023 || 2014, 0.019 || 2015, 0.014 || 2016, 0.012 || 2017, 0.012]))'","index":1513,"name":"URA_krInsolvenzquote_value","parsed":"'if(ModelConfiguration==0,0.018,Case(YearInT,[2004, 0.016 || 2005, 0.015 || 2006, 0.009 || 2007, 0.009 || 2008, 0.009 || 2009, 0.013 || 2010, 0.016 || 2011, 0.017 || 2012, 0.021 || 2013, 0.023 || 2014, 0.019 || 2015, 0.014 || 2016, 0.012 || 2017, 0.012]))'","id":1513,"fflname":"krInsolvenzquote_value"},{"type":"noCacheLocked","refs":{"URA_krInsolvenzquote_valid":true},"formulaDependencys":[{"name":"URA_krInsolvenzquote_value","association":"deps","refId":1513}],"deps":{"URA_krInsolvenzquote_value":true},"original":"If(!isNaN(OnNA(krInsolvenzquote,null)),'','Enter valid input.')","index":1514,"name":"URA_krInsolvenzquote_valid","parsed":"!isNaN(OnNA(m[1513]('1513',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1514,"fflname":"krInsolvenzquote_valid"},{"type":"noCacheUnlocked","refs":{"URA_krInsolvenzquote_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Apriori-Insolvenzquote<$'","index":1515,"name":"URA_krInsolvenzquote_title","parsed":"'$>Apriori-Insolvenzquote<$'","id":1515,"fflname":"krInsolvenzquote_title"},{"type":"noCacheLocked","refs":{"URA_krInsolvenzquote_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1516,"name":"URA_krInsolvenzquote_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1516,"fflname":"krInsolvenzquote_visible"},{"type":"noCacheUnlocked","refs":{"URA_krZValue_value":true,"URA_krZValue_valid":true},"formulaDependencys":[{"name":"URA_krAnteilOrdentlichenErgebnisses_value","association":"deps","refId":1128},{"name":"URA_krBankUndLieferantenanteil_value","association":"deps","refId":1238},{"name":"URA_krFremdKapitalzinslast_value","association":"deps","refId":1283},{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","association":"deps","refId":1348},{"name":"URA_krAnteilEigenmittel_value","association":"deps","refId":1408},{"name":"URA_krZValue_valid","association":"refs","refId":1518}],"deps":{"URA_krAnteilOrdentlichenErgebnisses_value":true,"URA_krBankUndLieferantenanteil_value":true,"URA_krFremdKapitalzinslast_value":true,"URA_krAnteilKurzfristigeVerbindlichkeiten_value":true,"URA_krAnteilEigenmittel_value":true},"original":"If(krAnteilOrdentlichenErgebnisses==NA||krBankUndLieferantenanteil==NA||krFremdKapitalzinslast==NA||krAnteilKurzfristigeVerbindlichkeiten==NA||krAnteilEigenmittel==NA,NA,4.03964180885174+9.29864789092051*krAnteilOrdentlichenErgebnisses+2.38051797748078*krAnteilEigenmittel-23.0757849643717*krFremdKapitalzinslast-1.85536265755931*krBankUndLieferantenanteil-.844454993608427*krAnteilKurzfristigeVerbindlichkeiten)","index":1517,"name":"URA_krZValue_value","parsed":"m[1128]('1128',x,y.base,z,v,m)==NA||m[1238]('1238',x,y.base,z,v,m)==NA||m[1283]('1283',x,y.base,z,v,m)==NA||m[1348]('1348',x,y.base,z,v,m)==NA||m[1408]('1408',x,y.base,z,v,m)==NA?NA:4.03964180885174+9.29864789092051*m[1128]('1128',x,y.base,z,v,m)+2.38051797748078*m[1408]('1408',x,y.base,z,v,m)-23.0757849643717*m[1283]('1283',x,y.base,z,v,m)-1.85536265755931*m[1238]('1238',x,y.base,z,v,m)-.844454993608427*m[1348]('1348',x,y.base,z,v,m)","id":1517,"fflname":"krZValue_value"},{"type":"noCacheLocked","refs":{"URA_krZValue_valid":true},"formulaDependencys":[{"name":"URA_krZValue_value","association":"deps","refId":1517}],"deps":{"URA_krZValue_value":true},"original":"If(!isNaN(OnNA(krZValue,null)),'','Enter valid input.')","index":1518,"name":"URA_krZValue_valid","parsed":"!isNaN(OnNA(m[1517]('1517',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1518,"fflname":"krZValue_valid"},{"type":"noCacheUnlocked","refs":{"URA_krZValue_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Z-Wert<$'","index":1519,"name":"URA_krZValue_title","parsed":"'$>Z-Wert<$'","id":1519,"fflname":"krZValue_title"},{"type":"noCacheLocked","refs":{"URA_krZValue_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1520,"name":"URA_krZValue_locked","parsed":"1","id":1520,"fflname":"krZValue_locked"},{"type":"noCacheLocked","refs":{"URA_krZValue_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1521,"name":"URA_krZValue_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1521,"fflname":"krZValue_visible"},{"type":"noCacheUnlocked","refs":{"URA_krRDFsample_value":true,"URA_krRDFsample_valid":true},"formulaDependencys":[{"name":"URA_krRDFsample_valid","association":"refs","refId":1523}],"deps":{},"original":".08223466368715092","index":1522,"name":"URA_krRDFsample_value","parsed":".08223466368715092","id":1522,"fflname":"krRDFsample_value"},{"type":"noCacheLocked","refs":{"URA_krRDFsample_valid":true},"formulaDependencys":[{"name":"URA_krRDFsample_value","association":"deps","refId":1522}],"deps":{"URA_krRDFsample_value":true},"original":"If(!isNaN(OnNA(krRDFsample,null)),'','Enter valid input.')","index":1523,"name":"URA_krRDFsample_valid","parsed":"!isNaN(OnNA(m[1522]('1522',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1523,"fflname":"krRDFsample_valid"},{"type":"noCacheUnlocked","refs":{"URA_krRDFsample_title":true},"formulaDependencys":[],"deps":{},"original":"'Relative Default Frequency (RDF) of sample'","index":1524,"name":"URA_krRDFsample_title","parsed":"'Relative Default Frequency (RDF) of sample'","id":1524,"fflname":"krRDFsample_title"},{"type":"noCacheLocked","refs":{"URA_krRDFsample_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1525,"name":"URA_krRDFsample_locked","parsed":"1","id":1525,"fflname":"krRDFsample_locked"},{"type":"noCacheLocked","refs":{"URA_krRDFsample_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1526,"name":"URA_krRDFsample_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1526,"fflname":"krRDFsample_visible"},{"type":"noCacheUnlocked","refs":{"URA_krPD_value":true,"URA_sdeURARatingKlasse_value":true,"URA_krPD_valid":true,"URA_krUraRatingKlasse_value":true,"URA_krUraAmpel_value":true,"URA_krIfdRatingKlasse_value":true},"formulaDependencys":[{"name":"URA_sdeURARatingKlasse_value","association":"refs","refId":1119},{"name":"URA_krPD_valid","association":"refs","refId":1528},{"name":"URA_krUraRatingKlasse_value","association":"refs","refId":1532},{"name":"URA_krUraAmpel_value","association":"refs","refId":1536},{"name":"URA_krIfdRatingKlasse_value","association":"refs","refId":1549}],"deps":{},"original":"'if(krZValue==NA,NA,OnER(1/(1+Exp(krZValue)*krRDFsample*(1-krInsolvenzquote)/krInsolvenzquote),NA))'","index":1527,"name":"URA_krPD_value","parsed":"'if(krZValue==NA,NA,OnER(1/(1+Exp(krZValue)*krRDFsample*(1-krInsolvenzquote)/krInsolvenzquote),NA))'","id":1527,"fflname":"krPD_value"},{"type":"noCacheLocked","refs":{"URA_krPD_valid":true},"formulaDependencys":[{"name":"URA_krPD_value","association":"deps","refId":1527}],"deps":{"URA_krPD_value":true},"original":"If(!isNaN(OnNA(krPD,null)),'','Enter valid input.')","index":1528,"name":"URA_krPD_valid","parsed":"!isNaN(OnNA(m[1527]('1527',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1528,"fflname":"krPD_valid"},{"type":"noCacheUnlocked","refs":{"URA_krPD_title":true},"formulaDependencys":[],"deps":{},"original":"'$>Ausfallwahrscheinlichkeit<$'","index":1529,"name":"URA_krPD_title","parsed":"'$>Ausfallwahrscheinlichkeit<$'","id":1529,"fflname":"krPD_title"},{"type":"noCacheLocked","refs":{"URA_krPD_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1530,"name":"URA_krPD_locked","parsed":"1","id":1530,"fflname":"krPD_locked"},{"type":"noCacheLocked","refs":{"URA_krPD_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1531,"name":"URA_krPD_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1531,"fflname":"krPD_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUraRatingKlasse_value":true},"formulaDependencys":[{"name":"URA_krPD_value","association":"deps","refId":1527}],"deps":{"URA_krPD_value":true},"original":"If(IsTrend,String(If(krPD==NA,' ',Case(krPD,[1e-5,'AAA'||2e-5,'AA+'||4e-5,'AA'||8e-5,'AA-'||1e-4,'A+'||2e-4,'A'||4e-4,'A-'||9e-4,'BBB+'||.0017,'BBB'||.0042,'BBB-'||.0087,'BB+'||.0156,'BB'||.0281,'BB-'||.0468,'B+'||.0716,'B'||.1162,'B-'||.154,'CCC+'||.1738,'CCC'||.215,'CCC-'||.26,'CC'||.26,'D']))),String(If(krPD==NA,' ',Case(krPD,[1e-5,'AAA'||2e-5,'AA+'||4e-5,'AA'||8e-5,'AA-'||1e-4,'A+'||2e-4,'A'||4e-4,'A-'||9e-4,'BBB+'||.0017,'BBB'||.0042,'BBB-'||.0087,'BB+'||.0156,'BB'||.0281,'BB-'||.0468,'B+'||.0716,'B'||.1162,'B-'||.154,'CCC+'||.1738,'CCC'||.215,'CCC-'||.26,'CC'||.26,'D']))))","index":1532,"name":"URA_krUraRatingKlasse_value","parsed":"x.istrend?String(m[1527]('1527',x,y.base,z,v,m)==NA?' ':(__c0s2=m[1527]('1527',x,y.base,z,v,m),__c0s2 === 0.00001?'AAA':__c0s2 === 0.00002?'AA+':__c0s2 === 0.00004?'AA':__c0s2 === 0.00008?'AA-':__c0s2 === 0.0001?'A+':__c0s2 === 0.0002?'A':__c0s2 === 0.0004?'A-':__c0s2 === 0.0009?'BBB+':__c0s2 === 0.0017?'BBB':__c0s2 === 0.0042?'BBB-':__c0s2 === 0.0087?'BB+':__c0s2 === 0.0156?'BB':__c0s2 === 0.0281?'BB-':__c0s2 === 0.0468?'B+':__c0s2 === 0.0716?'B':__c0s2 === 0.1162?'B-':__c0s2 === 0.154?'CCC+':__c0s2 === 0.1738?'CCC':__c0s2 === 0.215?'CCC-':__c0s2 === 0.26?'CC':__c0s2 === 0.26?'D':NA)):String(m[1527]('1527',x,y.base,z,v,m)==NA?' ':(__c0s3=m[1527]('1527',x,y.base,z,v,m),__c0s3 === 0.00001?'AAA':__c0s3 === 0.00002?'AA+':__c0s3 === 0.00004?'AA':__c0s3 === 0.00008?'AA-':__c0s3 === 0.0001?'A+':__c0s3 === 0.0002?'A':__c0s3 === 0.0004?'A-':__c0s3 === 0.0009?'BBB+':__c0s3 === 0.0017?'BBB':__c0s3 === 0.0042?'BBB-':__c0s3 === 0.0087?'BB+':__c0s3 === 0.0156?'BB':__c0s3 === 0.0281?'BB-':__c0s3 === 0.0468?'B+':__c0s3 === 0.0716?'B':__c0s3 === 0.1162?'B-':__c0s3 === 0.154?'CCC+':__c0s3 === 0.1738?'CCC':__c0s3 === 0.215?'CCC-':__c0s3 === 0.26?'CC':__c0s3 === 0.26?'D':NA))","id":1532,"fflname":"krUraRatingKlasse_value"},{"type":"noCacheUnlocked","refs":{"URA_krUraRatingKlasse_title":true},"formulaDependencys":[],"deps":{},"original":"'URA $>Ratingklasse<$'","index":1533,"name":"URA_krUraRatingKlasse_title","parsed":"'URA $>Ratingklasse<$'","id":1533,"fflname":"krUraRatingKlasse_title"},{"type":"noCacheLocked","refs":{"URA_krUraRatingKlasse_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1534,"name":"URA_krUraRatingKlasse_locked","parsed":"1","id":1534,"fflname":"krUraRatingKlasse_locked"},{"type":"noCacheLocked","refs":{"URA_krUraRatingKlasse_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1535,"name":"URA_krUraRatingKlasse_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1535,"fflname":"krUraRatingKlasse_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUraAmpel_value":true,"URA_krUraAmpel_valid":true,"URA_krUraAmpelD_value":true,"URA_krUraAmpelDNL_value":true},"formulaDependencys":[{"name":"URA_krPD_value","association":"deps","refId":1527},{"name":"URA_krUraAmpel_valid","association":"refs","refId":1537},{"name":"URA_krUraAmpelD_value","association":"refs","refId":1541},{"name":"URA_krUraAmpelDNL_value","association":"refs","refId":1545}],"deps":{"URA_krPD_value":true},"original":"Case(krPD,[.01,2||.03,1||.03,0])","index":1536,"name":"URA_krUraAmpel_value","parsed":"__c0s4=m[1527]('1527',x,y.base,z,v,m),__c0s4 === 0.01?2:__c0s4 === 0.03?1:__c0s4 === 0.03?0:NA","id":1536,"fflname":"krUraAmpel_value"},{"type":"noCacheLocked","refs":{"URA_krUraAmpel_valid":true},"formulaDependencys":[{"name":"URA_krUraAmpel_value","association":"deps","refId":1536}],"deps":{"URA_krUraAmpel_value":true},"original":"If(!isNaN(OnNA(krUraAmpel,null)),'','Enter valid input.')","index":1537,"name":"URA_krUraAmpel_valid","parsed":"!isNaN(OnNA(m[1536]('1536',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1537,"fflname":"krUraAmpel_valid"},{"type":"noCacheUnlocked","refs":{"URA_krUraAmpel_title":true},"formulaDependencys":[],"deps":{},"original":"'URA $>Ampel<$'","index":1538,"name":"URA_krUraAmpel_title","parsed":"'URA $>Ampel<$'","id":1538,"fflname":"krUraAmpel_title"},{"type":"noCacheLocked","refs":{"URA_krUraAmpel_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1539,"name":"URA_krUraAmpel_locked","parsed":"1","id":1539,"fflname":"krUraAmpel_locked"},{"type":"noCacheLocked","refs":{"URA_krUraAmpel_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1540,"name":"URA_krUraAmpel_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1540,"fflname":"krUraAmpel_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUraAmpelD_value":true},"formulaDependencys":[{"name":"URA_krUraAmpel_value","association":"deps","refId":1536}],"deps":{"URA_krUraAmpel_value":true},"original":"If(IsTrend,String(Case(krUraAmpel,[0,'Rot'||1,'Gelb'||2,'Grün'])),String(Case(krUraAmpel,[0,'Rot'||1,'Gelb'||2,'Grün'])))","index":1541,"name":"URA_krUraAmpelD_value","parsed":"x.istrend?String((__c0s5=m[1536]('1536',x,y.base,z,v,m),__c0s5 === 0?'Rot':__c0s5 === 1?'Gelb':__c0s5 === 2?'Grün':NA)):String((__c0s6=m[1536]('1536',x,y.base,z,v,m),__c0s6 === 0?'Rot':__c0s6 === 1?'Gelb':__c0s6 === 2?'Grün':NA))","id":1541,"fflname":"krUraAmpelD_value"},{"type":"noCacheUnlocked","refs":{"URA_krUraAmpelD_title":true},"formulaDependencys":[],"deps":{},"original":"'URA $>Ampel<$'","index":1542,"name":"URA_krUraAmpelD_title","parsed":"'URA $>Ampel<$'","id":1542,"fflname":"krUraAmpelD_title"},{"type":"noCacheLocked","refs":{"URA_krUraAmpelD_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1543,"name":"URA_krUraAmpelD_locked","parsed":"1","id":1543,"fflname":"krUraAmpelD_locked"},{"type":"noCacheLocked","refs":{"URA_krUraAmpelD_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1544,"name":"URA_krUraAmpelD_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1544,"fflname":"krUraAmpelD_visible"},{"type":"noCacheUnlocked","refs":{"URA_krUraAmpelDNL_value":true},"formulaDependencys":[{"name":"URA_krUraAmpel_value","association":"deps","refId":1536}],"deps":{"URA_krUraAmpel_value":true},"original":"If(IsTrend,String(Case(krUraAmpel,[0,'rood'||1,'oranje'||2,'groen'])),String(Case(krUraAmpel,[0,'rood'||1,'oranje'||2,'groen'])))","index":1545,"name":"URA_krUraAmpelDNL_value","parsed":"x.istrend?String((__c0s7=m[1536]('1536',x,y.base,z,v,m),__c0s7 === 0?'rood':__c0s7 === 1?'oranje':__c0s7 === 2?'groen':NA)):String((__c0s8=m[1536]('1536',x,y.base,z,v,m),__c0s8 === 0?'rood':__c0s8 === 1?'oranje':__c0s8 === 2?'groen':NA))","id":1545,"fflname":"krUraAmpelDNL_value"},{"type":"noCacheUnlocked","refs":{"URA_krUraAmpelDNL_title":true},"formulaDependencys":[],"deps":{},"original":"'URA $>Ampel<$'","index":1546,"name":"URA_krUraAmpelDNL_title","parsed":"'URA $>Ampel<$'","id":1546,"fflname":"krUraAmpelDNL_title"},{"type":"noCacheLocked","refs":{"URA_krUraAmpelDNL_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1547,"name":"URA_krUraAmpelDNL_locked","parsed":"1","id":1547,"fflname":"krUraAmpelDNL_locked"},{"type":"noCacheLocked","refs":{"URA_krUraAmpelDNL_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1548,"name":"URA_krUraAmpelDNL_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1548,"fflname":"krUraAmpelDNL_visible"},{"type":"noCacheUnlocked","refs":{"URA_krIfdRatingKlasse_value":true,"URA_krIfdRatingKlasse_valid":true,"URA_krIfdRatingKlasseD_value":true},"formulaDependencys":[{"name":"URA_krPD_value","association":"deps","refId":1527},{"name":"URA_krIfdRatingKlasse_valid","association":"refs","refId":1550},{"name":"URA_krIfdRatingKlasseD_value","association":"refs","refId":1554}],"deps":{"URA_krPD_value":true},"original":"Case(krPD,[.003,1||.007,2||.015,3||.03,4||.08,5||.08,6])","index":1549,"name":"URA_krIfdRatingKlasse_value","parsed":"__c0s9=m[1527]('1527',x,y.base,z,v,m),__c0s9 === 0.003?1:__c0s9 === 0.007?2:__c0s9 === 0.015?3:__c0s9 === 0.03?4:__c0s9 === 0.08?5:__c0s9 === 0.08?6:NA","id":1549,"fflname":"krIfdRatingKlasse_value"},{"type":"noCacheLocked","refs":{"URA_krIfdRatingKlasse_valid":true},"formulaDependencys":[{"name":"URA_krIfdRatingKlasse_value","association":"deps","refId":1549}],"deps":{"URA_krIfdRatingKlasse_value":true},"original":"If(!isNaN(OnNA(krIfdRatingKlasse,null)),'','Enter valid input.')","index":1550,"name":"URA_krIfdRatingKlasse_valid","parsed":"!isNaN(OnNA(m[1549]('1549',x,y.base,z,v,m),null))?'':'Enter valid input.'","id":1550,"fflname":"krIfdRatingKlasse_valid"},{"type":"noCacheUnlocked","refs":{"URA_krIfdRatingKlasse_title":true},"formulaDependencys":[],"deps":{},"original":"'IFD $>Ratingklasse<$'","index":1551,"name":"URA_krIfdRatingKlasse_title","parsed":"'IFD $>Ratingklasse<$'","id":1551,"fflname":"krIfdRatingKlasse_title"},{"type":"noCacheLocked","refs":{"URA_krIfdRatingKlasse_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1552,"name":"URA_krIfdRatingKlasse_locked","parsed":"1","id":1552,"fflname":"krIfdRatingKlasse_locked"},{"type":"noCacheLocked","refs":{"URA_krIfdRatingKlasse_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1553,"name":"URA_krIfdRatingKlasse_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1553,"fflname":"krIfdRatingKlasse_visible"},{"type":"noCacheUnlocked","refs":{"URA_krIfdRatingKlasseD_value":true},"formulaDependencys":[{"name":"URA_krIfdRatingKlasse_value","association":"deps","refId":1549}],"deps":{"URA_krIfdRatingKlasse_value":true},"original":"If(IsTrend,String(Case(krIfdRatingKlasse,[1,'1'||2,'2'||3,'3'||4,'4'||5,'5'||6,'6'])),String(Case(krIfdRatingKlasse,[1,'1'||2,'2'||3,'3'||4,'4'||5,'5'||6,'6'])))","index":1554,"name":"URA_krIfdRatingKlasseD_value","parsed":"x.istrend?String((__c0s10=m[1549]('1549',x,y.base,z,v,m),__c0s10 === 1?'1':__c0s10 === 2?'2':__c0s10 === 3?'3':__c0s10 === 4?'4':__c0s10 === 5?'5':__c0s10 === 6?'6':NA)):String((__c0s11=m[1549]('1549',x,y.base,z,v,m),__c0s11 === 1?'1':__c0s11 === 2?'2':__c0s11 === 3?'3':__c0s11 === 4?'4':__c0s11 === 5?'5':__c0s11 === 6?'6':NA))","id":1554,"fflname":"krIfdRatingKlasseD_value"},{"type":"noCacheUnlocked","refs":{"URA_krIfdRatingKlasseD_title":true},"formulaDependencys":[],"deps":{},"original":"'IFD $>Ratingklasse<$'","index":1555,"name":"URA_krIfdRatingKlasseD_title","parsed":"'IFD $>Ratingklasse<$'","id":1555,"fflname":"krIfdRatingKlasseD_title"},{"type":"noCacheLocked","refs":{"URA_krIfdRatingKlasseD_locked":true},"formulaDependencys":[],"deps":{},"original":"1","index":1556,"name":"URA_krIfdRatingKlasseD_locked","parsed":"1","id":1556,"fflname":"krIfdRatingKlasseD_locked"},{"type":"noCacheLocked","refs":{"URA_krIfdRatingKlasseD_visible":true},"formulaDependencys":[{"name":"URA_RatingFolder_visible","association":"deps","refId":1507}],"deps":{"URA_RatingFolder_visible":true},"original":"RatingFolder.visible&&1","index":1557,"name":"URA_krIfdRatingKlasseD_visible","parsed":"m[1507]('1507',x,y.base,z,v,m)&&1","id":1557,"fflname":"krIfdRatingKlasseD_visible"}],"variables":[{"name":"MATRIX_VALUES","expression":null}],"data":{},"nodes":[{"name":"URA_root_value","rowId":"root","colId":"value","solutionName":"URA","frequency":"document","displayAs":"SectionAnswerType","nodes":[{"name":"URA_Q_ROOT_value","rowId":"Q_ROOT","colId":"value","identifier":"URA_root_value"}],"ref":1002,"formulaName":"URA_root_value","refId":1001,"datatype":"number"},{"rowId":"Q_ROOT","solutionName":"URA","colId":"value","name":"URA_Q_ROOT_value","nodes":[{"name":"URA_SimpleEntryFolder_value","rowId":"SimpleEntryFolder","colId":"value","identifier":"URA_Q_ROOT_value"},{"name":"URA_RatioFolder_value","rowId":"RatioFolder","colId":"value","identifier":"URA_Q_ROOT_value"},{"name":"URA_RatingFolder_value","rowId":"RatingFolder","colId":"value","identifier":"URA_Q_ROOT_value"}],"displaytype":"scorecard","ref":1003,"formulaName":"URA_Q_ROOT_value","refId":1003,"displayAs":"scorecard","frequency":"column","datatype":"number","parentName":"root_value"},{"rowId":"SimpleEntryFolder","solutionName":"URA","colId":"value","name":"URA_SimpleEntryFolder_value","nodes":[{"name":"URA_sdeGoodWill_value","rowId":"sdeGoodWill","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeReceivablesShareholders_value","rowId":"sdeReceivablesShareholders","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeDeferredTaxesAssets_value","rowId":"sdeDeferredTaxesAssets","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeEquity_value","rowId":"sdeEquity","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeResultForTheYear_value","rowId":"sdeResultForTheYear","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeVarCapLimitedPartners_value","rowId":"sdeVarCapLimitedPartners","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeProvisions_value","rowId":"sdeProvisions","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLiabilitiesLong_value","rowId":"sdeLiabilitiesLong","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLiabilitiesBankLong_value","rowId":"sdeLiabilitiesBankLong","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLongTradePayables_value","rowId":"sdeLongTradePayables","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","rowId":"sdeLongReceivedAdvanceOrdersCurrent","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","rowId":"sdeLiabilitiesToShareholdersOver5Y","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLiabilitiesShort_value","rowId":"sdeLiabilitiesShort","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeLiabilitiesBankShort_value","rowId":"sdeLiabilitiesBankShort","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeTradePayables_value","rowId":"sdeTradePayables","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeReceivedAdvanceOrdersCurrent_value","rowId":"sdeReceivedAdvanceOrdersCurrent","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeShortShareholderPayables_value","rowId":"sdeShortShareholderPayables","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeBalanceSheetTotal_value","rowId":"sdeBalanceSheetTotal","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeSales_value","rowId":"sdeSales","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeDepreciation_value","rowId":"sdeDepreciation","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeResultCorrections_value","rowId":"sdeResultCorrections","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeEBIT_value","rowId":"sdeEBIT","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeInterestEarnings_value","rowId":"sdeInterestEarnings","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeInterestExpenses_value","rowId":"sdeInterestExpenses","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeParticipationEarnings_value","rowId":"sdeParticipationEarnings","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeEntrepreneurFeeOutsideResult_value","rowId":"sdeEntrepreneurFeeOutsideResult","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdePD_value","rowId":"sdePD","colId":"value","identifier":"URA_SimpleEntryFolder_value"},{"name":"URA_sdeURARatingKlasse_value","rowId":"sdeURARatingKlasse","colId":"value","identifier":"URA_SimpleEntryFolder_value"}],"displaytype":"Input","ref":1004,"formulaName":"URA_SimpleEntryFolder_value","refId":1004,"displayAs":"Input","frequency":"column","title_locked":true,"datatype":"number","parentName":"Q_ROOT_value"},{"rowId":"SimpleEntryFolder","solutionName":"URA","colId":"valid","name":"URA_SimpleEntryFolder_valid","nodes":[],"ref":1005,"formulaName":"URA_SimpleEntryFolder_valid","refId":1005,"displayAs":"string"},{"rowId":"SimpleEntryFolder","solutionName":"URA","colId":"title","name":"URA_SimpleEntryFolder_title","nodes":[],"ref":1006,"formulaName":"URA_SimpleEntryFolder_title","refId":1006,"displayAs":"string"},{"rowId":"SimpleEntryFolder","solutionName":"URA","colId":"locked","name":"URA_SimpleEntryFolder_locked","nodes":[],"ref":1007,"formulaName":"URA_SimpleEntryFolder_locked","refId":1007,"displayAs":"string"},{"rowId":"SimpleEntryFolder","solutionName":"URA","colId":"visible","name":"URA_SimpleEntryFolder_visible","nodes":[],"ref":1008,"formulaName":"URA_SimpleEntryFolder_visible","refId":1008,"displayAs":"string"},{"rowId":"sdeGoodWill","solutionName":"URA","colId":"value","name":"URA_sdeGoodWill_value","nodes":[],"displaytype":"currency","ref":1009,"formulaName":"URA_sdeGoodWill_value","refId":1009,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeGoodWill","solutionName":"URA","colId":"valid","name":"URA_sdeGoodWill_valid","nodes":[],"ref":1010,"formulaName":"URA_sdeGoodWill_valid","refId":1010,"displayAs":"string"},{"rowId":"sdeGoodWill","solutionName":"URA","colId":"title","name":"URA_sdeGoodWill_title","nodes":[],"ref":1011,"formulaName":"URA_sdeGoodWill_title","refId":1011,"displayAs":"string"},{"rowId":"sdeGoodWill","solutionName":"URA","colId":"visible","name":"URA_sdeGoodWill_visible","nodes":[],"ref":1012,"formulaName":"URA_sdeGoodWill_visible","refId":1012,"displayAs":"string"},{"rowId":"sdeReceivablesShareholders","solutionName":"URA","colId":"value","name":"URA_sdeReceivablesShareholders_value","nodes":[],"displaytype":"currency","ref":1013,"formulaName":"URA_sdeReceivablesShareholders_value","refId":1013,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeReceivablesShareholders","solutionName":"URA","colId":"valid","name":"URA_sdeReceivablesShareholders_valid","nodes":[],"ref":1014,"formulaName":"URA_sdeReceivablesShareholders_valid","refId":1014,"displayAs":"string"},{"rowId":"sdeReceivablesShareholders","solutionName":"URA","colId":"title","name":"URA_sdeReceivablesShareholders_title","nodes":[],"ref":1015,"formulaName":"URA_sdeReceivablesShareholders_title","refId":1015,"displayAs":"string"},{"rowId":"sdeReceivablesShareholders","solutionName":"URA","colId":"visible","name":"URA_sdeReceivablesShareholders_visible","nodes":[],"ref":1016,"formulaName":"URA_sdeReceivablesShareholders_visible","refId":1016,"displayAs":"string"},{"rowId":"sdeDeferredTaxesAssets","solutionName":"URA","colId":"value","name":"URA_sdeDeferredTaxesAssets_value","nodes":[],"displaytype":"currency","ref":1017,"formulaName":"URA_sdeDeferredTaxesAssets_value","refId":1017,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeDeferredTaxesAssets","solutionName":"URA","colId":"valid","name":"URA_sdeDeferredTaxesAssets_valid","nodes":[],"ref":1018,"formulaName":"URA_sdeDeferredTaxesAssets_valid","refId":1018,"displayAs":"string"},{"rowId":"sdeDeferredTaxesAssets","solutionName":"URA","colId":"title","name":"URA_sdeDeferredTaxesAssets_title","nodes":[],"ref":1019,"formulaName":"URA_sdeDeferredTaxesAssets_title","refId":1019,"displayAs":"string"},{"rowId":"sdeDeferredTaxesAssets","solutionName":"URA","colId":"visible","name":"URA_sdeDeferredTaxesAssets_visible","nodes":[],"ref":1020,"formulaName":"URA_sdeDeferredTaxesAssets_visible","refId":1020,"displayAs":"string"},{"rowId":"sdeEquity","solutionName":"URA","colId":"value","name":"URA_sdeEquity_value","nodes":[],"displaytype":"currency","ref":1021,"formulaName":"URA_sdeEquity_value","refId":1021,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeEquity","solutionName":"URA","colId":"valid","name":"URA_sdeEquity_valid","nodes":[],"ref":1022,"formulaName":"URA_sdeEquity_valid","refId":1022,"displayAs":"string"},{"rowId":"sdeEquity","solutionName":"URA","colId":"title","name":"URA_sdeEquity_title","nodes":[],"ref":1023,"formulaName":"URA_sdeEquity_title","refId":1023,"displayAs":"string"},{"rowId":"sdeEquity","solutionName":"URA","colId":"visible","name":"URA_sdeEquity_visible","nodes":[],"ref":1024,"formulaName":"URA_sdeEquity_visible","refId":1024,"displayAs":"string"},{"rowId":"sdeResultForTheYear","solutionName":"URA","colId":"value","name":"URA_sdeResultForTheYear_value","nodes":[],"displaytype":"currency","ref":1025,"formulaName":"URA_sdeResultForTheYear_value","refId":1025,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeResultForTheYear","solutionName":"URA","colId":"valid","name":"URA_sdeResultForTheYear_valid","nodes":[],"ref":1026,"formulaName":"URA_sdeResultForTheYear_valid","refId":1026,"displayAs":"string"},{"rowId":"sdeResultForTheYear","solutionName":"URA","colId":"title","name":"URA_sdeResultForTheYear_title","nodes":[],"ref":1027,"formulaName":"URA_sdeResultForTheYear_title","refId":1027,"displayAs":"string"},{"rowId":"sdeResultForTheYear","solutionName":"URA","colId":"visible","name":"URA_sdeResultForTheYear_visible","nodes":[],"ref":1028,"formulaName":"URA_sdeResultForTheYear_visible","refId":1028,"displayAs":"string"},{"rowId":"sdeVarCapLimitedPartners","solutionName":"URA","colId":"value","name":"URA_sdeVarCapLimitedPartners_value","nodes":[],"displaytype":"currency","ref":1029,"formulaName":"URA_sdeVarCapLimitedPartners_value","refId":1029,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeVarCapLimitedPartners","solutionName":"URA","colId":"valid","name":"URA_sdeVarCapLimitedPartners_valid","nodes":[],"ref":1030,"formulaName":"URA_sdeVarCapLimitedPartners_valid","refId":1030,"displayAs":"string"},{"rowId":"sdeVarCapLimitedPartners","solutionName":"URA","colId":"title","name":"URA_sdeVarCapLimitedPartners_title","nodes":[],"ref":1031,"formulaName":"URA_sdeVarCapLimitedPartners_title","refId":1031,"displayAs":"string"},{"rowId":"sdeVarCapLimitedPartners","solutionName":"URA","colId":"visible","name":"URA_sdeVarCapLimitedPartners_visible","nodes":[],"ref":1032,"formulaName":"URA_sdeVarCapLimitedPartners_visible","refId":1032,"displayAs":"string"},{"rowId":"sdeProvisions","solutionName":"URA","colId":"value","name":"URA_sdeProvisions_value","nodes":[],"displaytype":"currency","ref":1033,"formulaName":"URA_sdeProvisions_value","refId":1033,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeProvisions","solutionName":"URA","colId":"valid","name":"URA_sdeProvisions_valid","nodes":[],"ref":1034,"formulaName":"URA_sdeProvisions_valid","refId":1034,"displayAs":"string"},{"rowId":"sdeProvisions","solutionName":"URA","colId":"title","name":"URA_sdeProvisions_title","nodes":[],"ref":1035,"formulaName":"URA_sdeProvisions_title","refId":1035,"displayAs":"string"},{"rowId":"sdeProvisions","solutionName":"URA","colId":"visible","name":"URA_sdeProvisions_visible","nodes":[],"ref":1036,"formulaName":"URA_sdeProvisions_visible","refId":1036,"displayAs":"string"},{"rowId":"sdeLiabilitiesLong","solutionName":"URA","colId":"value","name":"URA_sdeLiabilitiesLong_value","nodes":[],"displaytype":"currency","ref":1037,"formulaName":"URA_sdeLiabilitiesLong_value","refId":1037,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLiabilitiesLong","solutionName":"URA","colId":"valid","name":"URA_sdeLiabilitiesLong_valid","nodes":[],"ref":1038,"formulaName":"URA_sdeLiabilitiesLong_valid","refId":1038,"displayAs":"string"},{"rowId":"sdeLiabilitiesLong","solutionName":"URA","colId":"title","name":"URA_sdeLiabilitiesLong_title","nodes":[],"ref":1039,"formulaName":"URA_sdeLiabilitiesLong_title","refId":1039,"displayAs":"string"},{"rowId":"sdeLiabilitiesLong","solutionName":"URA","colId":"visible","name":"URA_sdeLiabilitiesLong_visible","nodes":[],"ref":1040,"formulaName":"URA_sdeLiabilitiesLong_visible","refId":1040,"displayAs":"string"},{"rowId":"sdeLiabilitiesBankLong","solutionName":"URA","colId":"value","name":"URA_sdeLiabilitiesBankLong_value","nodes":[],"displaytype":"currency","ref":1041,"formulaName":"URA_sdeLiabilitiesBankLong_value","refId":1041,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLiabilitiesBankLong","solutionName":"URA","colId":"valid","name":"URA_sdeLiabilitiesBankLong_valid","nodes":[],"ref":1042,"formulaName":"URA_sdeLiabilitiesBankLong_valid","refId":1042,"displayAs":"string"},{"rowId":"sdeLiabilitiesBankLong","solutionName":"URA","colId":"title","name":"URA_sdeLiabilitiesBankLong_title","nodes":[],"ref":1043,"formulaName":"URA_sdeLiabilitiesBankLong_title","refId":1043,"displayAs":"string"},{"rowId":"sdeLiabilitiesBankLong","solutionName":"URA","colId":"visible","name":"URA_sdeLiabilitiesBankLong_visible","nodes":[],"ref":1044,"formulaName":"URA_sdeLiabilitiesBankLong_visible","refId":1044,"displayAs":"string"},{"rowId":"sdeLongTradePayables","solutionName":"URA","colId":"value","name":"URA_sdeLongTradePayables_value","nodes":[],"displaytype":"currency","ref":1045,"formulaName":"URA_sdeLongTradePayables_value","refId":1045,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLongTradePayables","solutionName":"URA","colId":"valid","name":"URA_sdeLongTradePayables_valid","nodes":[],"ref":1046,"formulaName":"URA_sdeLongTradePayables_valid","refId":1046,"displayAs":"string"},{"rowId":"sdeLongTradePayables","solutionName":"URA","colId":"title","name":"URA_sdeLongTradePayables_title","nodes":[],"ref":1047,"formulaName":"URA_sdeLongTradePayables_title","refId":1047,"displayAs":"string"},{"rowId":"sdeLongTradePayables","solutionName":"URA","colId":"visible","name":"URA_sdeLongTradePayables_visible","nodes":[],"ref":1048,"formulaName":"URA_sdeLongTradePayables_visible","refId":1048,"displayAs":"string"},{"rowId":"sdeLongReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"value","name":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","nodes":[],"displaytype":"currency","ref":1049,"formulaName":"URA_sdeLongReceivedAdvanceOrdersCurrent_value","refId":1049,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLongReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"valid","name":"URA_sdeLongReceivedAdvanceOrdersCurrent_valid","nodes":[],"ref":1050,"formulaName":"URA_sdeLongReceivedAdvanceOrdersCurrent_valid","refId":1050,"displayAs":"string"},{"rowId":"sdeLongReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"title","name":"URA_sdeLongReceivedAdvanceOrdersCurrent_title","nodes":[],"ref":1051,"formulaName":"URA_sdeLongReceivedAdvanceOrdersCurrent_title","refId":1051,"displayAs":"string"},{"rowId":"sdeLongReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"visible","name":"URA_sdeLongReceivedAdvanceOrdersCurrent_visible","nodes":[],"ref":1052,"formulaName":"URA_sdeLongReceivedAdvanceOrdersCurrent_visible","refId":1052,"displayAs":"string"},{"rowId":"sdeLiabilitiesToShareholdersOver5Y","solutionName":"URA","colId":"value","name":"URA_sdeLiabilitiesToShareholdersOver5Y_value","nodes":[],"displaytype":"currency","ref":1053,"formulaName":"URA_sdeLiabilitiesToShareholdersOver5Y_value","refId":1053,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLiabilitiesToShareholdersOver5Y","solutionName":"URA","colId":"valid","name":"URA_sdeLiabilitiesToShareholdersOver5Y_valid","nodes":[],"ref":1054,"formulaName":"URA_sdeLiabilitiesToShareholdersOver5Y_valid","refId":1054,"displayAs":"string"},{"rowId":"sdeLiabilitiesToShareholdersOver5Y","solutionName":"URA","colId":"title","name":"URA_sdeLiabilitiesToShareholdersOver5Y_title","nodes":[],"ref":1055,"formulaName":"URA_sdeLiabilitiesToShareholdersOver5Y_title","refId":1055,"displayAs":"string"},{"rowId":"sdeLiabilitiesToShareholdersOver5Y","solutionName":"URA","colId":"visible","name":"URA_sdeLiabilitiesToShareholdersOver5Y_visible","nodes":[],"ref":1056,"formulaName":"URA_sdeLiabilitiesToShareholdersOver5Y_visible","refId":1056,"displayAs":"string"},{"rowId":"sdeLiabilitiesShort","solutionName":"URA","colId":"value","name":"URA_sdeLiabilitiesShort_value","nodes":[],"displaytype":"currency","ref":1057,"formulaName":"URA_sdeLiabilitiesShort_value","refId":1057,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLiabilitiesShort","solutionName":"URA","colId":"valid","name":"URA_sdeLiabilitiesShort_valid","nodes":[],"ref":1058,"formulaName":"URA_sdeLiabilitiesShort_valid","refId":1058,"displayAs":"string"},{"rowId":"sdeLiabilitiesShort","solutionName":"URA","colId":"title","name":"URA_sdeLiabilitiesShort_title","nodes":[],"ref":1059,"formulaName":"URA_sdeLiabilitiesShort_title","refId":1059,"displayAs":"string"},{"rowId":"sdeLiabilitiesShort","solutionName":"URA","colId":"visible","name":"URA_sdeLiabilitiesShort_visible","nodes":[],"ref":1060,"formulaName":"URA_sdeLiabilitiesShort_visible","refId":1060,"displayAs":"string"},{"rowId":"sdeLiabilitiesBankShort","solutionName":"URA","colId":"value","name":"URA_sdeLiabilitiesBankShort_value","nodes":[],"displaytype":"currency","ref":1061,"formulaName":"URA_sdeLiabilitiesBankShort_value","refId":1061,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeLiabilitiesBankShort","solutionName":"URA","colId":"valid","name":"URA_sdeLiabilitiesBankShort_valid","nodes":[],"ref":1062,"formulaName":"URA_sdeLiabilitiesBankShort_valid","refId":1062,"displayAs":"string"},{"rowId":"sdeLiabilitiesBankShort","solutionName":"URA","colId":"title","name":"URA_sdeLiabilitiesBankShort_title","nodes":[],"ref":1063,"formulaName":"URA_sdeLiabilitiesBankShort_title","refId":1063,"displayAs":"string"},{"rowId":"sdeLiabilitiesBankShort","solutionName":"URA","colId":"visible","name":"URA_sdeLiabilitiesBankShort_visible","nodes":[],"ref":1064,"formulaName":"URA_sdeLiabilitiesBankShort_visible","refId":1064,"displayAs":"string"},{"rowId":"sdeTradePayables","solutionName":"URA","colId":"value","name":"URA_sdeTradePayables_value","nodes":[],"displaytype":"currency","ref":1065,"formulaName":"URA_sdeTradePayables_value","refId":1065,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeTradePayables","solutionName":"URA","colId":"valid","name":"URA_sdeTradePayables_valid","nodes":[],"ref":1066,"formulaName":"URA_sdeTradePayables_valid","refId":1066,"displayAs":"string"},{"rowId":"sdeTradePayables","solutionName":"URA","colId":"title","name":"URA_sdeTradePayables_title","nodes":[],"ref":1067,"formulaName":"URA_sdeTradePayables_title","refId":1067,"displayAs":"string"},{"rowId":"sdeTradePayables","solutionName":"URA","colId":"visible","name":"URA_sdeTradePayables_visible","nodes":[],"ref":1068,"formulaName":"URA_sdeTradePayables_visible","refId":1068,"displayAs":"string"},{"rowId":"sdeReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"value","name":"URA_sdeReceivedAdvanceOrdersCurrent_value","nodes":[],"displaytype":"currency","ref":1069,"formulaName":"URA_sdeReceivedAdvanceOrdersCurrent_value","refId":1069,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"valid","name":"URA_sdeReceivedAdvanceOrdersCurrent_valid","nodes":[],"ref":1070,"formulaName":"URA_sdeReceivedAdvanceOrdersCurrent_valid","refId":1070,"displayAs":"string"},{"rowId":"sdeReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"title","name":"URA_sdeReceivedAdvanceOrdersCurrent_title","nodes":[],"ref":1071,"formulaName":"URA_sdeReceivedAdvanceOrdersCurrent_title","refId":1071,"displayAs":"string"},{"rowId":"sdeReceivedAdvanceOrdersCurrent","solutionName":"URA","colId":"visible","name":"URA_sdeReceivedAdvanceOrdersCurrent_visible","nodes":[],"ref":1072,"formulaName":"URA_sdeReceivedAdvanceOrdersCurrent_visible","refId":1072,"displayAs":"string"},{"rowId":"sdeShortShareholderPayables","solutionName":"URA","colId":"value","name":"URA_sdeShortShareholderPayables_value","nodes":[],"displaytype":"currency","ref":1073,"formulaName":"URA_sdeShortShareholderPayables_value","refId":1073,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeShortShareholderPayables","solutionName":"URA","colId":"valid","name":"URA_sdeShortShareholderPayables_valid","nodes":[],"ref":1074,"formulaName":"URA_sdeShortShareholderPayables_valid","refId":1074,"displayAs":"string"},{"rowId":"sdeShortShareholderPayables","solutionName":"URA","colId":"title","name":"URA_sdeShortShareholderPayables_title","nodes":[],"ref":1075,"formulaName":"URA_sdeShortShareholderPayables_title","refId":1075,"displayAs":"string"},{"rowId":"sdeShortShareholderPayables","solutionName":"URA","colId":"visible","name":"URA_sdeShortShareholderPayables_visible","nodes":[],"ref":1076,"formulaName":"URA_sdeShortShareholderPayables_visible","refId":1076,"displayAs":"string"},{"rowId":"sdeBalanceSheetTotal","solutionName":"URA","colId":"value","name":"URA_sdeBalanceSheetTotal_value","nodes":[],"displaytype":"currency","ref":1077,"formulaName":"URA_sdeBalanceSheetTotal_value","refId":1077,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeBalanceSheetTotal","solutionName":"URA","colId":"valid","name":"URA_sdeBalanceSheetTotal_valid","nodes":[],"ref":1078,"formulaName":"URA_sdeBalanceSheetTotal_valid","refId":1078,"displayAs":"string"},{"rowId":"sdeBalanceSheetTotal","solutionName":"URA","colId":"title","name":"URA_sdeBalanceSheetTotal_title","nodes":[],"ref":1079,"formulaName":"URA_sdeBalanceSheetTotal_title","refId":1079,"displayAs":"string"},{"rowId":"sdeBalanceSheetTotal","solutionName":"URA","colId":"locked","name":"URA_sdeBalanceSheetTotal_locked","nodes":[],"ref":1080,"formulaName":"URA_sdeBalanceSheetTotal_locked","refId":1080,"displayAs":"string"},{"rowId":"sdeBalanceSheetTotal","solutionName":"URA","colId":"visible","name":"URA_sdeBalanceSheetTotal_visible","nodes":[],"ref":1081,"formulaName":"URA_sdeBalanceSheetTotal_visible","refId":1081,"displayAs":"string"},{"rowId":"sdeSales","solutionName":"URA","colId":"value","name":"URA_sdeSales_value","nodes":[],"displaytype":"currency","ref":1082,"formulaName":"URA_sdeSales_value","refId":1082,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeSales","solutionName":"URA","colId":"valid","name":"URA_sdeSales_valid","nodes":[],"ref":1083,"formulaName":"URA_sdeSales_valid","refId":1083,"displayAs":"string"},{"rowId":"sdeSales","solutionName":"URA","colId":"title","name":"URA_sdeSales_title","nodes":[],"ref":1084,"formulaName":"URA_sdeSales_title","refId":1084,"displayAs":"string"},{"rowId":"sdeSales","solutionName":"URA","colId":"visible","name":"URA_sdeSales_visible","nodes":[],"ref":1085,"formulaName":"URA_sdeSales_visible","refId":1085,"displayAs":"string"},{"rowId":"sdeDepreciation","solutionName":"URA","colId":"value","name":"URA_sdeDepreciation_value","nodes":[],"displaytype":"currency","ref":1086,"formulaName":"URA_sdeDepreciation_value","refId":1086,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeDepreciation","solutionName":"URA","colId":"valid","name":"URA_sdeDepreciation_valid","nodes":[],"ref":1087,"formulaName":"URA_sdeDepreciation_valid","refId":1087,"displayAs":"string"},{"rowId":"sdeDepreciation","solutionName":"URA","colId":"title","name":"URA_sdeDepreciation_title","nodes":[],"ref":1088,"formulaName":"URA_sdeDepreciation_title","refId":1088,"displayAs":"string"},{"rowId":"sdeDepreciation","solutionName":"URA","colId":"visible","name":"URA_sdeDepreciation_visible","nodes":[],"ref":1089,"formulaName":"URA_sdeDepreciation_visible","refId":1089,"displayAs":"string"},{"rowId":"sdeResultCorrections","solutionName":"URA","colId":"value","name":"URA_sdeResultCorrections_value","nodes":[],"displaytype":"currency","ref":1090,"formulaName":"URA_sdeResultCorrections_value","refId":1090,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeResultCorrections","solutionName":"URA","colId":"valid","name":"URA_sdeResultCorrections_valid","nodes":[],"ref":1091,"formulaName":"URA_sdeResultCorrections_valid","refId":1091,"displayAs":"string"},{"rowId":"sdeResultCorrections","solutionName":"URA","colId":"title","name":"URA_sdeResultCorrections_title","nodes":[],"ref":1092,"formulaName":"URA_sdeResultCorrections_title","refId":1092,"displayAs":"string"},{"rowId":"sdeResultCorrections","solutionName":"URA","colId":"visible","name":"URA_sdeResultCorrections_visible","nodes":[],"ref":1093,"formulaName":"URA_sdeResultCorrections_visible","refId":1093,"displayAs":"string"},{"rowId":"sdeEBIT","solutionName":"URA","colId":"value","name":"URA_sdeEBIT_value","nodes":[],"displaytype":"currency","ref":1094,"formulaName":"URA_sdeEBIT_value","refId":1094,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeEBIT","solutionName":"URA","colId":"valid","name":"URA_sdeEBIT_valid","nodes":[],"ref":1095,"formulaName":"URA_sdeEBIT_valid","refId":1095,"displayAs":"string"},{"rowId":"sdeEBIT","solutionName":"URA","colId":"title","name":"URA_sdeEBIT_title","nodes":[],"ref":1096,"formulaName":"URA_sdeEBIT_title","refId":1096,"displayAs":"string"},{"rowId":"sdeEBIT","solutionName":"URA","colId":"visible","name":"URA_sdeEBIT_visible","nodes":[],"ref":1097,"formulaName":"URA_sdeEBIT_visible","refId":1097,"displayAs":"string"},{"rowId":"sdeInterestEarnings","solutionName":"URA","colId":"value","name":"URA_sdeInterestEarnings_value","nodes":[],"displaytype":"currency","ref":1098,"formulaName":"URA_sdeInterestEarnings_value","refId":1098,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeInterestEarnings","solutionName":"URA","colId":"valid","name":"URA_sdeInterestEarnings_valid","nodes":[],"ref":1099,"formulaName":"URA_sdeInterestEarnings_valid","refId":1099,"displayAs":"string"},{"rowId":"sdeInterestEarnings","solutionName":"URA","colId":"title","name":"URA_sdeInterestEarnings_title","nodes":[],"ref":1100,"formulaName":"URA_sdeInterestEarnings_title","refId":1100,"displayAs":"string"},{"rowId":"sdeInterestEarnings","solutionName":"URA","colId":"visible","name":"URA_sdeInterestEarnings_visible","nodes":[],"ref":1101,"formulaName":"URA_sdeInterestEarnings_visible","refId":1101,"displayAs":"string"},{"rowId":"sdeInterestExpenses","solutionName":"URA","colId":"value","name":"URA_sdeInterestExpenses_value","nodes":[],"displaytype":"currency","ref":1102,"formulaName":"URA_sdeInterestExpenses_value","refId":1102,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeInterestExpenses","solutionName":"URA","colId":"valid","name":"URA_sdeInterestExpenses_valid","nodes":[],"ref":1103,"formulaName":"URA_sdeInterestExpenses_valid","refId":1103,"displayAs":"string"},{"rowId":"sdeInterestExpenses","solutionName":"URA","colId":"title","name":"URA_sdeInterestExpenses_title","nodes":[],"ref":1104,"formulaName":"URA_sdeInterestExpenses_title","refId":1104,"displayAs":"string"},{"rowId":"sdeInterestExpenses","solutionName":"URA","colId":"visible","name":"URA_sdeInterestExpenses_visible","nodes":[],"ref":1105,"formulaName":"URA_sdeInterestExpenses_visible","refId":1105,"displayAs":"string"},{"rowId":"sdeParticipationEarnings","solutionName":"URA","colId":"value","name":"URA_sdeParticipationEarnings_value","nodes":[],"displaytype":"currency","ref":1106,"formulaName":"URA_sdeParticipationEarnings_value","refId":1106,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeParticipationEarnings","solutionName":"URA","colId":"valid","name":"URA_sdeParticipationEarnings_valid","nodes":[],"ref":1107,"formulaName":"URA_sdeParticipationEarnings_valid","refId":1107,"displayAs":"string"},{"rowId":"sdeParticipationEarnings","solutionName":"URA","colId":"title","name":"URA_sdeParticipationEarnings_title","nodes":[],"ref":1108,"formulaName":"URA_sdeParticipationEarnings_title","refId":1108,"displayAs":"string"},{"rowId":"sdeParticipationEarnings","solutionName":"URA","colId":"visible","name":"URA_sdeParticipationEarnings_visible","nodes":[],"ref":1109,"formulaName":"URA_sdeParticipationEarnings_visible","refId":1109,"displayAs":"string"},{"rowId":"sdeEntrepreneurFeeOutsideResult","solutionName":"URA","colId":"value","name":"URA_sdeEntrepreneurFeeOutsideResult_value","nodes":[],"displaytype":"currency","ref":1110,"formulaName":"URA_sdeEntrepreneurFeeOutsideResult_value","refId":1110,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeEntrepreneurFeeOutsideResult","solutionName":"URA","colId":"valid","name":"URA_sdeEntrepreneurFeeOutsideResult_valid","nodes":[],"ref":1111,"formulaName":"URA_sdeEntrepreneurFeeOutsideResult_valid","refId":1111,"displayAs":"string"},{"rowId":"sdeEntrepreneurFeeOutsideResult","solutionName":"URA","colId":"title","name":"URA_sdeEntrepreneurFeeOutsideResult_title","nodes":[],"ref":1112,"formulaName":"URA_sdeEntrepreneurFeeOutsideResult_title","refId":1112,"displayAs":"string"},{"rowId":"sdeEntrepreneurFeeOutsideResult","solutionName":"URA","colId":"visible","name":"URA_sdeEntrepreneurFeeOutsideResult_visible","nodes":[],"ref":1113,"formulaName":"URA_sdeEntrepreneurFeeOutsideResult_visible","refId":1113,"displayAs":"string"},{"rowId":"sdePD","solutionName":"URA","colId":"value","name":"URA_sdePD_value","nodes":[],"displaytype":"percentage","ref":1114,"formulaName":"URA_sdePD_value","refId":1114,"displayAs":"percentage","decimals":3,"frequency":"column","title_locked":true,"datatype":"number","parentName":"SimpleEntryFolder_value"},{"rowId":"sdePD","solutionName":"URA","colId":"valid","name":"URA_sdePD_valid","nodes":[],"ref":1115,"formulaName":"URA_sdePD_valid","refId":1115,"displayAs":"string"},{"rowId":"sdePD","solutionName":"URA","colId":"title","name":"URA_sdePD_title","nodes":[],"ref":1116,"formulaName":"URA_sdePD_title","refId":1116,"displayAs":"string"},{"rowId":"sdePD","solutionName":"URA","colId":"locked","name":"URA_sdePD_locked","nodes":[],"ref":1117,"formulaName":"URA_sdePD_locked","refId":1117,"displayAs":"string"},{"rowId":"sdePD","solutionName":"URA","colId":"visible","name":"URA_sdePD_visible","nodes":[],"ref":1118,"formulaName":"URA_sdePD_visible","refId":1118,"displayAs":"string"},{"rowId":"sdeURARatingKlasse","solutionName":"URA","colId":"value","name":"URA_sdeURARatingKlasse_value","nodes":[],"ref":1119,"formulaName":"URA_sdeURARatingKlasse_value","refId":1119,"displayAs":"string","frequency":"column","title_locked":true,"datatype":"string","parentName":"SimpleEntryFolder_value"},{"rowId":"sdeURARatingKlasse","solutionName":"URA","colId":"title","name":"URA_sdeURARatingKlasse_title","nodes":[],"ref":1120,"formulaName":"URA_sdeURARatingKlasse_title","refId":1120,"displayAs":"string"},{"rowId":"sdeURARatingKlasse","solutionName":"URA","colId":"locked","name":"URA_sdeURARatingKlasse_locked","nodes":[],"ref":1121,"formulaName":"URA_sdeURARatingKlasse_locked","refId":1121,"displayAs":"string"},{"rowId":"sdeURARatingKlasse","solutionName":"URA","colId":"visible","name":"URA_sdeURARatingKlasse_visible","nodes":[],"ref":1122,"formulaName":"URA_sdeURARatingKlasse_visible","refId":1122,"displayAs":"string"},{"rowId":"RatioFolder","solutionName":"URA","colId":"value","name":"URA_RatioFolder_value","nodes":[{"name":"URA_krAnteilOrdentlichenErgebnisses_value","rowId":"krAnteilOrdentlichenErgebnisses","colId":"value","identifier":"URA_RatioFolder_value"},{"name":"URA_krBankUndLieferantenanteil_value","rowId":"krBankUndLieferantenanteil","colId":"value","identifier":"URA_RatioFolder_value"},{"name":"URA_krFremdKapitalzinslast_value","rowId":"krFremdKapitalzinslast","colId":"value","identifier":"URA_RatioFolder_value"},{"name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","rowId":"krAnteilKurzfristigeVerbindlichkeiten","colId":"value","identifier":"URA_RatioFolder_value"},{"name":"URA_krAnteilEigenmittel_value","rowId":"krAnteilEigenmittel","colId":"value","identifier":"URA_RatioFolder_value"}],"displaytype":"currency","ref":1123,"formulaName":"URA_RatioFolder_value","refId":1123,"displayAs":"currency","frequency":"column","datatype":"number","parentName":"Q_ROOT_value"},{"rowId":"RatioFolder","solutionName":"URA","colId":"valid","name":"URA_RatioFolder_valid","nodes":[],"ref":1124,"formulaName":"URA_RatioFolder_valid","refId":1124,"displayAs":"string"},{"rowId":"RatioFolder","solutionName":"URA","colId":"title","name":"URA_RatioFolder_title","nodes":[],"ref":1125,"formulaName":"URA_RatioFolder_title","refId":1125,"displayAs":"string"},{"rowId":"RatioFolder","solutionName":"URA","colId":"locked","name":"URA_RatioFolder_locked","nodes":[],"ref":1126,"formulaName":"URA_RatioFolder_locked","refId":1126,"displayAs":"string"},{"rowId":"RatioFolder","solutionName":"URA","colId":"visible","name":"URA_RatioFolder_visible","nodes":[],"ref":1127,"formulaName":"URA_RatioFolder_visible","refId":1127,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnisses","solutionName":"URA","colId":"value","name":"URA_krAnteilOrdentlichenErgebnisses_value","nodes":[{"name":"URA_krOrdentlichesErgebnis_value","rowId":"krOrdentlichesErgebnis","colId":"value","identifier":"URA_krAnteilOrdentlichenErgebnisses_value"},{"name":"URA_krNettoBilanzsummeRating_value","rowId":"krNettoBilanzsummeRating","colId":"value","identifier":"URA_krAnteilOrdentlichenErgebnisses_value"},{"name":"URA_krAnteilOrdentlichenErgebnissesSub3_value","rowId":"krAnteilOrdentlichenErgebnissesSub3","colId":"value","identifier":"URA_krAnteilOrdentlichenErgebnisses_value"}],"displaytype":"percentage","ref":1128,"formulaName":"URA_krAnteilOrdentlichenErgebnisses_value","refId":1128,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatioFolder_value"},{"rowId":"krAnteilOrdentlichenErgebnisses","solutionName":"URA","colId":"valid","name":"URA_krAnteilOrdentlichenErgebnisses_valid","nodes":[],"ref":1129,"formulaName":"URA_krAnteilOrdentlichenErgebnisses_valid","refId":1129,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnisses","solutionName":"URA","colId":"title","name":"URA_krAnteilOrdentlichenErgebnisses_title","nodes":[],"ref":1130,"formulaName":"URA_krAnteilOrdentlichenErgebnisses_title","refId":1130,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnisses","solutionName":"URA","colId":"locked","name":"URA_krAnteilOrdentlichenErgebnisses_locked","nodes":[],"ref":1131,"formulaName":"URA_krAnteilOrdentlichenErgebnisses_locked","refId":1131,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnisses","solutionName":"URA","colId":"visible","name":"URA_krAnteilOrdentlichenErgebnisses_visible","nodes":[],"ref":1132,"formulaName":"URA_krAnteilOrdentlichenErgebnisses_visible","refId":1132,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnis","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnis_value","nodes":[{"name":"URA_krOrdentlichesErgebnisSub1_value","rowId":"krOrdentlichesErgebnisSub1","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub2_value","rowId":"krOrdentlichesErgebnisSub2","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub3_value","rowId":"krOrdentlichesErgebnisSub3","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub4_value","rowId":"krOrdentlichesErgebnisSub4","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub5_value","rowId":"krOrdentlichesErgebnisSub5","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub6_value","rowId":"krOrdentlichesErgebnisSub6","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub7_value","rowId":"krOrdentlichesErgebnisSub7","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"},{"name":"URA_krOrdentlichesErgebnisSub8_value","rowId":"krOrdentlichesErgebnisSub8","colId":"value","identifier":"URA_krOrdentlichesErgebnis_value"}],"displaytype":"currency","ref":1133,"formulaName":"URA_krOrdentlichesErgebnis_value","refId":1133,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilOrdentlichenErgebnisses_value"},{"rowId":"krOrdentlichesErgebnis","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnis_valid","nodes":[],"ref":1134,"formulaName":"URA_krOrdentlichesErgebnis_valid","refId":1134,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnis","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnis_title","nodes":[],"ref":1135,"formulaName":"URA_krOrdentlichesErgebnis_title","refId":1135,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnis","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnis_locked","nodes":[],"ref":1136,"formulaName":"URA_krOrdentlichesErgebnis_locked","refId":1136,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnis","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnis_visible","nodes":[],"ref":1137,"formulaName":"URA_krOrdentlichesErgebnis_visible","refId":1137,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub1","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub1_value","nodes":[],"displaytype":"currency","ref":1138,"formulaName":"URA_krOrdentlichesErgebnisSub1_value","refId":1138,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub1","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub1_valid","nodes":[],"ref":1139,"formulaName":"URA_krOrdentlichesErgebnisSub1_valid","refId":1139,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub1","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub1_title","nodes":[],"ref":1140,"formulaName":"URA_krOrdentlichesErgebnisSub1_title","refId":1140,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub1","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub1_locked","nodes":[],"ref":1141,"formulaName":"URA_krOrdentlichesErgebnisSub1_locked","refId":1141,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub1","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub1_visible","nodes":[],"ref":1142,"formulaName":"URA_krOrdentlichesErgebnisSub1_visible","refId":1142,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub2","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub2_value","nodes":[],"displaytype":"currency","ref":1143,"formulaName":"URA_krOrdentlichesErgebnisSub2_value","refId":1143,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub2","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub2_valid","nodes":[],"ref":1144,"formulaName":"URA_krOrdentlichesErgebnisSub2_valid","refId":1144,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub2","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub2_title","nodes":[],"ref":1145,"formulaName":"URA_krOrdentlichesErgebnisSub2_title","refId":1145,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub2","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub2_locked","nodes":[],"ref":1146,"formulaName":"URA_krOrdentlichesErgebnisSub2_locked","refId":1146,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub2","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub2_visible","nodes":[],"ref":1147,"formulaName":"URA_krOrdentlichesErgebnisSub2_visible","refId":1147,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub3","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub3_value","nodes":[],"displaytype":"currency","ref":1148,"formulaName":"URA_krOrdentlichesErgebnisSub3_value","refId":1148,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub3","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub3_valid","nodes":[],"ref":1149,"formulaName":"URA_krOrdentlichesErgebnisSub3_valid","refId":1149,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub3","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub3_title","nodes":[],"ref":1150,"formulaName":"URA_krOrdentlichesErgebnisSub3_title","refId":1150,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub3","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub3_locked","nodes":[],"ref":1151,"formulaName":"URA_krOrdentlichesErgebnisSub3_locked","refId":1151,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub3","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub3_visible","nodes":[],"ref":1152,"formulaName":"URA_krOrdentlichesErgebnisSub3_visible","refId":1152,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub4","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub4_value","nodes":[],"displaytype":"currency","ref":1153,"formulaName":"URA_krOrdentlichesErgebnisSub4_value","refId":1153,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub4","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub4_valid","nodes":[],"ref":1154,"formulaName":"URA_krOrdentlichesErgebnisSub4_valid","refId":1154,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub4","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub4_title","nodes":[],"ref":1155,"formulaName":"URA_krOrdentlichesErgebnisSub4_title","refId":1155,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub4","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub4_locked","nodes":[],"ref":1156,"formulaName":"URA_krOrdentlichesErgebnisSub4_locked","refId":1156,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub4","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub4_visible","nodes":[],"ref":1157,"formulaName":"URA_krOrdentlichesErgebnisSub4_visible","refId":1157,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub5","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub5_value","nodes":[],"displaytype":"currency","ref":1158,"formulaName":"URA_krOrdentlichesErgebnisSub5_value","refId":1158,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub5","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub5_valid","nodes":[],"ref":1159,"formulaName":"URA_krOrdentlichesErgebnisSub5_valid","refId":1159,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub5","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub5_title","nodes":[],"ref":1160,"formulaName":"URA_krOrdentlichesErgebnisSub5_title","refId":1160,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub5","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub5_locked","nodes":[],"ref":1161,"formulaName":"URA_krOrdentlichesErgebnisSub5_locked","refId":1161,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub5","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub5_visible","nodes":[],"ref":1162,"formulaName":"URA_krOrdentlichesErgebnisSub5_visible","refId":1162,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub6","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub6_value","nodes":[],"displaytype":"currency","ref":1163,"formulaName":"URA_krOrdentlichesErgebnisSub6_value","refId":1163,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub6","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub6_valid","nodes":[],"ref":1164,"formulaName":"URA_krOrdentlichesErgebnisSub6_valid","refId":1164,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub6","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub6_title","nodes":[],"ref":1165,"formulaName":"URA_krOrdentlichesErgebnisSub6_title","refId":1165,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub6","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub6_locked","nodes":[],"ref":1166,"formulaName":"URA_krOrdentlichesErgebnisSub6_locked","refId":1166,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub6","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub6_visible","nodes":[],"ref":1167,"formulaName":"URA_krOrdentlichesErgebnisSub6_visible","refId":1167,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub7","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub7_value","nodes":[],"displaytype":"currency","ref":1168,"formulaName":"URA_krOrdentlichesErgebnisSub7_value","refId":1168,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub7","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub7_valid","nodes":[],"ref":1169,"formulaName":"URA_krOrdentlichesErgebnisSub7_valid","refId":1169,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub7","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub7_title","nodes":[],"ref":1170,"formulaName":"URA_krOrdentlichesErgebnisSub7_title","refId":1170,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub7","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub7_locked","nodes":[],"ref":1171,"formulaName":"URA_krOrdentlichesErgebnisSub7_locked","refId":1171,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub7","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub7_visible","nodes":[],"ref":1172,"formulaName":"URA_krOrdentlichesErgebnisSub7_visible","refId":1172,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub8","solutionName":"URA","colId":"value","name":"URA_krOrdentlichesErgebnisSub8_value","nodes":[],"displaytype":"currency","ref":1173,"formulaName":"URA_krOrdentlichesErgebnisSub8_value","refId":1173,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krOrdentlichesErgebnis_value"},{"rowId":"krOrdentlichesErgebnisSub8","solutionName":"URA","colId":"valid","name":"URA_krOrdentlichesErgebnisSub8_valid","nodes":[],"ref":1174,"formulaName":"URA_krOrdentlichesErgebnisSub8_valid","refId":1174,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub8","solutionName":"URA","colId":"title","name":"URA_krOrdentlichesErgebnisSub8_title","nodes":[],"ref":1175,"formulaName":"URA_krOrdentlichesErgebnisSub8_title","refId":1175,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub8","solutionName":"URA","colId":"locked","name":"URA_krOrdentlichesErgebnisSub8_locked","nodes":[],"ref":1176,"formulaName":"URA_krOrdentlichesErgebnisSub8_locked","refId":1176,"displayAs":"string"},{"rowId":"krOrdentlichesErgebnisSub8","solutionName":"URA","colId":"visible","name":"URA_krOrdentlichesErgebnisSub8_visible","nodes":[],"ref":1177,"formulaName":"URA_krOrdentlichesErgebnisSub8_visible","refId":1177,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRating","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRating_value","nodes":[{"name":"URA_krNettoBilanzsummeRatingSub1_value","rowId":"krNettoBilanzsummeRatingSub1","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub2_value","rowId":"krNettoBilanzsummeRatingSub2","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub3_value","rowId":"krNettoBilanzsummeRatingSub3","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub4_value","rowId":"krNettoBilanzsummeRatingSub4","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub5_value","rowId":"krNettoBilanzsummeRatingSub5","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub6_value","rowId":"krNettoBilanzsummeRatingSub6","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub7_value","rowId":"krNettoBilanzsummeRatingSub7","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub8_value","rowId":"krNettoBilanzsummeRatingSub8","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub9_value","rowId":"krNettoBilanzsummeRatingSub9","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"},{"name":"URA_krNettoBilanzsummeRatingSub10_value","rowId":"krNettoBilanzsummeRatingSub10","colId":"value","identifier":"URA_krNettoBilanzsummeRating_value"}],"displaytype":"currency","ref":1178,"formulaName":"URA_krNettoBilanzsummeRating_value","refId":1178,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilOrdentlichenErgebnisses_value"},{"rowId":"krNettoBilanzsummeRating","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRating_valid","nodes":[],"ref":1179,"formulaName":"URA_krNettoBilanzsummeRating_valid","refId":1179,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRating","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRating_title","nodes":[],"ref":1180,"formulaName":"URA_krNettoBilanzsummeRating_title","refId":1180,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRating","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRating_locked","nodes":[],"ref":1181,"formulaName":"URA_krNettoBilanzsummeRating_locked","refId":1181,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRating","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRating_visible","nodes":[],"ref":1182,"formulaName":"URA_krNettoBilanzsummeRating_visible","refId":1182,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub1","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub1_value","nodes":[],"displaytype":"currency","ref":1183,"formulaName":"URA_krNettoBilanzsummeRatingSub1_value","refId":1183,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub1","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub1_valid","nodes":[],"ref":1184,"formulaName":"URA_krNettoBilanzsummeRatingSub1_valid","refId":1184,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub1","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub1_title","nodes":[],"ref":1185,"formulaName":"URA_krNettoBilanzsummeRatingSub1_title","refId":1185,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub1","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub1_locked","nodes":[],"ref":1186,"formulaName":"URA_krNettoBilanzsummeRatingSub1_locked","refId":1186,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub1","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub1_visible","nodes":[],"ref":1187,"formulaName":"URA_krNettoBilanzsummeRatingSub1_visible","refId":1187,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub2","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub2_value","nodes":[],"displaytype":"currency","ref":1188,"formulaName":"URA_krNettoBilanzsummeRatingSub2_value","refId":1188,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub2","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub2_valid","nodes":[],"ref":1189,"formulaName":"URA_krNettoBilanzsummeRatingSub2_valid","refId":1189,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub2","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub2_title","nodes":[],"ref":1190,"formulaName":"URA_krNettoBilanzsummeRatingSub2_title","refId":1190,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub2","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub2_locked","nodes":[],"ref":1191,"formulaName":"URA_krNettoBilanzsummeRatingSub2_locked","refId":1191,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub2","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub2_visible","nodes":[],"ref":1192,"formulaName":"URA_krNettoBilanzsummeRatingSub2_visible","refId":1192,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub3","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub3_value","nodes":[],"displaytype":"currency","ref":1193,"formulaName":"URA_krNettoBilanzsummeRatingSub3_value","refId":1193,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub3","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub3_valid","nodes":[],"ref":1194,"formulaName":"URA_krNettoBilanzsummeRatingSub3_valid","refId":1194,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub3","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub3_title","nodes":[],"ref":1195,"formulaName":"URA_krNettoBilanzsummeRatingSub3_title","refId":1195,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub3","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub3_locked","nodes":[],"ref":1196,"formulaName":"URA_krNettoBilanzsummeRatingSub3_locked","refId":1196,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub3","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub3_visible","nodes":[],"ref":1197,"formulaName":"URA_krNettoBilanzsummeRatingSub3_visible","refId":1197,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub4","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub4_value","nodes":[],"displaytype":"currency","ref":1198,"formulaName":"URA_krNettoBilanzsummeRatingSub4_value","refId":1198,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub4","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub4_valid","nodes":[],"ref":1199,"formulaName":"URA_krNettoBilanzsummeRatingSub4_valid","refId":1199,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub4","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub4_title","nodes":[],"ref":1200,"formulaName":"URA_krNettoBilanzsummeRatingSub4_title","refId":1200,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub4","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub4_locked","nodes":[],"ref":1201,"formulaName":"URA_krNettoBilanzsummeRatingSub4_locked","refId":1201,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub4","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub4_visible","nodes":[],"ref":1202,"formulaName":"URA_krNettoBilanzsummeRatingSub4_visible","refId":1202,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub5","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub5_value","nodes":[],"displaytype":"currency","ref":1203,"formulaName":"URA_krNettoBilanzsummeRatingSub5_value","refId":1203,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub5","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub5_valid","nodes":[],"ref":1204,"formulaName":"URA_krNettoBilanzsummeRatingSub5_valid","refId":1204,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub5","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub5_title","nodes":[],"ref":1205,"formulaName":"URA_krNettoBilanzsummeRatingSub5_title","refId":1205,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub5","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub5_locked","nodes":[],"ref":1206,"formulaName":"URA_krNettoBilanzsummeRatingSub5_locked","refId":1206,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub5","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub5_visible","nodes":[],"ref":1207,"formulaName":"URA_krNettoBilanzsummeRatingSub5_visible","refId":1207,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub6","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub6_value","nodes":[],"displaytype":"currency","ref":1208,"formulaName":"URA_krNettoBilanzsummeRatingSub6_value","refId":1208,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub6","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub6_valid","nodes":[],"ref":1209,"formulaName":"URA_krNettoBilanzsummeRatingSub6_valid","refId":1209,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub6","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub6_title","nodes":[],"ref":1210,"formulaName":"URA_krNettoBilanzsummeRatingSub6_title","refId":1210,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub6","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub6_locked","nodes":[],"ref":1211,"formulaName":"URA_krNettoBilanzsummeRatingSub6_locked","refId":1211,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub6","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub6_visible","nodes":[],"ref":1212,"formulaName":"URA_krNettoBilanzsummeRatingSub6_visible","refId":1212,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub7","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub7_value","nodes":[],"displaytype":"currency","ref":1213,"formulaName":"URA_krNettoBilanzsummeRatingSub7_value","refId":1213,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub7","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub7_valid","nodes":[],"ref":1214,"formulaName":"URA_krNettoBilanzsummeRatingSub7_valid","refId":1214,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub7","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub7_title","nodes":[],"ref":1215,"formulaName":"URA_krNettoBilanzsummeRatingSub7_title","refId":1215,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub7","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub7_locked","nodes":[],"ref":1216,"formulaName":"URA_krNettoBilanzsummeRatingSub7_locked","refId":1216,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub7","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub7_visible","nodes":[],"ref":1217,"formulaName":"URA_krNettoBilanzsummeRatingSub7_visible","refId":1217,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub8","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub8_value","nodes":[],"displaytype":"currency","ref":1218,"formulaName":"URA_krNettoBilanzsummeRatingSub8_value","refId":1218,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub8","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub8_valid","nodes":[],"ref":1219,"formulaName":"URA_krNettoBilanzsummeRatingSub8_valid","refId":1219,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub8","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub8_title","nodes":[],"ref":1220,"formulaName":"URA_krNettoBilanzsummeRatingSub8_title","refId":1220,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub8","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub8_locked","nodes":[],"ref":1221,"formulaName":"URA_krNettoBilanzsummeRatingSub8_locked","refId":1221,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub8","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub8_visible","nodes":[],"ref":1222,"formulaName":"URA_krNettoBilanzsummeRatingSub8_visible","refId":1222,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub9","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub9_value","nodes":[],"displaytype":"currency","ref":1223,"formulaName":"URA_krNettoBilanzsummeRatingSub9_value","refId":1223,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub9","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub9_valid","nodes":[],"ref":1224,"formulaName":"URA_krNettoBilanzsummeRatingSub9_valid","refId":1224,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub9","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub9_title","nodes":[],"ref":1225,"formulaName":"URA_krNettoBilanzsummeRatingSub9_title","refId":1225,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub9","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub9_locked","nodes":[],"ref":1226,"formulaName":"URA_krNettoBilanzsummeRatingSub9_locked","refId":1226,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub9","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub9_visible","nodes":[],"ref":1227,"formulaName":"URA_krNettoBilanzsummeRatingSub9_visible","refId":1227,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub10","solutionName":"URA","colId":"value","name":"URA_krNettoBilanzsummeRatingSub10_value","nodes":[],"displaytype":"currency","ref":1228,"formulaName":"URA_krNettoBilanzsummeRatingSub10_value","refId":1228,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krNettoBilanzsummeRating_value"},{"rowId":"krNettoBilanzsummeRatingSub10","solutionName":"URA","colId":"valid","name":"URA_krNettoBilanzsummeRatingSub10_valid","nodes":[],"ref":1229,"formulaName":"URA_krNettoBilanzsummeRatingSub10_valid","refId":1229,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub10","solutionName":"URA","colId":"title","name":"URA_krNettoBilanzsummeRatingSub10_title","nodes":[],"ref":1230,"formulaName":"URA_krNettoBilanzsummeRatingSub10_title","refId":1230,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub10","solutionName":"URA","colId":"locked","name":"URA_krNettoBilanzsummeRatingSub10_locked","nodes":[],"ref":1231,"formulaName":"URA_krNettoBilanzsummeRatingSub10_locked","refId":1231,"displayAs":"string"},{"rowId":"krNettoBilanzsummeRatingSub10","solutionName":"URA","colId":"visible","name":"URA_krNettoBilanzsummeRatingSub10_visible","nodes":[],"ref":1232,"formulaName":"URA_krNettoBilanzsummeRatingSub10_visible","refId":1232,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnissesSub3","solutionName":"URA","colId":"value","name":"URA_krAnteilOrdentlichenErgebnissesSub3_value","nodes":[],"displaytype":"percentage","ref":1233,"formulaName":"URA_krAnteilOrdentlichenErgebnissesSub3_value","refId":1233,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilOrdentlichenErgebnisses_value"},{"rowId":"krAnteilOrdentlichenErgebnissesSub3","solutionName":"URA","colId":"valid","name":"URA_krAnteilOrdentlichenErgebnissesSub3_valid","nodes":[],"ref":1234,"formulaName":"URA_krAnteilOrdentlichenErgebnissesSub3_valid","refId":1234,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnissesSub3","solutionName":"URA","colId":"title","name":"URA_krAnteilOrdentlichenErgebnissesSub3_title","nodes":[],"ref":1235,"formulaName":"URA_krAnteilOrdentlichenErgebnissesSub3_title","refId":1235,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnissesSub3","solutionName":"URA","colId":"locked","name":"URA_krAnteilOrdentlichenErgebnissesSub3_locked","nodes":[],"ref":1236,"formulaName":"URA_krAnteilOrdentlichenErgebnissesSub3_locked","refId":1236,"displayAs":"string"},{"rowId":"krAnteilOrdentlichenErgebnissesSub3","solutionName":"URA","colId":"visible","name":"URA_krAnteilOrdentlichenErgebnissesSub3_visible","nodes":[],"ref":1237,"formulaName":"URA_krAnteilOrdentlichenErgebnissesSub3_visible","refId":1237,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteil","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenanteil_value","nodes":[{"name":"URA_krBankUndLieferantenverbindlichkeiten_value","rowId":"krBankUndLieferantenverbindlichkeiten","colId":"value","identifier":"URA_krBankUndLieferantenanteil_value"},{"name":"URA_krBankUndLieferantenanteilSub2_value","rowId":"krBankUndLieferantenanteilSub2","colId":"value","identifier":"URA_krBankUndLieferantenanteil_value"},{"name":"URA_krBankUndLieferantenanteilSub3_value","rowId":"krBankUndLieferantenanteilSub3","colId":"value","identifier":"URA_krBankUndLieferantenanteil_value"}],"displaytype":"percentage","ref":1238,"formulaName":"URA_krBankUndLieferantenanteil_value","refId":1238,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatioFolder_value"},{"rowId":"krBankUndLieferantenanteil","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenanteil_valid","nodes":[],"ref":1239,"formulaName":"URA_krBankUndLieferantenanteil_valid","refId":1239,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteil","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenanteil_title","nodes":[],"ref":1240,"formulaName":"URA_krBankUndLieferantenanteil_title","refId":1240,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteil","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenanteil_locked","nodes":[],"ref":1241,"formulaName":"URA_krBankUndLieferantenanteil_locked","refId":1241,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteil","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenanteil_visible","nodes":[],"ref":1242,"formulaName":"URA_krBankUndLieferantenanteil_visible","refId":1242,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeiten","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenverbindlichkeiten_value","nodes":[{"name":"URA_krBankUndLieferantenverbindlichkeitenSub1_value","rowId":"krBankUndLieferantenverbindlichkeitenSub1","colId":"value","identifier":"URA_krBankUndLieferantenverbindlichkeiten_value"},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub2_value","rowId":"krBankUndLieferantenverbindlichkeitenSub2","colId":"value","identifier":"URA_krBankUndLieferantenverbindlichkeiten_value"},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub3_value","rowId":"krBankUndLieferantenverbindlichkeitenSub3","colId":"value","identifier":"URA_krBankUndLieferantenverbindlichkeiten_value"},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub4_value","rowId":"krBankUndLieferantenverbindlichkeitenSub4","colId":"value","identifier":"URA_krBankUndLieferantenverbindlichkeiten_value"},{"name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","rowId":"krBankUndLieferantenverbindlichkeitenSub5","colId":"value","identifier":"URA_krBankUndLieferantenverbindlichkeiten_value"}],"displaytype":"currency","ref":1243,"formulaName":"URA_krBankUndLieferantenverbindlichkeiten_value","refId":1243,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenanteil_value"},{"rowId":"krBankUndLieferantenverbindlichkeiten","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenverbindlichkeiten_valid","nodes":[],"ref":1244,"formulaName":"URA_krBankUndLieferantenverbindlichkeiten_valid","refId":1244,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeiten","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenverbindlichkeiten_title","nodes":[],"ref":1245,"formulaName":"URA_krBankUndLieferantenverbindlichkeiten_title","refId":1245,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeiten","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenverbindlichkeiten_locked","nodes":[],"ref":1246,"formulaName":"URA_krBankUndLieferantenverbindlichkeiten_locked","refId":1246,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeiten","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenverbindlichkeiten_visible","nodes":[],"ref":1247,"formulaName":"URA_krBankUndLieferantenverbindlichkeiten_visible","refId":1247,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub1","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenverbindlichkeitenSub1_value","nodes":[],"displaytype":"currency","ref":1248,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub1_value","refId":1248,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenverbindlichkeiten_value"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub1","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenverbindlichkeitenSub1_valid","nodes":[],"ref":1249,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub1_valid","refId":1249,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub1","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenverbindlichkeitenSub1_title","nodes":[],"ref":1250,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub1_title","refId":1250,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub1","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenverbindlichkeitenSub1_locked","nodes":[],"ref":1251,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub1_locked","refId":1251,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub1","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenverbindlichkeitenSub1_visible","nodes":[],"ref":1252,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub1_visible","refId":1252,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub2","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenverbindlichkeitenSub2_value","nodes":[],"displaytype":"currency","ref":1253,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub2_value","refId":1253,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenverbindlichkeiten_value"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub2","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenverbindlichkeitenSub2_valid","nodes":[],"ref":1254,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub2_valid","refId":1254,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub2","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenverbindlichkeitenSub2_title","nodes":[],"ref":1255,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub2_title","refId":1255,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub2","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenverbindlichkeitenSub2_locked","nodes":[],"ref":1256,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub2_locked","refId":1256,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub2","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenverbindlichkeitenSub2_visible","nodes":[],"ref":1257,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub2_visible","refId":1257,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub3","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenverbindlichkeitenSub3_value","nodes":[],"displaytype":"currency","ref":1258,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub3_value","refId":1258,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenverbindlichkeiten_value"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub3","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenverbindlichkeitenSub3_valid","nodes":[],"ref":1259,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub3_valid","refId":1259,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub3","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenverbindlichkeitenSub3_title","nodes":[],"ref":1260,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub3_title","refId":1260,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub3","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenverbindlichkeitenSub3_locked","nodes":[],"ref":1261,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub3_locked","refId":1261,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub3","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenverbindlichkeitenSub3_visible","nodes":[],"ref":1262,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub3_visible","refId":1262,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub4","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenverbindlichkeitenSub4_value","nodes":[],"displaytype":"currency","ref":1263,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub4_value","refId":1263,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenverbindlichkeiten_value"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub4","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenverbindlichkeitenSub4_valid","nodes":[],"ref":1264,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub4_valid","refId":1264,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub4","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenverbindlichkeitenSub4_title","nodes":[],"ref":1265,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub4_title","refId":1265,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub4","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenverbindlichkeitenSub4_locked","nodes":[],"ref":1266,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub4_locked","refId":1266,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub4","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenverbindlichkeitenSub4_visible","nodes":[],"ref":1267,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub4_visible","refId":1267,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub5","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","nodes":[],"displaytype":"currency","ref":1268,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub5_value","refId":1268,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenverbindlichkeiten_value"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub5","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenverbindlichkeitenSub5_valid","nodes":[],"ref":1269,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub5_valid","refId":1269,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub5","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenverbindlichkeitenSub5_title","nodes":[],"ref":1270,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub5_title","refId":1270,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub5","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenverbindlichkeitenSub5_locked","nodes":[],"ref":1271,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub5_locked","refId":1271,"displayAs":"string"},{"rowId":"krBankUndLieferantenverbindlichkeitenSub5","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenverbindlichkeitenSub5_visible","nodes":[],"ref":1272,"formulaName":"URA_krBankUndLieferantenverbindlichkeitenSub5_visible","refId":1272,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub2","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenanteilSub2_value","nodes":[],"displaytype":"currency","ref":1273,"formulaName":"URA_krBankUndLieferantenanteilSub2_value","refId":1273,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenanteil_value"},{"rowId":"krBankUndLieferantenanteilSub2","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenanteilSub2_valid","nodes":[],"ref":1274,"formulaName":"URA_krBankUndLieferantenanteilSub2_valid","refId":1274,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub2","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenanteilSub2_title","nodes":[],"ref":1275,"formulaName":"URA_krBankUndLieferantenanteilSub2_title","refId":1275,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub2","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenanteilSub2_locked","nodes":[],"ref":1276,"formulaName":"URA_krBankUndLieferantenanteilSub2_locked","refId":1276,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub2","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenanteilSub2_visible","nodes":[],"ref":1277,"formulaName":"URA_krBankUndLieferantenanteilSub2_visible","refId":1277,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub3","solutionName":"URA","colId":"value","name":"URA_krBankUndLieferantenanteilSub3_value","nodes":[],"displaytype":"percentage","ref":1278,"formulaName":"URA_krBankUndLieferantenanteilSub3_value","refId":1278,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"krBankUndLieferantenanteil_value"},{"rowId":"krBankUndLieferantenanteilSub3","solutionName":"URA","colId":"valid","name":"URA_krBankUndLieferantenanteilSub3_valid","nodes":[],"ref":1279,"formulaName":"URA_krBankUndLieferantenanteilSub3_valid","refId":1279,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub3","solutionName":"URA","colId":"title","name":"URA_krBankUndLieferantenanteilSub3_title","nodes":[],"ref":1280,"formulaName":"URA_krBankUndLieferantenanteilSub3_title","refId":1280,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub3","solutionName":"URA","colId":"locked","name":"URA_krBankUndLieferantenanteilSub3_locked","nodes":[],"ref":1281,"formulaName":"URA_krBankUndLieferantenanteilSub3_locked","refId":1281,"displayAs":"string"},{"rowId":"krBankUndLieferantenanteilSub3","solutionName":"URA","colId":"visible","name":"URA_krBankUndLieferantenanteilSub3_visible","nodes":[],"ref":1282,"formulaName":"URA_krBankUndLieferantenanteilSub3_visible","refId":1282,"displayAs":"string"},{"rowId":"krFremdKapitalzinslast","solutionName":"URA","colId":"value","name":"URA_krFremdKapitalzinslast_value","nodes":[{"name":"URA_krZinsen_value","rowId":"krZinsen","colId":"value","identifier":"URA_krFremdKapitalzinslast_value"},{"name":"URA_krVerbindlichkeiten_value","rowId":"krVerbindlichkeiten","colId":"value","identifier":"URA_krFremdKapitalzinslast_value"},{"name":"URA_krFremdKapitalzinslastSub3_value","rowId":"krFremdKapitalzinslastSub3","colId":"value","identifier":"URA_krFremdKapitalzinslast_value"}],"displaytype":"percentage","ref":1283,"formulaName":"URA_krFremdKapitalzinslast_value","refId":1283,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatioFolder_value"},{"rowId":"krFremdKapitalzinslast","solutionName":"URA","colId":"valid","name":"URA_krFremdKapitalzinslast_valid","nodes":[],"ref":1284,"formulaName":"URA_krFremdKapitalzinslast_valid","refId":1284,"displayAs":"string"},{"rowId":"krFremdKapitalzinslast","solutionName":"URA","colId":"title","name":"URA_krFremdKapitalzinslast_title","nodes":[],"ref":1285,"formulaName":"URA_krFremdKapitalzinslast_title","refId":1285,"displayAs":"string"},{"rowId":"krFremdKapitalzinslast","solutionName":"URA","colId":"locked","name":"URA_krFremdKapitalzinslast_locked","nodes":[],"ref":1286,"formulaName":"URA_krFremdKapitalzinslast_locked","refId":1286,"displayAs":"string"},{"rowId":"krFremdKapitalzinslast","solutionName":"URA","colId":"visible","name":"URA_krFremdKapitalzinslast_visible","nodes":[],"ref":1287,"formulaName":"URA_krFremdKapitalzinslast_visible","refId":1287,"displayAs":"string"},{"rowId":"krZinsen","solutionName":"URA","colId":"value","name":"URA_krZinsen_value","nodes":[{"name":"URA_krZinsenSub1_value","rowId":"krZinsenSub1","colId":"value","identifier":"URA_krZinsen_value"},{"name":"URA_krZinsenSub2_value","rowId":"krZinsenSub2","colId":"value","identifier":"URA_krZinsen_value"}],"displaytype":"currency","ref":1288,"formulaName":"URA_krZinsen_value","refId":1288,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krFremdKapitalzinslast_value"},{"rowId":"krZinsen","solutionName":"URA","colId":"valid","name":"URA_krZinsen_valid","nodes":[],"ref":1289,"formulaName":"URA_krZinsen_valid","refId":1289,"displayAs":"string"},{"rowId":"krZinsen","solutionName":"URA","colId":"title","name":"URA_krZinsen_title","nodes":[],"ref":1290,"formulaName":"URA_krZinsen_title","refId":1290,"displayAs":"string"},{"rowId":"krZinsen","solutionName":"URA","colId":"locked","name":"URA_krZinsen_locked","nodes":[],"ref":1291,"formulaName":"URA_krZinsen_locked","refId":1291,"displayAs":"string"},{"rowId":"krZinsen","solutionName":"URA","colId":"visible","name":"URA_krZinsen_visible","nodes":[],"ref":1292,"formulaName":"URA_krZinsen_visible","refId":1292,"displayAs":"string"},{"rowId":"krZinsenSub1","solutionName":"URA","colId":"value","name":"URA_krZinsenSub1_value","nodes":[],"displaytype":"currency","ref":1293,"formulaName":"URA_krZinsenSub1_value","refId":1293,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krZinsen_value"},{"rowId":"krZinsenSub1","solutionName":"URA","colId":"valid","name":"URA_krZinsenSub1_valid","nodes":[],"ref":1294,"formulaName":"URA_krZinsenSub1_valid","refId":1294,"displayAs":"string"},{"rowId":"krZinsenSub1","solutionName":"URA","colId":"title","name":"URA_krZinsenSub1_title","nodes":[],"ref":1295,"formulaName":"URA_krZinsenSub1_title","refId":1295,"displayAs":"string"},{"rowId":"krZinsenSub1","solutionName":"URA","colId":"locked","name":"URA_krZinsenSub1_locked","nodes":[],"ref":1296,"formulaName":"URA_krZinsenSub1_locked","refId":1296,"displayAs":"string"},{"rowId":"krZinsenSub1","solutionName":"URA","colId":"visible","name":"URA_krZinsenSub1_visible","nodes":[],"ref":1297,"formulaName":"URA_krZinsenSub1_visible","refId":1297,"displayAs":"string"},{"rowId":"krZinsenSub2","solutionName":"URA","colId":"value","name":"URA_krZinsenSub2_value","nodes":[],"displaytype":"currency","ref":1298,"formulaName":"URA_krZinsenSub2_value","refId":1298,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krZinsen_value"},{"rowId":"krZinsenSub2","solutionName":"URA","colId":"valid","name":"URA_krZinsenSub2_valid","nodes":[],"ref":1299,"formulaName":"URA_krZinsenSub2_valid","refId":1299,"displayAs":"string"},{"rowId":"krZinsenSub2","solutionName":"URA","colId":"title","name":"URA_krZinsenSub2_title","nodes":[],"ref":1300,"formulaName":"URA_krZinsenSub2_title","refId":1300,"displayAs":"string"},{"rowId":"krZinsenSub2","solutionName":"URA","colId":"locked","name":"URA_krZinsenSub2_locked","nodes":[],"ref":1301,"formulaName":"URA_krZinsenSub2_locked","refId":1301,"displayAs":"string"},{"rowId":"krZinsenSub2","solutionName":"URA","colId":"visible","name":"URA_krZinsenSub2_visible","nodes":[],"ref":1302,"formulaName":"URA_krZinsenSub2_visible","refId":1302,"displayAs":"string"},{"rowId":"krVerbindlichkeiten","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeiten_value","nodes":[{"name":"URA_krVerbindlichkeitenSub1_value","rowId":"krVerbindlichkeitenSub1","colId":"value","identifier":"URA_krVerbindlichkeiten_value"},{"name":"URA_krVerbindlichkeitenSub2_value","rowId":"krVerbindlichkeitenSub2","colId":"value","identifier":"URA_krVerbindlichkeiten_value"},{"name":"URA_krVerbindlichkeitenSub3_value","rowId":"krVerbindlichkeitenSub3","colId":"value","identifier":"URA_krVerbindlichkeiten_value"},{"name":"URA_krVerbindlichkeitenSub4_value","rowId":"krVerbindlichkeitenSub4","colId":"value","identifier":"URA_krVerbindlichkeiten_value"},{"name":"URA_krVerbindlichkeitenSub5_value","rowId":"krVerbindlichkeitenSub5","colId":"value","identifier":"URA_krVerbindlichkeiten_value"},{"name":"URA_krVerbindlichkeitenSub6_value","rowId":"krVerbindlichkeitenSub6","colId":"value","identifier":"URA_krVerbindlichkeiten_value"},{"name":"URA_krVerbindlichkeitenSub7_value","rowId":"krVerbindlichkeitenSub7","colId":"value","identifier":"URA_krVerbindlichkeiten_value"}],"displaytype":"currency","ref":1303,"formulaName":"URA_krVerbindlichkeiten_value","refId":1303,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krFremdKapitalzinslast_value"},{"rowId":"krVerbindlichkeiten","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeiten_valid","nodes":[],"ref":1304,"formulaName":"URA_krVerbindlichkeiten_valid","refId":1304,"displayAs":"string"},{"rowId":"krVerbindlichkeiten","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeiten_title","nodes":[],"ref":1305,"formulaName":"URA_krVerbindlichkeiten_title","refId":1305,"displayAs":"string"},{"rowId":"krVerbindlichkeiten","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeiten_locked","nodes":[],"ref":1306,"formulaName":"URA_krVerbindlichkeiten_locked","refId":1306,"displayAs":"string"},{"rowId":"krVerbindlichkeiten","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeiten_visible","nodes":[],"ref":1307,"formulaName":"URA_krVerbindlichkeiten_visible","refId":1307,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub1","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub1_value","nodes":[],"displaytype":"currency","ref":1308,"formulaName":"URA_krVerbindlichkeitenSub1_value","refId":1308,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub1","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub1_valid","nodes":[],"ref":1309,"formulaName":"URA_krVerbindlichkeitenSub1_valid","refId":1309,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub1","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub1_title","nodes":[],"ref":1310,"formulaName":"URA_krVerbindlichkeitenSub1_title","refId":1310,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub1","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub1_locked","nodes":[],"ref":1311,"formulaName":"URA_krVerbindlichkeitenSub1_locked","refId":1311,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub1","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub1_visible","nodes":[],"ref":1312,"formulaName":"URA_krVerbindlichkeitenSub1_visible","refId":1312,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub2","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub2_value","nodes":[],"displaytype":"currency","ref":1313,"formulaName":"URA_krVerbindlichkeitenSub2_value","refId":1313,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub2","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub2_valid","nodes":[],"ref":1314,"formulaName":"URA_krVerbindlichkeitenSub2_valid","refId":1314,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub2","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub2_title","nodes":[],"ref":1315,"formulaName":"URA_krVerbindlichkeitenSub2_title","refId":1315,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub2","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub2_locked","nodes":[],"ref":1316,"formulaName":"URA_krVerbindlichkeitenSub2_locked","refId":1316,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub2","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub2_visible","nodes":[],"ref":1317,"formulaName":"URA_krVerbindlichkeitenSub2_visible","refId":1317,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub3","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub3_value","nodes":[],"displaytype":"currency","ref":1318,"formulaName":"URA_krVerbindlichkeitenSub3_value","refId":1318,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub3","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub3_valid","nodes":[],"ref":1319,"formulaName":"URA_krVerbindlichkeitenSub3_valid","refId":1319,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub3","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub3_title","nodes":[],"ref":1320,"formulaName":"URA_krVerbindlichkeitenSub3_title","refId":1320,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub3","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub3_locked","nodes":[],"ref":1321,"formulaName":"URA_krVerbindlichkeitenSub3_locked","refId":1321,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub3","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub3_visible","nodes":[],"ref":1322,"formulaName":"URA_krVerbindlichkeitenSub3_visible","refId":1322,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub4","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub4_value","nodes":[],"displaytype":"currency","ref":1323,"formulaName":"URA_krVerbindlichkeitenSub4_value","refId":1323,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub4","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub4_valid","nodes":[],"ref":1324,"formulaName":"URA_krVerbindlichkeitenSub4_valid","refId":1324,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub4","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub4_title","nodes":[],"ref":1325,"formulaName":"URA_krVerbindlichkeitenSub4_title","refId":1325,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub4","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub4_locked","nodes":[],"ref":1326,"formulaName":"URA_krVerbindlichkeitenSub4_locked","refId":1326,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub4","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub4_visible","nodes":[],"ref":1327,"formulaName":"URA_krVerbindlichkeitenSub4_visible","refId":1327,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub5","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub5_value","nodes":[],"displaytype":"currency","ref":1328,"formulaName":"URA_krVerbindlichkeitenSub5_value","refId":1328,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub5","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub5_valid","nodes":[],"ref":1329,"formulaName":"URA_krVerbindlichkeitenSub5_valid","refId":1329,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub5","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub5_title","nodes":[],"ref":1330,"formulaName":"URA_krVerbindlichkeitenSub5_title","refId":1330,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub5","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub5_locked","nodes":[],"ref":1331,"formulaName":"URA_krVerbindlichkeitenSub5_locked","refId":1331,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub5","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub5_visible","nodes":[],"ref":1332,"formulaName":"URA_krVerbindlichkeitenSub5_visible","refId":1332,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub6","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub6_value","nodes":[],"displaytype":"currency","ref":1333,"formulaName":"URA_krVerbindlichkeitenSub6_value","refId":1333,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub6","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub6_valid","nodes":[],"ref":1334,"formulaName":"URA_krVerbindlichkeitenSub6_valid","refId":1334,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub6","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub6_title","nodes":[],"ref":1335,"formulaName":"URA_krVerbindlichkeitenSub6_title","refId":1335,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub6","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub6_locked","nodes":[],"ref":1336,"formulaName":"URA_krVerbindlichkeitenSub6_locked","refId":1336,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub6","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub6_visible","nodes":[],"ref":1337,"formulaName":"URA_krVerbindlichkeitenSub6_visible","refId":1337,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub7","solutionName":"URA","colId":"value","name":"URA_krVerbindlichkeitenSub7_value","nodes":[],"displaytype":"currency","ref":1338,"formulaName":"URA_krVerbindlichkeitenSub7_value","refId":1338,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krVerbindlichkeiten_value"},{"rowId":"krVerbindlichkeitenSub7","solutionName":"URA","colId":"valid","name":"URA_krVerbindlichkeitenSub7_valid","nodes":[],"ref":1339,"formulaName":"URA_krVerbindlichkeitenSub7_valid","refId":1339,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub7","solutionName":"URA","colId":"title","name":"URA_krVerbindlichkeitenSub7_title","nodes":[],"ref":1340,"formulaName":"URA_krVerbindlichkeitenSub7_title","refId":1340,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub7","solutionName":"URA","colId":"locked","name":"URA_krVerbindlichkeitenSub7_locked","nodes":[],"ref":1341,"formulaName":"URA_krVerbindlichkeitenSub7_locked","refId":1341,"displayAs":"string"},{"rowId":"krVerbindlichkeitenSub7","solutionName":"URA","colId":"visible","name":"URA_krVerbindlichkeitenSub7_visible","nodes":[],"ref":1342,"formulaName":"URA_krVerbindlichkeitenSub7_visible","refId":1342,"displayAs":"string"},{"rowId":"krFremdKapitalzinslastSub3","solutionName":"URA","colId":"value","name":"URA_krFremdKapitalzinslastSub3_value","nodes":[],"displaytype":"percentage","ref":1343,"formulaName":"URA_krFremdKapitalzinslastSub3_value","refId":1343,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"krFremdKapitalzinslast_value"},{"rowId":"krFremdKapitalzinslastSub3","solutionName":"URA","colId":"valid","name":"URA_krFremdKapitalzinslastSub3_valid","nodes":[],"ref":1344,"formulaName":"URA_krFremdKapitalzinslastSub3_valid","refId":1344,"displayAs":"string"},{"rowId":"krFremdKapitalzinslastSub3","solutionName":"URA","colId":"title","name":"URA_krFremdKapitalzinslastSub3_title","nodes":[],"ref":1345,"formulaName":"URA_krFremdKapitalzinslastSub3_title","refId":1345,"displayAs":"string"},{"rowId":"krFremdKapitalzinslastSub3","solutionName":"URA","colId":"locked","name":"URA_krFremdKapitalzinslastSub3_locked","nodes":[],"ref":1346,"formulaName":"URA_krFremdKapitalzinslastSub3_locked","refId":1346,"displayAs":"string"},{"rowId":"krFremdKapitalzinslastSub3","solutionName":"URA","colId":"visible","name":"URA_krFremdKapitalzinslastSub3_visible","nodes":[],"ref":1347,"formulaName":"URA_krFremdKapitalzinslastSub3_visible","refId":1347,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"value","name":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","nodes":[{"name":"URA_krKurzfristigeVerbindlichkeiten_value","rowId":"krKurzfristigeVerbindlichkeiten","colId":"value","identifier":"URA_krAnteilKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krUmsatzerloese_value","rowId":"krUmsatzerloese","colId":"value","identifier":"URA_krAnteilKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value","rowId":"krAnteilKurzfristigeVerbindlichkeitenSub3","colId":"value","identifier":"URA_krAnteilKurzfristigeVerbindlichkeiten_value"}],"displaytype":"percentage","ref":1348,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeiten_value","refId":1348,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatioFolder_value"},{"rowId":"krAnteilKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"valid","name":"URA_krAnteilKurzfristigeVerbindlichkeiten_valid","nodes":[],"ref":1349,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeiten_valid","refId":1349,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"title","name":"URA_krAnteilKurzfristigeVerbindlichkeiten_title","nodes":[],"ref":1350,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeiten_title","refId":1350,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"locked","name":"URA_krAnteilKurzfristigeVerbindlichkeiten_locked","nodes":[],"ref":1351,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeiten_locked","refId":1351,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"visible","name":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","nodes":[],"ref":1352,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeiten_visible","refId":1352,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeiten_value","nodes":[{"name":"URA_krKurzfristigeVerbindlichkeitenSub1_value","rowId":"krKurzfristigeVerbindlichkeitenSub1","colId":"value","identifier":"URA_krKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krKurzfristigeVerbindlichkeitenSub2_value","rowId":"krKurzfristigeVerbindlichkeitenSub2","colId":"value","identifier":"URA_krKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krKurzfristigeVerbindlichkeitenSub3_value","rowId":"krKurzfristigeVerbindlichkeitenSub3","colId":"value","identifier":"URA_krKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krKurzfristigeVerbindlichkeitenSub4_value","rowId":"krKurzfristigeVerbindlichkeitenSub4","colId":"value","identifier":"URA_krKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krKurzfristigeVerbindlichkeitenSub5_value","rowId":"krKurzfristigeVerbindlichkeitenSub5","colId":"value","identifier":"URA_krKurzfristigeVerbindlichkeiten_value"},{"name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","rowId":"krKurzfristigeVerbindlichkeitenSub6","colId":"value","identifier":"URA_krKurzfristigeVerbindlichkeiten_value"}],"displaytype":"currency","ref":1353,"formulaName":"URA_krKurzfristigeVerbindlichkeiten_value","refId":1353,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeiten_valid","nodes":[],"ref":1354,"formulaName":"URA_krKurzfristigeVerbindlichkeiten_valid","refId":1354,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeiten_title","nodes":[],"ref":1355,"formulaName":"URA_krKurzfristigeVerbindlichkeiten_title","refId":1355,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeiten_locked","nodes":[],"ref":1356,"formulaName":"URA_krKurzfristigeVerbindlichkeiten_locked","refId":1356,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeiten","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeiten_visible","nodes":[],"ref":1357,"formulaName":"URA_krKurzfristigeVerbindlichkeiten_visible","refId":1357,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub1","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeitenSub1_value","nodes":[],"displaytype":"currency","ref":1358,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub1_value","refId":1358,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeitenSub1","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeitenSub1_valid","nodes":[],"ref":1359,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub1_valid","refId":1359,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub1","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeitenSub1_title","nodes":[],"ref":1360,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub1_title","refId":1360,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub1","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeitenSub1_locked","nodes":[],"ref":1361,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub1_locked","refId":1361,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub1","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeitenSub1_visible","nodes":[],"ref":1362,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub1_visible","refId":1362,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub2","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeitenSub2_value","nodes":[],"displaytype":"currency","ref":1363,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub2_value","refId":1363,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeitenSub2","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeitenSub2_valid","nodes":[],"ref":1364,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub2_valid","refId":1364,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub2","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeitenSub2_title","nodes":[],"ref":1365,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub2_title","refId":1365,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub2","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeitenSub2_locked","nodes":[],"ref":1366,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub2_locked","refId":1366,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub2","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeitenSub2_visible","nodes":[],"ref":1367,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub2_visible","refId":1367,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeitenSub3_value","nodes":[],"displaytype":"currency","ref":1368,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub3_value","refId":1368,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeitenSub3_valid","nodes":[],"ref":1369,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub3_valid","refId":1369,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeitenSub3_title","nodes":[],"ref":1370,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub3_title","refId":1370,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeitenSub3_locked","nodes":[],"ref":1371,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub3_locked","refId":1371,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeitenSub3_visible","nodes":[],"ref":1372,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub3_visible","refId":1372,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub4","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeitenSub4_value","nodes":[],"displaytype":"currency","ref":1373,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub4_value","refId":1373,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeitenSub4","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeitenSub4_valid","nodes":[],"ref":1374,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub4_valid","refId":1374,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub4","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeitenSub4_title","nodes":[],"ref":1375,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub4_title","refId":1375,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub4","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeitenSub4_locked","nodes":[],"ref":1376,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub4_locked","refId":1376,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub4","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeitenSub4_visible","nodes":[],"ref":1377,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub4_visible","refId":1377,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub5","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeitenSub5_value","nodes":[],"displaytype":"currency","ref":1378,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub5_value","refId":1378,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeitenSub5","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeitenSub5_valid","nodes":[],"ref":1379,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub5_valid","refId":1379,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub5","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeitenSub5_title","nodes":[],"ref":1380,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub5_title","refId":1380,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub5","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeitenSub5_locked","nodes":[],"ref":1381,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub5_locked","refId":1381,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub5","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeitenSub5_visible","nodes":[],"ref":1382,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub5_visible","refId":1382,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub6","solutionName":"URA","colId":"value","name":"URA_krKurzfristigeVerbindlichkeitenSub6_value","nodes":[],"displaytype":"currency","ref":1383,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub6_value","refId":1383,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krKurzfristigeVerbindlichkeiten_value"},{"rowId":"krKurzfristigeVerbindlichkeitenSub6","solutionName":"URA","colId":"valid","name":"URA_krKurzfristigeVerbindlichkeitenSub6_valid","nodes":[],"ref":1384,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub6_valid","refId":1384,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub6","solutionName":"URA","colId":"title","name":"URA_krKurzfristigeVerbindlichkeitenSub6_title","nodes":[],"ref":1385,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub6_title","refId":1385,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub6","solutionName":"URA","colId":"locked","name":"URA_krKurzfristigeVerbindlichkeitenSub6_locked","nodes":[],"ref":1386,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub6_locked","refId":1386,"displayAs":"string"},{"rowId":"krKurzfristigeVerbindlichkeitenSub6","solutionName":"URA","colId":"visible","name":"URA_krKurzfristigeVerbindlichkeitenSub6_visible","nodes":[],"ref":1387,"formulaName":"URA_krKurzfristigeVerbindlichkeitenSub6_visible","refId":1387,"displayAs":"string"},{"rowId":"krUmsatzerloese","solutionName":"URA","colId":"value","name":"URA_krUmsatzerloese_value","nodes":[{"name":"URA_krUmsatzerloeseSub1_value","rowId":"krUmsatzerloeseSub1","colId":"value","identifier":"URA_krUmsatzerloese_value"},{"name":"URA_krUmsatzerloeseSub2_value","rowId":"krUmsatzerloeseSub2","colId":"value","identifier":"URA_krUmsatzerloese_value"}],"displaytype":"currency","ref":1388,"formulaName":"URA_krUmsatzerloese_value","refId":1388,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilKurzfristigeVerbindlichkeiten_value"},{"rowId":"krUmsatzerloese","solutionName":"URA","colId":"valid","name":"URA_krUmsatzerloese_valid","nodes":[],"ref":1389,"formulaName":"URA_krUmsatzerloese_valid","refId":1389,"displayAs":"string"},{"rowId":"krUmsatzerloese","solutionName":"URA","colId":"title","name":"URA_krUmsatzerloese_title","nodes":[],"ref":1390,"formulaName":"URA_krUmsatzerloese_title","refId":1390,"displayAs":"string"},{"rowId":"krUmsatzerloese","solutionName":"URA","colId":"locked","name":"URA_krUmsatzerloese_locked","nodes":[],"ref":1391,"formulaName":"URA_krUmsatzerloese_locked","refId":1391,"displayAs":"string"},{"rowId":"krUmsatzerloese","solutionName":"URA","colId":"visible","name":"URA_krUmsatzerloese_visible","nodes":[],"ref":1392,"formulaName":"URA_krUmsatzerloese_visible","refId":1392,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub1","solutionName":"URA","colId":"value","name":"URA_krUmsatzerloeseSub1_value","nodes":[],"displaytype":"currency","ref":1393,"formulaName":"URA_krUmsatzerloeseSub1_value","refId":1393,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krUmsatzerloese_value"},{"rowId":"krUmsatzerloeseSub1","solutionName":"URA","colId":"valid","name":"URA_krUmsatzerloeseSub1_valid","nodes":[],"ref":1394,"formulaName":"URA_krUmsatzerloeseSub1_valid","refId":1394,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub1","solutionName":"URA","colId":"title","name":"URA_krUmsatzerloeseSub1_title","nodes":[],"ref":1395,"formulaName":"URA_krUmsatzerloeseSub1_title","refId":1395,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub1","solutionName":"URA","colId":"locked","name":"URA_krUmsatzerloeseSub1_locked","nodes":[],"ref":1396,"formulaName":"URA_krUmsatzerloeseSub1_locked","refId":1396,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub1","solutionName":"URA","colId":"visible","name":"URA_krUmsatzerloeseSub1_visible","nodes":[],"ref":1397,"formulaName":"URA_krUmsatzerloeseSub1_visible","refId":1397,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub2","solutionName":"URA","colId":"value","name":"URA_krUmsatzerloeseSub2_value","nodes":[],"displaytype":"currency","ref":1398,"formulaName":"URA_krUmsatzerloeseSub2_value","refId":1398,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krUmsatzerloese_value"},{"rowId":"krUmsatzerloeseSub2","solutionName":"URA","colId":"valid","name":"URA_krUmsatzerloeseSub2_valid","nodes":[],"ref":1399,"formulaName":"URA_krUmsatzerloeseSub2_valid","refId":1399,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub2","solutionName":"URA","colId":"title","name":"URA_krUmsatzerloeseSub2_title","nodes":[],"ref":1400,"formulaName":"URA_krUmsatzerloeseSub2_title","refId":1400,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub2","solutionName":"URA","colId":"locked","name":"URA_krUmsatzerloeseSub2_locked","nodes":[],"ref":1401,"formulaName":"URA_krUmsatzerloeseSub2_locked","refId":1401,"displayAs":"string"},{"rowId":"krUmsatzerloeseSub2","solutionName":"URA","colId":"visible","name":"URA_krUmsatzerloeseSub2_visible","nodes":[],"ref":1402,"formulaName":"URA_krUmsatzerloeseSub2_visible","refId":1402,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"value","name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value","nodes":[],"displaytype":"percentage","ref":1403,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_value","refId":1403,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilKurzfristigeVerbindlichkeiten_value"},{"rowId":"krAnteilKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"valid","name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_valid","nodes":[],"ref":1404,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_valid","refId":1404,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"title","name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_title","nodes":[],"ref":1405,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_title","refId":1405,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"locked","name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_locked","nodes":[],"ref":1406,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_locked","refId":1406,"displayAs":"string"},{"rowId":"krAnteilKurzfristigeVerbindlichkeitenSub3","solutionName":"URA","colId":"visible","name":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_visible","nodes":[],"ref":1407,"formulaName":"URA_krAnteilKurzfristigeVerbindlichkeitenSub3_visible","refId":1407,"displayAs":"string"},{"rowId":"krAnteilEigenmittel","solutionName":"URA","colId":"value","name":"URA_krAnteilEigenmittel_value","nodes":[{"name":"URA_krWirtschaftlichesEigenKapitalRating_value","rowId":"krWirtschaftlichesEigenKapitalRating","colId":"value","identifier":"URA_krAnteilEigenmittel_value"},{"name":"URA_krRatingorientierteBilanzsumme_value","rowId":"krRatingorientierteBilanzsumme","colId":"value","identifier":"URA_krAnteilEigenmittel_value"},{"name":"URA_krAnteilEigenmittelSub3_value","rowId":"krAnteilEigenmittelSub3","colId":"value","identifier":"URA_krAnteilEigenmittel_value"}],"displaytype":"percentage","ref":1408,"formulaName":"URA_krAnteilEigenmittel_value","refId":1408,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatioFolder_value"},{"rowId":"krAnteilEigenmittel","solutionName":"URA","colId":"valid","name":"URA_krAnteilEigenmittel_valid","nodes":[],"ref":1409,"formulaName":"URA_krAnteilEigenmittel_valid","refId":1409,"displayAs":"string"},{"rowId":"krAnteilEigenmittel","solutionName":"URA","colId":"title","name":"URA_krAnteilEigenmittel_title","nodes":[],"ref":1410,"formulaName":"URA_krAnteilEigenmittel_title","refId":1410,"displayAs":"string"},{"rowId":"krAnteilEigenmittel","solutionName":"URA","colId":"locked","name":"URA_krAnteilEigenmittel_locked","nodes":[],"ref":1411,"formulaName":"URA_krAnteilEigenmittel_locked","refId":1411,"displayAs":"string"},{"rowId":"krAnteilEigenmittel","solutionName":"URA","colId":"visible","name":"URA_krAnteilEigenmittel_visible","nodes":[],"ref":1412,"formulaName":"URA_krAnteilEigenmittel_visible","refId":1412,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRating","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRating_value","nodes":[{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub1","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krBilanziellesEigenkapitalBrutto_value","rowId":"krBilanziellesEigenkapitalBrutto","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub3","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub4","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenkapital_value","rowId":"krWirtschaftlichesEigenkapital","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub6","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub7","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub8","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub9","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"},{"name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","rowId":"krWirtschaftlichesEigenKapitalRatingSub10","colId":"value","identifier":"URA_krWirtschaftlichesEigenKapitalRating_value"}],"displaytype":"currency","ref":1413,"formulaName":"URA_krWirtschaftlichesEigenKapitalRating_value","refId":1413,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilEigenmittel_value"},{"rowId":"krWirtschaftlichesEigenKapitalRating","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRating_valid","nodes":[],"ref":1414,"formulaName":"URA_krWirtschaftlichesEigenKapitalRating_valid","refId":1414,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRating","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRating_title","nodes":[],"ref":1415,"formulaName":"URA_krWirtschaftlichesEigenKapitalRating_title","refId":1415,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRating","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRating_locked","nodes":[],"ref":1416,"formulaName":"URA_krWirtschaftlichesEigenKapitalRating_locked","refId":1416,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRating","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRating_visible","nodes":[],"ref":1417,"formulaName":"URA_krWirtschaftlichesEigenKapitalRating_visible","refId":1417,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub1","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_value","nodes":[],"displaytype":"currency","ref":1418,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub1_value","refId":1418,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub1","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_valid","nodes":[],"ref":1419,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub1_valid","refId":1419,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub1","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_title","nodes":[],"ref":1420,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub1_title","refId":1420,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub1","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_locked","nodes":[],"ref":1421,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub1_locked","refId":1421,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub1","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub1_visible","nodes":[],"ref":1422,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub1_visible","refId":1422,"displayAs":"string"},{"rowId":"krBilanziellesEigenkapitalBrutto","solutionName":"URA","colId":"value","name":"URA_krBilanziellesEigenkapitalBrutto_value","nodes":[],"displaytype":"currency","ref":1423,"formulaName":"URA_krBilanziellesEigenkapitalBrutto_value","refId":1423,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krBilanziellesEigenkapitalBrutto","solutionName":"URA","colId":"valid","name":"URA_krBilanziellesEigenkapitalBrutto_valid","nodes":[],"ref":1424,"formulaName":"URA_krBilanziellesEigenkapitalBrutto_valid","refId":1424,"displayAs":"string"},{"rowId":"krBilanziellesEigenkapitalBrutto","solutionName":"URA","colId":"title","name":"URA_krBilanziellesEigenkapitalBrutto_title","nodes":[],"ref":1425,"formulaName":"URA_krBilanziellesEigenkapitalBrutto_title","refId":1425,"displayAs":"string"},{"rowId":"krBilanziellesEigenkapitalBrutto","solutionName":"URA","colId":"locked","name":"URA_krBilanziellesEigenkapitalBrutto_locked","nodes":[],"ref":1426,"formulaName":"URA_krBilanziellesEigenkapitalBrutto_locked","refId":1426,"displayAs":"string"},{"rowId":"krBilanziellesEigenkapitalBrutto","solutionName":"URA","colId":"visible","name":"URA_krBilanziellesEigenkapitalBrutto_visible","nodes":[],"ref":1427,"formulaName":"URA_krBilanziellesEigenkapitalBrutto_visible","refId":1427,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub3","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_value","nodes":[],"displaytype":"currency","ref":1428,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub3_value","refId":1428,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub3","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_valid","nodes":[],"ref":1429,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub3_valid","refId":1429,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub3","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_title","nodes":[],"ref":1430,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub3_title","refId":1430,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub3","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_locked","nodes":[],"ref":1431,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub3_locked","refId":1431,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub3","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub3_visible","nodes":[],"ref":1432,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub3_visible","refId":1432,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub4","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_value","nodes":[],"displaytype":"currency","ref":1433,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub4_value","refId":1433,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub4","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_valid","nodes":[],"ref":1434,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub4_valid","refId":1434,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub4","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_title","nodes":[],"ref":1435,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub4_title","refId":1435,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub4","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_locked","nodes":[],"ref":1436,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub4_locked","refId":1436,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub4","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub4_visible","nodes":[],"ref":1437,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub4_visible","refId":1437,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenkapital","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenkapital_value","nodes":[],"displaytype":"currency","ref":1438,"formulaName":"URA_krWirtschaftlichesEigenkapital_value","refId":1438,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenkapital","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenkapital_valid","nodes":[],"ref":1439,"formulaName":"URA_krWirtschaftlichesEigenkapital_valid","refId":1439,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenkapital","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenkapital_title","nodes":[],"ref":1440,"formulaName":"URA_krWirtschaftlichesEigenkapital_title","refId":1440,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenkapital","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenkapital_locked","nodes":[],"ref":1441,"formulaName":"URA_krWirtschaftlichesEigenkapital_locked","refId":1441,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenkapital","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenkapital_visible","nodes":[],"ref":1442,"formulaName":"URA_krWirtschaftlichesEigenkapital_visible","refId":1442,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub6","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_value","nodes":[],"displaytype":"currency","ref":1443,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub6_value","refId":1443,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub6","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_valid","nodes":[],"ref":1444,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub6_valid","refId":1444,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub6","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_title","nodes":[],"ref":1445,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub6_title","refId":1445,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub6","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_locked","nodes":[],"ref":1446,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub6_locked","refId":1446,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub6","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub6_visible","nodes":[],"ref":1447,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub6_visible","refId":1447,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub7","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_value","nodes":[],"displaytype":"currency","ref":1448,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub7_value","refId":1448,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub7","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_valid","nodes":[],"ref":1449,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub7_valid","refId":1449,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub7","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_title","nodes":[],"ref":1450,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub7_title","refId":1450,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub7","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_locked","nodes":[],"ref":1451,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub7_locked","refId":1451,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub7","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub7_visible","nodes":[],"ref":1452,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub7_visible","refId":1452,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub8","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_value","nodes":[],"displaytype":"currency","ref":1453,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub8_value","refId":1453,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub8","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_valid","nodes":[],"ref":1454,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub8_valid","refId":1454,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub8","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_title","nodes":[],"ref":1455,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub8_title","refId":1455,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub8","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_locked","nodes":[],"ref":1456,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub8_locked","refId":1456,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub8","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub8_visible","nodes":[],"ref":1457,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub8_visible","refId":1457,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub9","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_value","nodes":[],"displaytype":"currency","ref":1458,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub9_value","refId":1458,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub9","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_valid","nodes":[],"ref":1459,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub9_valid","refId":1459,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub9","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_title","nodes":[],"ref":1460,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub9_title","refId":1460,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub9","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_locked","nodes":[],"ref":1461,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub9_locked","refId":1461,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub9","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub9_visible","nodes":[],"ref":1462,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub9_visible","refId":1462,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub10","solutionName":"URA","colId":"value","name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","nodes":[],"displaytype":"currency","ref":1463,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub10_value","refId":1463,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krWirtschaftlichesEigenKapitalRating_value"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub10","solutionName":"URA","colId":"valid","name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_valid","nodes":[],"ref":1464,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub10_valid","refId":1464,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub10","solutionName":"URA","colId":"title","name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_title","nodes":[],"ref":1465,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub10_title","refId":1465,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub10","solutionName":"URA","colId":"locked","name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_locked","nodes":[],"ref":1466,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub10_locked","refId":1466,"displayAs":"string"},{"rowId":"krWirtschaftlichesEigenKapitalRatingSub10","solutionName":"URA","colId":"visible","name":"URA_krWirtschaftlichesEigenKapitalRatingSub10_visible","nodes":[],"ref":1467,"formulaName":"URA_krWirtschaftlichesEigenKapitalRatingSub10_visible","refId":1467,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsumme","solutionName":"URA","colId":"value","name":"URA_krRatingorientierteBilanzsumme_value","nodes":[{"name":"URA_krRatingorientierteBilanzsummeSub1_value","rowId":"krRatingorientierteBilanzsummeSub1","colId":"value","identifier":"URA_krRatingorientierteBilanzsumme_value"},{"name":"URA_krRatingorientierteBilanzsummeSub2_value","rowId":"krRatingorientierteBilanzsummeSub2","colId":"value","identifier":"URA_krRatingorientierteBilanzsumme_value"},{"name":"URA_krRatingorientierteBilanzsummeSub3_value","rowId":"krRatingorientierteBilanzsummeSub3","colId":"value","identifier":"URA_krRatingorientierteBilanzsumme_value"},{"name":"URA_krRatingorientierteBilanzsummeSub4_value","rowId":"krRatingorientierteBilanzsummeSub4","colId":"value","identifier":"URA_krRatingorientierteBilanzsumme_value"},{"name":"URA_krRatingorientierteBilanzsummeSub5_value","rowId":"krRatingorientierteBilanzsummeSub5","colId":"value","identifier":"URA_krRatingorientierteBilanzsumme_value"}],"displaytype":"currency","ref":1468,"formulaName":"URA_krRatingorientierteBilanzsumme_value","refId":1468,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilEigenmittel_value"},{"rowId":"krRatingorientierteBilanzsumme","solutionName":"URA","colId":"valid","name":"URA_krRatingorientierteBilanzsumme_valid","nodes":[],"ref":1469,"formulaName":"URA_krRatingorientierteBilanzsumme_valid","refId":1469,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsumme","solutionName":"URA","colId":"title","name":"URA_krRatingorientierteBilanzsumme_title","nodes":[],"ref":1470,"formulaName":"URA_krRatingorientierteBilanzsumme_title","refId":1470,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsumme","solutionName":"URA","colId":"locked","name":"URA_krRatingorientierteBilanzsumme_locked","nodes":[],"ref":1471,"formulaName":"URA_krRatingorientierteBilanzsumme_locked","refId":1471,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsumme","solutionName":"URA","colId":"visible","name":"URA_krRatingorientierteBilanzsumme_visible","nodes":[],"ref":1472,"formulaName":"URA_krRatingorientierteBilanzsumme_visible","refId":1472,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub1","solutionName":"URA","colId":"value","name":"URA_krRatingorientierteBilanzsummeSub1_value","nodes":[],"displaytype":"currency","ref":1473,"formulaName":"URA_krRatingorientierteBilanzsummeSub1_value","refId":1473,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krRatingorientierteBilanzsumme_value"},{"rowId":"krRatingorientierteBilanzsummeSub1","solutionName":"URA","colId":"valid","name":"URA_krRatingorientierteBilanzsummeSub1_valid","nodes":[],"ref":1474,"formulaName":"URA_krRatingorientierteBilanzsummeSub1_valid","refId":1474,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub1","solutionName":"URA","colId":"title","name":"URA_krRatingorientierteBilanzsummeSub1_title","nodes":[],"ref":1475,"formulaName":"URA_krRatingorientierteBilanzsummeSub1_title","refId":1475,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub1","solutionName":"URA","colId":"locked","name":"URA_krRatingorientierteBilanzsummeSub1_locked","nodes":[],"ref":1476,"formulaName":"URA_krRatingorientierteBilanzsummeSub1_locked","refId":1476,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub1","solutionName":"URA","colId":"visible","name":"URA_krRatingorientierteBilanzsummeSub1_visible","nodes":[],"ref":1477,"formulaName":"URA_krRatingorientierteBilanzsummeSub1_visible","refId":1477,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub2","solutionName":"URA","colId":"value","name":"URA_krRatingorientierteBilanzsummeSub2_value","nodes":[],"displaytype":"currency","ref":1478,"formulaName":"URA_krRatingorientierteBilanzsummeSub2_value","refId":1478,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krRatingorientierteBilanzsumme_value"},{"rowId":"krRatingorientierteBilanzsummeSub2","solutionName":"URA","colId":"valid","name":"URA_krRatingorientierteBilanzsummeSub2_valid","nodes":[],"ref":1479,"formulaName":"URA_krRatingorientierteBilanzsummeSub2_valid","refId":1479,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub2","solutionName":"URA","colId":"title","name":"URA_krRatingorientierteBilanzsummeSub2_title","nodes":[],"ref":1480,"formulaName":"URA_krRatingorientierteBilanzsummeSub2_title","refId":1480,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub2","solutionName":"URA","colId":"locked","name":"URA_krRatingorientierteBilanzsummeSub2_locked","nodes":[],"ref":1481,"formulaName":"URA_krRatingorientierteBilanzsummeSub2_locked","refId":1481,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub2","solutionName":"URA","colId":"visible","name":"URA_krRatingorientierteBilanzsummeSub2_visible","nodes":[],"ref":1482,"formulaName":"URA_krRatingorientierteBilanzsummeSub2_visible","refId":1482,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub3","solutionName":"URA","colId":"value","name":"URA_krRatingorientierteBilanzsummeSub3_value","nodes":[],"displaytype":"currency","ref":1483,"formulaName":"URA_krRatingorientierteBilanzsummeSub3_value","refId":1483,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krRatingorientierteBilanzsumme_value"},{"rowId":"krRatingorientierteBilanzsummeSub3","solutionName":"URA","colId":"valid","name":"URA_krRatingorientierteBilanzsummeSub3_valid","nodes":[],"ref":1484,"formulaName":"URA_krRatingorientierteBilanzsummeSub3_valid","refId":1484,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub3","solutionName":"URA","colId":"title","name":"URA_krRatingorientierteBilanzsummeSub3_title","nodes":[],"ref":1485,"formulaName":"URA_krRatingorientierteBilanzsummeSub3_title","refId":1485,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub3","solutionName":"URA","colId":"locked","name":"URA_krRatingorientierteBilanzsummeSub3_locked","nodes":[],"ref":1486,"formulaName":"URA_krRatingorientierteBilanzsummeSub3_locked","refId":1486,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub3","solutionName":"URA","colId":"visible","name":"URA_krRatingorientierteBilanzsummeSub3_visible","nodes":[],"ref":1487,"formulaName":"URA_krRatingorientierteBilanzsummeSub3_visible","refId":1487,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub4","solutionName":"URA","colId":"value","name":"URA_krRatingorientierteBilanzsummeSub4_value","nodes":[],"displaytype":"currency","ref":1488,"formulaName":"URA_krRatingorientierteBilanzsummeSub4_value","refId":1488,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krRatingorientierteBilanzsumme_value"},{"rowId":"krRatingorientierteBilanzsummeSub4","solutionName":"URA","colId":"valid","name":"URA_krRatingorientierteBilanzsummeSub4_valid","nodes":[],"ref":1489,"formulaName":"URA_krRatingorientierteBilanzsummeSub4_valid","refId":1489,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub4","solutionName":"URA","colId":"title","name":"URA_krRatingorientierteBilanzsummeSub4_title","nodes":[],"ref":1490,"formulaName":"URA_krRatingorientierteBilanzsummeSub4_title","refId":1490,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub4","solutionName":"URA","colId":"locked","name":"URA_krRatingorientierteBilanzsummeSub4_locked","nodes":[],"ref":1491,"formulaName":"URA_krRatingorientierteBilanzsummeSub4_locked","refId":1491,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub4","solutionName":"URA","colId":"visible","name":"URA_krRatingorientierteBilanzsummeSub4_visible","nodes":[],"ref":1492,"formulaName":"URA_krRatingorientierteBilanzsummeSub4_visible","refId":1492,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub5","solutionName":"URA","colId":"value","name":"URA_krRatingorientierteBilanzsummeSub5_value","nodes":[],"displaytype":"currency","ref":1493,"formulaName":"URA_krRatingorientierteBilanzsummeSub5_value","refId":1493,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"krRatingorientierteBilanzsumme_value"},{"rowId":"krRatingorientierteBilanzsummeSub5","solutionName":"URA","colId":"valid","name":"URA_krRatingorientierteBilanzsummeSub5_valid","nodes":[],"ref":1494,"formulaName":"URA_krRatingorientierteBilanzsummeSub5_valid","refId":1494,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub5","solutionName":"URA","colId":"title","name":"URA_krRatingorientierteBilanzsummeSub5_title","nodes":[],"ref":1495,"formulaName":"URA_krRatingorientierteBilanzsummeSub5_title","refId":1495,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub5","solutionName":"URA","colId":"locked","name":"URA_krRatingorientierteBilanzsummeSub5_locked","nodes":[],"ref":1496,"formulaName":"URA_krRatingorientierteBilanzsummeSub5_locked","refId":1496,"displayAs":"string"},{"rowId":"krRatingorientierteBilanzsummeSub5","solutionName":"URA","colId":"visible","name":"URA_krRatingorientierteBilanzsummeSub5_visible","nodes":[],"ref":1497,"formulaName":"URA_krRatingorientierteBilanzsummeSub5_visible","refId":1497,"displayAs":"string"},{"rowId":"krAnteilEigenmittelSub3","solutionName":"URA","colId":"value","name":"URA_krAnteilEigenmittelSub3_value","nodes":[],"displaytype":"percentage","ref":1498,"formulaName":"URA_krAnteilEigenmittelSub3_value","refId":1498,"displayAs":"percentage","decimals":2,"frequency":"column","title_locked":true,"datatype":"number","parentName":"krAnteilEigenmittel_value"},{"rowId":"krAnteilEigenmittelSub3","solutionName":"URA","colId":"valid","name":"URA_krAnteilEigenmittelSub3_valid","nodes":[],"ref":1499,"formulaName":"URA_krAnteilEigenmittelSub3_valid","refId":1499,"displayAs":"string"},{"rowId":"krAnteilEigenmittelSub3","solutionName":"URA","colId":"title","name":"URA_krAnteilEigenmittelSub3_title","nodes":[],"ref":1500,"formulaName":"URA_krAnteilEigenmittelSub3_title","refId":1500,"displayAs":"string"},{"rowId":"krAnteilEigenmittelSub3","solutionName":"URA","colId":"locked","name":"URA_krAnteilEigenmittelSub3_locked","nodes":[],"ref":1501,"formulaName":"URA_krAnteilEigenmittelSub3_locked","refId":1501,"displayAs":"string"},{"rowId":"krAnteilEigenmittelSub3","solutionName":"URA","colId":"visible","name":"URA_krAnteilEigenmittelSub3_visible","nodes":[],"ref":1502,"formulaName":"URA_krAnteilEigenmittelSub3_visible","refId":1502,"displayAs":"string"},{"rowId":"RatingFolder","solutionName":"URA","colId":"value","name":"URA_RatingFolder_value","nodes":[{"name":"URA_ModelConfiguration_value","rowId":"ModelConfiguration","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krInsolvenzquote_value","rowId":"krInsolvenzquote","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krZValue_value","rowId":"krZValue","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krRDFsample_value","rowId":"krRDFsample","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krPD_value","rowId":"krPD","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krUraRatingKlasse_value","rowId":"krUraRatingKlasse","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krUraAmpel_value","rowId":"krUraAmpel","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krUraAmpelD_value","rowId":"krUraAmpelD","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krUraAmpelDNL_value","rowId":"krUraAmpelDNL","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krIfdRatingKlasse_value","rowId":"krIfdRatingKlasse","colId":"value","identifier":"URA_RatingFolder_value"},{"name":"URA_krIfdRatingKlasseD_value","rowId":"krIfdRatingKlasseD","colId":"value","identifier":"URA_RatingFolder_value"}],"displaytype":"Output","ref":1503,"formulaName":"URA_RatingFolder_value","refId":1503,"displayAs":"Output","frequency":"column","datatype":"number","parentName":"Q_ROOT_value"},{"rowId":"RatingFolder","solutionName":"URA","colId":"valid","name":"URA_RatingFolder_valid","nodes":[],"ref":1504,"formulaName":"URA_RatingFolder_valid","refId":1504,"displayAs":"string"},{"rowId":"RatingFolder","solutionName":"URA","colId":"title","name":"URA_RatingFolder_title","nodes":[],"ref":1505,"formulaName":"URA_RatingFolder_title","refId":1505,"displayAs":"string"},{"rowId":"RatingFolder","solutionName":"URA","colId":"locked","name":"URA_RatingFolder_locked","nodes":[],"ref":1506,"formulaName":"URA_RatingFolder_locked","refId":1506,"displayAs":"string"},{"rowId":"RatingFolder","solutionName":"URA","colId":"visible","name":"URA_RatingFolder_visible","nodes":[],"ref":1507,"formulaName":"URA_RatingFolder_visible","refId":1507,"displayAs":"string"},{"rowId":"ModelConfiguration","solutionName":"URA","colId":"value","name":"URA_ModelConfiguration_value","nodes":[],"displaytype":"radio","ref":1508,"formulaName":"URA_ModelConfiguration_value","refId":1508,"displayAs":"radio","frequency":"document","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"ModelConfiguration","solutionName":"URA","colId":"valid","name":"URA_ModelConfiguration_valid","nodes":[],"ref":1509,"formulaName":"URA_ModelConfiguration_valid","refId":1509,"displayAs":"string"},{"rowId":"ModelConfiguration","solutionName":"URA","colId":"title","name":"URA_ModelConfiguration_title","nodes":[],"ref":1510,"formulaName":"URA_ModelConfiguration_title","refId":1510,"displayAs":"string"},{"rowId":"ModelConfiguration","solutionName":"URA","colId":"visible","name":"URA_ModelConfiguration_visible","nodes":[],"ref":1511,"formulaName":"URA_ModelConfiguration_visible","refId":1511,"displayAs":"string"},{"rowId":"ModelConfiguration","solutionName":"URA","colId":"choices","name":"URA_ModelConfiguration_choices","nodes":[],"ref":1512,"formulaName":"URA_ModelConfiguration_choices","refId":1512,"displayAs":"string"},{"rowId":"krInsolvenzquote","solutionName":"URA","colId":"value","name":"URA_krInsolvenzquote_value","nodes":[],"displaytype":"percentage","ref":1513,"formulaName":"URA_krInsolvenzquote_value","refId":1513,"displayAs":"percentage","decimals":1,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"krInsolvenzquote","solutionName":"URA","colId":"valid","name":"URA_krInsolvenzquote_valid","nodes":[],"ref":1514,"formulaName":"URA_krInsolvenzquote_valid","refId":1514,"displayAs":"string"},{"rowId":"krInsolvenzquote","solutionName":"URA","colId":"title","name":"URA_krInsolvenzquote_title","nodes":[],"ref":1515,"formulaName":"URA_krInsolvenzquote_title","refId":1515,"displayAs":"string"},{"rowId":"krInsolvenzquote","solutionName":"URA","colId":"visible","name":"URA_krInsolvenzquote_visible","nodes":[],"ref":1516,"formulaName":"URA_krInsolvenzquote_visible","refId":1516,"displayAs":"string"},{"rowId":"krZValue","solutionName":"URA","colId":"value","name":"URA_krZValue_value","nodes":[],"ref":1517,"formulaName":"URA_krZValue_value","refId":1517,"displayAs":"string","decimals":5,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"krZValue","solutionName":"URA","colId":"valid","name":"URA_krZValue_valid","nodes":[],"ref":1518,"formulaName":"URA_krZValue_valid","refId":1518,"displayAs":"string"},{"rowId":"krZValue","solutionName":"URA","colId":"title","name":"URA_krZValue_title","nodes":[],"ref":1519,"formulaName":"URA_krZValue_title","refId":1519,"displayAs":"string"},{"rowId":"krZValue","solutionName":"URA","colId":"locked","name":"URA_krZValue_locked","nodes":[],"ref":1520,"formulaName":"URA_krZValue_locked","refId":1520,"displayAs":"string"},{"rowId":"krZValue","solutionName":"URA","colId":"visible","name":"URA_krZValue_visible","nodes":[],"ref":1521,"formulaName":"URA_krZValue_visible","refId":1521,"displayAs":"string"},{"rowId":"krRDFsample","solutionName":"URA","colId":"value","name":"URA_krRDFsample_value","nodes":[],"ref":1522,"formulaName":"URA_krRDFsample_value","refId":1522,"displayAs":"string","decimals":5,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"krRDFsample","solutionName":"URA","colId":"valid","name":"URA_krRDFsample_valid","nodes":[],"ref":1523,"formulaName":"URA_krRDFsample_valid","refId":1523,"displayAs":"string"},{"rowId":"krRDFsample","solutionName":"URA","colId":"title","name":"URA_krRDFsample_title","nodes":[],"ref":1524,"formulaName":"URA_krRDFsample_title","refId":1524,"displayAs":"string"},{"rowId":"krRDFsample","solutionName":"URA","colId":"locked","name":"URA_krRDFsample_locked","nodes":[],"ref":1525,"formulaName":"URA_krRDFsample_locked","refId":1525,"displayAs":"string"},{"rowId":"krRDFsample","solutionName":"URA","colId":"visible","name":"URA_krRDFsample_visible","nodes":[],"ref":1526,"formulaName":"URA_krRDFsample_visible","refId":1526,"displayAs":"string"},{"rowId":"krPD","solutionName":"URA","colId":"value","name":"URA_krPD_value","nodes":[],"displaytype":"percentage","ref":1527,"formulaName":"URA_krPD_value","refId":1527,"displayAs":"percentage","decimals":3,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"krPD","solutionName":"URA","colId":"valid","name":"URA_krPD_valid","nodes":[],"ref":1528,"formulaName":"URA_krPD_valid","refId":1528,"displayAs":"string"},{"rowId":"krPD","solutionName":"URA","colId":"title","name":"URA_krPD_title","nodes":[],"ref":1529,"formulaName":"URA_krPD_title","refId":1529,"displayAs":"string"},{"rowId":"krPD","solutionName":"URA","colId":"locked","name":"URA_krPD_locked","nodes":[],"ref":1530,"formulaName":"URA_krPD_locked","refId":1530,"displayAs":"string"},{"rowId":"krPD","solutionName":"URA","colId":"visible","name":"URA_krPD_visible","nodes":[],"ref":1531,"formulaName":"URA_krPD_visible","refId":1531,"displayAs":"string"},{"rowId":"krUraRatingKlasse","solutionName":"URA","colId":"value","name":"URA_krUraRatingKlasse_value","nodes":[],"ref":1532,"formulaName":"URA_krUraRatingKlasse_value","refId":1532,"displayAs":"string","frequency":"column","title_locked":true,"datatype":"string","parentName":"RatingFolder_value"},{"rowId":"krUraRatingKlasse","solutionName":"URA","colId":"title","name":"URA_krUraRatingKlasse_title","nodes":[],"ref":1533,"formulaName":"URA_krUraRatingKlasse_title","refId":1533,"displayAs":"string"},{"rowId":"krUraRatingKlasse","solutionName":"URA","colId":"locked","name":"URA_krUraRatingKlasse_locked","nodes":[],"ref":1534,"formulaName":"URA_krUraRatingKlasse_locked","refId":1534,"displayAs":"string"},{"rowId":"krUraRatingKlasse","solutionName":"URA","colId":"visible","name":"URA_krUraRatingKlasse_visible","nodes":[],"ref":1535,"formulaName":"URA_krUraRatingKlasse_visible","refId":1535,"displayAs":"string"},{"rowId":"krUraAmpel","solutionName":"URA","colId":"value","name":"URA_krUraAmpel_value","nodes":[],"ref":1536,"formulaName":"URA_krUraAmpel_value","refId":1536,"displayAs":"string","decimals":0,"frequency":"column","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"krUraAmpel","solutionName":"URA","colId":"valid","name":"URA_krUraAmpel_valid","nodes":[],"ref":1537,"formulaName":"URA_krUraAmpel_valid","refId":1537,"displayAs":"string"},{"rowId":"krUraAmpel","solutionName":"URA","colId":"title","name":"URA_krUraAmpel_title","nodes":[],"ref":1538,"formulaName":"URA_krUraAmpel_title","refId":1538,"displayAs":"string"},{"rowId":"krUraAmpel","solutionName":"URA","colId":"locked","name":"URA_krUraAmpel_locked","nodes":[],"ref":1539,"formulaName":"URA_krUraAmpel_locked","refId":1539,"displayAs":"string"},{"rowId":"krUraAmpel","solutionName":"URA","colId":"visible","name":"URA_krUraAmpel_visible","nodes":[],"ref":1540,"formulaName":"URA_krUraAmpel_visible","refId":1540,"displayAs":"string"},{"rowId":"krUraAmpelD","solutionName":"URA","colId":"value","name":"URA_krUraAmpelD_value","nodes":[],"ref":1541,"formulaName":"URA_krUraAmpelD_value","refId":1541,"displayAs":"string","frequency":"column","title_locked":true,"datatype":"string","parentName":"RatingFolder_value"},{"rowId":"krUraAmpelD","solutionName":"URA","colId":"title","name":"URA_krUraAmpelD_title","nodes":[],"ref":1542,"formulaName":"URA_krUraAmpelD_title","refId":1542,"displayAs":"string"},{"rowId":"krUraAmpelD","solutionName":"URA","colId":"locked","name":"URA_krUraAmpelD_locked","nodes":[],"ref":1543,"formulaName":"URA_krUraAmpelD_locked","refId":1543,"displayAs":"string"},{"rowId":"krUraAmpelD","solutionName":"URA","colId":"visible","name":"URA_krUraAmpelD_visible","nodes":[],"ref":1544,"formulaName":"URA_krUraAmpelD_visible","refId":1544,"displayAs":"string"},{"rowId":"krUraAmpelDNL","solutionName":"URA","colId":"value","name":"URA_krUraAmpelDNL_value","nodes":[],"ref":1545,"formulaName":"URA_krUraAmpelDNL_value","refId":1545,"displayAs":"string","frequency":"column","title_locked":true,"datatype":"string","parentName":"RatingFolder_value"},{"rowId":"krUraAmpelDNL","solutionName":"URA","colId":"title","name":"URA_krUraAmpelDNL_title","nodes":[],"ref":1546,"formulaName":"URA_krUraAmpelDNL_title","refId":1546,"displayAs":"string"},{"rowId":"krUraAmpelDNL","solutionName":"URA","colId":"locked","name":"URA_krUraAmpelDNL_locked","nodes":[],"ref":1547,"formulaName":"URA_krUraAmpelDNL_locked","refId":1547,"displayAs":"string"},{"rowId":"krUraAmpelDNL","solutionName":"URA","colId":"visible","name":"URA_krUraAmpelDNL_visible","nodes":[],"ref":1548,"formulaName":"URA_krUraAmpelDNL_visible","refId":1548,"displayAs":"string"},{"rowId":"krIfdRatingKlasse","solutionName":"URA","colId":"value","name":"URA_krIfdRatingKlasse_value","nodes":[],"displaytype":"currency","ref":1549,"formulaName":"URA_krIfdRatingKlasse_value","refId":1549,"displayAs":"currency","frequency":"column","title_locked":true,"datatype":"number","parentName":"RatingFolder_value"},{"rowId":"krIfdRatingKlasse","solutionName":"URA","colId":"valid","name":"URA_krIfdRatingKlasse_valid","nodes":[],"ref":1550,"formulaName":"URA_krIfdRatingKlasse_valid","refId":1550,"displayAs":"string"},{"rowId":"krIfdRatingKlasse","solutionName":"URA","colId":"title","name":"URA_krIfdRatingKlasse_title","nodes":[],"ref":1551,"formulaName":"URA_krIfdRatingKlasse_title","refId":1551,"displayAs":"string"},{"rowId":"krIfdRatingKlasse","solutionName":"URA","colId":"locked","name":"URA_krIfdRatingKlasse_locked","nodes":[],"ref":1552,"formulaName":"URA_krIfdRatingKlasse_locked","refId":1552,"displayAs":"string"},{"rowId":"krIfdRatingKlasse","solutionName":"URA","colId":"visible","name":"URA_krIfdRatingKlasse_visible","nodes":[],"ref":1553,"formulaName":"URA_krIfdRatingKlasse_visible","refId":1553,"displayAs":"string"},{"rowId":"krIfdRatingKlasseD","solutionName":"URA","colId":"value","name":"URA_krIfdRatingKlasseD_value","nodes":[],"ref":1554,"formulaName":"URA_krIfdRatingKlasseD_value","refId":1554,"displayAs":"string","frequency":"column","title_locked":true,"datatype":"string","parentName":"RatingFolder_value"},{"rowId":"krIfdRatingKlasseD","solutionName":"URA","colId":"title","name":"URA_krIfdRatingKlasseD_title","nodes":[],"ref":1555,"formulaName":"URA_krIfdRatingKlasseD_title","refId":1555,"displayAs":"string"},{"rowId":"krIfdRatingKlasseD","solutionName":"URA","colId":"locked","name":"URA_krIfdRatingKlasseD_locked","nodes":[],"ref":1556,"formulaName":"URA_krIfdRatingKlasseD_locked","refId":1556,"displayAs":"string"},{"rowId":"krIfdRatingKlasseD","solutionName":"URA","colId":"visible","name":"URA_krIfdRatingKlasseD_visible","nodes":[],"ref":1557,"formulaName":"URA_krIfdRatingKlasseD_visible","refId":1557,"displayAs":"string"},{"rowId":"Q_ROOT","solutionName":"URA","colId":"visible","name":"URA_Q_ROOT_visible","nodes":[]}],"meta":{"view":{"columns":[{"width":50,"name":"name","dataTypeName":"text","fieldName":"name","position":0,"renderTypeName":"text"},{"width":50,"name":"title","dataTypeName":"text","fieldName":"title","position":1,"renderTypeName":"text"},{"width":50,"name":"value","dataTypeName":"text","fieldName":"value","position":2,"renderTypeName":"text"},{"width":50,"name":"notrend","dataTypeName":"text","fieldName":"notrend","position":3,"renderTypeName":"text"},{"width":50,"name":"trend","dataTypeName":"text","fieldName":"trend","position":4,"renderTypeName":"text"},{"name":"visible","dataTypeName":"text","fieldName":"visible","position":5,"renderTypeName":"text"},{"name":"locked","dataTypeName":"text","fieldName":"locked","position":6,"renderTypeName":"text"},{"width":50,"name":"choices","dataTypeName":"text","fieldName":"choices","position":7,"renderTypeName":"text"},{"width":50,"name":"hint","dataTypeName":"text","fieldName":"hint","position":8,"renderTypeName":"text"},{"width":50,"name":"valid","dataTypeName":"text","fieldName":"valid","position":9,"renderTypeName":"text"}]}},"name":"URA"})
},{"./lme":42,"_process":38,"buffer":36}],44:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
const logger = require('log6')
const jsMath = {"Length":{"args":"v1","body":"return String(v1).length"},"OnER":{"args":"v,onerrv","body":"return isNaN(v) ? onerrv : v"},"Oner":{"args":"v,onerrv","body":"return isNaN(v) ? onerrv : v"},"OnEr":{"args":"v,onerrv","body":"return isNaN(v) ? onerrv : v"},"OnZero":{"args":"v,onzerov","body":"return v > 0 ? v : onzerov"},"SUM":{"args":"values","body":"var returnValue = 0; for (var i = 0; i < values.length; i++) { returnValue += values[i]; } return returnValue;"},"OnNeg":{"args":"arg0,arg1","body":"if (arg0 < 0) { return arg1; } return arg0"},"OnZeroOrNA":{"args":"arg0,arg1","body":"return (arg0 == undefined || isNaN(arg0)) ? arg1 : arg0"},"OnZeroOrNa":{"args":"v,arg1","body":"return (v == undefined || isNaN(v)) ? arg1 : v"},"Exp":{"args":"v","body":"return Math.pow(v, 2)"},"OnERorNA":{"args":"v,onerrornav","body":"if (v == undefined || isNaN(v)) { return onerrornav; } return v"},"Round":{"args":"v,decimals","body":"var pow = Math.pow(10, decimals); return Math.round(v * pow) / pow"},"AVG":{"args":"vs","body":"EJS.AVERAGE(vs)"},"MATCH":{"args":"v,p","body":"return v === undefined? false : v.match(p);"},"ZeroOnNaN":{"args":"v","body":"return parseFloat(isNaN(v) ? 0 : v)"},"VALIDDATE":{"args":"d","body":"if (Object.prototype.toString.call(d) === '[object Date]' ) {if ( isNaN( d.getTime() ) ) {  return false; } else { return true; } }else { return false; }"},"GET":{"args":"url,name","body":"{ $.getJSON( 'js/data.json', function( data ) { CACHE[name] = data; }); }"},"EvaluateAsString":{"args":"value","body":"return String(value)"},"FirstUC":{"args":"value","body":"{ return value }"},"AddMonth":{"args":"value,ammount","body":"{ return 1 }"},"ForAll":{"args":"elements","body":"{ for (var i = 0; i < elements.length; i++) { if (elements[i] ){ return 1 } } return 0; }"},"PROXY":{"args":"proxy","body":"{ return proxy }"},"Pos":{"args":"one,two","body":"{ return (two==null) ? -1 : two.indexOf(one); }"},"Count":{"args":"elements","body":"{ var counter = 0; for (var i = 0; i < elements.length; i++) { if (elements[i] ){ counter++ } } return counter; }"},"ValueT":{"args":"one","body":"{ var retrunValue = 1; while(one.prev.hash){ retrunValue++;one=one.prev } return retrunValue }"},"FirstValueT":{"args":"x,values,first,last","body":"{ return x }"},"LastValueT":{"args":"one","body":"{ return 1 }"},"DMYtoDate":{"args":"d,m,y","body":"{ return new Date(d,m,y).toLocaleString(); }"},"FirstDateInT":{"args":"one","body":"{ return 1 }"},"TableLookup":{"args":"row,col","body":"{ return row + col }"},"GetFrac":{"args":"one","body":"{ return 1 }"},"VSum":{"args":"one","body":"{ return 1 }"},"FormulasetInT":{"args":"one","body":"{ return 1 }"},"RelMut":{"args":"one","body":"{ return 1 }"},"YearInT":{"args":"one","body":"{ return 1 }"},"YearToT":{"args":"one","body":"{ return 1 }"},"GetT":{"args":"one","body":"{ return 1 }"},"FirstTInYear":{"args":"one","body":"{ return 1 }"},"FirstTinYear":{"args":"one","body":"{ return 1 }"},"FirstTinformulaset":{"args":"one","body":"{ return 1 }"},"PeriodInT":{"args":"one","body":"{ return 1 }"},"LastDateInT":{"args":"one","body":"return 2016"},"FirstTinFormulaset":{"args":"one","body":"return 1"},"FesExpression":{"args":"one","body":"return one"},"RoundUp":{"args":"num,precision","body":"return Math.ceil(num * precision) / precision"},"Mut":{"args":"one","body":"return 1"},"VSUM":{"args":"one","body":"{ return 1 }"},"GetPoint":{"args":"one","body":"return 1"},"Exists":{"args":"one","body":"return 1"},"DateToMonth":{"args":"one","body":"return one"},"HAvg":{"args":"one","body":"return 1"},"HOVR":{"args":"one","body":"return 1"},"BaseCurrencyValue":{"args":"one","body":"return 1"},"LastTinFormulaset":{"args":"one","body":"return one"},"FirstLC":{"args":"one","body":"return 1"},"ExpandFraction":{"args":"one","body":"return 1"},"ExpandLevel":{"args":"one","body":"return 1"},"MaxValueT":{"args":"one","body":"return 1"},"ValueOfT":{"args":"one","body":"return 1"},"GuessTerm":{"args":"one","body":"return 1"},"ExpandOriginalValue":{"args":"one","body":"return 1"},"Datetot":{"args":"one","body":"return x"},"DateToT":{"args":"x","body":"return x"},"Not":{"args":"one","body":"return !one"},"not":{"args":"one","body":"return !one"},"Str":{"args":"one","body":"return String(one)"},"DateToYear":{"args":"one","body":"return new Date(one)"},"DateToDay":{"args":"one","body":"return 1"},"CumNormal":{"args":"one","body":"return 1"},"SubStr":{"args":"value,from,to","body":"return String(value).substring(from,to)"},"Val":{"args":"input","body":"return isNaN(input) ? Number(input) : NA"},"SumFor":{"args":"one,two,three,fours","body":"return 1"},"MinMax":{"args":"value,min,max,fallback","body":"return isNaN(value) ? fallback : value < min ? min : value > max ? max : value"},"LN":{"args":"one","body":"return 1"},"BivarNormal":{"args":"one","body":"return 1"},"GoalSeek":{"args":"one","body":"return 1"},"OnNEG":{"args":"a,b","body":"return a < 0 ? a : b"},"OnError":{"args":"a,b","body":"return isNaN(a) ? b : a"},"DateStr":{"args":"date","body":"return new Date(date).toString()"},"DateToYearNum":{"args":"string","body":"return string"},"VAL":{"args":"input","body":"return isNaN(input) ? Number(input) : NA"},"BeforeStr":{"args":"input,before","body":"return String(input).substring(0,String(input).indexOf(String(before)))"},"AfterStr":{"args":"input,after","body":"return String(input).substring(String(input).indexOf(String(after)))"},"MutCalc":1,"CalculatedInBaseCurrency":1,"ScaleFactor":1,"NoTrend":1,"Trend":1,"ApplicationStartDateTime":1,"Values":1,"X":1,"MaxT":1,"NumberOfyears":17,"NA":1e-10,"On":1,"No":0,"Off":0,"True":1,"False":0,"ViewScaleFactor":1,"Backward":1,"Decimals":2}
const Solver = require('js-solver')
const entries = {};
if (!global.MatrixLookup) {
    MatrixLookup = function() {
        return 1;
    }
}
if (!global.MATRIX_VALUES) {
    global.MATRIX_VALUES = {}
}

//add functions found in the jsMath to the global scope
function initJSMath(jsMath) {
    for (var func in jsMath) {
        var mathfunc = jsMath[func];
        if (global[func] === undefined) {
            //functions
            if (typeof mathfunc === 'object') {
                if (logger.TRACE) logger.trace('Added function[%s] arguments[%s] body: [%s]', func, mathfunc.args, mathfunc.body)
                global[func] = new Function(mathfunc.args, mathfunc.body);
            }
            else {
                //variables
                global[func] = mathfunc;
            }
        }
        else {
            if (logger.DEBUG) logger.debug('Function [' + func + '] is already defined.');
        }
    }
}

//TODO: add these functions as internal functions
SOLVER = function(args) {
    return new Solver(args || arguments)
}
AMMOUNT = function() {
    var total = 0;
    for (var key in arguments) {
        if (arguments[key]) total++
    }
    return total;
}
OnNA = function(v, nav) {
    if (v == null || isNaN(v) || (v !== 0 && v < 0.00001 && v > -0.00001)) {
        return nav;
    }
    return v;
}

MatrixLookup = function(xlsfileName, tableName, row, col) {
    if (!MATRIX_VALUES) return NA
    var table = MATRIX_VALUES[tableName];
    if (table && table.xasValues && table.xasValues[row] && table.xasValues[row][col] !== undefined) {
        return table.xasValues[row][col];
    } else if (table && table.xasValues) {
        var lastidx = null;
        for (var key in table.xasValues) {
            if (key <= row) {
                lastidx = key;
            } else {
                break;
            }
        }
        if (lastidx) return table.xasValues[lastidx][col];
    }
    return NA;
}

FILLEDIN = function(required, entered) {
    console.info(required)
    console.info(entered)
    return true;
}
//should be:  arguments => { name: $1, y: $2 }
PIECHART = function(points) {
    var result = [];
    for (var i = 0; i < arguments.length; i++) {
        var points = arguments[i];
        for (var index = 0; index < points.length; index++) {
            var point = points[index];
            result.push({
                name: point[0],
                y: point[1]
            })
        }
    }
    return result;
}
HSUM = function(values, start, end) {
    var returnValue = 0;
    if (start.hash) start = start.hash
    if (end.hash) end = end.hash
    for (var i = (start || 0); i <= (end || values.length); i++) {
        returnValue += values[i];
    }
    return returnValue;
}
HVALUES = function(values, start, end) {
    var returnValue = [];
    if (start.hash) start = start.hash
    if (end.hash) end = end.hash
    for (var i = (start || 0); i <= (end || values.length); i++) {
        returnValue.push(values[i]);
    }
    return returnValue;
}
VALUES = function(func, fId, x, y, z, v, m) {
    var result = []
    for (var i = 0; i < x.aggcols.length; i++) {
        if (!x.aggcols[i].aggregated)//TODO: aggregation is serveral levels
            result.push(func(fId, x.aggcols[i], y, z, v, m))
    }
    return result;
}
Aggregate = function(f, x) {
    return 1;
}
GetValue = function(variable, x, y, z, v, amm) {
    // throw Error(Did not implement GetValue)
    return 1;//variable('123', x, y, z, v)
}
//'^[0-9]+$'
REGEXPMATCH = function(pattern, value) {
    return new RegExp(pattern).test(value) ? true : false;
}
ValueT = function(one) {
    var retrunValue = 0;
    while (one && !one.dummy) {
        retrunValue++;
        one = one.prev
    }
    return retrunValue
}
initJSMath(jsMath);
exports.mathJs = {
    name: 'ff-math',
    entries: entries
}
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/math\\ff-math.js","/math",undefined)
},{"_process":38,"buffer":36,"js-solver":45,"log6":35}],45:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
var Solver = (function () {

    function Solver(equations) {
        this.params = Object.keys(equations)
        this.equations = this.parseEquations(equations)
    }
    
    Solver.prototype.parseEquations = function(equations){
        var replacements = {
            power : {
                re: /([\w.]+)\^([\w.]+)/g,
                res: 'Math.pow($1,$2)'
            },
            powerPython : {
                re: /([\w.]+)\*\*([\w.]+)/g,
                res: 'Math.pow($1,$2)'
            },
        }
        for(var key in equations){
            var eq = equations[key]
            for(var re in replacements){
                var repl = replacements[re]
                eq = eq.replace(repl.re, repl.res)
            }
            equations[key] = eq
        }
        return equations;
    }

    Solver.prototype.solve = function solve(obj) {
        var out = {},
            nullCount = Object.keys(this.equations).length,
            lastNull = 0;

        for (var key = 0; key < this.params.length; key++) {
            eval(this.params[key] + '=undefined')
        }

        for (var key in obj) {
            if (this.params.indexOf(key) != -1 && (obj[key]==0 || obj[key])) {
                eval(key + '=' + obj[key]),
                out[key] = obj[key]
            }
        }
        var equations = JSON.parse(JSON.stringify(this.equations))
        while (lastNull !== nullCount) {
            lastNull = nullCount;
            for (var eq in equations) {
                with(Math)
                    var result = eval(equations[eq]);
                if (result) {
                    out[eq] = result;
                    equations[eq] = undefined;
                }
            }
            nullCount = Object.keys(equations).length;
        }
        return out;
    }

    return Solver;

}());

if (typeof module !== 'undefined') module.exports = Solver;
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/math\\node_modules\\js-solver\\js-solver.js","/math\\node_modules\\js-solver",undefined)
},{"_process":38,"buffer":36}],46:[function(require,module,exports){
(function (process,global,Buffer,__argument0,__argument1,__argument2,__argument3,__filename,__dirname,JSON_MODEL){
if (!String.prototype.repeat) {
    String.prototype.repeat = function(count) {
        'use strict';
        if (this == null) {
            throw new TypeError('can\'t convert ' + this + ' to object');
        }
        var str = '' + this;
        count = +count;
        if (count != count) {
            count = 0;
        }
        if (count < 0) {
            throw new RangeError('repeat count must be non-negative');
        }
        if (count == Infinity) {
            throw new RangeError('repeat count must be less than infinity');
        }
        count = Math.floor(count);
        if (str.length == 0 || count == 0) {
            return '';
        }
        // Ensuring count is a 31-bit integer allows us to heavily optimize the
        // main part. But anyway, most current (August 2014) browsers can't handle
        // strings 1 << 28 chars or longer, so:
        if (str.length * count >= 1 << 28) {
            throw new RangeError('repeat count must not overflow maximum string size');
        }
        var rpt = '';
        for (var i = 0; i < count; i++) {
            rpt += str;
        }
        return rpt;
    }
}
var StringBuffer = function() {
    this.buffer = [];
    this.index = 0;
};

StringBuffer.prototype = {
    append: function(s) {
        this.buffer[this.index] = s;
        this.index += 1;
        return this;
    },

    toString: function() {
        return this.buffer.join("");
    }
}
exports.StringBuffer = StringBuffer
}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {},require("buffer").Buffer,arguments[3],arguments[4],arguments[5],arguments[6],"/model-tests\\StringUtils.js","/model-tests",undefined)
},{"_process":38,"buffer":36}]},{},[16,43]);
