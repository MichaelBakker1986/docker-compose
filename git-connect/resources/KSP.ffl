model HACKATHON uses BaseModel
{
 variable Q_ROOT
 {
  title: "Huishouding";
  display_options: scorecard;
  variable VolksbankRekeningGegevens
  {
   variable OntvangenZorgtoeslag
   {
    frequency: document;
    formula: 20;
   }
  }
  variable HuishoudingInvoer
  {
   variable Applicant
   {
    title: "Aanvrager";
    frequency: document;
    datatype: string;
    variable ApplicantBirthdate
    {
     title: "GeboortedatumAanvrager";
     frequency: document;
     datatype: date;
     displaytype: date;
    }
    variable ApplicantTotalIncome
    {
     title: "AanvragerTotaalInkomen";
     frequency: document;
     formula: TSUM(ApplicantIncome);
     tuple ApplicantIncomes
     {
      variable ApplicantIncome
      {
       title: "AanvragerInkomen";
       formula: 0;
      }
     }
    }
    variable ApplicantTotalAssets
    {
     title: "AanvragerTotaalVermogen";
     frequency: document;
     formula: TSUM(ApplicantBankAccountAmount)+TSUM(ApplicantEffectAccountAmount);
     tuple ApplicantBankAccounts
     {
      variable ApplicantBankAccountAmount
      {
       title: "AanvragerBankSaldo";
       formula: 0;
      }
     }
     tuple ApplicantEffectAccounts
     {
      variable ApplicantEffectAccountAmount
      {
       title: "AanvragerEffectenRekeningSaldo";
       formula: 0;
      }
     }
    }
   }
   variable Partner
   {
    title: "Partner";
    frequency: document;
    datatype: string;
    variable HasPartner
    {
     frequency: document;
     formula: 0;
     displaytype: select;
     choices: "0:Nee|1:Ja";
    }
    variable BirthdatePartner
    {
     title: "GeboortedatumPartner";
     frequency: document;
     datatype: date;
     displaytype: date;
    }
    variable PartnerTotalIncome
    {
     title: "PartnerTotaalInkomen";
     frequency: document;
     formula: TSUM(PartnerIncome);
     tuple PartnerIncomes
     {
      variable PartnerIncome
      {
       title: "PartnerInkomen";
       formula: 0;
      }
     }
    }
    variable PartnerTotalAssets
    {
     title: "PartnerTotaalVermogen";
     frequency: document;
     formula: TSUM(PartnerBankAccountAmount)+TSUM(PartnerEffectAccountAmount);
     tuple PartnerBankAccounts
     {
      variable PartnerBankAccountAmount
      {
       title: "PartnerBankRekeningSaldo";
       formula: 0;
      }
     }
     tuple PartnerEffectAccounts
     {
      variable PartnerEffectAccountAmount
      {
       title: "PartnerEffectAccountSaldo";
       formula: 0;
      }
     }
    }
   }
   variable Children
   {
    tuple TChildren
    {
     variable Child
     {
      title: "Kind";
      frequency: column;
      variable BirthdateChild
      {
       title: "GeboortedatumKind";
       datatype: date;
       displaytype: date;
       variable ChildAge
       {
        title: "LeeftijdKind";
        formula: DateToYear(NOW())-DateToYear(BirthdateChild);
       }
      }
     }
    }
   }
  }
  variable constantsZorgToeslag
  {
   variable HAdefaultpremium1person
   {
    formula: 1546;
    locked: 1;
   }
   variable HAdefaultpremium2persons
   {
    formula: 3092;
    locked: 1;
   }
   variable HAmaximumincome1person
   {
    formula: 28720;
    locked: 1;
   }
   variable HAmaximumincome2persons
   {
    formula: 35996;
    locked: 1;
   }
   variable HAMinimumIncome
   {
    formula: 20451;
    locked: 1;
   }
   variable HAmaximumAssets1person
   {
    formula: 113415;
    locked: 1;
   }
   variable HAmaximumAssets2persons
   {
    formula: 143415;
    locked: 1;
   }
   variable HAMaximumHA1person
   {
    formula: 1139;
    locked: 1;
   }
   variable HAMaximumHA2persons
   {
    formula: 2121;
    locked: 1;
   }
  }
  variable CalculationZorgToeslag
  {
   variable HANormPremium1Person
   {
    formula: 0.0199*HAMinimumIncome+Max(0,0.1349*max(0,(ApplicantTotalIncome-HAMinimumIncome)));
    frequency: document;
   }
   variable HANormPremium2Persons
   {
    formula: 0.0475*HAMinimumIncome+Max(0,0.1349*max(0,(ApplicantTotalIncome+PartnerTotalIncome-HAMinimumIncome)));
    frequency: document;
   }
   variable CalculatedHealthCareAllowancePerYear1Person
   {
    formula: If(ApplicantTotalAssets<=HAmaximumAssets1person,Min(HAMaximumHA1person,(HAdefaultpremium1person-HANormPremium1Person)),0);
    frequency: document;
   }
   variable CalculatedHealthCareAllowancePerYear2Persons
   {
    formula: If(ApplicantTotalAssets+PartnerTotalAssets<=HAmaximumAssets2persons,Min(HAMaximumHA2persons,(HAdefaultpremium2persons-HANormPremium2Persons)),0);
    frequency: document;
   }
   variable RelevantHealthCareAllowance
   {
    formula: If(HasPartner=0,CalculatedHealthCareAllowancePerYear1Person,CalculatedHealthCareAllowancePerYear2Persons) ;
    frequency: document;
   }
  }
  variable constantsHuurToeslag
  {
   variable RAMaximumAssetAmount1Person
   {
    formula: 30000;
   }
   variable RAMaximumAssetAmount2Persons
   {
    formula: 60000;
   }
   variable RAMaxRentYoungerThan23
   {
    formula: 417.34;
   }
   variable RAMaxRentEqualOrOlderThan23
   {
    formula: 710.68;
   }
   variable FactorA
   {
    variable RAFactorA1Person
    {

    }
   }
  }
 }
 variable import
 {
  variable GebDatumAangever
  {
   datatype: date;
   displaytype: date;
  }
  tuple Relaties
  {
   variable Relatie
   {
    variable NaamRelatie
    {
     datatype: string;
    }
    variable Relatiecode
    {

    }
    variable GebDatumRelatie
    {
     datatype: date;
     displaytype: date;
    }
   }
   tuple InkomensTegenArbeid
   {
    variable InkomenTegenArbeid
    {
     variable NaamWerkgeverTegenwArbeid
     {
      datatype: string;
     }
     variable LoonTegenwArbeid
     {

     }
    }
   }
  }
 }
}