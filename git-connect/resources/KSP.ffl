import FinanMath.*;
import BaseModel.*;

EDUCATION_DURATION:48;
EDUCATION_COST:70000;
RENTE_PER_JAAR:2.75;

model KSP uses BaseModel
{
 version: "1.37";
 root
 {
  variable Q_ROOT
  {
   title: "Costs of child raising (v1.27)";
   locked: 1;
   hint: "This module enables you to gain insight in the costs involved for raising a child";
   frequency: document;
   formula:AMMOUNT(IncomeParent01.required and IncomeParent01.entered,IncomeParent02.required and IncomeParent02.entered,WorkingHoursWeeklyParent01.required and WorkingHoursWeeklyParent01.entered,WorkingHoursWeeklyParent02.required and WorkingHoursWeeklyParent02.entered,WorkingHoursWeeklyOfLeastWorkingParent.required and WorkingHoursWeeklyOfLeastWorkingParent.entered,ChildGender.required and ChildGender.entered,NrOfDaysChildcareWeek.required and NrOfDaysChildcareWeek.entered,NrOfDaysOutOfSchoolCareWeek.required and NrOfDaysOutOfSchoolCareWeek.entered,SecondaryEducationProfile.required and SecondaryEducationProfile.entered,Q_MAP01.required and Q_MAP01.entered) = AMMOUNT(IncomeParent01.required,IncomeParent02.required,WorkingHoursWeeklyParent01.required,WorkingHoursWeeklyParent02.required,WorkingHoursWeeklyOfLeastWorkingParent.required,ChildGender.required,NrOfDaysChildcareWeek.required,NrOfDaysOutOfSchoolCareWeek.required,SecondaryEducationProfile.required,Q_MAP01.required);
   displaytype: scorecard;
   datatype: number;
   choices: "0:Complete|1:Incomplete";
   variable Q_MAP00
   {
    visible: 0;
    title: "Intro";
    locked: 1;
    frequency: document;
    formula: 1;
    displaytype: currency;
    datatype: number;
    variable Q_MAP00_INTRO
    {
     title: "Intro";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable Q_MAP00_INTROMEMO
     {
      title: "[b]Intro[/b]";
      locked: 1;
      frequency: document;
      formula: "Why do we use it?\r\n\r\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using Content here, content here, making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for lorem ipsum will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).\r\n\r\n\r\nWhy do we use it?\r\n\r\nIt is a long established fact that a reader will be distracted by the readable content of a page when looking at its layout. The point of using Lorem Ipsum is that it has a more-or-less normal distribution of letters, as opposed to using Content here, content here, making it look like readable English. Many desktop publishing packages and web page editors now use Lorem Ipsum as their default model text, and a search for lorem ipsum will uncover many web sites still in their infancy. Various versions have evolved over the years, sometimes by accident, sometimes on purpose (injected humour and the like).";
      displaytype: memo;
      datatype: string;
     }
    }
   }
   variable Q_MAP01
   {
    valid:[AMMOUNT(IncomeParent01.required and IncomeParent01.entered,IncomeParent02.required and IncomeParent02.entered,WorkingHoursWeeklyParent01.required and WorkingHoursWeeklyParent01.entered,WorkingHoursWeeklyParent02.required and WorkingHoursWeeklyParent02.entered,WorkingHoursWeeklyOfLeastWorkingParent.required and WorkingHoursWeeklyOfLeastWorkingParent.entered,ChildGender.required and ChildGender.entered,NrOfDaysChildcareWeek.required and NrOfDaysChildcareWeek.entered,NrOfDaysOutOfSchoolCareWeek.required and NrOfDaysOutOfSchoolCareWeek.entered,SecondaryEducationProfile.required and SecondaryEducationProfile.entered,Q_MAP01.required and Q_MAP01.entered),AMMOUNT(IncomeParent01.required,IncomeParent02.required,WorkingHoursWeeklyParent01.required,WorkingHoursWeeklyParent02.required,WorkingHoursWeeklyOfLeastWorkingParent.required,ChildGender.required,NrOfDaysChildcareWeek.required,NrOfDaysOutOfSchoolCareWeek.required,SecondaryEducationProfile.required,Q_MAP01.required)];
    title: "Basic Information";
    locked: 1;
    inputRequired:IncomeParent01.required and IncomeParent02.required and WorkingHoursWeeklyParent01.required and WorkingHoursWeeklyParent02.required and WorkingHoursWeeklyOfLeastWorkingParent.required and ChildGender.required and NrOfDaysChildcareWeek.required and NrOfDaysOutOfSchoolCareWeek.required and SecondaryEducationProfile.required;
    frequency: document;
    displaytype: select;
    datatype: number;
    choices: "0:Complete|1:Incomplete";
    variable Situation
    {
     title: "Situation";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable IncomeSection
     {
      title: "[b]Income[/b]";
      locked: 1;
      frequency: document;
      displaytype: currency;
      datatype: number;
     }
     variable IncomeParent01
     {
      title: "Gross Income Parent 1";
      inputRequired: 1;
      frequency: document;
      fixed_decimals: 2;
      datatype: number;
     }
     variable IncomeParent02
     {
      title: "Gross Income Parent 2";
      inputRequired: 1;
      frequency: document;
      fixed_decimals: 2;
      datatype: number;
     }
     variable WorkingHoursWeeklyParent01
     {
      title: "Working hours parent 1";
      inputRequired: 1;
      frequency: document;
      fixed_decimals: 1;
      datatype: number;
     }
     variable WorkingHoursWeeklyParent02
     {
      title: "Working hours parent 2";
      inputRequired: 1;
      frequency: document;
      fixed_decimals: 1;
      datatype: number;
     }
     variable WorkingHoursWeeklyOfLeastWorkingParent
     {
      title: "Working hours (weekly) of least working Parent";
      inputRequired: 1;
      hint: "Here, you have to enter the number of hours (on weekly basis) of the parent who has the smallest employment contract. This data is required to determine the maximum nr. of hours per month for childcare for which a public contribution can be claimed";
      frequency: document;
      formula: Min(WorkingHoursWeeklyParent01, WorkingHoursWeeklyParent02);
      fixed_decimals: 1;
      datatype: number;
     }
     variable Child
     {
      title: "Child";
      locked: 1;
      frequency: document;
      displaytype: currency;
      datatype: number;
      variable ChildGender
      {
       title: "Gender";
       inputRequired: 1;
       hint: "Weetje. jongs zijn vanaf hun 14e jaar 58 cent per dag duurder omdat ze meer gaan eten. Ja echt. Scheelt zo'n 18 euro per maand.";
       frequency: document;
       fixed_decimals: 0;
       displaytype: select;
       datatype: number;
       choices: "0:Boy|1:Girl";
      }
      variable NrOfDaysChildcareWeek
      {
       title: "Nr. of days childcare per week";
       inputRequired: 1;
       frequency: document;
       formula: NA;
       fixed_decimals: 1;
       datatype: number;
      }
      variable NrOfDaysChildcareMonth
      {
       title: "Nr. of hours childcare per month";
       locked: 1;
       frequency: document;
       formula: OnER(10.5*NrOfDaysChildcareWeek[1]*4,NA);
       fixed_decimals: 1;
       datatype: number;
      }
      variable NrOfDaysOutOfSchoolCareWeek
      {
       title: "Nr. of days out-of-school care per week";
       inputRequired: 1;
       frequency: document;
       fixed_decimals: 1;
       datatype: number;
      }
      variable NrOfDaysOutOfSchoolCareMonth
      {
       title: "Nr. of hours out-of-school care per month";
       locked: 1;
       frequency: document;
       formula: OnER(4*NrOfDaysOutOfSchoolCareWeek*4.5,NA);
       fixed_decimals: 1;
       datatype: number;
      }
      variable HourlyFeeChildCare
      {
       title: "Hourly fee childcare";
       frequency: document;
       formula: 6.8;
       fixed_decimals: 1;
       datatype: number;
      }
      variable HourlyFeeOutOfSchoolCare
      {
       title: "Hourly fee out-of-school care";
       frequency: document;
       formula: 6.8;
       fixed_decimals: 1;
       datatype: number;
      }
      variable ParentalContributionPrimaryEducation
      {
       title: "Parental contribution primary education";
       frequency: document;
       formula: 80;
       fixed_decimals: 1;
       datatype: number;
      }
      variable CostsUnspecified
      {
       title: "Costs unspecified per month";
       frequency: document;
       formula: 180;
       fixed_decimals: 1;
       datatype: number;
      }
      variable SecondaryEducationProfile
      {
       title: "secondary education (profile)";
       inputRequired: 1;
       frequency: document;
       formula: 1;
       fixed_decimals: 1;
       displaytype: select;
       datatype: number;
       choices: "0:VWO|1:VMBO-MBO|2:VMBO-HAVO|3:HAVO";
      }
      variable TotalyYearlyCostsChild
      {
       title: "Total (yearly) costs regarding child";
       locked: 1;
       frequency: column;
       formula: Furniture+ActualChildCareCosts+ActualDiapers+ActualFood+ActualClothingCosts+ActualPersonalCareCosts+Hairdresser+Inventory+Allowance+Contributions+Transport+MobilePhone+DrivingLicense+CostsForOutOfSchoolCare+CostsForPrimaryEducation+CostsForSecondaryEducation+CostsUnspecifiedOverview;
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
     }
     variable TupleSumTest
     {
      frequency: document;
      formula: NrOfDaysChildcareWeek;
      datatype: number;
     }
     variable Memo1
     {
      title: "Toelichting";
      frequency: document;
      displaytype: memo;
      datatype: string;
     }
    }
   }
   variable Q_MAP02
   {
    title: "Calculations Care";
    locked: 1;
    frequency: document;
    displaytype: select;
    datatype: number;
    choices: "0:Complete|1:Incomplete";
    variable FiscalParameters
    {
     title: "Fiscal parameters";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable ChildcareContribution
     {
      title: "Childcare Contribution";
      locked: 1;
      datatype: none;
     }
     variable MaximumNrOfHoursOfChildcareAllowancePerMonth
     {
      title: "Maximum nr of hours of childcare allowance per month";
      locked: 1;
      frequency: document;
      formula: 230;
      fixed_decimals: 1;
      datatype: number;
     }
     variable MultiplierDaycare
     {
      title: "Multiplier daycare";
      locked: 1;
      frequency: document;
      formula: 1.4;
      fixed_decimals: 1;
      displaytype: percentage;
      datatype: number;
     }
     variable MultiplierOutOfSchoolCare
     {
      title: "Multiplier out-of-school care";
      locked: 1;
      frequency: document;
      formula: 0.7;
      fixed_decimals: 1;
      displaytype: percentage;
      datatype: number;
     }
     variable MaxHourlyRateChildcare
     {
      title: "Max. hourly rate childcare";
      locked: 1;
      frequency: document;
      formula: 7.18;
      fixed_decimals: 2;
      datatype: number;
     }
     variable MaxHourlyRateOutOfSchoolCare
     {
      title: "Max. hourly rate out-of-school care";
      locked: 1;
      frequency: document;
      formula: 6.69;
      fixed_decimals: 2;
      datatype: number;
     }
     variable MaxHourlyRateGuestParent
     {
      title: "Max. hourly rate guest parent";
      locked: 1;
      frequency: document;
      formula: 5.75;
      fixed_decimals: 2;
      datatype: number;
     }
     variable MaxHourlyRateGuestParentOutOfSchoolCare
     {
      title: "Max. hourly rate guest parent out-of-school care";
      locked: 1;
      frequency: document;
      formula: 5.75;
      fixed_decimals: 2;
      datatype: number;
     }
    }
    variable CombinationDiscount
    {
     title: "Combination Discount";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable LowerBoundaryIncome
     {
      title: "Lower boundary Income";
      locked: 1;
      frequency: document;
      formula: 4895;
      fixed_decimals: 1;
      datatype: number;
     }
     variable Base
     {
      title: "Base";
      locked: 1;
      frequency: document;
      formula: 1043;
      fixed_decimals: 1;
      datatype: number;
     }
     variable CombinationDiscountPercentage
     {
      title: "Combination Discount Percentage";
      locked: 1;
      frequency: document;
      formula: 0.06159;
      fixed_decimals: 3;
      displaytype: percentage;
      datatype: number;
     }
     variable MaximumDiscount
     {
      title: "Maximum Discount";
      locked: 1;
      frequency: document;
      formula: 2778;
      fixed_decimals: 1;
      datatype: number;
     }
    }
    variable ChildRelatedBudget
    {
     title: "Child-related budget";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable MaxBudgetOneToTwelveYears
     {
      title: "Max Budget (1 - 12 yrs)";
      locked: 1;
      frequency: document;
      formula: 1142;
      fixed_decimals: 1;
      datatype: number;
     }
     variable MaxBudgetTwelveToFifteenYears
     {
      title: "Max Budget (12 - 15 yrs)";
      locked: 1;
      frequency: document;
      formula: 1376;
      fixed_decimals: 1;
      datatype: number;
     }
     variable MaxBudgetSixteenToSeventeenYears
     {
      title: "Max Budget (16 - 17 yrs)";
      locked: 1;
      frequency: document;
      formula: 1559;
      fixed_decimals: 1;
      datatype: number;
     }
     variable UpperBoundaryIncome
     {
      title: "Upper boundary Income";
      locked: 1;
      frequency: document;
      formula: 20109;
      fixed_decimals: 1;
      datatype: number;
     }
     variable DecreasingPercentage
     {
      title: "Decreasing Percentage";
      locked: 1;
      frequency: document;
      formula: 0.0675;
      fixed_decimals: 2;
      displaytype: percentage;
      datatype: number;
     }
    }
    variable Fees
    {
     title: "Fees";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable MaxNrCompensatedHoursChildcare
     {
      title: "Max. nr of compensated hours childcare ";
      locked: 1;
      frequency: document;
      formula: OnER(Min(Round(WorkingHoursWeeklyOfLeastWorkingParent*MultiplierDaycare*(52/12),0),MaximumNrOfHoursOfChildcareAllowancePerMonth),NA);
      displaytype: currency;
      datatype: number;
     }
     variable MaxNrCompensatedHoursOutofSchoolCare
     {
      title: "Max. nr of compensated hours out-of-school care ";
      locked: 1;
      frequency: document;
      formula: OnER(Min(Round(WorkingHoursWeeklyOfLeastWorkingParent*MultiplierOutOfSchoolCare*(52/12),0),MaximumNrOfHoursOfChildcareAllowancePerMonth),NA);
      displaytype: currency;
      datatype: number;
     }
     variable FeesSub3
     {
      locked: 1;
      datatype: none;
     }
     variable NrCompensatedHoursChildcare
     {
      title: "Nr. of compensated hours childcare ";
      locked: 1;
      frequency: document;
      formula: OnER(Min(NrOfDaysChildcareMonth,MaxNrCompensatedHoursChildcare),NA);
      displaytype: currency;
      datatype: number;
     }
     variable NrCompensatedHoursOutofSchoolCare
     {
      title: "Nr. of compensated hours out-of-school care ";
      locked: 1;
      frequency: document;
      formula: OnER(Min(NrOfDaysOutOfSchoolCareMonth,MaxNrCompensatedHoursOutofSchoolCare),NA);
      displaytype: currency;
      datatype: number;
     }
     variable FeesSub6
     {
      locked: 1;
      datatype: none;
     }
     variable MaxCompensatedAmountChildcare
     {
      title: "Max. compensated amount childcare";
      locked: 1;
      frequency: document;
      formula: OnER(Min(HourlyFeeChildCare,MaxHourlyRateChildcare),NA);
      fixed_decimals: 2;
      datatype: number;
     }
     variable MaxCompensatedAmountOutofSchoolCare
     {
      title: "Max. compensated amount out-of-school care ";
      locked: 1;
      frequency: document;
      formula: OnER(Min(HourlyFeeOutOfSchoolCare,MaxHourlyRateOutOfSchoolCare),NA);
      fixed_decimals: 2;
      datatype: number;
     }
     variable FeesSub9
     {
      locked: 1;
      datatype: none;
     }
     variable TotalIncome
     {
      title: "Total Income";
      locked: 1;
      frequency: document;
      formula: OnER(IncomeParent01+IncomeParent02,NA);
      displaytype: currency;
      datatype: number;
     }
     variable PercentagePremiumFirstChild
     {
      title: "Percentage premium first child ";
      locked: 1;
      frequency: document;
      formula: MatrixLookup(null,"Opvangtoeslaginkomenstabel",TotalIncome,1);
      fixed_decimals: 2;
      displaytype: percentage;
      datatype: number;
     }
     variable FeesSub12
     {
      locked: 1;
      datatype: none;
     }
     variable PremiumForChildcare
     {
      title: "Premium for childcare";
      locked: 1;
      frequency: document;
      formula: NrCompensatedHoursChildcare*MaxCompensatedAmountChildcare*PercentagePremiumFirstChild;
      fixed_decimals: 2;
      datatype: number;
     }
     variable PremiumForOutofSchoolCare
     {
      title: "Premium for out-of-school care";
      locked: 1;
      frequency: document;
      formula: NrCompensatedHoursOutofSchoolCare*MaxCompensatedAmountOutofSchoolCare*PercentagePremiumFirstChild;
      fixed_decimals: 2;
      datatype: number;
     }
    }
    variable CostsSecondaryEducation
    {
     title: "Costs (Secondary Education)";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable CostsYearOneFour
     {
      title: "Costs year 1 - 4";
      locked: 1;
      frequency: document;
      formula: Case(SecondaryEducationProfile,[0: 576 | 1: 906 | 2: 535 | 3: 535]);
      fixed_decimals: 2;
      datatype: number;
     }
     variable CostsYearFiveSixSeven
     {
      title: "Costs year 5, 6, 7";
      locked: 1;
      frequency: document;
      formula: Case(SecondaryEducationProfile,[0:576|1:906|2:535|3:535]);
      fixed_decimals: 2;
      datatype: number;
     }
    }
    variable Q_MAP02SUB10
    {
     title: "Budget";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable Q_MAP02SUB10SUB1 refers to TotalIncome
     {
      title: "Income";
      locked: 1;
      frequency: document;
      displaytype: currency;
      datatype: number;
     }
     variable ChildRelatedBudgetDecrease
     {
      title: "Decrease";
      locked: 1;
      frequency: document;
      formula: Max(0,DecreasingPercentage*(TotalIncome-UpperBoundaryIncome));
      displaytype: currency;
      datatype: number;
     }
     variable ChildRelatedBudgetUpToTwelve
     {
      title: "Childrelated budget (per month, up to yr 12)";
      locked: 1;
      frequency: document;
      formula: Max(0,MaxBudgetOneToTwelveYears-ChildRelatedBudgetDecrease)/12;
      fixed_decimals: 2;
      datatype: number;
     }
     variable ChildRelatedBudgetTwelveUpToAndInclFifteen
     {
      title: "Childrelated budget (per month, 12 up to and incl yr 15)";
      locked: 1;
      frequency: document;
      formula: Max(0,MaxBudgetTwelveToFifteenYears-ChildRelatedBudgetDecrease)/12;
      fixed_decimals: 2;
      datatype: number;
     }
     variable ChildRelatedBudgetSixteenUpToAndIncSeventeen
     {
      title: "Childrelated budget (per month, 16 up to and incl yr 17)";
      locked: 1;
      frequency: document;
      formula: Max(0,MaxBudgetSixteenToSeventeenYears-ChildRelatedBudgetDecrease)/12;
      fixed_decimals: 2;
      datatype: number;
     }
    }
    variable Q_MAP02SUB11
    {
     title: "Combination Discount";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable CombinationDiscountLowestIncome
     {
      title: "LowestIncome";
      locked: 1;
      frequency: document;
      formula: Min(IncomeParent01,IncomeParent02);
      fixed_decimals: 2;
      datatype: number;
     }
     variable CombinationDiscountTotal
     {
      title: "CombinationDiscountTotal";
      locked: 1;
      frequency: document;
      formula: If(CombinationDiscountLowestIncome>=LowerBoundaryIncome,Min(UpperBoundaryIncome,Base+(CombinationDiscountPercentage*(CombinationDiscountLowestIncome-LowerBoundaryIncome))),0);
      fixed_decimals: 2;
      datatype: number;
     }
    }
   }
   variable Q_MAP_STUDIEKOSTEN
   {
    title: "Hoeveel kost een studie voor mijn kind?";
    hint: "Studiekosten";
    frequency: document;
    displaytype: string;
    variable EducationAgeChild
    {
     title: "Leeftijd kind";
     frequency: document;
     formula: 17;
     datatype: number;
    }
    variable SavedMoney
    {
     title: "Al gespaard voor kind";
     frequency: document;
     formula: 100;
     displaytype: currency;
     datatype: currency;
    }
    variable MonthlyIncomeBijBaan
    {
     title: "Bijbaantje tijdens studie. Gemiddeld € 409 p/m";
     frequency: document;
     formula: 409;
     displaytype: currency;
     datatype: number;
    }
    variable MonthlyDUOLoan
    {
     title:"Geld lenen bij DUO";
     hint: "De gemiddelde HBO of universitaire student leent nu ongeveer € 26.830,- gedurende hun studie wat neerkomt op zo'n € 559,- per maand. In 2017 gemiddeld € 559 p/m";
     frequency: document;
     formula :559;
     displaytype: currency;
     datatype: currency;
    }
    variable AantalMaandenTeSparen
    {
     title: "Aantal maanden in tot einde opleiding";
     locked: 1;
     frequency: document;
     formula: (18-EducationAgeChild) * 12;
     datatype: number;
    }
    variable RentePerJaar
    {
     title: "Jaarlijkse rente";
     locked: 1;
     frequency: document;
     formula: RENTE_PER_JAAR();
     datatype: currency;
    }
    variable MonthlySavingGoal
    {
     title: "Spaar dit bedrag om je spaardoel te bereiken:";
     locked: 1;
     hint: "per maand";
     frequency: document;
     formula: OnNA(MAX(0, PPMT(RentePerJaar/1200,1,AantalMaandenTeSparen,-(EDUCATION_COST() - (SavedMoney + (MonthlyIncomeBijBaan*48)+(MonthlyDUOLoan*48))))),0);
     fixed_decimals: 0;
     displaytype: currency;
     datatype: currency;
    }
   }
   variable Q_MAP06
   {
    visible: (Q_ROOT=1);
    title: "Your Personal situation";
    locked: 1;
    frequency: document;
    displaytype: select;
    datatype: number;
    choices: "0:Complete|1:Incomplete";
    variable Q_MAP06SUB5
    {
     title: "Your Personal Situation";
     locked: 1;
     frequency: document;
     displaytype: currency;
     datatype: number;
     variable GraphResRek1
     {
      title: "Total Net Costs (-)";
      locked: 1;
      frequency: column;
      formula: TotalYearlyBalance;
      fixed_decimals: 2;
      datatype: number;
      aggregation: balance;
     }
     variable Q_MAP06SUB5SUB2 refers to TotalYearlyCosts
     {
      title: "Total (yearly) costs";
      locked: 1;
      frequency: column;
      fixed_decimals: 2;
      datatype: number;
      aggregation: flow;
      variable Age
      {
       title: "Age";
       locked: 1;
       frequency: column;
       formula: (ValueT(T))-1;
       fixed_decimals: 0;
       datatype: number;
       aggregation: flow;
       variable PeriodeInFormulaset
       {
        title: "PeriodeInFormulaset";
        locked: 1;
        frequency: column;
        formula: ValueT(T);
        fixed_decimals: 0;
        datatype: number;
        aggregation: balance;
       }
      }
      variable Furniture
      {
       title: "Furniture";
       locked: 1;
       frequency: column;
       formula: If(ValueT(T)=1,1800,0);
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable ActualChildCareCosts
      {
       title: "Childcare costs";
       locked: 1;
       frequency: column;
       formula: If((ValueT(T))<=4,1,0);
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable ActualDiapers
      {
       title: "Diapers";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","Diapers",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable ActualFood
      {
       title: "Food";
       frequency: column;
       formula:If(ChildGender=0,MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","FoodCostsBoy",(ValueT(T))),MatrixLookup("ScorecardKSP.xls","LeeftijdGeslachtGebondenKosten","FoodCostsGirl",(ValueT(T))));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable ActualClothingCosts
      {
       title: "Clothing";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","ClothingCosts",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable ActualPersonalCareCosts
      {
       title: "Personal care";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","PersonalCare",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable Hairdresser
      {
       title: "Hairdresser";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","Hairdresser",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable Inventory
      {
       title: "Inventory";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","Inventory",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable Allowance
      {
       title: "Allowance";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","Allowance",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable Contributions
      {
       title: "Contributions";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","Contributions",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable Transport
      {
       title: "Transport";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","Transport",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable MobilePhone
      {
       title: "MobilePhone";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","MobilePhone",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable DrivingLicense
      {
       title: "DrivingLicense";
       frequency: column;
       formula: MatrixLookup(null,"LeeftijdGeslachtGebondenKosten","DrivingLicense",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable CostsForOutOfSchoolCare
      {
       title: "Kosten BSO";
       frequency: column;
       formula: If((Age>=4)and(Age<11),(HourlyFeeOutOfSchoolCare*NrOfDaysOutOfSchoolCareMonth)*12, NA);
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable CostsForPrimaryEducation
      {
       title: "Costs for Primary Education";
       frequency: column;
       formula: If((Age>=4)and(Age<=11),ParentalContributionPrimaryEducation,0);
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable CostsForSecondaryEducation
      {
       title: "Costs for Secondary Education";
       frequency: column;
       formula: If((Age>=12)and(Age<16),CostsYearOneFour,If(Age>=16,CostsYearFiveSixSeven,0));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable CostsUnspecifiedOverview
      {
       title: "Costs unspecified";
       locked: 1;
       frequency: column;
       formula: CostsUnspecified*12;
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable TotalYearlyCosts
      {
       title: "Total (yearly) costs";
       locked: 1;
       frequency: column;
       formula: Furniture+ActualChildCareCosts+ActualDiapers+ActualFood+ActualClothingCosts+ActualPersonalCareCosts+Hairdresser+Inventory+Allowance+Contributions+Transport+MobilePhone+DrivingLicense+CostsForOutOfSchoolCare+CostsForPrimaryEducation+CostsForSecondaryEducation+CostsUnspecifiedOverview;
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
     }
     variable Q_MAP06SUB5SUB3 refers to TotalYearlyIncome
     {
      title: "[b]Child-related Income[/b]";
      locked: 1;
      frequency: column;
      fixed_decimals: 2;
      datatype: number;
      aggregation: flow;
      variable +ChildBenefits
      {
       title: "Child benefits";
       locked: 1;
       frequency: column;
       formula: MatrixLookup("ScorecardKSP.xls","LeeftijdGeslachtGebondenKosten","ChildBenefits",(ValueT(T)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable +ChildCarePremiumOverview
      {
       title: "Childcare premium";
       locked: 1;
       frequency: column;
       formula: If(Age<4,(PremiumForChildcare*12),If(Age<11,(PremiumForOutofSchoolCare*12),0));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable +ChildcareBudgetOverview
      {
       title: "Childcare budget";
       locked: 1;
       frequency: column;
       formula: If(Age<12,ChildRelatedBudgetUpToTwelve*12,If(Age<16,ChildRelatedBudgetTwelveUpToAndInclFifteen*12,If(Age<18,ChildRelatedBudgetSixteenUpToAndIncSeventeen*12,0)));
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable +CombinationDiscountOverview
      {
       title: "Combination Discount";
       locked: 1;
       frequency: column;
       formula: If(Age<12,CombinationDiscountTotal,0);
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
      variable =TotalYearlyIncome
      {
       title: "Total (yearly) Income";
       locked: 1;
       frequency: column;
       formula: ChildBenefits+ChildCarePremiumOverview+ChildcareBudgetOverview+CombinationDiscountOverview;
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
     }
     variable TotalYearlyBalance
     {
      title: "Total Net Costs (-)";
      locked: 1;
      frequency: column;
      formula: TotalYearlyCosts-TotalYearlyIncome;
      fixed_decimals: 2;
      datatype: number;
      aggregation: flow;
      variable TotalMonthlyBalanceAverage
      {
       title: "Total monthly Net Costs, monthly()";
       locked: 1;
       frequency: column;
       formula: TotalYearlyBalance/12;
       fixed_decimals: 2;
       datatype: number;
       aggregation: flow;
      }
     }
     variable ChildCareCosts
     {
      title: "Childcare costs";
      frequency: column;
      formula: (NrOfDaysChildcareMonth*HourlyFeeChildCare)*12;
      fixed_decimals: 2;
      datatype: number;
      aggregation: balance;
     }
    }
   }
   variable Q_RESULT
   {
    visible: 0;
    title: "Resultaat";
    locked: 1;
    frequency: document;
    datatype: string;
    variable Q_RESULTSUB1
    {
     title: "Resultaat";
     locked: 1;
     frequency: document;
     datatype: string;
    }
   }
  }
 }
}